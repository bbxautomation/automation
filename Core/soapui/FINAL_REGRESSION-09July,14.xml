<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="FINAL_REGRESSION" soapui-version="5.0.0" resourceRoot="${projectDir}" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="createClientAPITestSuite"/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value="C:\Program Files\SmartBear\soapUI-Pro-4.6.0\bin"/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="true"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value="APIName=createClient 
TestDataFile=C:\\Users\\richa\\Desktop\\automationFinal\\DataFiles\\createClient\\createClient.xls"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="createClientAPITestCase"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value="TestSuite Report"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="createClientAPITestSuite"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value="APIName=searchBancboxPayees
TestDataFile=E:\Core_QA\Regression\searchBancboxPayees.xls
global_username=AUTOMATION
global_password=abcd1234
SetNo=2"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="COREAPITestCase"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="BBXServiceSoapBinding" type="wsdl" bindingName="{schema.bancbox.com}BBXServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="https://regression-api.bancbox.com/v3/BBXPort?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:endpoints><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="cancelClient" bindingOperationName="cancelClient" type="Request-Response" outputName="cancelClientResponse" inputName="cancelClient" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:cancelClient>
         <cancelClientRequest>
           
            <subscriberId>200300</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>164534</bancBoxId>
               <!--Optional:-->
               
            </clientId>
            <!--Optional:-->
            <comment>cancel</comment>
         </cancelClientRequest>
      </sch:cancelClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/cancelClient"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:cancelClient>
         <cancelClientRequest>
            <subscriberId>200300</subscriberId>
            <clientId>
          
               <!--Optional:-->
               <bancBoxId>165976</bancBoxId>
               <!--Optional:-->
                 </clientId>
            <!--Optional:-->

         </cancelClientRequest>
      </sch:cancelClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/cancelClient"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="cancelSchedules" bindingOperationName="cancelSchedules" type="Request-Response" outputName="cancelSchedulesResponse" inputName="cancelSchedules" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:cancelSchedules>
         <cancelSchedulesRequest>
            <subscriberId>?</subscriberId>
            <!--1 or more repetitions:-->
            <scheduleIds>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </scheduleIds>
         </cancelSchedulesRequest>
      </sch:cancelSchedules>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/cancelSchedules"/><con:wsrmConfig version="1.2"/></con:call><con:call name="copyForAutomation"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:cancelSchedules>
         <cancelSchedulesRequest>
            <subscriberId>?</subscriberId>
            <!--1 or more repetitions:-->
            <scheduleIds>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </scheduleIds>
         </cancelSchedulesRequest>
      </sch:cancelSchedules>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/cancelSchedules"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="closeAccount" bindingOperationName="closeAccount" type="Request-Response" outputName="closeAccountResponse" inputName="closeAccount" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:closeAccount>
         <closeAccountRequest>
            <subscriberId>200300</subscriberId>
            <accountId>
               <!--Optional:-->
               <!--Optional:-->
               <subscriberReferenceId>ref01</subscriberReferenceId>
            </accountId>
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            </closeAccountRequest>
      </sch:closeAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/closeAccount"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="collectFees" bindingOperationName="collectFees" type="Request-Response" outputName="collectFeesResponse" inputName="collectFees" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>RICHA</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:collectFees>
         <collectFeesRequest>
            <subscriberId>200255</subscriberId>
            <account>
               <!--Optional:-->
               <bancBoxId>530255100001</bancBoxId>
               <!--Optional:-->
          <!--     <subscriberReferenceId>?</subscriberReferenceId> -->
            </account>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
             <!--  <referenceId>?</referenceId>    -->
               <amount>200</amount>
               <!--Optional:-->
             <!--      <memo>?</memo> -->
               <!--Optional:-->
               <!--     <scheduled>
                  <scheduleDate>?</scheduleDate>
               </scheduled>  -->    
            </items>
         </collectFeesRequest>
      </sch:collectFees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFees"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:collectFees>
         <collectFeesRequest>
            <subscriberId>?</subscriberId>
            <account>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </account>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <referenceId>?</referenceId>
               <amount>?</amount>
               <!--Optional:-->
               <memo>?</memo>
               <!--Optional:-->
               <scheduled>
                  <scheduleDate>?</scheduleDate>
               </scheduled>
            </items>
         </collectFeesRequest>
      </sch:collectFees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFees"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="collectFunds" bindingOperationName="collectFunds" type="Request-Response" outputName="collectFundsResponse" inputName="collectFunds" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="ACH"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
  <soapenv:Header>
     <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
           <wsse:Username>PSP@bancbox.com</wsse:Username>
           <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>200134</subscriberId>
           
            <method>
               <!--You have a CHOICE of the next 3 items at this level-->
               <ach/>
            </method>
            <source>
               <!--You have a CHOICE of the next 3 items at this level-->
               <newExternalAccount>
                  <account>
                     <!--You have a CHOICE of the next 2 items at this level-->
                     <bankAccount>
                        <routingNumber>051000017</routingNumber>
               <accountNumber>8878787879897789</accountNumber>
               <holderName>ANSHUL</holderName>
               <bankAccountType>SAVING</bankAccountType>
                     </bankAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
            <account>
               <bancBoxId>530134100007</bancBoxId>
               </account>
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <amount>11.12</amount>
               <!--Optional:-->
               <memo>ACH123</memo>
            </items>
         
            
          
            
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="cc"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>RICHA</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>200255</subscriberId>
             <merchantId>899</merchantId>
            <method>
               <!--You have a CHOICE of the next 3 items at this level-->
              
               <creditcard/>
            </method>
            <source>
               <!--You have a CHOICE of the next 3 items at this level-->
              
               <newExternalAccount>
                  <account>
                     <!--You have a CHOICE of the next 2 items at this level-->
                    <creditCardAccount>
                        <cardNotPresent>
                           <!--You have a CHOICE of the next 2 items at this level-->
                          
                           <creditCardDetails>
                              <number>4556863984700451</number>
                              <expiryDate>12/14</expiryDate>
                              <type>VISA</type>
                              <name>deepika</name>
                              <cvv>777</cvv>
                              <address>
                                 <line1>567 crli</line1>
                                 
                                 <city>ATLANTA</city>
                                 <state>GA</state>
                                 <zipcode>97865</zipcode>
                                 <!--Optional:-->
                                 <country>US</country>
                              </address>
                              
                           </creditCardDetails>
                        </cardNotPresent>
                     </creditCardAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account>
                  <!--Optional:-->
                  <bancBoxId>530255100001</bancBoxId>
                
               </account>
               
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
              
               <amount>66</amount>
              <scheduled>
                  <scheduleDate>2013-12-12</scheduleDate>
               </scheduled>
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            <!--Optional:-->
            <merchantId>856</merchantId>
            <method>
               <!--You have a CHOICE of the next 3 items at this level-->
               <creditcard/>
            </method>
            <source>
               <!--You have a CHOICE of the next 3 items at this level-->
               <linkedExternalAccountId>
                  <!--Optional:-->
                  
                  <!--Optional:-->
                  <subscriberReferenceId>1112</subscriberReferenceId>
               </linkedExternalAccountId>
               </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account>
                  <!--Optional:-->
                  <bancBoxId>540300100001</bancBoxId>
                  <!--Optional:-->
                  </account>
               </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <amount>1</amount>
               <!--Optional:-->
               <memo>testUser</memo>
               <!--Optional:-->
               </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>${openAccount#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:openAccount[1]/openAccountRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <merchantId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/merchantId[1]}</merchantId>
              <method>
               <!--You have a CHOICE of the next 3 items at this level-->
               <creditcard/>
            </method>
            <source>
               <!--You have a CHOICE of the next 3 items at this level-->
              
               <newExternalAccount><account><!--You have a CHOICE of the next 2 items at this level-->
                    
                     <creditCardAccount><!--You have a CHOICE of the next 2 items at this level-->
                        
                        <cardNotPresent><!--You have a CHOICE of the next 2 items at this level-->
                           
                           <creditCardDetails>
                              <number>5205277388152676</number>
                              <expiryDate>01/19</expiryDate>
                              <type>VISA</type>
                              <name>John Smith</name>
                              <cvv>349</cvv>
                              <address>
                                 <line1>2234</line1>
                                 <!--Optional:-->
                                 <line2>Peach Tree</line2>
                                 <city>ATLANTA</city>
                                 <state>GA</state>
                                 <zipcode>54321</zipcode>
                                 <!--Optional:-->
                                 
                              </address>
                              <!--Optional:-->
                            
                           </creditCardDetails>
                        </cardNotPresent>
                     </creditCardAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account><!--Optional:-->
                  <bancBoxId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/bancBoxId[1]}</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/subscriberReferenceId[1]}</subscriberReferenceId>
               </account>
              
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               
               <amount>1</amount>
               <!--Optional:-->
               <memo>memo</memo>
               <!--Optional:-->
              
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>${openAccount#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:openAccount[1]/openAccountRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <merchantId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/merchantId[1]}</merchantId>
              <method>
               <!--You have a CHOICE of the next 3 items at this level-->
               <creditcard/>
            </method>
            <source>
               <!--You have a CHOICE of the next 3 items at this level-->
              
               <newExternalAccount><account><!--You have a CHOICE of the next 2 items at this level-->
                    
                     <creditCardAccount><!--You have a CHOICE of the next 2 items at this level-->
                        
                        <cardNotPresent><!--You have a CHOICE of the next 2 items at this level-->
                           
                           <creditCardDetails><number/>
                              <expiryDate>01/19</expiryDate>
                              <type>VISA</type>
                              <name>John Smith</name>
                              <cvv>349</cvv>
                              <address>
                                 <line1>2234</line1>
                                 <!--Optional:-->
                                 <line2>Peach Tree</line2>
                                 <city>ATLANTA</city>
                                 <state>GA</state>
                                 <zipcode>54321</zipcode>
                                 <!--Optional:-->
                                 
                              </address>
                              <!--Optional:-->
                            
                           </creditCardDetails>
                        </cardNotPresent>
                     </creditCardAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account><!--Optional:-->
                  <bancBoxId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/bancBoxId[1]}</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/subscriberReferenceId[1]}</subscriberReferenceId>
               </account>
              
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               
               <amount>1</amount>
               <!--Optional:-->
               <memo>memo</memo>
               <!--Optional:-->
               <scheduled>
                  <scheduleDate/>
               </scheduled>
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            
              <merchantId>905</merchantId>
              <method>
               <!--You have a CHOICE of the next 3 items at this level-->
               <creditcard/>
            </method>
            <source>
               <!--You have a CHOICE of the next 3 items at this level-->
              
               <newExternalAccount><account><!--You have a CHOICE of the next 2 items at this level-->
                    
                     <creditCardAccount><!--You have a CHOICE of the next 2 items at this level-->
                        
                        <cardNotPresent><!--You have a CHOICE of the next 2 items at this level-->
                           
                           <creditCardDetails>
                              <number>5205277388152676</number>
                              <expiryDate>01/19</expiryDate>
                              <type>MASTERCARD</type>
                              <name>John Smith</name>
                              <cvv>349</cvv>
                              <address>
                                 <line1>2234</line1>
                                 <!--Optional:-->
                                 <line2>Peach Tree</line2>
                                 <city>ATLANTA</city>
                                 <state>GA</state>
                                 <zipcode>54321</zipcode>
                                 <!--Optional:-->
                                 
                              </address>
                              <!--Optional:-->
                            
                           </creditCardDetails>
                        </cardNotPresent>
                     </creditCardAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account><!--Optional:-->
                  <bancBoxId>540300100100</bancBoxId>
                  <!--Optional:-->
                    </account>
              
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               
               <amount>1</amount>
               <!--Optional:-->
               <memo>memo</memo>
               <!--Optional:-->
              
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFunds"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="createClient" bindingOperationName="createClient" type="Request-Response" outputName="createClientResponse" inputName="createClient" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:createClient>
         <createClientRequest>
            <subscriberId/>
            <!--Optional:-->
            <referenceId>?</referenceId>
            <!--Optional:-->
            
            <!--Optional:-->
            
            <!--Optional:-->
            <middleInitial>?</middleInitial>
            <!--Optional:-->
            <ssn>?</ssn>
            <!--Optional:-->
            <dob>?</dob>
            <!--Optional:-->
            <address>
               <!--Optional:-->
               <line1>?</line1>
               <!--Optional:-->
               <line2>?</line2>
               <!--Optional:-->
               <city>?</city>
               <!--Optional:-->
               <state>?</state>
               <!--Optional:-->
               <zipcode>?</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>?</homePhone>
            <!--Optional:-->
            <mobilePhone>?</mobilePhone>
            <!--Optional:-->
            <workPhone>?</workPhone>
            <!--Optional:-->
            <email>?</email>
            <!--Optional:-->
            <username>?</username>
            <!--Optional:-->
            <merchantId>?</merchantId>
         </createClientRequest>
      </sch:createClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createClient"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>Deepika1</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createClient>
         <createClientRequest>
            <subscriberId>200220</subscriberId>
            <!--Optional:-->
            <!--Optional:-->
            <firstName>JOHN</firstName>
            <!--Optional:-->
            <lastName>SMITH</lastName>
            <!--Optional:-->
            <!--Optional:-->
            <ssn>112-22-3333</ssn>
            <!--Optional:-->
            <dob>1975-02-28</dob>
            <!--Optional:-->
            <address>
               <!--Optional:-->
               <line1>222333</line1>
               <!--Optional:-->
               <line2>Peach Place Tree</line2>
               <!--Optional:-->
               <city>Atlanta</city>
               <!--Optional:-->
               <state>GA</state>
               <!--Optional:-->
               <zipcode>30318</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>1234567890</homePhone>
            <!--Optional:-->
            <mobilePhone>1234567890</mobilePhone>
            <!--Optional:-->
            <workPhone>3606997616</workPhone>
            <!--Optional:-->
            <email>mehak+8899@bancbox.com</email>
            <!--Optional:-->
            <!--Optional:-->
            </createClientRequest>
      </sch:createClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createClient"/><con:wsrmConfig version="1.2"/></con:call><con:call name="date"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createClient>
         <createClientRequest>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <firstName>john</firstName>
            <!--Optional:-->
            <lastName>smith</lastName>
            <middleInitial>m</middleInitial>
            <!--Optional:-->
            <!--Optional:-->
            <ssn>112-22-3333</ssn>
            <!--Optional:-->
            <dob>2015-02-14</dob>
            <!--Optional:-->
            <address>
               <!--Optional:-->
               <line1>222333</line1>
               <!--Optional:-->
               <line2>Peach Place Tree</line2>
               <!--Optional:-->
               <city>Atlanta</city>
               <!--Optional:-->
               <state>GA</state>
               <!--Optional:-->
               <zipcode>30318</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>1234567890</homePhone>
            <!--Optional:-->
            <mobilePhone>1234567890</mobilePhone>
            <!--Optional:-->
            <workPhone>3606997616</workPhone>
            <!--Optional:-->
            <email>mehak+8899@bancbox.com</email>
            <!--Optional:-->
            
            <!--Optional:-->
            
         </createClientRequest>
      </sch:createClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createClient"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="createMerchant" bindingOperationName="createMerchant" type="Request-Response" outputName="createMerchantResponse" inputName="createMerchantRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="QA createmerchant SOAP"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>Mehak</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>200222</subscriberId>
            <firstName>Testingabc</firstName>
            <lastName>ab</lastName>
            <!--Optional:-->
            <ssn>112-22-1197</ssn>
            <!--Optional:-->
            <dob>1986-03-29</dob>
            <!--Optional:-->
            <email>mehak+003@bancbox.com</email>
            <address>
               <address1>add 222334</address1>
               <!--Optional:-->
               <address2>?</address2>
               <city>Atlanta</city>
               <state>GA</state>
               <zipcode>30318</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber/>
               <accountNumber>5302551000011110</accountNumber>
               <holderName>MEHAK</holderName>
               <bankAccountType>SAVING</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>7399</merchantCategoryCode>
               <maxTransactionAmount>100000</maxTransactionAmount>
               <customerServiceNumber>6787678911</customerServiceNumber>
               <!--Optional:-->
              <amexId>2042730143</amexId>
               <!--Optional:-->
               <discoverId>123456789012345</discoverId>
               <softDescriptor>create</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>mhk</firstName>
               <lastName>verma</lastName>
               <phone>9987654390</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>400</visaAnnualSalesVolume>
            <organizationType>INDIVIDUAL_SOLE_PROPRIETORSHIP</organizationType>
            <!--Optional:-->
            <taxId>123abc4</taxId>
            <!--Optional:-->
          </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createMerchantRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Regr createmerchant SOAP"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>200300</subscriberId>
            <firstName>Testingabc</firstName>
            <lastName>ab</lastName>
            <!--Optional:-->
            <ssn>112-22-1197</ssn>
            <!--Optional:-->
            <dob>1986-03-29</dob>
            <!--Optional:-->
            <email>mehak+003@bancbox.com</email>
            <address>
               <address1>add 222334</address1>
               <!--Optional:-->
              
               <city>Atlanta</city>
               <state>GA</state>
               <zipcode>30318</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber></routingNumber>
               <accountNumber>5302551000011110</accountNumber>
               <holderName>MEHAK</holderName>
               <bankAccountType>SAVING</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>7399</merchantCategoryCode>
               <maxTransactionAmount>100000</maxTransactionAmount>
               <customerServiceNumber>6787678911</customerServiceNumber>
               <!--Optional:-->
             <amexId>2042730143</amexId>
               <!--Optional:-->
               <discoverId>123456789012345</discoverId>
               <!--Optional:-->
             
               <softDescriptor>create</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>mhk</firstName>
               <lastName>verma</lastName>
               <phone>9987654390</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>400</visaAnnualSalesVolume>
            <organizationType>INDIVIDUAL_SOLE_PROPRIETORSHIP</organizationType>
            <!--Optional:-->
            <taxId>123abc4</taxId>
            <!--Optional:-->
           </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createMerchantRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Reg createM 29May"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>200300</subscriberId>
            <firstName>mikeghsajgagsjgasglagsdlkjdg</firstName>
            <lastName>ab</lastName>
            <!--Optional:-->
            <ssn>112-22-1197</ssn>
            <!--Optional:-->
            <dob>1986-03-29</dob>
            <!--Optional:-->
            <email>mehak+003@bancbox.com</email>
            <address>
               <address1>add 222334</address1>
               <!--Optional:-->
               <city>Atlanta</city>
               <state>GA</state>
               <zipcode>30318</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber>051000017</routingNumber>
               <accountNumber>5302551000011110</accountNumber>
               <holderName>MEHAK</holderName>
               <bankAccountType>SAVING</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>7399</merchantCategoryCode>
               <maxTransactionAmount>100000</maxTransactionAmount>
               <customerServiceNumber>6787678911</customerServiceNumber>
               <!--Optional:-->
               <!--Optional:-->
               <softDescriptor>create</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>mhk</firstName>
               <lastName>verma</lastName>
               <phone>9987654390</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>400</visaAnnualSalesVolume>
            <organizationType>INDIVIDUAL_SOLE_PROPRIETORSHIP</organizationType>
            <!--Optional:-->
            <taxId>123abc4</taxId>
            <!--Optional:-->
            </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createMerchantRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Copy of createMerchant"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>200300</subscriberId>
            <firstName>Testingabc</firstName>
            <lastName>ab</lastName>
            <!--Optional:-->
            <ssn>112-21-1158</ssn>
            <!--Optional:-->
            <dob>1988-03-29</dob>
            <!--Optional:-->
            <email>mehak+003@bancbox.com</email>
            <address>
               <address1/>
               <!--Optional:-->
               
               <city>Atlanta</city>
               <state>GA</state>
               <zipcode>30318</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber>051000017</routingNumber>
               <accountNumber>5302551000011110</accountNumber>
               <holderName>MEHAK</holderName>
               <bankAccountType>SAVING</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>7399</merchantCategoryCode>
               <maxTransactionAmount>100000</maxTransactionAmount>
               <customerServiceNumber>6787678911</customerServiceNumber>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <softDescriptor>create</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>mhk</firstName>
               <lastName>verma</lastName>
               <phone>9987654390</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>400</visaAnnualSalesVolume>
            <organizationType>INDIVIDUAL_SOLE_PROPRIETORSHIP</organizationType>
            <!--Optional:-->
            <taxId>123abc4</taxId>
            <!--Optional:-->
            
         </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createMerchantRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="create29may"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>200300</subscriberId>
            <firstName>Testingabc</firstName>
            <lastName>ab</lastName>
            <!--Optional:-->
            <ssn>112-21-1198</ssn>
            <!--Optional:-->
            <dob>1988-03-19</dob>
            <!--Optional:-->
            <email>mehak+003@bancbox.com</email>
            <address>
               <address1>add 222336</address1>
               <!--Optional:-->
               <city>Atlanta</city>
               <state>GA</state>
               <zipcode>30318</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber>051000017</routingNumber>
               <accountNumber>5302551000011110</accountNumber>
               <holderName>MEHAK</holderName>
               <bankAccountType>SAVING</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode/>
               <maxTransactionAmount>100000</maxTransactionAmount>
               <customerServiceNumber>6787678911</customerServiceNumber>
               <!--Optional:-->
               <!--Optional:-->
               <softDescriptor>create</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>mhk</firstName>
               <lastName>verma</lastName>
               <phone>9987654390</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>400</visaAnnualSalesVolume>
            <organizationType>INDIVIDUAL_SOLE_PROPRIETORSHIP</organizationType>
            <!--Optional:-->
            <!--Optional:-->
            </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createMerchantRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="deleteLinkedExternalAccount" bindingOperationName="deleteLinkedExternalAccount" type="Request-Response" outputName="deleteLinkedExternalAccountResponse" inputName="deleteLinkedExternalAccount" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:deleteLinkedExternalAccount>
         <deleteLinkedExternalAccountRequest>
            <subscriberId>?</subscriberId>
            <linkedExternalAccountId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </linkedExternalAccountId>
         </deleteLinkedExternalAccountRequest>
      </sch:deleteLinkedExternalAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/deleteLinkedExternalAccount"/></con:call></con:operation><con:operation isOneWay="false" action="" name="deleteLinkedPayee" bindingOperationName="deleteLinkedPayee" type="Request-Response" outputName="deleteLinkedPayeeResponse" inputName="deleteLinkedPayee" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:deleteLinkedPayee>
         <deleteLinkedPayeeRequest>
            <subscriberId>?</subscriberId>
            <linkedPayeeId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </linkedPayeeId>
         </deleteLinkedPayeeRequest>
      </sch:deleteLinkedPayee>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/deleteLinkedPayee"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAccountActivity" bindingOperationName="getAccountActivity" type="Request-Response" outputName="getAccountActivityResponse" inputName="getAccountActivity" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:getAccountActivity>
         <getAccountActivityRequest>
            <subscriberId>200300</subscriberId>
            <accountId>
               <!--Optional:-->
               <bancBoxId>540300100001</bancBoxId>
              </accountId>
            <!--Optional:-->
           <type>DEBIT</type>
            <!--Optional:-->
            <!--method>CREDITCARD</method-->
            <!--Optional:-->
           
            <ascending>false</ascending>
            <!--Optional:-->
            <pageNo>1</pageNo>
            <!--Optional:-->
            <resultsPerPage>10</resultsPerPage>
         </getAccountActivityRequest>
      </sch:getAccountActivity>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getAccountActivity"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Copy of Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:getAccountActivity>
         <getAccountActivityRequest>
            <subscriberId>200300</subscriberId>
            <accountId>
               <!--Optional:-->
               <bancBoxId>540300100001</bancBoxId>
               <!--Optional:-->
                 </accountId>
            <!--Optional:-->
           
            <!--Optional:-->
            <method>CREDITCARD</method>
            <!--Optional:-->
            
            <ascending>false</ascending>
            <!--Optional:-->
             <!--Optional:-->
           
         </getAccountActivityRequest>
      </sch:getAccountActivity>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getAccountActivity"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getClient" bindingOperationName="getClient" type="Request-Response" outputName="getClientResponse" inputName="getClient" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:getClient>
         <getClientRequest>
            <subscriberId>200300</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId></bancBoxId>
               <!--Optional:-->
              </clientId>
         </getClientRequest>
      </sch:getClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClient"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getClientAccounts" bindingOperationName="getClientAccounts" type="Request-Response" outputName="getClientAccountsResponse" inputName="getClientAccounts" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:getClientAccounts>
         <getClientAccountsRequest>
            <subscriberId>?</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <ascending>false</ascending>
            <!--Optional:-->
            <pageNo>?</pageNo>
            <!--Optional:-->
            <resultsPerPage>?</resultsPerPage>
         </getClientAccountsRequest>
      </sch:getClientAccounts>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClientAccounts"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getClientLinkedExternalAccounts" bindingOperationName="getClientLinkedExternalAccounts" type="Request-Response" outputName="getClientLinkedExternalAccountsResponse" inputName="getClientLinkedExternalAccounts" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:getClientLinkedExternalAccounts>
         <getClientLinkedExternalAccountsRequest>
            <subscriberId>?</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <ascending>false</ascending>
            <!--Optional:-->
            <pageNo>?</pageNo>
            <!--Optional:-->
            <resultsPerPage>?</resultsPerPage>
         </getClientLinkedExternalAccountsRequest>
      </sch:getClientLinkedExternalAccounts>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClientLinkedExternalAccounts"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getClientLinkedPayees" bindingOperationName="getClientLinkedPayees" type="Request-Response" outputName="getClientLinkedPayeesResponse" inputName="getClientLinkedPayees" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:getClientLinkedPayees>
         <getClientLinkedPayeesRequest>
            <subscriberId>?</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <ascending>false</ascending>
            <!--Optional:-->
            <pageNo>?</pageNo>
            <!--Optional:-->
            <resultsPerPage>?</resultsPerPage>
         </getClientLinkedPayeesRequest>
      </sch:getClientLinkedPayees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClientLinkedPayees"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getMerchant" bindingOperationName="getMerchant" type="Request-Response" outputName="getMerchantResponse" inputName="getMerchantRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getMerchant>
         <getMerchantRequest>
            <subscriberId>200300</subscriberId>
            <merchantId/>
         </getMerchantRequest>
      </sch:getMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getMerchantRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSchedules" bindingOperationName="getSchedules" type="Request-Response" outputName="getSchedulesResponse" inputName="getSchedules" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getSchedules>
         <getSchedulesRequest>
            <subscriberId></subscriberId>
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <status>FAILED</status>
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            </getSchedulesRequest>
      </sch:getSchedules>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getSchedules"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSubscriberAccounts" bindingOperationName="getSubscriberAccounts" type="Request-Response" outputName="getSubscriberAccountsResponse" inputName="getSubscriberAccountsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:getSubscriberAccounts>
         <getSubscriberAccountsRequest>
            <subscriberId>?</subscriberId>
         </getSubscriberAccountsRequest>
      </sch:getSubscriberAccounts>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getSubscriberAccountsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="linkExternalAccount" bindingOperationName="linkExternalAccount" type="Request-Response" outputName="linkExternalAccountResponse" inputName="linkExternalAccount" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:linkExternalAccount>
         <linkExternalAccountRequest>
            <subscriberId>?</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>?</referenceId>
            <account>
               <!--You have a CHOICE of the next 4 items at this level-->
               <bankAccount>
                  <routingNumber>?</routingNumber>
                  <accountNumber>?</accountNumber>
                  <holderName>?</holderName>
                  <bankAccountType>?</bankAccountType>
               </bankAccount>
               <cardAccount>
                  <!--You have a CHOICE of the next 3 items at this level-->
                  <creditCardAccount>
                     <!--You have a CHOICE of the next 2 items at this level-->
                     <tokenizedId>?</tokenizedId>
                     <creditCardDetails>
                        <number>?</number>
                        <expiryDate>?</expiryDate>
                        <type>?</type>
                        <name>?</name>
                        <cvv>?</cvv>
                        <address>
                           <line1>?</line1>
                           <!--Optional:-->
                           <line2>?</line2>
                           <city>?</city>
                           <state>?</state>
                           <zipcode>?</zipcode>
                           <!--Optional:-->
                           <country>?</country>
                        </address>
                        <!--Optional:-->
                        <orderSource>?</orderSource>
                     </creditCardDetails>
                  </creditCardAccount>
                  <debitCardAccount>
                     <number>?</number>
                     <type>?</type>
                     <pin>?</pin>
                  </debitCardAccount>
                  <giftCardAccount>
                     <number>?</number>
                     <pin>?</pin>
                  </giftCardAccount>
               </cardAccount>
               <paypalAccount>
                  <id>?</id>
               </paypalAccount>
               <wireAccount>
                  <bankAccountDetails>
                     <routingNumber>?</routingNumber>
                     <accountNumber>?</accountNumber>
                     <holderName>?</holderName>
                     <bankAccountType>?</bankAccountType>
                  </bankAccountDetails>
                  <address>
                     <line1>?</line1>
                     <!--Optional:-->
                     <line2>?</line2>
                     <city>?</city>
                     <state>?</state>
                     <zipcode>?</zipcode>
                  </address>
               </wireAccount>
            </account>
         </linkExternalAccountRequest>
      </sch:linkExternalAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/linkExternalAccount"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="linkFile" bindingOperationName="linkFile" type="Request-Response" outputName="linkFileResponse" inputName="linkFile" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:linkFile>
         <linkFileRequest>
            <subscriberId>?</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>?</referenceId>
            <file>
               <name>?</name>
               <fileClass>?</fileClass>
               <!--Optional:-->
               <url>?</url>
               <content>cid:1194993723919</content>
               <!--Optional:-->
               <comment>?</comment>
            </file>
         </linkFileRequest>
      </sch:linkFile>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/linkFile"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="linkPayee" bindingOperationName="linkPayee" type="Request-Response" outputName="linkPayeeResponse" inputName="linkPayee" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:linkPayee>
         <linkPayeeRequest>
            <subscriberId>?</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>?</referenceId>
            <payee>
               <payeeAccountNumber>?</payeeAccountNumber>
               <!--Optional:-->
               <memo>?</memo>
               <payee>
                  <!--You have a CHOICE of the next 5 items at this level-->
                  <ach>
                     <routingNumber>?</routingNumber>
                     <accountNumber>?</accountNumber>
                     <holderName>?</holderName>
                     <bankAccountType>?</bankAccountType>
                  </ach>
                  <paypal>
                     <id>?</id>
                  </paypal>
                  <check>
                     <name>?</name>
                     <address>
                        <line1>?</line1>
                        <!--Optional:-->
                        <line2>?</line2>
                        <city>?</city>
                        <state>?</state>
                        <zipcode>?</zipcode>
                     </address>
                  </check>
                  <bancbox>
                     <bancboxPayeeId>?</bancboxPayeeId>
                  </bancbox>
                  <wire>
                     <bankAccountDetails>
                        <routingNumber>?</routingNumber>
                        <accountNumber>?</accountNumber>
                        <holderName>?</holderName>
                        <bankAccountType>?</bankAccountType>
                     </bankAccountDetails>
                     <address>
                        <line1>?</line1>
                        <!--Optional:-->
                        <line2>?</line2>
                        <city>?</city>
                        <state>?</state>
                        <zipcode>?</zipcode>
                     </address>
                  </wire>
               </payee>
            </payee>
         </linkPayeeRequest>
      </sch:linkPayee>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/linkPayee"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="openAccount" bindingOperationName="openAccount" type="Request-Response" outputName="openAccountResponse" inputName="openAccount" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:openAccount>
         <openAccountRequest>
            <subscriberId>200300</subscriberId>
            <clientId><!--Optional:-->
               <subscriberReferenceId>ref101</subscriberReferenceId>
               <!--Optional:-->
                 </clientId>
            <!--Optional:-->
            
            <!--Optional:-->
            <title>My Budget</title>
            <!--Optional:-->
            <accountType>GENERAL</accountType>
            <!--Optional:-->
            <routable>
               <!--Optional:-->
               <credits>YES</credits>
               <!--Optional:-->
               <debits>YES</debits>
            </routable>
            <!--Optional:-->
            </openAccountRequest>
      </sch:openAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/openAccount"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="returnFund" bindingOperationName="returnFund" type="Request-Response" outputName="returnFundResponse" inputName="returnFund" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:returnFund>
         <returnFund>
            <subscriberId>?</subscriberId>
            <scheduleId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </scheduleId>
            <!--Optional:-->
            <reasonForRefund>?</reasonForRefund>
         </returnFund>
      </sch:returnFund>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/returnFund"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Copy of Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>RICHA</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:returnFund>
         <returnFund>
            <subscriberId>200255</subscriberId>
            <scheduleId>
               <!--Optional:-->
             <bancBoxId></bancBoxId> 
               <!--Optional:-->
            
            </scheduleId>
            <!--Optional:-->
       
         </returnFund>
      </sch:returnFund>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/returnFund"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="searchBancBoxPayees" bindingOperationName="searchBancBoxPayees" type="Request-Response" outputName="searchBancBoxPayeesResponse" inputName="searchBancBoxPayees" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:searchBancBoxPayees>
         <searchBancBoxPayeesRequest>
            <!--Optional:-->
           
            <!--Optional:-->
            <accountNumber>1234</accountNumber>
            <!--Optional:-->
          
         </searchBancBoxPayeesRequest>
      </sch:searchBancBoxPayees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/searchBancBoxPayees"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="searchClients" bindingOperationName="searchClients" type="Request-Response" outputName="searchClientsResponse" inputName="searchClients" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:searchClients>
         <searchClientRequest>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            <clientId>
               <!--Optional:-->
               <bancBoxId>165401</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>ref001</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            </searchClientRequest>
      </sch:searchClients>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/searchClients"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="sendFunds" bindingOperationName="sendFunds" type="Request-Response" outputName="sendFundsResponse" inputName="sendFunds" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:sendFunds>
         <sendFundsRequest>
            <subscriberId>200300</subscriberId>
            <method>
               <!--You have a CHOICE of the next 7 items at this level-->
               <wire/>
               </method>
            <sourceAccount>
               <!--Optional:-->
              
               <!--Optional:-->
               
            </sourceAccount>
            <destination>
               <!--You have a CHOICE of the next 6 items at this level-->
               <newExternalAccount>
                  <account>
                     <!--You have a CHOICE of the next 4 items at this level-->
                     <wireAccount>
                        <bankAccountDetails>
                           <routingNumber>051000017</routingNumber>
                           <accountNumber>0123456789</accountNumber>
                           <holderName>mikky</holderName>
                           <bankAccountType>SAVING</bankAccountType>
                        </bankAccountDetails>
                        <address>
                           <line1>123 WALL STREET</line1>
                           <!--Optional:-->
                            <city>ATLANTA</city>
                           <state>GA</state>
                           <zipcode>13411</zipcode>
                        </address>
                     </wireAccount>
                  </account>
               </newExternalAccount>
            </destination>
            <!--Optional:-->
            <!--Optional:-->
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <!--Optional:-->
               <memo>testUser</memo>
               <amount>1</amount>
               <!--Optional:-->
               </items>
         </sendFundsRequest>
      </sch:sendFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/sendFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Copy of Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:sendFunds>
         <sendFundsRequest>
            <subscriberId>200300</subscriberId>
            <method>
               <!--You have a CHOICE of the next 7 items at this level-->
               <check>
                  <type>STD</type>
               </check>
               </method>
            <sourceAccount>
               <!--Optional:-->
               <bancBoxId>540300100007</bancBoxId>
               <!--Optional:-->
               </sourceAccount>
            <destination>
               <!--You have a CHOICE of the next 6 items at this level-->
               <account>
                  <!--Optional:-->
                  </account>
               <linkedPayeeId>
                  <!--Optional:-->
                  <bancBoxId>?</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>?</subscriberReferenceId>
               </linkedPayeeId>
               <linkedExternalAccountId>
                  <!--Optional:-->
                  <bancBoxId>?</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>?</subscriberReferenceId>
               </linkedExternalAccountId>
               <bancBoxPayeeId>?</bancBoxPayeeId>
               <newPayee>
                  <payeeAccountNumber>2309123789</payeeAccountNumber>
                  <!--Optional:-->
                  <payee>
                     <!--You have a CHOICE of the next 4 items at this level-->
                     <ach>
                        <routingNumber>?</routingNumber>
                        <accountNumber>?</accountNumber>
                        <holderName>?</holderName>
                        <bankAccountType>?</bankAccountType>
                     </ach>
                     <paypal>
                        <id>?</id>
                     </paypal>
                     <check>
                        <name>Deepika</name>
                        <address>
                           <line1>14 ST</line1>
                           <!--Optional:-->
                           <city>ATLANTA</city>
                           <state>GA</state>
                           <zipcode>23091</zipcode>
                        </address>
                     </check>
                     <wire>
                        <bankAccountDetails>
                           <routingNumber>?</routingNumber>
                           <accountNumber>?</accountNumber>
                           <holderName>?</holderName>
                           <bankAccountType>?</bankAccountType>
                        </bankAccountDetails>
                        <address>
                           <line1>?</line1>
                           <!--Optional:-->
                           <line2>?</line2>
                           <city>?</city>
                           <state>?</state>
                           <zipcode>?</zipcode>
                        </address>
                     </wire>
                  </payee>
               </newPayee>
               <newExternalAccount>
                  <account>
                     <!--You have a CHOICE of the next 4 items at this level-->
                     <bankAccount>
                        <routingNumber>?</routingNumber>
                        <accountNumber>?</accountNumber>
                        <holderName>?</holderName>
                        <bankAccountType>?</bankAccountType>
                     </bankAccount>
                     <paypalAccount>
                        <id>?</id>
                     </paypalAccount>
                     <creditCardAccount>
                        <number>?</number>
                        <expiryDate>?</expiryDate>
                        <type>?</type>
                        <name>?</name>
                        <cvv>?</cvv>
                        <address>
                           <line1>?</line1>
                           <!--Optional:-->
                           <line2>?</line2>
                           <city>?</city>
                           <state>?</state>
                           <zipcode>?</zipcode>
                           <!--Optional:-->
                           <country>?</country>
                        </address>
                        <!--Optional:-->
                        <orderSource>?</orderSource>
                     </creditCardAccount>
                     <wireAccount>
                        <bankAccountDetails>
                           <routingNumber>?</routingNumber>
                           <accountNumber>?</accountNumber>
                           <holderName>?</holderName>
                           <bankAccountType>?</bankAccountType>
                        </bankAccountDetails>
                        <address>
                           <line1>?</line1>
                           <!--Optional:-->
                           <line2>?</line2>
                           <city>?</city>
                           <state>?</state>
                           <zipcode>?</zipcode>
                        </address>
                     </wireAccount>
                  </account>
               </newExternalAccount>
            </destination>
            <!--Optional:-->
            <!--Optional:-->
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <!--Optional:-->
               <amount>1</amount>
               <!--Optional:-->
               </items>
         </sendFundsRequest>
      </sch:sendFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/sendFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:sendFunds>
         <sendFundsRequest>
            <subscriberId>200300</subscriberId>
            <method>
               <!--You have a CHOICE of the next 7 items at this level-->
               <billpay/>
               </method>
            <sourceAccount>
               <!--Optional:-->
               </sourceAccount>
            <destination>
               <!--You have a CHOICE of the next 6 items at this level-->
               <bancBoxPayeeId>14809</bancBoxPayeeId>
               </destination>
            <!--Optional:-->
            <payeeAccountNumber>1234</payeeAccountNumber>
            <!--Optional:-->
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <!--Optional:-->
               <amount>1</amount>
               <!--Optional:-->
               </items>
         </sendFundsRequest>
      </sch:sendFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/sendFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>Mikkyjb</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:sendFunds>
         <sendFundsRequest>
            <subscriberId>200241</subscriberId>
            <method>
               <!--You have a CHOICE of the next 7 items at this level-->
               <book/>
               </method>
            <sourceAccount>
               <!--Optional:-->
               <bancBoxId>540241100002</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId/>
            </sourceAccount>
            <destination>
               <!--You have a CHOICE of the next 6 items at this level-->
               <account>
                  <!--Optional:-->
                  <!--Optional:-->
                  <subscriberReferenceId>BLANK</subscriberReferenceId>
               </account>
               </destination>
            <!--Optional:-->
            <!--Optional:-->
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <!--Optional:-->
               <memo>testUser</memo>
               <amount>1</amount>
               <!--Optional:-->
               </items>
         </sendFundsRequest>
      </sch:sendFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/sendFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:sendFunds>
         <sendFundsRequest>
            <subscriberId>?</subscriberId>
            <method>
               <!--You have a CHOICE of the next 7 items at this level-->
               
               
               <check>
                  <type>?</type>
               </check>
               
               
               
               
            </method>
            <sourceAccount>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </sourceAccount>
            <destination>
               <!--You have a CHOICE of the next 6 items at this level-->
               
               
               
               
               <newPayee>
                  <payeeAccountNumber>?</payeeAccountNumber>
                  <!--Optional:-->
                  <memo>?</memo>
                  <payee>
                     <!--You have a CHOICE of the next 4 items at this level-->
                     
                     
                     <check>
                        <name>?</name>
                        <address>
                           <line1>?</line1>
                           <!--Optional:-->
                           <line2>?</line2>
                           <city>?</city>
                           <state>?</state>
                           <zipcode>?</zipcode>
                        </address>
                     </check>
                     
                  </payee>
               </newPayee>
               
            </destination>
            <!--Optional:-->
            <payeeAccountNumber>?</payeeAccountNumber>
            <!--Optional:-->
            <memo>?</memo>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <referenceId>?</referenceId>
               <!--Optional:-->
               <memo>?</memo>
               <amount>?</amount>
               <!--Optional:-->
               <scheduled>
                  <scheduleDate>?</scheduleDate>
               </scheduled>
            </items>
         </sendFundsRequest>
      </sch:sendFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/sendFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:sendFunds>
         <sendFundsRequest>
            <subscriberId>?</subscriberId>
            <method><!--You have a CHOICE of the next 7 items at this level-->
               
               
               <check>
                  <type>?</type>
               </check>
               
               
               
               
            </method>
            <sourceAccount>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </sourceAccount>
            <destination>
               <!--You have a CHOICE of the next 6 items at this level-->
               
               
               
               
               <newPayee>
                  <payeeAccountNumber>?</payeeAccountNumber>
                  <!--Optional:-->
                  <memo>?</memo>
                  <payee>
                     <!--You have a CHOICE of the next 4 items at this level-->
                     
                     
                     <check>
                        <name>?</name>
                        <address>
                           <line1>?</line1>
                           <!--Optional:-->
                           <line2>?</line2>
                           <city>?</city>
                           <state>?</state>
                           <zipcode>?</zipcode>
                        </address>
                     </check>
                     
                  </payee>
               </newPayee>
               
            </destination>
            <!--Optional:-->
            <payeeAccountNumber>?</payeeAccountNumber>
            <!--Optional:-->
            <memo>?</memo>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <referenceId>?</referenceId>
               <!--Optional:-->
               <memo>?</memo>
               <amount>?</amount>
               <!--Optional:-->
               <scheduled>
                  <scheduleDate>?</scheduleDate>
               </scheduled>
            </items>
         </sendFundsRequest>
      </sch:sendFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/sendFunds"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="submitVerificationAnswers" bindingOperationName="submitVerificationAnswers" type="Request-Response" outputName="submitVerificationAnswersResponse" inputName="submitVerificationAnswers" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:submitVerificationAnswers>
         <submitVerificationAnswers>
            <subscriberId>?</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <idNumber>?</idNumber>
            <!--Zero or more repetitions:-->
            <answers>
               <type>?</type>
               <answer>?</answer>
            </answers>
         </submitVerificationAnswers>
      </sch:submitVerificationAnswers>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/submitVerificationAnswers"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="transferFunds" bindingOperationName="transferFunds" type="Request-Response" outputName="transferFundsResponse" inputName="transferFunds" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:transferFunds>
         <transferFundsRequest>
            <subscriberId>200300</subscriberId>
            <sourceAccount>
               <!--Optional:-->
               <bancBoxId></bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </sourceAccount>
            <destinationAccount>
               <!--Optional:-->
               <bancBoxId>540300100035</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </destinationAccount>
            <!--Optional:-->
            <memo>?</memo>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <referenceId>?</referenceId>
               <!--Optional:-->
               <memo>?</memo>
               <amount>1</amount>
               <!--Optional:-->
               <scheduled>
                  <scheduleDate>?</scheduleDate>
               </scheduled>
            </items>
         </transferFundsRequest>
      </sch:transferFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/transferFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:transferFunds>
         <transferFundsRequest>
            <subscriberId>200300</subscriberId>
            <sourceAccount>
               <!--Optional:-->
                 </sourceAccount>
            <destinationAccount>
               <!--Optional:-->
               <bancBoxId>540300100035</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>account_open03</subscriberReferenceId>
            </destinationAccount>
            <!--Optional:-->
            <memo>?</memo>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->

               <amount>1</amount>
               <!--Optional:-->
              
            </items>
         </transferFundsRequest>
      </sch:transferFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/transferFunds"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateAccount" bindingOperationName="updateAccount" type="Request-Response" outputName="updateAccountResponse" inputName="updateAccount" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateAccount>
         <updateAccountRequest>
            <subscriberId>200300</subscriberId>
            <accountId>
               <!--Optional:-->
               <bancBoxId>540300100064</bancBoxId>
               <!--Optional:-->
               </accountId>
            <!--Optional:-->
            <title>updated</title>
         </updateAccountRequest>
      </sch:updateAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateAccount"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateClient" bindingOperationName="updateClient" type="Request-Response" outputName="updateClientResponse" inputName="updateClient" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateClientStatus>
         <updateClientStatusRequest>
            <subscriberId>200300</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>161967</bancBoxId>
               <!--Optional:-->
               
            </clientId>
            <clientStatus/>
         </updateClientStatusRequest>
      </sch:updateClientStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateClient"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateClientStatus" bindingOperationName="updateClientStatus" type="Request-Response" outputName="updateClientStatusResponse" inputName="updateClientStatus" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateClientStatus>
         <updateClientStatusRequest>
            <subscriberId>200300</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>164534</bancBoxId>
               <!--Optional:-->
               
            </clientId>
          
         </updateClientStatusRequest>
      </sch:updateClientStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateClientStatus"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateLinkedExternalAccount" bindingOperationName="updateLinkedExternalAccount" type="Request-Response" outputName="updateLinkedExternalAccountResponse" inputName="updateLinkedExternalAccount" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateLinkedExternalAccount>
         <updateLinkedExternalAccountRequest>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            <linkedExternalAccountId>
               <!--Optional:-->
               <bancBoxId>377439</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>1112</subscriberReferenceId>
            </linkedExternalAccountId>
            <account>
               <!--You have a CHOICE of the next 4 items at this level-->
               <cardAccount>
                  <!--You have a CHOICE of the next 3 items at this level-->
                  <creditCardAccount>
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                     <address>
                        <line1>123 WALL STREET ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss</line1>
                        <!--Optional:-->
                        <!--Optional:-->
                        </address>
                     <!--Optional:-->
                     </creditCardAccount>
                  </cardAccount>
               </account>
         </updateLinkedExternalAccountRequest>
      </sch:updateLinkedExternalAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateLinkedExternalAccount"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateLinkedPayee" bindingOperationName="updateLinkedPayee" type="Request-Response" outputName="updateLinkedPayeeResponse" inputName="updateLinkedPayee" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:updateLinkedPayee>
         <updateLinkedPayeeRequest>
            <subscriberId>?</subscriberId>
            <linkedPayeeId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </linkedPayeeId>
            <!--Optional:-->
            <payeeAccountNumber>?</payeeAccountNumber>
            <!--Optional:-->
            <memo>?</memo>
            <payee>
               <!--You have a CHOICE of the next 5 items at this level-->
               <ach>
                  <routingNumber>?</routingNumber>
                  <accountNumber>?</accountNumber>
                  <holderName>?</holderName>
                  <bankAccountType>?</bankAccountType>
               </ach>
               <paypal>
                  <id>?</id>
               </paypal>
               <check>
                  <name>?</name>
                  <address>
                     <line1>?</line1>
                     <!--Optional:-->
                     <line2>?</line2>
                     <city>?</city>
                     <state>?</state>
                     <zipcode>?</zipcode>
                  </address>
               </check>
               <bancbox>
                  <bancboxPayeeId>?</bancboxPayeeId>
               </bancbox>
               <wire>
                  <bankAccountDetails>
                     <routingNumber>?</routingNumber>
                     <accountNumber>?</accountNumber>
                     <holderName>?</holderName>
                     <bankAccountType>?</bankAccountType>
                  </bankAccountDetails>
                  <address>
                     <line1>?</line1>
                     <!--Optional:-->
                     <line2>?</line2>
                     <city>?</city>
                     <state>?</state>
                     <zipcode>?</zipcode>
                  </address>
               </wire>
            </payee>
         </updateLinkedPayeeRequest>
      </sch:updateLinkedPayee>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateLinkedPayee"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateMerchant" bindingOperationName="updateMerchant" type="Request-Response" outputName="updateMerchantResponse" inputName="updateMerchantRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateMerchant>
         <updateMerchantRequest>
            <subscriberId>200300</subscriberId>
            <merchantId>871</merchantId>
            <!--Optional:-->
            <address>
               <address1>22337 PeachTree</address1>
               <!--Optional:-->
               <city>ATLANTA</city>
               <state>GA</state>
               <zipcode>16772</zipcode>
            </address>
            <!--Optional:-->
            <primaryContact>
               <firstName>John</firstName>
               <lastName>Smith</lastName>
               <phone>9876543212</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <!--Optional:-->
            <bankBusinessAccount>
               <routingNumber>051000017</routingNumber>
               <accountNumber>9876543212</accountNumber>
            </bankBusinessAccount>
            <!--Optional:-->
            <merchantDetails>
               <!--Optional:-->
               <maxTransactionAmount>2</maxTransactionAmount>
               <!--Optional:-->
               <customerServiceNumber>4141414141</customerServiceNumber>
               <!--Optional:-->
               <!--Optional:-->
               <discoverId>123456789876543</discoverId>
               <!--Optional:-->
               <softDescriptor>bbx</softDescriptor>
            </merchantDetails>
            <!--Optional:-->
            </updateMerchantRequest>
      </sch:updateMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateMerchantRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="updateWithoutState"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateMerchant>
         <updateMerchantRequest>
            <subscriberId>200300</subscriberId>
            <merchantId>571</merchantId>
            <!--Optional:-->
            <address>
               <address1>22335 PeachTree</address1>
               <!--Optional:-->
               
               <city>ATLANTA</city>
               <state/>
               <zipcode>16772</zipcode>
            </address>
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            
         </updateMerchantRequest>
      </sch:updateMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateMerchantRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateMerchantStatus" bindingOperationName="updateMerchantStatus" type="Request-Response" outputName="updateMerchantStatusResponse" inputName="updateMerchantStatusRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:updateMerchantStatus>
         <updateMerchantStatusRequest>
            <subscriberId>20030000</subscriberId>
            <merchantId>890</merchantId>
            <merchantStatus>INACTIVE</merchantStatus>
         </updateMerchantStatusRequest>
      </sch:updateMerchantStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateMerchantStatusRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateSchedule" bindingOperationName="updateSchedule" type="Request-Response" outputName="updateScheduleResponse" inputName="updateScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:updateSchedule>
         <updateScheduleRequest>
            <subscriberId>?</subscriberId>
            <activity>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </activity>
            <rescheduleDate>?</rescheduleDate>
         </updateScheduleRequest>
      </sch:updateSchedule>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="verifyClient" bindingOperationName="verifyClient" type="Request-Response" outputName="verifyClientResponse" inputName="verifyClient" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:verifyClient>
         <verifyClient>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
           
            <!--Optional:-->
            <generateQuestions>true</generateQuestions>
         </verifyClient>
      </sch:verifyClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/verifyClient"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Copy of Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:verifyClient>
         <verifyClient>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <generateQuestions>true</generateQuestions>
         </verifyClient>
      </sch:verifyClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/verifyClient"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="verifyClientManually" bindingOperationName="verifyClientManually" type="Request-Response" outputName="verifyClientManuallyResponse" inputName="verifyClientManually" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:verifyClientManually>
         <verifyClientManually>
            <subscriberId>200300</subscriberId>
            <clientId>
               <!--Optional:-->
              
               <!--Optional:-->
               <subscriberReferenceId></subscriberReferenceId>
            </clientId>
            <status>
               <!--Optional:-->
               <newCipStatus>REJECTED</newCipStatus>
               <!--Optional:-->
               </status>
         </verifyClientManually>
      </sch:verifyClientManually>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/verifyClientManually"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="searchMerchants" bindingOperationName="searchMerchants" type="Request-Response" outputName="searchMerchantsResponse" inputName="searchMerchantsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:searchMerchants>
         <searchMerchantsRequest>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <ascending>false</ascending>
            <!--Optional:-->
            <pageNo>1</pageNo>
            <!--Optional:-->
            <resultsPerPage>1</resultsPerPage>
         </searchMerchantsRequest>
      </sch:searchMerchants>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/searchMerchantsRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite name="createClientAPITestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="COREAPITestCase" searchProperties="true" id="e0fa3ebb-3c80-4ac8-abc1-211674165e4a"><con:settings/><con:testStep type="request" name="createClient"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createClient</con:operation><con:request name="createClient"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createClient>
         <createClientRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <!--Optional:-->
            <referenceId>${#TestCase#referenceId}</referenceId>
            <!--Optional:-->
            <firstName>${#TestCase#firstName}</firstName>
            <!--Optional:-->
            <lastName>${#TestCase#lastName}</lastName>
            <middleInitial>${#TestCase#middleInitial}</middleInitial>
            <!--Optional:-->
            <!--Optional:-->
            <ssn>${#TestCase#ssn}</ssn>
            <!--Optional:-->
            <dob>${#TestCase#dob}</dob>
            <!--Optional:-->
            <address>
               <!--Optional:-->
               <line1>${#TestCase#address.line1}</line1>
               <!--Optional:-->
               <line2>${#TestCase#address.line2}</line2>
               <!--Optional:-->
               <city>${#TestCase#address.city}</city>
               <!--Optional:-->
               <state>${#TestCase#address.state}</state>
               <!--Optional:-->
               <zipcode>${#TestCase#address.zipcode}</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>${#TestCase#homePhone}</homePhone>
            <!--Optional:-->
            <mobilePhone>${#TestCase#mobilePhone}</mobilePhone>
            <!--Optional:-->
            <workPhone>${#TestCase#workPhone}</workPhone>
            <!--Optional:-->
            <email>${#TestCase#email}</email>
            <!--Optional:-->
            <username>${#TestCase#username}</username>
            <!--Optional:-->
            <merchantId>${#TestCase#merchantId}</merchantId>
         </createClientRequest>
      </sch:createClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="schema.bancbox.com/BBX/createClient" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="openAccount"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>openAccount</con:operation><con:request name="openAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:openAccount>
         <openAccountRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>${#TestCase#ReferenceId}</referenceId>
            <!--Optional:-->
            <title>${#TestCase#title}</title>
            <!--Optional:-->
            <accountType>${#TestCase#accountType}</accountType>
            <!--Optional:-->
            <routable>
               <!--Optional:-->
               <credits>${#TestCase#routable.credits}</credits>
               <!--Optional:-->
               <debits>${#TestCase#routable.debits}</debits>
            </routable>
            <!--Optional:-->
            <subscriberAccountNumber>${#TestCase#subscriberAccountNumber}</subscriberAccountNumber>
         </openAccountRequest>
      </sch:openAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/openAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="cancelClient"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>cancelClient</con:operation><con:request name="cancelClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:cancelClient>
         <cancelClientRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <comment>${#TestCase#comment}</comment>
         </cancelClientRequest>
      </sch:cancelClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/cancelClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="closeAccount"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>closeAccount</con:operation><con:request name="closeAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:closeAccount>
         <closeAccountRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <accountId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#accountId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#accountId.subscriberReferenceId}</subscriberReferenceId>
            </accountId>
            <!--Optional:-->
            <withdrawalMethod>${#TestCase#withdrawalMethod}</withdrawalMethod>
            <!--Optional:-->
            <checkMethodType>${#TestCase#checkMethodType}</checkMethodType>
            <!--Optional:-->
            <withdrawalAccount>
               <linkedAccountId>${#TestCase#withdrawalAccount.linkedAccountId}</linkedAccountId>
               <bankAccount>
                  <routingNumber>${#TestCase#withdrawalAccount.bankAccount.routingNumber}</routingNumber>
                  <accountNumber>${#TestCase#withdrawalAccount.bankAccount.accountNumber}</accountNumber>
                  <holderName>${#TestCase#withdrawalAccount.bankAccount.holderName}</holderName>
                  <bankAccountType>${#TestCase#withdrawalAccount.bankAccount.bankAccountType}</bankAccountType>
               </bankAccount>
               <checkAddress>
                  <name>${#TestCase#withdrawalAccount.checkAddress.name}</name>
                  <address>
                     <line1>${#TestCase#withdrawalAccount.checkAddress.address.line1}</line1>
                     <line2>${#TestCase#withdrawalAccount.checkAddress.address.line2}</line2>
                     <city>${#TestCase#withdrawalAccount.checkAddress.address.city}</city>
                     <state>${#TestCase#withdrawalAccount.checkAddress.address.state}</state>
                     <zipcode>${#TestCase#withdrawalAccount.checkAddress.address.zipcode}</zipcode>
                  </address>
               </checkAddress>
            </withdrawalAccount>
         </closeAccountRequest>
      </sch:closeAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/closeAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClient"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getClient</con:operation><con:request name="getClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getClient>
         <getClientRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
         </getClientRequest>
      </sch:getClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="collectFees"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>collectFees</con:operation><con:request name="collectFees" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:collectFees>
         <collectFeesRequest>
       <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <account>
               <!--Optional:-->
               <bancBoxId>${#TestCase#bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#subscriberReferenceId}</subscriberReferenceId>
            </account>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <referenceId>${#TestCase#referenceId}</referenceId>
               <amount>${#TestCase#amount}</amount>
               <!--Optional:-->
               <memo>${#TestCase#memo}</memo>
               <!--Optional:-->
               <scheduled>
                  <scheduleDate>${#TestCase#scheduleDate}</scheduleDate>
               </scheduled>
            </items>
         </collectFeesRequest>
      </sch:collectFees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFees"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateClient"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateClient</con:operation><con:request name="updateClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateClient>
         <updateClientRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <merchantId>${#TestCase#merchantId}</merchantId>
            <!--Optional:-->
            <firstName>${#TestCase#firstName}</firstName>
            <!--Optional:-->
            <lastName>${#TestCase#lastName}</lastName>
            <!--Optional:-->
            <middleInitial>${#TestCase#middleInitial}</middleInitial>
            <!--Optional:-->
            <ssn>${#TestCase#ssn}</ssn>
            <!--Optional:-->
            <dob>${#TestCase#dob}</dob>
            <!--Optional:-->
            <address>
               <line1>${#TestCase#address.line1}</line1>
               <!--Optional:-->
               <line2>${#TestCase#address.line2}</line2>
               <city>${#TestCase#address.city}</city>
               <state>${#TestCase#address.state}</state>
               <zipcode>${#TestCase#address.zipcode}</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>${#TestCase#homePhone}</homePhone>
            <!--Optional:-->
            <mobilePhone>${#TestCase#mobilePhone}</mobilePhone>
            <!--Optional:-->
            <workPhone>${#TestCase#workPhone}</workPhone>
            <!--Optional:-->
            <email>${#TestCase#email}</email>
            <!--Optional:-->
            <username>${#TestCase#username}</username>
            <!--Optional:-->
         </updateClientRequest>
      </sch:updateClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="cancelSchedules"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>cancelSchedules</con:operation><con:request name="cancelSchedules" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:cancelSchedules>
         <cancelSchedulesRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <!--1 or more repetitions:-->
            <scheduleIds>
               <!--Optional:-->
               <bancBoxId>${#TestCase#scheduleIds.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#scheduleIds.subscriberReferenceId}</subscriberReferenceId>
            </scheduleIds>
         </cancelSchedulesRequest>
      </sch:cancelSchedules>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/cancelSchedules"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="cancelSchedules1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>cancelSchedules</con:operation><con:request name="cancelSchedules1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:cancelSchedules>
         <cancelSchedulesRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <!--1 or more repetitions:-->
            <scheduleIds>
               <!--Optional:-->
               <bancBoxId>${#TestCase#scheduleIds.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#scheduleIds.subscriberReferenceId}</subscriberReferenceId>
            </scheduleIds>
         </cancelSchedulesRequest>
      </sch:cancelSchedules>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/cancelSchedules"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="verifyClient"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>verifyClient</con:operation><con:request name="verifyClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:verifyClient>
         <verifyClient>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <!--Optional:-->
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <generateQuestions>${#TestCase#generateQuestions}</generateQuestions>
         </verifyClient>
      </sch:verifyClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/verifyClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="DataType with Core Automation" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"
def TestDataFile = context.expand( '${#Project#TestDataFile}' )
String APIName = context.expand( '${#Project#APIName}' )
int Length =  TestDataFile.lastIndexOf( '\\' )
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
 currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
 log.info "   >>>>>>>> : time : "+currentTime
 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label01);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")
Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
  log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesColCount " +ValuesColCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
/*if(PropRowCount!=ValuesColCount)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}
*/


//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 2
 
for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
holder = groovyUtils.getXmlHolder( "${APIName}#Response")
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response;

Label label5 = new Label(1,iCountTestCase,response);
   sheet.addCell(label5);
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
ActualResponseValue=holder.getNodeValue(xpath1);



log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1
//getting xpath

log.info"xpath"+xpath1


//comparing actual response
if(!(ResponseFromTestData.equals(ActualResponseValue)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}  //for outer if

} //for  response columns for loop




for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
ActualResponseValue=holder.getNodeValue(xpath1);
	
	//checking for datatype assertion :


String TYPE= TestDataResponseSchema.getCell(2,iCounter1).getContents()
log.info"type="+ TYPE;

try
{
log.info"TYPE"+TYPE
if(TYPE.equalsIgnoreCase(Integer))
typeError=Integer.valueOf(ActualResponseValue)	
else if(TYPE.equalsIgnoreCase(String))
typeError=String.valueOf(ActualResponseValue)
else if(TYPE.equalsIgnoreCase(Long))
typeError=Long.valueOf(ActualResponseValue)	
else
typeError="Datatype should be either Int,String,Long in Response Schema Excel"
}

catch(all)
{    

	
	typeErrorMsg="Data type mismatch in response"+all;

	Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
   sheet.addCell(label6);
    flagCount = flagCount+1
   
}

//checking DataType done
	
}

}





if(flagCount==2)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}
else
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}

} // end of testcases loop
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()
]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationScript"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

log.info "*************************************************  STARTING CORE AUTOMATION DRIVER *************************************************";
/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/



/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}');
def TestDataFile = context.expand( '${#Project#TestDataFile}');
String APIName = context.expand( '${#Project#APIName}');
String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
log.info "		>>>>		==============================="
int Length =  TestDataFile.lastIndexOf('\\');
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResposeFileLocation = TestDataFile.substring(0,Length);

//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls";
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResponseFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
WritableSheet sheet = workbook.createSheet("Response",0);

Label label00 = new Label(0, 0, "TCID"); 
sheet.addCell(label00);

Label label01 = new Label(1, 0, "REQUEST"); 
sheet.addCell(label01);
  
Label label02 = new Label(2, 0, "RESPONSE"); 
sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();
 //log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {
//Variable to store the xPath of nodes to set to blank
List<String> xmlTagToSetBlank = new ArrayList<String>();

	 int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+setNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/

	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='null')
				{
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
	 for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
		for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
			{
				if(items in holder1.getDomNodes( "//*[normalize-space(.) = 'null'and count(*) = 0]")){

					log.info " Null Node = "+item.nodeName;
				}
				//log.info "  >>  "+holder1.getNodeValues(item.nodeName);
				log.info ">> removing :: "+ item.nodeName;
				log.info ">> removing :: "+ item.removeXobj();
				//holder1.removeDomNodes("//"+item.removeXobj())
				//log.info ">> removing :: "+item.removeXobj();
			}
		}
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }


int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
log.info "		>>>>		ArrayList Cleared";
	 holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	  if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	  //log.info ">>>>    context.requestContent : " +context.requestContent
	 }
	/*****************************************************************************/


	def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);

	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	

	// def inputHolder1 = APIName+"#Request";
	// def groovyUtilOrg1 = new com.eviware.soapui.support.GroovyUtils( context )
	// originalReq1 = groovyUtilOrg1.getXmlHolder(inputHolder1);
	// rawReq = originalReq.getPrettyXml();
	
	def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	rawReq=holder22.getXml();
	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq2);
	  		sheet.addCell(labelRawRequest);
	 	}
	 	else{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}
	
	  Label lableResponse = new Label(2,iCountTestCase,response);
	  sheet.addCell(lableResponse);


     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounter1;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==3)
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	


}

workbook.write();
workbook.close();

log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="RemoveParentNodes" disabled="true"><con:settings/><con:config><script>log.info" ------Remove empty parent tags";
APIName = "updateMerchant";
def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context )
def holder2 = groovyUtilsx.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent)


for( item in holder2.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
   log.info ">> removing :: "+ item.nodeName; 
 holder2.removeDomNodes("//"+item.nodeName)
}
 log.info" >>>> removed empty parent nodes";
// update request
//holder2.updateProperty()
testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder2.getPrettyXml())
context.requestContent = holder2.xml
 //log.info "    >>>>    stripped request : " +holder2.xml;
rawReq=holder2.xml
 log.info ">>>>    final request : " +rawReq
 log.info ">>>>    context.requestContent : " +context.requestContent
</script></con:config></con:testStep><con:testStep type="groovy" name="RemoveNodes" disabled="true"><con:settings/><con:config><script>import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils(context);
def holder2 = groovyUtilsx.getXmlHolder( testRunner.testCase.testSteps['updateMerchant'].testRequest.response.requestContent);


//String abc = holder2.toString();
//log.info "    >>>>    holder2 : "+holder2.toString();

// set default value here
def defaultVal = ""
for( item in holder2.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" )){
   log.info "removing :: "+ item.nodeName; 
holder2.removeDomNodes("//"+item.nodeName)
}

log.info" >>>>finished";
// update request
holder2.updateProperty()

context.requestContent = holder2.xml
log.info "    >>>>    stripped request : " +holder2.xml;
rawReq=holder2.xml
log.info ">>>>    final req : " +rawReq
log.info ">>>>    context.requestContent : " +context.requestContent;



log.info"   >>>>>  REQUEST \n"+testRunner.testCase.getTestStepByName("updateMerchant").getProperty("Request").getValue();

def holder2 = groovyUtilsx.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent)
def rawReq = String(testRunner.testCase.testSteps['updateMerchant'].testRequest.response.requestContent</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of DataType without CORE Automation" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"
def TestDataFile = context.expand( '${#Project#TestDataFile}' )
String APIName = context.expand( '${#Project#APIName}' )
int Length =  TestDataFile.lastIndexOf( '\\' )
 
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label01);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 2
 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);


	
for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response

Label label5 = new Label(1,iCountTestCase,response);
   sheet.addCell(label5);
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==2)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()
]]></script></con:config></con:testStep><con:testStep type="groovy" name="ClearTCProperties"><con:settings/><con:config><script>String[] props = new String[testRunner.testCase.getPropertyCount()];
props = testRunner.testCase.getPropertyNames();
log.info ">>     Properties Size : "+props.size();
for (int i=0;i&lt;props.size();i++)
{
 //log.info ">>     "+props[i];
 //testRunner.testCase.setPropertyValue(props[i],"");
testRunner.testCase.removeProperty(props[i]);
}
log.info "	>>>>	 	ALL TC PROPERTIES REMOVED ";	</script></con:config></con:testStep><con:testStep type="request" name="updateClientStatus"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateClientStatus</con:operation><con:request name="updateClientStatus" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateClientStatus>
         <updateClientStatusRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <clientStatus>${#TestCase#clientStatus}</clientStatus>
         </updateClientStatusRequest>
      </sch:updateClientStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateClientStatus"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="InvestAutoDriver" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import com.eviware.soapui.*
import java.util.*
//import jxl.write.*
import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import jxl.write.Label;
//import jxl.write.WritableCellFormat;
//import jxl.write.WritableFont;

log.info "				>>>>>>>>>>>>>>>>>> : Starting Test Groovy 1 --"



int flagCount;
int iCountTestCase;
WritableWorkbook workbook;
WritableSheet sheet;
String ResponseParameter;
String ParameterDataType;

Workbook TestDataWB;
Sheet TestDataProp1;
Sheet TestDataValues1;
Sheet TestDataResponseSchema;
Sheet TestDataResponse;

String EnumDataCollection;
String enumType;

	def alert = com.eviware.soapui.support.UISupport;
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);

	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);

int labelCount = 1
	
try{


///log.info ">>>>>>" + testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")


//*************************************************************************//
//Enter Location of Test Data Excel File e.g. E:\\Test Data\\CreateInvestor.xls
//the excel file should be in xls format

//String TestDataFileNames = "C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\openEscrow.xls|C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\getEscrowDetails.xls"
//String TestDataFile = testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")
//String TestDataFile = ${#Project#TestDataFileLocation}
String TestDataFileNames = context.expand('${#Project#TestDataFileLocation}')

//Enter the name of API Request
//The name should be same as the API request name in the project
//String RequestAPINames = "openEscrow|getEscrowDetails"map1:{"request_id":4423542238,"id":626484610108,"bank_name":"Four Oaks Bank & Trust Company","account_number":"540126108022","account_routing_number":"053112505","account_type":"CHECKING","type":"CUSTODIAN"}
//String RequestAPIName = testRunner.testCase.testSuite.project.getPropertyValue("RequestName")
//String RequestAPIName = ${#Project#RequestName}
String RequestAPINames = context.expand('${#Project#RequestName}')

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//


String[] TestDataFileArray = TestDataFileNames.split("\\|");
String[] RequestAPINameArray = RequestAPINames.split("\\|");




//log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFileArray
int sizeOfTestDataFiles = TestDataFileArray.size();
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfTestDataFiles"+sizeOfTestDataFiles

//log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPINameArray
int sizeOfRequestAPI = RequestAPINameArray.size()
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfRequestAPI"+sizeOfRequestAPI


if(sizeOfTestDataFiles!=sizeOfRequestAPI)
{
alert.showInfoMessage("Number of Test Data Files and Request API must be the same","ALERT MESSAGE");
//system.exit();
return;
}

for(iNoOfTestRequests=0;iNoOfTestRequests < sizeOfRequestAPI;iNoOfTestRequests++)
{//************START loop for No of Reqeusts
	

  
String TestDataFile = TestDataFileArray[iNoOfTestRequests]
String RequestAPIName = RequestAPINameArray[iNoOfTestRequests]
log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFile
log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPIName
log.info "				>>>>>>>>>>>>>>>>>> : setNo :"+setNo














 int Length =  TestDataFile.lastIndexOf( '\\' )
 int locationSize = TestDataFile.lastIndexOf( '.xl' );
 String responseFileName = TestDataFile.substring(Length+1,locationSize);
 String ResposeFileLocation = TestDataFile.substring(0,Length)
 	//Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
	 //log.info "				>>>>>>>>>>>>>>>>>> : time :"+currentTime

	//Getting location to create the TestResponseFile
	String TestResponseFile = ResposeFileLocation + "\\"+responseFileName+"-Response-" +currentTime+".xls"
	log.info "				>>>>>>>>>>>>>>>>>> : TestResponseFile :"+TestResponseFile
	//Creating Response Excel File
	workbook = Workbook.createWorkbook(new File(TestResponseFile));
	sheet = workbook.createSheet("Response",0)




	
	//Get the Test Data Excel File
	TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

	//Get the Sheet having Test Data Properties
	TestDataProp1 = TestDataWB.getSheet("Request Schema")

	//Get the Sheet having Test Data Values
	TestDataValues1 = TestDataWB.getSheet("Request Values")


	//Get the Sheet having Test Data Response Properties
	TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
	TestDataResponse = TestDataWB.getSheet("Response Values")




	//Count Rows and Columns in Properties sheet
	PropRowCount = TestDataProp1.getRows()
	PropColCount = TestDataProp1.getColumns()


	//Count Rows and Columns in Response Schema sheet
	ResponseSchemaRowCount = TestDataResponseSchema.getRows()
	ResponseSchemaColCount = TestDataResponseSchema.getColumns()

	//log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
	//log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount

	//Count Rows and Columns in Response sheet
	ResponseRowCount = TestDataResponse.getRows()
	ResponseColCount = TestDataResponse.getColumns()

	//log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
	//log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount









	//Count Rows and Columns in Values sheet
	ValuesRowCount = TestDataValues1.getRows()
	ValuesColCount = TestDataValues1.getColumns()
	//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesRowCount " +ValuesRowCount
	//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesColCount " +ValuesColCount
	//This will display an information message
	//def alert = com.eviware.soapui.support.UISupport;
	//alert.showInfoMessage("Hello World !");
	//alert.showInfoMessage("Hello World !","soapUI Warning !")
	log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
	log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != (ValuesColCount-3))
{
	workbook.write()
	workbook.close()
	
	alert.showInfoMessage("Mismatch in the count of Properties and Values. \n We have introduced a new column Expected Results after Description Column");
	log.info "				>>>>>>>>>>>>>>>>>>>> : Mismatch in the count of Properties and Values \n We have introduced a new column Expected Results after Description Column"
	
	return;
}


//********Iterating loop for No of Test Cases in Test Data Sheet*********//



for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases

//flush();
ResponseParameter = "";
ParameterDataType = "";
EnumDataCollection = "";
enumType="";


	
	if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}
 flagCount = 5;


		Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
		sheet.addCell(label00);

		Label label001 = new Label(1, 0, "Description"); //column=0=A,row=0=1
		sheet.addCell(label001);

		Label label002 = new Label(2, 0, "Expected Result"); //column=0=A,row=0=1
		sheet.addCell(label002);

		Label label003 = new Label(3, 0, "Curl Request"); //column=0=A,row=0=1
		sheet.addCell(label003);
		
		Label label004 = new Label(4, 0, "RESPONSE"); //column=0=A,row=0=1
		sheet.addCell(label004);

		log.info "				>>>>>>>>>>>>>>>>>> : STARTING TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
		//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
		//sheet.addCell(label02);
String key = "";
String value = "";
String requestData = "";
for(iCounter=1;iCounter<(ValuesColCount-3);iCounter++)
{
	//log.info "				>>>>>>>>>>>>>>>>>> : IN FOR LOOP "
	key = TestDataProp1.getCell(0,iCounter).getContents();
	value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents();
	
	//testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
	testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( key, value);

	/**
	if(value.contains(" "))
	{
		value = '"'+value+'"';
	}
	//requestData = requestData+"-d "+TestDataProp1.getCell(0,iCounter).getContents()+"="+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()+" \\\n";
	requestData = requestData+"-d "+key+"="+value+" \\\n";
	**/

	 if(value.contains(" "))
      {
       value = '"'+value+'"';
      }
      //**********************************************
      //Generating the curl request from key and value
      //**********************************************
      if(key=="email")
      {
       requestData = requestData+"--data-urlencode "+key+"="+value+" \\\n";
      }
      else{
      requestData = requestData+"-d "+key+"="+value+" \\\n";
      }
}
log.info "				>>>> requestData = "+requestData;
//Getting Reqeust Curl

def ReqHolder1 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
log.info "				>>>> ReqHolder1 =:"+ReqHolder1


//Running the API Request with the Test Parameters-Values
log.info "				>>> Executing Request ";
testRunner.runTestStepByName(RequestAPIName)

String requestURL = context.httpMethod.getURI();
log.info "				>>>> requestURL : "+requestURL;
requestData = "curl -k -v "+requestURL+" \\\n"+requestData;
//log.info "				>>>> New requestData : "+requestData;
//log.info "				>>>> url : "+context.httpMethod.getURI();
//Getting Reqeust Curl
log.info "ok";


def rawReq = testRunner.testCase.testSteps[RequestAPIName].testRequest.response.requestContent;
//log.info  "				>>>> rawReq =:"+rawReq


def ReqHolder2 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
//log.info "				>>>> ReqHolder2 =:"+ReqHolder2


//*******************************************************************************************//

log.info "				>>>>>>>>>>>>>>>>>> : Starting Validate JSON Response Groovy";


//Getting JSON Response
def holder = testRunner.testCase.getTestStepByName(RequestAPIName).getPropertyValue("response")
log.info "        JSON response holder            "+holder;

//Parsing JSON Response
def slurper = new JsonSlurper()
def ParsedJSONResponse = slurper.parseText(holder)
log.info "        JSON Parsed               "+ParsedJSONResponse

//Stringification of JSON response
String ResponseInString = holder.toString()
log.info "         JSON String                "+ResponseInString
String ParsedJSONResponseInString = ParsedJSONResponse.toString()


log.info "				>>>>>>>>>>>>>>>>>> : Parsed JSON in String :" +ParsedJSONResponseInString
Label label = new Label(4, iCountTestCase, ResponseInString); //column=0=A,row=0=1
		sheet.addCell(label);
//log.info "				>>>>>>>>>>>>>>>>>> : ResponseSchemaRowCount :"+ResponseSchemaRowCount

Label labelCurl = new Label(3, iCountTestCase, requestData); //column=0=A,row=0=1
		sheet.addCell(labelCurl);

for(iCounter=1;iCounter<ResponseSchemaRowCount;iCounter++)
{//******************start loop for Response Schema validation
//flush2
ParameterDataType = "";
	
	if(TestDataResponseSchema.getCell(1,iCounter).getContents() == "Y")
	{
		//log.info "          >>   YES  " +iCounter
		String requiredParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"'
		log.info "				>>>>>>>>>>>>>>>>>> : requiredParameter :"+requiredParameter
		if(!(ParsedJSONResponseInString.contains(requiredParameter)))
		{
			
			log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the mandatory parameter - "+TestDataResponseSchema.getCell(0,iCounter).getContents() 
			String MandatoryParameterMissing = "The response does not contain the mandatory parameter - "+requiredParameter
			Label label2 = new Label(flagCount, iCountTestCase, MandatoryParameterMissing);
			sheet.addCell(label2);
			flagCount = flagCount+1
			//testRunner.fail
		}
	}



//******NOV-8*****FOR TESTING DATATYPE OF VALUES//
if(!(TestDataResponseSchema.getCell(2,iCounter).getContents().isEmpty()))
	{
		ParameterDataType="";
		//String ResponseParameter = TestDataResponseSchema.getCell(0,iCounter).getContents()
		ResponseParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"'
		ParameterDataType = TestDataResponseSchema.getCell(2,iCounter).getContents()
		log.info  "				>>>>>>>>>>>>>>>>>> : ResponseParameter :"+ResponseParameter
		log.info  "				>>>>>>>>>>>>>>>>>> : ParameterDataType :"+ParameterDataType



// int Length =  TestDataFile.lastIndexOf( '\\' )
// String ResposeFileLocation = TestDataFile.substring(0,Length)
ResponseParameter = ResponseParameter+'":';
 int IndexOfParam =  ParsedJSONResponseInString.lastIndexOf(ResponseParameter)
 int LengthOfParam = ResponseParameter.size()
// log.info "     >>>>>>>>>>>>>>>.   IndexOfParam "+IndexOfParam
 //log.info "     >>>>>>>>>>>>>>>.  LengthOfParam "+LengthOfParam

  if(IndexOfParam > -1)
  {
// log.info "       <<>>>>>>>> ParsedJSONResponseInString"+ParsedJSONResponseInString
 //int LastIndexOfValue = ParsedJSONResponseInString.substring(ResponseParameter,indexOf(","))
 //log.info "             >>>>>>>>...   LastIndexOfValue "+LastIndexOfValue

 IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf(",", IndexOfParam)
 //log.info "				>>>> IndexOfSubsequentComma:"+IndexOfSubsequentComma 

		//log.info  "     >>>>>>>>>>>>>>>.   IndexOfSubsequentComma "+IndexOfSubsequentComma
 
if(IndexOfSubsequentComma<1)
{
	IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf("}", IndexOfParam)
	//log.info "				>>>> IndexOfSubsequentComma:"+IndexOfSubsequentComma 

	if(IndexOfSubsequentComma<1)
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Could not find the value for the parameter : "+ResponseParameter
	}
}



if(ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))
 	{
 		EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
		log.info "				>>>> Enum Data Collection :"+EnumDataCollection
 		/*
 		if(EnumDataCollection.matches("[,a-zA-Z]*"))
 		{
 			enumType = "String"
 			log.info "Enum Value is String"
 		}
 		else
 		{
 			enumType = "Number"
 			log.info "Enum Value is NOT String"
 		}
 		*/
 		if(!(EnumDataCollection.matches("[0-9,]*")))
 		{
 			enumType = "String1"
 			log.info "Enum Value is String"
 		}
 		else
 		{
 			enumType = "Number"
 			log.info "Enum Value is NOT String"
 		}
 	}

 //if((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || (ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))) //********** **
 // if(!((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || enumType=="String")) //********** **
 	//if(!((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String"))) //********** **

//Thread.sleep(500) 
if(ParameterDataType.equalsIgnoreCase('Float'))
{
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO float BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	
 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText

 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
else if(((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String1"))) //********** **

 {
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO STRING/DATE/ENUMstring BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	//ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText
 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
 

 
 else
 {
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO NON -- STRING/DATE/ENUMstring BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	
 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText

 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
 //ResposeValueText = ParsedJSONResponseInString.substring(ParsedJSONResponseInString.indexOf(ResponseParameter)+LengthOfParam, (ParsedJSONResponseInString.indexOf(","))+(IndexOfParam));
 //ResposeValueText = ParsedJSONResponseInString.substring((IndexOfParam+LengthOfParam+2),(IndexOfParam+LengthOfParam+2)+(ParsedJSONResponseInString.indexOf(",")))
 //ResposeValueText = ParsedJSONResponseInString.substring((32),ParsedJSONResponseInString.indexOf(","))
 //s.indexOf(")")
 //log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :"+ResposeValueText
// assert ResposeValueText.isNumber()

//try{

log.info "				>>>> The ResponseValueText is :"+ResposeValueText
	
if(ParameterDataType.toString().equalsIgnoreCase("String"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to STRING IF block"
	 String returnDataType = String.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : StringValue :"+returnDataType
}	
if(ParameterDataType.toString().equalsIgnoreCase("Long"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to LONG IF block"
	//log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :" +ResposeValueText
	long returnDataType = Long.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : LongValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Int"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Int IF block"
	 int returnDataType = Integer.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : IntValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Float"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Float IF block"
	//log.info "				>>>>>>>>>>>>>>>>>> : FloatValue text "+ResposeValueText
	 float returnDataType = Float.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : FloatValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Boolean"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Boolean IF block"
	 boolean returnDataType = Boolean.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : BooleanValue :"+returnDataType
	
}
if(ParameterDataType.toString().equalsIgnoreCase("Date"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Date IF block"
	 
	 SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
	 Date date = null;
	  date = format.parse(ResposeValueText);
	 //date returnDataType = date.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : DateValue  :"+date
}
if(ParameterDataType.toString().toLowerCase().contains(("Enum").toLowerCase()))
{

	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
	EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
	log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection

	if(!(EnumDataCollection.toString().toLowerCase().contains((ResposeValueText).toLowerCase())))
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText"
	String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection
	Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label4);
	flagCount = flagCount+1
	}
	/*
	String[] EnumData = EnumDataCollection.split(",")
	int sizeOfEnumData = EnumData.size()
	log.info "			>>>>>>>>>>>>>> sizeOfEnumData :"+sizeOfEnumData
	
	
	for(iCountOfEnumData=0;iCountOfEnumData<sizeOfEnumData;iCountOfEnumData++)
	{
	log.info "			>>>>>>> EnumData :"+EnumData[iCountOfEnumData]
	
	}
	 //date returnDataType = date.valueOf(ResposeValueText)
	 //log.info "        >>>>>>>>>.     EnumValue  "+returnDataType
	*/
}




/*
}
  catch(all)
{
	log.info "             >>>>>>>>>> Some Exception Occured"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	
//workbook.write()
//workbook.close()

}
*/
 //long.info "  >>>>>>>>>>>>>>>   "+bool
 //ValueDataType = ResposeValueText.getClass()
 //log.info " >>>>>>>>>>>> ValueDataType ="+ValueDataType

  }

	}
//******NOV-8*****// 

//*****************************************************************8888888
//*****************************************************************8888888
//openEscrowopenEscrowParameterDataType = "";
}//******************END loop for Response Schema validation





for(iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{
	//if(IsEmpty(TestDataResponse.getCell(iCounter,1).getContents()))


	if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
	{
		//log.info " >>>>>>>>>>>>   not NULL"
		String ParamValueField = '"'+TestDataResponse.getCell(iCounter1,0).getContents()+'":"'+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()+'"'
		String ParamValueFieldForIntType = '"'+TestDataResponse.getCell(iCounter1,0).getContents()+'":'+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()
		log.info " >>>>>>>>>>>  ParamValueField is : "+ParamValueField 
//1
		
		if(!(ParsedJSONResponseInString.contains(ParamValueField))  && !(ParsedJSONResponseInString.contains(ParamValueFieldForIntType)) )
		{
			log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the value - "+ParamValueField
			
			
			//log.info "           >>>>>>>> flag Count  "+flagCount
			//label1 = "label"+flagCount
			//Label label1 = new Label(0, 1, "TC_001"); //column=0=A,row=0=1
			//sheet.addCell(label1);
			
			//Label label+""+flagCount = new Label
			Label label3 = new Label(flagCount, iCountTestCase, "The response does not contain the value - "+ParamValueField+"");
			sheet.addCell(label3);
			flagCount = flagCount+1
		}
	}
}

if(flagCount==5)
{
	/*
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);
	*/
	//log.info  "				>>>>>>>>>>>>>>>>>> : if loop - flagCount "+flagCount
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label02);

	Label label0003 = new Label(1, iCountTestCase, TestDataValues1.getCell(1,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label0003);

	Label label0004 = new Label(2, iCountTestCase, TestDataValues1.getCell(2,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label0004);

	
	// sheet.addCell(new jxl.write.Label(0,0,"User Name",normalFormat));
}
else{
	/*
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);
	*/
	//log.info  "				>>>>>>>>>>>>>>>>>> : else loop - flagCount "+flagCount
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);

	Label label0003 = new Label(1, iCountTestCase, TestDataValues1.getCell(1,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label0003);

	Label label0004 = new Label(2, iCountTestCase, TestDataValues1.getCell(2,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label0004);
}	
log.info "				>>>>>>>>>>>>>>>>>> : END TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
}//************END loop for No of Test Cases

workbook.write()
workbook.close()
}//************END loop for No of Reqeusts


}
catch (NumberFormatException e)
{
	log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : NumberFormatException"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	workbook.write()
	workbook.close()
}

catch(ParseException parseEx)
{
	log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : ParseException"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	workbook.write()
	workbook.close()
}
catch(FileNotFoundException f) 
{
   workbook.write()
   workbook.close()
   f.printStackTrace();
   log.info "				>>>>>>>>>>>>>>>>>> : FILE NOT FOUND"
   //alert.showInfoMessage("Hello World !","soapUI Warning !")
   alert.showInfoMessage("Please Check the File Name and Location is Correct","FILE NOT FOUND");
  
}
catch(all)
{
	
	//String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	String Exception1 = "An Exception Occurred : "+all+""
	log.info "				>>>>>>>>>>>>>>>>>> : Exception1 : "+Exception1
	Label label5 = new Label(flagCount, iCountTestCase, Exception1);
	sheet.addCell(label5);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	
	workbook.write()
	workbook.close()

}

log.info "				>>>>>>>>>>>>>>>>>> : End of Validate JSON Response Groovy"
log.info "				>>>>>>>>>>>>>>>>>> : End of AutomationDriver script"
]]></script></con:config></con:testStep><con:testStep type="groovy" name="DataTypeValidations" disabled="true"><con:settings/><con:config><script>String TYPE = "Integer";
ActualResponseValue = 123;

if(TYPE.equalsIgnoreCase("Integer"))
//typeError=Integer.valueOf(ActualResponseValue)
int returnType=Integer.valueOf(ActualResponseValue)	
else if(TYPE.equalsIgnoreCase(String))
typeError=String.valueOf(ActualResponseValue)
else if(TYPE.equalsIgnoreCase(Long))
typeError=Long.valueOf(ActualResponseValue)</script></con:config></con:testStep><con:testStep type="request" name="searchClients"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>searchClients</con:operation><con:request name="searchClients" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:searchClients>
         <searchClientRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <!--Optional:-->
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <createdOnFromDate>${#TestCase#createdOnFromDate}</createdOnFromDate>
            <!--Optional:-->
            <createdOnToDate>${#TestCase#createdOnToDate}</createdOnToDate>
            <!--Optional:-->
            <modifiedOnFromDate>${#TestCase#modifiedOnFromDate}</modifiedOnFromDate>
            <!--Optional:-->
            <modifiedOnToDate>${#TestCase#modifiedOnToDate}</modifiedOnToDate>
            <!--Optional:-->
            <clientStatus>${#TestCase#clientStatus}</clientStatus>
            <!--Optional:-->
            <cipStatus>${#TestCase#cipStatus}</cipStatus>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </searchClientRequest>
      </sch:searchClients>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/searchClients"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateAccount"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateAccount</con:operation><con:request name="updateAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateAccount>
         <updateAccountRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <accountId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#accountId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#accountId.subscriberReferenceId}</subscriberReferenceId>
            </accountId>
            <!--Optional:-->
            <title>${#TestCase#title}</title>
         </updateAccountRequest>
      </sch:updateAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getSubscriberAccounts"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getSubscriberAccounts</con:operation><con:request name="getSubscriberAccounts" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getSubscriberAccounts>
         <getSubscriberAccountsRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
         </getSubscriberAccountsRequest>
      </sch:getSubscriberAccounts>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getSubscriberAccountsRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientAccounts"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getClientAccounts</con:operation><con:request name="getClientAccounts" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getClientAccounts>
         <getClientAccountsRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </getClientAccountsRequest>
      </sch:getClientAccounts>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClientAccounts"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="transferFunds"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>transferFunds</con:operation><con:request name="transferFunds" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:transferFunds>
         <transferFundsRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <sourceAccount>
               <!--Optional:-->
               <bancBoxId>${#TestCase#sourceAccount.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#sourceAccount.subscriberReferenceId}</subscriberReferenceId>
            </sourceAccount>
            <destinationAccount>
               <!--Optional:-->
               <bancBoxId>${#TestCase#destinationAccount.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#destinationAccount.subscriberReferenceId}</subscriberReferenceId>
            </destinationAccount>
            <!--Optional:-->
            <memo>${#TestCase#memo}</memo>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <referenceId>${#TestCase#items.referenceId}</referenceId>
               <!--Optional:-->
               <memo>${#TestCase#items.memo}</memo>
               <amount>${#TestCase#items.amount}</amount>
               <!--Optional:-->
               <scheduled>
                  <scheduleDate>${#TestCase#items.scheduled.scheduleDate}</scheduleDate>
               </scheduled>
            </items>
         </transferFundsRequest>
      </sch:transferFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/transferFunds"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getMerchant"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getMerchant</con:operation><con:request name="getMerchant" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getMerchant>
         <getMerchantRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <merchantId>${#TestCase#merchantId}</merchantId>
         </getMerchantRequest>
      </sch:getMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getMerchantRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GettingFreshRequest" disabled="true"><con:settings/><con:config><script>String APIName = "updateMerchant-COPY";
String APINames = "updateMerchant";

String orgReq = APIName+"#Request";


def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
req = groovyUtils.getXmlHolder(orgReq);

freshRequest = req.getPrettyXml();
log.info "    >>>>>>.   "+req.getPrettyXml();

testRunner.getTestCase().getTestStepByName(APINames).getProperty('Request').setValue(freshRequest);
log.info "     >>>>>>>>  Request Re-fresh completed ";

/*
//testRunner.getTestCase().getTestStepByName(requestName).getProperty('Request').getPrettyXml();

log.info" ------Remove empty parent tags";

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
req = groovyUtils.getXmlHolder(APIName'#Request');

freshRequest = req.getPrettyXml();
*/</script></con:config></con:testStep><con:testStep type="groovy" name="GetFreshReq" disabled="true"><con:settings/><con:config><script>log.info" ------Remove empty parent tags";

APIName = 'updateMerchant';
/*
def inputHolder = APIName+"#Request";

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
req = groovyUtils.getXmlHolder(inputHolder);

freshRequest = req.getPrettyXml();
log.info "      "+freshRequest;
*/
def groovyUtils2 = new com.eviware.soapui.support.GroovyUtils( context )
def holder2 = groovyUtils2.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent)

testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder2.getPrettyXml())
context.requestContent = holder2.xml
 </script></con:config></con:testStep><con:testStep type="request" name="searchMerchants"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>searchMerchants</con:operation><con:request name="searchMerchants" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:searchMerchants>
         <searchMerchantsRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <!--Optional:-->
            <linkedClientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#linkedClientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#linkedClientId.subscriberReferenceId}</subscriberReferenceId>
            </linkedClientId>
            <!--Optional:-->
            <merchantFirstName>${#TestCase#merchantFirstName}</merchantFirstName>
            <!--Optional:-->
            <merchantLastName>${#TestCase#merchantLastName}</merchantLastName>
            <!--Optional:-->
            <merchantTaxId>${#TestCase#merchantTaxId}</merchantTaxId>
            <!--Optional:-->
            <createdOnFromDate>${#TestCase#createdOnFromDate}</createdOnFromDate>
            <!--Optional:-->
            <createdOnToDate>${#TestCase#createdOnToDate}</createdOnToDate>
            <!--Optional:-->
            <modifiedOnFromDate>${#TestCase#modifiedOnFromDate}</modifiedOnFromDate>
            <!--Optional:-->
            <modifiedOnToDate>${#TestCase#modifiedOnToDate}</modifiedOnToDate>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </searchMerchantsRequest>
      </sch:searchMerchants>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/searchMerchantsRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="linkPayee"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>linkPayee</con:operation><con:request name="linkPayee" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:linkPayee>
         <linkPayeeRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>${#TestCase#referenceId}</referenceId>
            <payee>
               <payeeAccountNumber>${#TestCase#payee.payeeAccountNumber}</payeeAccountNumber>
               <!--Optional:-->
               <memo>${#TestCase#payee.memo}</memo>
               <payee>
                  <!--You have a CHOICE of the next 5 items at this level-->
                  <ach>
                     <routingNumber>${#TestCase#payee.payee.ach.routingNumber}</routingNumber>
                     <accountNumber>${#TestCase#payee.payee.ach.accountNumber}</accountNumber>
                     <holderName>${#TestCase#payee.payee.ach.holderName}</holderName>
                     <bankAccountType>${#TestCase#payee.payee.ach.bankAccountType}</bankAccountType>
                  </ach>
                  <paypal>
                     <id>${#TestCase#payee.payee.paypal.id}</id>
                  </paypal>
                  <check>
                     <name>${#TestCase#payee.payee.check.name}</name>
                     <address>
                        <line1>${#TestCase#payee.payee.check.address.line1}</line1>
                        <!--Optional:-->
                        <line2>${#TestCase#payee.payee.check.address.line2}</line2>
                        <city>${#TestCase#payee.payee.check.address.city}</city>
                        <state>${#TestCase#payee.payee.check.address.state}</state>
                        <zipcode>${#TestCase#payee.payee.check.address.zipcode}</zipcode>
                     </address>
                  </check>
                  <bancbox>
                     <bancboxPayeeId>${#TestCase#payee.payee.bancbox.bancboxPayeeId}</bancboxPayeeId>
                  </bancbox>
                  <wire>
                     <bankAccountDetails>
                        <routingNumber>${#TestCase#payee.payee.wire.bankAccountDetails.routingNumber}</routingNumber>
                        <accountNumber>${#TestCase#payee.payee.wire.bankAccountDetails.accountNumber}</accountNumber>
                        <holderName>${#TestCase#payee.payee.wire.bankAccountDetails.holderName}</holderName>
                        <bankAccountType>${#TestCase#payee.payee.wire.bankAccountDetails.bankAccountType}</bankAccountType>
                     </bankAccountDetails>
                     <address>
                        <line1>${#TestCase#payee.payee.wire.address.line1}</line1>
                        <!--Optional:-->
                        <line2>${#TestCase#payee.payee.wire.address.line2}</line2>
                        <city>${#TestCase#payee.payee.wire.address.city}</city>
                        <state>${#TestCase#payee.payee.wire.address.state}</state>
                        <zipcode>${#TestCase#payee.payee.wire.address.zipcode}</zipcode>
                     </address>
                  </wire>
               </payee>
            </payee>
         </linkPayeeRequest>
      </sch:linkPayee>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/linkPayee"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="AutomationScript-May12"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

 log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"
/*************** Clearing TC Properties by running script ***************/
 testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/


/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
 String setNo = context.expand('${#Project#SetNo}')
 def TestDataFile = context.expand( '${#Project#TestDataFile}' )
 String APIName = context.expand( '${#Project#APIName}' )
 int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
 String ResposeFileLocation = TestDataFile.substring(0,Length)

  //Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime
  
//Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 
//Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "REQUEST"); //column=0=A,row=0=1
  sheet.addCell(label01);
  
  Label label02 = new Label(2, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
  log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
  log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
  log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
  log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
  log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
  log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return
	}
/*************************************************************************/


/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {

	//Creating fresh request
	  //log.info "          >>>>>>>>>>>  ---Creating fresh request";
	 //testRunner.runTestStepByName("GettingFreshRequest");
		
	 int flagCount = 3
		
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	/**********************Saving original Request******************************/
	
	  log.info "         >>>>>>>>>>  Saving ORIGINAL Request";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils( context )
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	  log.info "      ORIGINAL REQUEST BEFORE REMOVING NODES : "+originalReq2;
	  
    /*****************************************************************************/

	log.info "      >>>>>>>      PropRowCount = "+PropRowCount;

	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			  log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info " >>>>>>>>>>>>>>>>>   key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);
			 log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}
	 //testRunner.runTestStepByName(APIName);
	  log.info "  >>>>>>>.       after loop - 1";

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";

	 testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);

	 req1 = holder1.getPrettyXml();
	  log.info "    >>>>>>>   REQUEST AFTER SETTING VALUES : "+req1;


	/************************ Remove empty parent tags **************************/

	 log.info" ----------Remove empty parent tags";

	//REMOVING NODES
	  //log.info "    >>    >> holder1 :"+holder1.getPrettyXml();

	 countOfOuterFor=0;

	 //NodeList nList = holder1.getElementsByTagName("*");
	 //log.info "      >>>>..  "+nList;
	 for(items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
	 {
	 	log.info "   >>>>>   OUTER FOR LOOP "+(countOfOuterFor+1);
	 for(item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
			log.info ">> removing :: "+ item.nodeName; 
			holder1.removeDomNodes("//"+item.nodeName)
			//holder1.removeDomNodes("//"+item.getDocumentElement().getNodeName())
		}
	 }
	 log.info" >> removed empty parent nodes------- 1 ";
/*

	for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
			log.info ">> removing :: "+ item.nodeName; 
			holder1.removeDomNodes("//"+item.nodeName)
		}
	log.info" >> removed empty parent nodes------- 2 ";

		for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
			log.info ">> removing :: "+ item.nodeName; 
			holder1.removeDomNodes("//"+item.nodeName)
		}
	log.info" >> removed empty parent nodes------- 3 ";
 
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
			log.info ">> removing :: "+ item.nodeName; 
			holder1.removeDomNodes("//"+item.nodeName)
		}
	log.info" >> removed empty parent nodes------- 4 ";
 
 */

	 holder1.updateProperty();
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml())
	 context.requestContent = holder1.xml
	 
	 rawReq=holder1.xml
	  log.info ">>>>    final request : " +rawReq
	  //log.info ">>>>    context.requestContent : " +context.requestContent

	/*****************************************************************************/


	def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils( context )
	//---------Running the API Request
	 testRunner.runTestStepByName(APIName);

	/**************************Restore the original request***********************/
	 
	  log.info "       >>>>>>-------   Setting back to original Request  : "
	  log.info " "+originalReq2;
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	  log.info "       >>>>>>   Original Request restored -----------------";
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder( "${APIName}#Response" )
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
	  log.info ">>>>>>>>>>>response before parse>"+response
    
	//Writing Request and Response on Excell sheet
	  Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	   sheet.addCell(labelRawRequest);
	   
	  Label lableResponse = new Label(2,iCountTestCase,response);
	   sheet.addCell(lableResponse);


     log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		 log.info"  xpath : "+xpath2
		ActualResponseValue=holder.getNodeValue(xpath2);
		 log.info("  Value for "+xpath2+" is : "+ActualResponseValue);

		 log.info "    >>>>    Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "    >>>>   Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
							
				log.info"TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue
					continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents()
		 log.info" type = "+ TYPE;

			try
			{
				log.info " ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "    >>>>   DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				 log.info" TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			    sheet.addCell(label6);
				flagCount = flagCount+1
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "param not null is >>"+ResponseFromTestData
			 log.info"counter1"+iCounter1

			String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
			 log.info"xpath : "+xpath1
			ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("AcualResponse datatype"+ActualResponseValue.getClass())
			 log.info("ExcelResponse datatype"+ResponseFromTestData.getClass())


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1
				log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
			  }

		}
	}

	if(flagCount==3)
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			 log.info  "          >>>>>else loop - flagCount "+flagCount
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "          >>>>>else loop - flagCount "+flagCount
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	 log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 log.info "          >>>>>>>>>>>  //Creating fresh request";
	testRunner.runTestStepByName("GettingFreshRequest");
		

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()]]></script></con:config></con:testStep><con:testStep type="groovy" name="removeEmptyNodes"><con:settings/><con:config><script>	 APIName = 'linkExternalAccount';
	 
	 
	 testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);

	 req1 = holder1.getPrettyXml();
	  log.info "    >>>>>>>   REQUEST AFTER SETTING VALUES : "+req1;


	/************************ Remove empty parent tags **************************/

	 log.info" ----------Remove empty parent tags";
	 

	//REMOVING NODES
	  //log.info "    >>    >> holder1 :"+holder1.getPrettyXml();

	 countOfOuterFor=0;

	 //NodeList nList = holder1.getElementsByTagName("*");
	 //log.info "      >>>>..  "+nList;
	 for(items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
	 {
	 	log.info "   >>>>>   OUTER FOR LOOP "+(countOfOuterFor+1);
	 for(item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
			//log.info ">> removing :: "+ item.nodeName; 
			log.info ">> removing :: "+item.removeXobj();
			//log.info ">> removing :: "+ item.Node;
			//holder1.removeDomNodes("//"+item.nodeName);
			//holder1.removeDomNodes("//"+item);
			//holder1.removeDomNodes("//"+item.getDocumentElement().getNodeName())
		}
	 }
	 log.info" >> removed empty parent nodes------- 1 ";


//-----------------------------------------------------------//

 	 holder1.updateProperty();
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml())
	 context.requestContent = holder1.xml
	 
	 rawReq=holder1.xml
	  log.info ">>>>    final request : " +rawReq</script></con:config></con:testStep><con:testStep type="request" name="Copy of linkExternalAccount"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>linkExternalAccount</con:operation><con:request name="Copy of linkExternalAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:linkExternalAccount>
         <linkExternalAccountRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>${#TestCase#referenceId}</referenceId>
            <account>
               <!--You have a CHOICE of the next 3 items at this level-->
               <bankAccount>
                  <routingNumber>${#TestCase#account.bankAccount.routingNumber}</routingNumber>
                  <accountNumber>${#TestCase#account.bankAccount.accountNumber}</accountNumber>
                  <holderName>${#TestCase#account.bankAccount.holderName}</holderName>
                  <bankAccountType>${#TestCase#account.bankAccount.bankAccountType}</bankAccountType>
               </bankAccount>
               <cardAccount>
                  <!--You have a CHOICE of the next 3 items at this level-->
                  <creditCardAccount>
                     <!--You have a CHOICE of the next 2 items at this level-->
                     <tokenizedId>${#TestCase#account.cardAccount.creditCardAccount.tokenizedId}</tokenizedId>
                     <creditCardDetails>
                        <number>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.number}</number>
                        <expiryDate>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.expiryDate}</expiryDate>
                        <type>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.type}</type>
                        <name>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.name}</name>
                        <cvv>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.cvv}</cvv>
                        <address>
                           <line1>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.line1}</line1>
                           <!--Optional:-->
                           <line2>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.line2}</line2>
                           <city>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.city}</city>
                           <state>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.state}</state>
                           <zipcode>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.zipcode}</zipcode>
                           <!--Optional:-->
                           <country>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.country}</country>
                        </address>
                        <!--Optional:-->
                        <orderSource>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.orderSource}</orderSource>
                     </creditCardDetails>
                  </creditCardAccount>
                  <debitCardAccount>
                     <number>${#TestCase#account.cardAccount.debitCardAccount.number}</number>
                     <type>${#TestCase#account.cardAccount.debitCardAccount.type}</type>
                     <pin>${#TestCase#account.cardAccount.debitCardAccount.pin}</pin>
                  </debitCardAccount>
                  <giftCardAccount>
                     <number>${#TestCase#account.cardAccount.giftCardAccount.number}</number>
                     <pin>${#TestCase#account.cardAccount.giftCardAccount.pin}</pin>
                  </giftCardAccount>
               </cardAccount>
               <paypalAccount>
                  <id>${#TestCase#account.paypalAccount.id}</id>
               </paypalAccount>
            </account>
         </linkExternalAccountRequest>
      </sch:linkExternalAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/linkExternalAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="linkExternalAccount-COPY"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>linkExternalAccount</con:operation><con:request name="linkExternalAccount-COPY" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:linkExternalAccount>
         <linkExternalAccountRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>${#TestCase#referenceId}</referenceId>
            <account>
               <!--You have a CHOICE of the next 3 items at this level-->
               <bankAccount>
                  <routingNumber>${#TestCase#account.bankAccount.routingNumber}</routingNumber>
                  <accountNumber>${#TestCase#account.bankAccount.accountNumber}</accountNumber>
                  <holderName>${#TestCase#account.bankAccount.holderName}</holderName>
                  <bankAccountType>${#TestCase#account.bankAccount.bankAccountType}</bankAccountType>
               </bankAccount>
               <cardAccount>
                  <!--You have a CHOICE of the next 3 items at this level-->
                  <creditCardAccount>
                     <!--Optional:-->
                     <tokenizedId>${#TestCase#account.cardAccount.creditCardAccount.tokenizedId}</tokenizedId>
                     <creditCardDetails>
                        <number>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.number}</number>
                        <expiryDate>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.expiryDate}</expiryDate>
                        <type>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.type}</type>
                        <name>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.name}</name>
                        <cvv>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.cvv}</cvv>
                        <address>
                           <line1>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.line1}</line1>
                           <!--Optional:-->
                           <line2>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.line2}</line2>
                           <city>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.city}</city>
                           <state>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.state}</state>
                           <zipcode>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.zipcode}</zipcode>
                           <!--Optional:-->
                           <country>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.country}</country>
                        </address>
                        <!--Optional:-->
                        <orderSource>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.orderSource}</orderSource>
                     </creditCardDetails>
                  </creditCardAccount>
                  <debitCardAccount>
                     <number>${#TestCase#account.cardAccount.debitCardAccount.number}</number>
                     <type>${#TestCase#account.cardAccount.debitCardAccount.type}</type>
                     <pin>${#TestCase#account.cardAccount.debitCardAccount.pin}</pin>
                  </debitCardAccount>
                  <giftCardAccount>
                     <number>${#TestCase#account.cardAccount.giftCardAccount.number}</number>
                     <pin>${#TestCase#account.cardAccount.giftCardAccount.pin}</pin>
                  </giftCardAccount>
               </cardAccount>
               <paypalAccount>
                  <id>${#TestCase#account.paypalAccount.id}</id>
               </paypalAccount>
            </account>
         </linkExternalAccountRequest>
      </sch:linkExternalAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/linkExternalAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="linkFile"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>linkFile</con:operation><con:request name="linkFile" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@disable-multipart-attachments">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:linkFile>
         <linkFileRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>${#TestCase#referenceId}</referenceId>
            <file>
               <name>${#TestCase#file.name}</name>
               <fileClass>${#TestCase#file.fileClass}</fileClass>
               <!--Optional:-->
               <url>${#TestCase#file.url}</url>
               <content>${#TestCase#file.content}</content>
               <!--Optional:-->
               <comment>${#TestCase#file.comment}</comment>
            </file>
         </linkFileRequest>
      </sch:linkFile>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/linkFile"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateLinkedExternalAccount"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateLinkedExternalAccount</con:operation><con:request name="updateLinkedExternalAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateLinkedExternalAccount>
         <updateLinkedExternalAccountRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <!--Optional:-->
            <linkedExternalAccountId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#linkedExternalAccountId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#linkedExternalAccountId.subscriberReferenceId}</subscriberReferenceId>
            </linkedExternalAccountId>
            <account>
               <!--You have a CHOICE of the next 4 items at this level-->
               
               
               
               <wireAccount>
                  <bankAccountDetails>
                     <routingNumber>${#TestCase#account.wireAccount.bankAccountDetails.routingNumber}</routingNumber>
                     <accountNumber>${#TestCase#account.wireAccount.bankAccountDetails.accountNumber}</accountNumber>
                     <holderName>${#TestCase#account.wireAccount.bankAccountDetails.holderName}</holderName>
                     <bankAccountType>${#TestCase#account.wireAccount.bankAccountDetails.bankAccountType}</bankAccountType>
                  </bankAccountDetails>
                  <address>
                     <line1>${#TestCase#account.wireAccount.address.line1}</line1>
                     <!--Optional:-->
                     <line2>${#TestCase#account.wireAccount.address.line2}</line2>
                     <city>${#TestCase#account.wireAccount.address.city}</city>
                     <state>${#TestCase#account.wireAccount.address.state}</state>
                     <zipcode>${#TestCase#account.wireAccount.address.zipcode}</zipcode>
                  </address>
               </wireAccount>
            </account>
         </updateLinkedExternalAccountRequest>
      </sch:updateLinkedExternalAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateLinkedExternalAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientLinkedExternalAccounts"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getClientLinkedExternalAccounts</con:operation><con:request name="getClientLinkedExternalAccounts" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getClientLinkedExternalAccounts>
         <getClientLinkedExternalAccountsRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </getClientLinkedExternalAccountsRequest>
      </sch:getClientLinkedExternalAccounts>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClientLinkedExternalAccounts"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="AutomationScript-May14"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

 log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"
/*************** Clearing TC Properties by running script ***************/
 testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/


/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
 String setNo = context.expand('${#Project#SetNo}')
 def TestDataFile = context.expand( '${#Project#TestDataFile}' )
 String APIName = context.expand( '${#Project#APIName}' )
 int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
 String ResposeFileLocation = TestDataFile.substring(0,Length)

  //Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime
  
//Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 
//Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "REQUEST"); //column=0=A,row=0=1
  sheet.addCell(label01);
  
  Label label02 = new Label(2, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
  log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
  log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
  log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
  log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
  log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
  log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return
	}
/*************************************************************************/


/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {

	//Creating fresh request
	  //log.info "          >>>>>>>>>>>  ---Creating fresh request";
	 //testRunner.runTestStepByName("GettingFreshRequest");
		
	 int flagCount = 3
		
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	/**********************Saving original Request******************************/
	
	  log.info "         >>>>>>>>>>  Saving ORIGINAL Request";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils( context )
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	  log.info "      ORIGINAL REQUEST BEFORE REMOVING NODES : "+originalReq2;
	  
    /*****************************************************************************/

	log.info "      >>>>>>>      PropRowCount = "+PropRowCount;

	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			  log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info " >>>>>>>>>>>>>>>>>   key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

			
			 
			 log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}
	 //testRunner.runTestStepByName(APIName);
	  log.info "  >>>>>>>.       after loop - 1";

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";

	 testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);

	 req1 = holder1.getPrettyXml();
	  log.info "    >>>>>>>   REQUEST AFTER SETTING VALUES : "+req1;


	/************************ Remove empty parent tags **************************/

	 log.info" ----------Remove empty parent tags";

	//REMOVING NODES
	  //log.info "    >>    >> holder1 :"+holder1.getPrettyXml();
	 /*
	 for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'null' and count(*) = 0]" ))
	{
				log.info " Null Node = "+item.nodeName;
				//if(items in holder1.getDomNodes( "//*[normalize-space(.) = 'null' and count(*) = 0]")){
					log.info " Null Node = "+item.nodeName;
				//}
				String nodeName = "//"+item.nodeName
				holder1.setNodeValue(nodeName,'');
	}
	*/	
	 /*
 	for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = 'null' and count(*) = 0]" ))
	{
				
			log.info " >>>>>>    Null Node = "+item1.nodeName;
			log.info " >>>>>>    SETTING BLANK VALUE";
			String nodeName = "//"+item1.nodeName;
			holder1.setNodeValue(nodeName,'');

			continue;
		*/	
	 for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
		for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
			{
				if(items in holder1.getDomNodes( "//*[normalize-space(.) = 'null'and count(*) = 0]")){

					log.info " Null Node = "+item.nodeName;
				}
				//log.info "  >>  "+holder1.getNodeValues(item.nodeName);
				log.info ">> removing :: "+ item.nodeName;
				log.info ">> removing :: "+ item.removeXobj();
				//holder1.removeDomNodes("//"+item.nodeName)
				//log.info ">> removing :: "+item.removeXobj();
			}
		}
	//}
	 log.info" >> removed empty parent nodes-------";

 for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'null' and count(*) = 0]" ))
	{
				log.info " Null Node = "+item.nodeName;
				//if(items in holder1.getDomNodes( "//*[normalize-space(.) = 'null' and count(*) = 0]")){
					log.info " Null Node = "+item.nodeName;
				//}
				String nodeName = "//"+item.nodeName;
				log.info " >>>>>. nodeName = "+nodeName;
				holder1.setNodeValue(nodeName,"");
	}
	 log.info" >> setting done for null nodes to blank-------";

	 holder1.updateProperty();
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml())
	 context.requestContent = holder1.xml
	 
	 rawReq=holder1.xml
	  log.info ">>>>    final request : " +rawReq
	  //log.info ">>>>    context.requestContent : " +context.requestContent

	/*****************************************************************************/


	def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils( context )
	//---------Running the API Request
	 testRunner.runTestStepByName(APIName);

	/**************************Restore the original request***********************/
	 
	  log.info "       >>>>>>-------   Setting back to original Request  : "
	  log.info " "+originalReq2;
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	  log.info "       >>>>>>   Original Request restored -----------------";
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder( "${APIName}#Response" )
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
	  log.info ">>>>>>>>>>>response before parse>"+response
    
	//Writing Request and Response on Excell sheet
	  Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	   sheet.addCell(labelRawRequest);
	   
	  Label lableResponse = new Label(2,iCountTestCase,response);
	   sheet.addCell(lableResponse);


     log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info"  xpath : "+xpath2
		ActualResponseValue=holder.getNodeValue(xpath2);
		 log.info("  Value for "+xpath2+" is : "+ActualResponseValue);

		 log.info "    >>>>    Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "    >>>>   Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
							
				log.info"TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue
					continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents()
		 log.info" type = "+ TYPE;

			try
			{
				log.info " ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "    >>>>   DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				 log.info" TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			    sheet.addCell(label6);
				flagCount = flagCount+1
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "param not null is >>"+ResponseFromTestData
			 log.info"counter1"+iCounter1

			String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
			 log.info"xpath : "+xpath1
			ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("AcualResponse datatype"+ActualResponseValue.getClass())
			 log.info("ExcelResponse datatype"+ResponseFromTestData.getClass())


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1
				log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
			  }

		}
	}

	if(flagCount==3)
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			 log.info  "          >>>>>else loop - flagCount "+flagCount
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "          >>>>>else loop - flagCount "+flagCount
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	 log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 log.info "          >>>>>>>>>>>  //Creating fresh request";
	testRunner.runTestStepByName("GettingFreshRequest");
		

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()]]></script></con:config></con:testStep><con:testStep type="request" name="sendFunds"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>sendFunds</con:operation><con:request name="sendFunds" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>Mikkyjb</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:sendFunds>
         <sendFundsRequest>
            <subscriberId>200241</subscriberId>
            <method>
               <!--You have a CHOICE of the next 7 items at this level-->
               <book>BLANK</book>
            </method>
            <sourceAccount>
               <!--Optional:-->
               <bancBoxId>540241100002</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>2222</subscriberReferenceId>
            </sourceAccount>
            <destination>
               <!--You have a CHOICE of the next 6 items at this level-->
               <account>
                  <!--Optional:-->
                  <!--Optional:-->
                  <subscriberReferenceId>BLANK</subscriberReferenceId>
               </account>
            </destination>
            <!--Optional:-->
            <!--Optional:-->
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <!--Optional:-->
               <memo>testUser</memo>
               <amount>1</amount>
               <!--Optional:-->
            </items>
         </sendFundsRequest>
      </sch:sendFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/sendFunds"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createMerchant-COPY"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createMerchant</con:operation><con:request name="createMerchant-COPY" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <firstName>${#TestCase#firstName}</firstName>
            <lastName>${#TestCase#lastName}</lastName>
            <ssn>${#TestCase#ssn}</ssn>
            <dob>${#TestCase#dob}</dob>
            <!--Optional:-->
            <email>${#TestCase#email}</email>
            <address>
               <address1>${#TestCase#address.address1}</address1>
               <!--Optional:-->
               <address2>${#TestCase#address.address2}</address2>
               <city>${#TestCase#address.city}</city>
               <state>${#TestCase#address.state}</state>
               <zipcode>${#TestCase#address.zipcode}</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber>${#TestCase#bankBusinessAccount.routingNumber}</routingNumber>
               <accountNumber>${#TestCase#bankBusinessAccount.accountNumber}</accountNumber>
               <holderName>${#TestCase#bankBusinessAccount.holderName}</holderName>
               <bankAccountType>${#TestCase#bankBusinessAccount.bankAccountType}</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>${#TestCase#merchantDetails.merchantCategoryCode}</merchantCategoryCode>
               <maxTransactionAmount>${#TestCase#merchantDetails.maxTransactionAmount}</maxTransactionAmount>
               <customerServiceNumber>${#TestCase#merchantDetails.customerServiceNumber}</customerServiceNumber>
               <!--Optional:-->
               <amexId>${#TestCase#merchantDetails.amexId}</amexId>
               <!--Optional:-->
               <discoverId>${#TestCase#merchantDetails.discoverId}</discoverId>
               <softDescriptor>${#TestCase#merchantDetails.softDescriptor}</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>${#TestCase#primaryContact.firstName}</firstName>
               <lastName>${#TestCase#primaryContact.lastName}</lastName>
               <phone>${#TestCase#primaryContact.phone}</phone>
               <emailAddress>${#TestCase#primaryContact.emailAddress}</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>${#TestCase#hasAcceptedCreditCards}</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>${#TestCase#visaAnnualSalesVolume}</visaAnnualSalesVolume>
            <organizationType>${#TestCase#organizationType}</organizationType>
            <!--Optional:-->
            <taxId>${#TestCase#taxId}</taxId>
            <!--Optional:-->
            <setAsDefaultMerchantId>${#TestCase#setAsDefaultMerchantId}</setAsDefaultMerchantId>
         </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createMerchantRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="sendFunds-COPY"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>sendFunds</con:operation><con:request name="sendFunds-COPY" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:sendFunds>
         <sendFundsRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <method>
               <!--You have a CHOICE of the next 7 items at this level-->
               
               
               <check>
                  <type>${#TestCase#method.check.type}</type>
               </check>
               
               
               
               
            </method>
            <sourceAccount>
               <!--Optional:-->
               <bancBoxId>${#TestCase#sourceAccount.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#sourceAccount.subscriberReferenceId}</subscriberReferenceId>
            </sourceAccount>
            <destination>
               <!--You have a CHOICE of the next 6 items at this level-->
               
               
               
               
               <newPayee>
                  <payeeAccountNumber>${#TestCase#destination.newPayee.payeeAccountNumber}</payeeAccountNumber>
                  <!--Optional:-->
                  <memo>${#TestCase#destination.newPayee.memo}</memo>
                  <payee>
                     <!--You have a CHOICE of the next 4 items at this level-->
                     
                     
                     <check>
                        <name>${#TestCase#destination.newPayee.payee.check.name}</name>
                        <address>
                           <line1>${#TestCase#destination.newPayee.payee.check.address.line1}</line1>
                           <!--Optional:-->
                           <line2>${#TestCase#destination.newPayee.payee.check.address.line2}</line2>
                           <city>${#TestCase#destination.newPayee.payee.check.address.city}</city>
                           <state>${#TestCase#destination.newPayee.payee.check.address.state}</state>
                           <zipcode>${#TestCase#destination.newPayee.payee.check.address.zipcode}</zipcode>
                        </address>
                     </check>
                     
                  </payee>
               </newPayee>
               
            </destination>
            <!--Optional:-->
            <payeeAccountNumber>${#TestCase#payeeAccountNumber}</payeeAccountNumber>
            <!--Optional:-->
            <memo>${#TestCase#memo}</memo>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <referenceId>${#TestCase#items.referenceId}</referenceId>
               <!--Optional:-->
               <memo>${#TestCase#items.memo}</memo>
               <amount>${#TestCase#items.amount}</amount>
               <!--Optional:-->
               <scheduled>
                  <scheduleDate>${#TestCase#items.scheduled.scheduleDate}</scheduleDate>
               </scheduled>
            </items>
         </sendFundsRequest>
      </sch:sendFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/sendFunds"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientLinkedPayees"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getClientLinkedPayees</con:operation><con:request name="getClientLinkedPayees" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getClientLinkedPayees>
         <getClientLinkedPayeesRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </getClientLinkedPayeesRequest>
      </sch:getClientLinkedPayees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClientLinkedPayees"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="deleteLinkedPayee"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>deleteLinkedPayee</con:operation><con:request name="deleteLinkedPayee" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:deleteLinkedPayee>
         <deleteLinkedPayeeRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <linkedPayeeId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#linkedPayeeId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#linkedPayeeId.subscriberReferenceId}</subscriberReferenceId>
            </linkedPayeeId>
         </deleteLinkedPayeeRequest>
      </sch:deleteLinkedPayee>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/deleteLinkedPayee"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="deleteLinkedExternalAccount"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>deleteLinkedExternalAccount</con:operation><con:request name="deleteLinkedExternalAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:deleteLinkedExternalAccount>
         <deleteLinkedExternalAccountRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <linkedExternalAccountId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#linkedExternalAccountId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#linkedExternalAccountId.subscriberReferenceId}</subscriberReferenceId>
            </linkedExternalAccountId>
         </deleteLinkedExternalAccountRequest>
      </sch:deleteLinkedExternalAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/deleteLinkedExternalAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="returnFund"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>returnFund</con:operation><con:request name="returnFund" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:returnFund>
         <returnFund>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <scheduleId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#scheduleId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#scheduleId.subscriberReferenceId}</subscriberReferenceId>
            </scheduleId>
            <!--Optional:-->
            <reasonForRefund>${#TestCase#reasonForRefund}</reasonForRefund>
         </returnFund>
      </sch:returnFund>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/returnFund"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="collectFunds"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>collectFunds</con:operation><con:request name="collectFunds" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@inline-response-attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <!--Optional:-->
            <sessionId>${#TestCase#sessionId}</sessionId>
            <!--Optional:-->
            <merchantId>${#TestCase#merchantId}</merchantId>
            <method>
               <!--You have a CHOICE of the next 3 items at this level-->
               <book>${#TestCase#method.book}</book>
               <ach>${#TestCase#method.ach}</ach>
               <creditcard>${#TestCase#method.creditcard}</creditcard>
            </method>
            <source>
               <!--You have a CHOICE of the next 3 items at this level-->
               <account>
                  <!--Optional:-->
                  <bancBoxId>${#TestCase#source.account.bancBoxId}</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>${#TestCase#source.account.subscriberReferenceId}</subscriberReferenceId>
               </account>
               <linkedExternalAccountId>
                  <!--Optional:-->
                  <bancBoxId>${#TestCase#source.linkedExternalAccountId.bancBoxId}</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>${#TestCase#source.linkedExternalAccountId.subscriberReferenceId}</subscriberReferenceId>
               </linkedExternalAccountId>
               <newExternalAccount>
                  <account>
                     <!--You have a CHOICE of the next 2 items at this level-->
                     <bankAccount>
                        <routingNumber>${#TestCase#source.newExternalAccount.account.bankAccount.routingNumber}</routingNumber>
                        <accountNumber>${#TestCase#source.newExternalAccount.account.bankAccount.accountNumber}</accountNumber>
                        <holderName>${#TestCase#source.newExternalAccount.account.bankAccount.holderName}</holderName>
                        <bankAccountType>${#TestCase#source.newExternalAccount.account.bankAccount.bankAccountType}</bankAccountType>
                     </bankAccount>
                     <creditCardAccount>
                        <!--You have a CHOICE of the next 2 items at this level-->
                        <cardPresent>
                           <trackdata>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardPresent.trackdata}</trackdata>
                           <!--Optional:-->
                           <pos>
                              <capability>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardPresent.pos.capability}</capability>
                              <entryMode>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardPresent.pos.entryMode}</entryMode>
                              <cardholderId>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardPresent.pos.cardholderId}</cardholderId>
                              <!--Optional:-->
                              <terminalId>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardPresent.pos.terminalId}</terminalId>
                           </pos>
                           <!--Optional:-->
                           <orderSource>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardPresent.orderSource}</orderSource>
                        </cardPresent>
                        <cardNotPresent>
                           <!--You have a CHOICE of the next 2 items at this level-->
                           <tokenizedId>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardNotPresent.tokenizedId}</tokenizedId>
                           <creditCardDetails>
                              <number>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardNotPresent.creditCardDetails.number}</number>
                              <expiryDate>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardNotPresent.creditCardDetails.expiryDate}</expiryDate>
                              <type>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardNotPresent.creditCardDetails.type}</type>
                              <name>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardNotPresent.creditCardDetails.name}</name>
                              <cvv>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardNotPresent.creditCardDetails.cvv}</cvv>
                              <address>
                                 <line1>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardNotPresent.creditCardDetails.address.line1}</line1>
                                 <!--Optional:-->
                                 <line2>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardNotPresent.creditCardDetails.address.line2}</line2>
                                 <city>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardNotPresent.creditCardDetails.address.city}</city>
                                 <state>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardNotPresent.creditCardDetails.address.state}</state>
                                 <zipcode>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardNotPresent.creditCardDetails.address.zipcode}</zipcode>
                                 <!--Optional:-->
                                 <country>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardNotPresent.creditCardDetails.address.country}</country>
                              </address>
                              <!--Optional:-->
                              <orderSource>${#TestCase#source.newExternalAccount.account.creditCardAccount.cardNotPresent.creditCardDetails.orderSource}</orderSource>
                           </creditCardDetails>
                        </cardNotPresent>
                     </creditCardAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account>
                  <!--Optional:-->
                  <bancBoxId>${#TestCase#destinationAccount.account.bancBoxId}</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>${#TestCase#destinationAccount.account.subscriberReferenceId}</subscriberReferenceId>
               </account>
               <subscriberNamedAccount>${#TestCase#destinationAccount.subscriberNamedAccount}</subscriberNamedAccount>
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <referenceId>${#TestCase#items.referenceId}</referenceId>
               <amount>${#TestCase#items.amount}</amount>
               <!--Optional:-->
               <memo>${#TestCase#items.memo}</memo>
               <!--Optional:-->
               <scheduled>
                  <scheduleDate>${#TestCase#items.scheduled.scheduleDate}</scheduleDate>
               </scheduled>
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFunds"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateSchedule"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateSchedule</con:operation><con:request name="updateSchedule" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateSchedule>
         <updateScheduleRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <activity>
               <!--Optional:-->
               <bancBoxId>${#TestCase#activity.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#activity.subscriberReferenceId}</subscriberReferenceId>
            </activity>
            <rescheduleDate>${#TestCase#rescheduleDate}</rescheduleDate>
         </updateScheduleRequest>
      </sch:updateSchedule>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateScheduleRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getSchedules"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getSchedules</con:operation><con:request name="getSchedules" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getSchedules>
         <getSchedulesRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <!--Optional:-->
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <accountId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#accountId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#accountId.subscriberReferenceId}</subscriberReferenceId>
            </accountId>
            <!--Optional:-->
            <type>${#TestCase#type}</type>
            <!--Optional:-->
            <scheduleId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#scheduleId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#scheduleId.subscriberReferenceId}</subscriberReferenceId>
            </scheduleId>
            <!--Optional:-->
            <scheduleStartDate>${#TestCase#scheduleStartDate}</scheduleStartDate>
            <!--Optional:-->
            <scheduleEndDate>${#TestCase#scheduleEndDate}</scheduleEndDate>
            <!--Optional:-->
            <modifiedOnStartDate>${#TestCase#modifiedOnStartDate}</modifiedOnStartDate>
            <!--Optional:-->
            <modifiedOnEndDate>${#TestCase#modifiedOnEndDate}</modifiedOnEndDate>
            <!--Optional:-->
            <fromAmount>${#TestCase#fromAmount}</fromAmount>
            <!--Optional:-->
            <toAmount>${#TestCase#toAmount}</toAmount>
            <!--Optional:-->
            <method>${#TestCase#method}</method>
            <!--Optional:-->
            <status>${#TestCase#status}</status>
            <!--Optional:-->
            <order>${#TestCase#order}</order>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </getSchedulesRequest>
      </sch:getSchedules>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getSchedules"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="cancelSchedules-COPY"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>cancelSchedules</con:operation><con:request name="cancelSchedules-COPY" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:cancelSchedules>
         <cancelSchedulesRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <!--1 or more repetitions:-->
            <scheduleIds>
               <!--Optional:-->
               <bancBoxId>${#TestCase#scheduleIds.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#scheduleIds.subscriberReferenceId}</subscriberReferenceId>
            </scheduleIds>
         </cancelSchedulesRequest>
      </sch:cancelSchedules>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/cancelSchedules"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="searchBancBoxPayees-OLD"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>searchBancBoxPayees</con:operation><con:request name="searchBancBoxPayees-OLD" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:searchBancBoxPayees>
         <searchBancBoxPayeesRequest>
            <!--Optional:-->
            <payeeName>${#TestCase#payeeName}</payeeName>
            <!--Optional:-->
            <accountNumber>${#TestCase#accountNumber}</accountNumber>
            <!--Optional:-->
            <billerClass>${#TestCase#billerClass}</billerClass>
            <!--Optional:-->
            <billerType>${#TestCase#billerType}</billerType>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </searchBancBoxPayeesRequest>
      </sch:searchBancBoxPayees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/searchBancBoxPayees"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="verifyClientManually"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>verifyClientManually</con:operation><con:request name="verifyClientManually" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:verifyClientManually>
         <verifyClientManually>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <status>
               <!--Optional:-->
               <newCipStatus>${#TestCase#status.newCipStatus}</newCipStatus>
               <!--Optional:-->
               <newOfacStatus>${#TestCase#status.newOfacStatus}</newOfacStatus>
            </status>
         </verifyClientManually>
      </sch:verifyClientManually>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/verifyClientManually"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateMerchantStatus"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateMerchantStatus</con:operation><con:request name="updateMerchantStatus" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateMerchantStatus>
         <updateMerchantStatusRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <merchantId>${#TestCase#merchantId}</merchantId>
            <merchantStatus>${#TestCase#merchantStatus}</merchantStatus>
         </updateMerchantStatusRequest>
      </sch:updateMerchantStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateMerchantStatusRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getAccountActivity"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getAccountActivity</con:operation><con:request name="getAccountActivity" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getAccountActivity>
         <getAccountActivityRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <accountId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#accountId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#accountId.subscriberReferenceId}</subscriberReferenceId>
            </accountId>
            <!--Optional:-->
            <fromDate>${#TestCase#fromDate}</fromDate>
            <!--Optional:-->
            <toDate>${#TestCase#toDate}</toDate>
            <!--Optional:-->
            <type>${#TestCase#type}</type>
            <!--Optional:-->
            <method>${#TestCase#method}</method>
            <!--Optional:-->
            <fromAmount>${#TestCase#fromAmount}</fromAmount>
            <!--Optional:-->
            <toAmount>${#TestCase#toAmount}</toAmount>
            <!--Optional:-->
            <status>${#TestCase#status}</status>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </getAccountActivityRequest>
      </sch:getAccountActivity>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getAccountActivity"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="submitVerificationAnswers"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>submitVerificationAnswers</con:operation><con:request name="submitVerificationAnswers" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:submitVerificationAnswers>
         <submitVerificationAnswers>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <idNumber>${#TestCase#idNumber}</idNumber>
            <!--Zero or more repetitions:-->
            <answers>
               <type>${#TestCase#answers.type}</type>
               <answer>${#TestCase#answers.answer}</answer>
            </answers>
         </submitVerificationAnswers>
      </sch:submitVerificationAnswers>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/submitVerificationAnswers"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateLinkedPayee"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateLinkedPayee</con:operation><con:request name="updateLinkedPayee" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateLinkedPayee>
         <updateLinkedPayeeRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <linkedPayeeId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#linkedPayeeId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#linkedPayeeId.subscriberReferenceId}</subscriberReferenceId>
            </linkedPayeeId>
            <!--Optional:-->
            <payeeAccountNumber>${#TestCase#payeeAccountNumber}</payeeAccountNumber>
            <!--Optional:-->
            <memo>${#TestCase#memo}</memo>
            <payee>
               <!--You have a CHOICE of the next 5 items at this level-->
               <ach>
                  <routingNumber>${#TestCase#payee.ach.routingNumber}</routingNumber>
                  <accountNumber>${#TestCase#payee.ach.accountNumber}</accountNumber>
                  <holderName>${#TestCase#payee.ach.holderName}</holderName>
                  <bankAccountType>${#TestCase#payee.ach.bankAccountType}</bankAccountType>
               </ach>
               <paypal>
                  <id>${#TestCase#payee.paypal.id}</id>
               </paypal>
               <check>
                  <name>${#TestCase#payee.check.name}</name>
                  <address>
                     <line1>${#TestCase#payee.check.address.line1}</line1>
                     <!--Optional:-->
                     <line2>${#TestCase#payee.check.address.line2}</line2>
                     <city>${#TestCase#payee.check.address.city}</city>
                     <state>${#TestCase#payee.check.address.state}</state>
                     <zipcode>${#TestCase#payee.check.address.zipcode}</zipcode>
                  </address>
               </check>
               <bancbox>
                  <bancboxPayeeId>${#TestCase#payee.bancbox.bancboxPayeeId}</bancboxPayeeId>
               </bancbox>
               <wire>
                  <bankAccountDetails>
                     <routingNumber>${#TestCase#payee.wire.bankAccountDetails.routingNumber}</routingNumber>
                     <accountNumber>${#TestCase#payee.wire.bankAccountDetails.accountNumber}</accountNumber>
                     <holderName>${#TestCase#payee.wire.bankAccountDetails.holderName}</holderName>
                     <bankAccountType>${#TestCase#payee.wire.bankAccountDetails.bankAccountType}</bankAccountType>
                  </bankAccountDetails>
                  <address>
                     <line1>${#TestCase#payee.wire.address.line1}</line1>
                     <!--Optional:-->
                     <line2>${#TestCase#payee.wire.address.line2}</line2>
                     <city>${#TestCase#payee.wire.address.city}</city>
                     <state>${#TestCase#payee.wire.address.state}</state>
                     <zipcode>${#TestCase#payee.wire.address.zipcode}</zipcode>
                  </address>
               </wire>
            </payee>
         </updateLinkedPayeeRequest>
      </sch:updateLinkedPayee>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateLinkedPayee"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="AutomationScript-May26"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

log.info "*************************************************  STARTING CORE AUTOMATION DRIVER *************************************************";
/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/



/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}');
def TestDataFile = context.expand( '${#Project#TestDataFile}');
String APIName = context.expand( '${#Project#APIName}');
String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
log.info "		>>>>		==============================="
int Length =  TestDataFile.lastIndexOf('\\');
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResposeFileLocation = TestDataFile.substring(0,Length);

//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls";
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResponseFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
WritableSheet sheet = workbook.createSheet("Response",0);

Label label00 = new Label(0, 0, "TCID"); 
sheet.addCell(label00);

Label label01 = new Label(1, 0, "REQUEST"); 
sheet.addCell(label01);
  
Label label02 = new Label(2, 0, "RESPONSE"); 
sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();
 //log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {
//Variable to store the xPath of nodes to set to blank
List<String> xmlTagToSetBlank = new ArrayList<String>();

	 int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+setNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/

	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='null')
				{
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
	 for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
		for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
			{
				if(items in holder1.getDomNodes( "//*[normalize-space(.) = 'null'and count(*) = 0]")){

					log.info " Null Node = "+item.nodeName;
				}
				//log.info "  >>  "+holder1.getNodeValues(item.nodeName);
				log.info ">> removing :: "+ item.nodeName;
				log.info ">> removing :: "+ item.removeXobj();
				//holder1.removeDomNodes("//"+item.removeXobj())
				//log.info ">> removing :: "+item.removeXobj();
			}
		}
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }


int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
log.info "		>>>>		ArrayList Cleared";
	 holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	  if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 //holder1.updateProperty();
	 log.info "		>>>>		Final Request : " +rawReq2;
	  //log.info ">>>>    context.requestContent : " +context.requestContent
	 }
	/*****************************************************************************/


	def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);

	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	

	// def inputHolder1 = APIName+"#Request";
	// def groovyUtilOrg1 = new com.eviware.soapui.support.GroovyUtils( context )
	// originalReq1 = groovyUtilOrg1.getXmlHolder(inputHolder1);
	// rawReq = originalReq.getPrettyXml();
	
	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info " ";
	//log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq2);
	  		sheet.addCell(labelRawRequest);
	 	}
	 	else{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}
	
	  Label lableResponse = new Label(2,iCountTestCase,response);
	  sheet.addCell(lableResponse);


     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounter1;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==3)
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	


}

workbook.write();
workbook.close();

log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationScript-May27"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

log.info "*************************************************  STARTING CORE AUTOMATION DRIVER *************************************************";
/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/



/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}');
def TestDataFile = context.expand( '${#Project#TestDataFile}');
String APIName = context.expand( '${#Project#APIName}');
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";
log.info "		>>>>		==============================="
int Length =  TestDataFile.lastIndexOf('\\');
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResposeFileLocation = TestDataFile.substring(0,Length);

//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls";
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResponseFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
WritableSheet sheet = workbook.createSheet("Response",0);

Label label00 = new Label(0, 0, "TCID"); 
sheet.addCell(label00);

Label label01 = new Label(1, 0, "REQUEST"); 
sheet.addCell(label01);
  
Label label02 = new Label(2, 0, "RESPONSE"); 
sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();
 //log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {
//Variable to store the xPath of nodes to set to blank
List<String> xmlTagToSetBlank = new ArrayList<String>();

	 int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+setNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/

	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='null')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
	 for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
		for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
			{
				if(items in holder1.getDomNodes( "//*[normalize-space(.) = 'null'and count(*) = 0]")){

					log.info " Null Node = "+item.nodeName;
				}
				//log.info "  >>  "+holder1.getNodeValues(item.nodeName);
				log.info ">> removing :: "+ item.nodeName;
				log.info ">> removing :: "+ item.removeXobj();
				//holder1.removeDomNodes("//"+item.removeXobj());
				//holder1.removeDomNodes("//"+item.nodeName);
				//holder1.item.removeXobj();
				//holder1.removeDomNodes("//"+item.nodeName);
				
				//log.info ">> removing :: "+item.removeXobj();
			}
		}
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }


int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
log.info "		>>>>		ArrayList Cleared";
	 holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	  if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);

	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	  
	 }
	/*****************************************************************************/


	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";

def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);

	// def inputHolder1 = APIName+"#Request";
	// def groovyUtilOrg1 = new com.eviware.soapui.support.GroovyUtils( context )
	// originalReq1 = groovyUtilOrg1.getXmlHolder(inputHolder1);
	// rawReq = originalReq.getPrettyXml();
	
	def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	rawReq=holder22.getXml();
	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq2);
	  		sheet.addCell(labelRawRequest);
	 	}
	 	else{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}
	
	  Label lableResponse = new Label(2,iCountTestCase,response);
	  sheet.addCell(lableResponse);


     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounter1;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==3)
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	


}

workbook.write();
workbook.close();

log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationScript-May27-2"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

log.info "*************************************************  STARTING CORE AUTOMATION DRIVER *************************************************";
/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/



/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}');
def TestDataFile = context.expand( '${#Project#TestDataFile}');
String APIName = context.expand( '${#Project#APIName}');
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";
log.info "		>>>>		==============================="
int Length =  TestDataFile.lastIndexOf('\\');
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResposeFileLocation = TestDataFile.substring(0,Length);

//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls";
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResponseFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
WritableSheet sheet = workbook.createSheet("Response",0);

Label label00 = new Label(0, 0, "TCID"); 
sheet.addCell(label00);

Label label01 = new Label(1, 0, "REQUEST"); 
sheet.addCell(label01);
  
Label label02 = new Label(2, 0, "RESPONSE"); 
sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();
 //log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {
//Variable to store the xPath of nodes to set to blank
List<String> xmlTagToSetBlank = new ArrayList<String>();

	 int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+setNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/

	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='null')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
	
	 for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" )){
   item.removeXobj();
   
}
	 
	 /*
	 for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
		for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
			{
				if(items in holder1.getDomNodes( "//*[normalize-space(.) = 'null'and count(*) = 0]")){

					log.info " Null Node = "+item.nodeName;
				}
				//log.info "  >>  "+holder1.getNodeValues(item.nodeName);
				log.info ">> removing :: "+ item.nodeName;
				log.info ">> removing :: "+ item.removeXobj();
				//holder1.removeDomNodes("//"+item.removeXobj())
				//log.info ">> removing :: "+item.removeXobj();
			}
		}
		*/
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }


int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
log.info "		>>>>		ArrayList Cleared";
	 holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	  if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	  
	 }
	/*****************************************************************************/


	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";

def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);

	// def inputHolder1 = APIName+"#Request";
	// def groovyUtilOrg1 = new com.eviware.soapui.support.GroovyUtils( context )
	// originalReq1 = groovyUtilOrg1.getXmlHolder(inputHolder1);
	// rawReq = originalReq.getPrettyXml();
	
	def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	rawReq=holder22.getXml();
	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq2);
	  		sheet.addCell(labelRawRequest);
	 	}
	 	else{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}
	
	  Label lableResponse = new Label(2,iCountTestCase,response);
	  sheet.addCell(lableResponse);


     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounter1;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==3)
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	


}

workbook.write();
workbook.close();

log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationScript-May28"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

log.info "*************************************************  STARTING CORE AUTOMATION DRIVER *************************************************";
/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/



/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}');
def TestDataFile = context.expand( '${#Project#TestDataFile}');
String APIName = context.expand( '${#Project#APIName}');
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";
log.info "		>>>>		==============================="
int Length =  TestDataFile.lastIndexOf('\\');
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResposeFileLocation = TestDataFile.substring(0,Length);

//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls";
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResponseFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
WritableSheet sheet = workbook.createSheet("Response",0);

Label label00 = new Label(0, 0, "TCID"); 
sheet.addCell(label00);

Label label01 = new Label(1, 0, "REQUEST"); 
sheet.addCell(label01);
  
Label label02 = new Label(2, 0, "RESPONSE"); 
sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();
 //log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {
//Variable to store the xPath of nodes to set to blank
List<String> xmlTagToSetBlank = new ArrayList<String>();

	 int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+setNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/

	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	/*
	 for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" )){
   item.removeXobj()
   
    for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" )){
    items.removeXobj();
    }
}*/
	 
	 /*
	 for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
		for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
			{
				if(items in holder1.getDomNodes( "//*[normalize-space(.) = 'null'and count(*) = 0]")){

					log.info " Null Node = "+item.nodeName;
				}
				//log.info "  >>  "+holder1.getNodeValues(item.nodeName);
				log.info ">> removing :: "+ item.nodeName;
				log.info ">> removing :: "+ item.removeXobj();
				//holder1.removeDomNodes("//"+item.removeXobj())
				//log.info ">> removing :: "+item.removeXobj();
			}
		}
		*/
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }

/*
int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
*/

for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
}

holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	 
rawReq=holder1.getXml();

	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/


	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";

def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);

	// def inputHolder1 = APIName+"#Request";
	// def groovyUtilOrg1 = new com.eviware.soapui.support.GroovyUtils( context )
	// originalReq1 = groovyUtilOrg1.getXmlHolder(inputHolder1);
	// rawReq = originalReq.getPrettyXml();
	
	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//rawReq=holder1.getXml();
	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq2);
	  		sheet.addCell(labelRawRequest);
	 	}
	 	else{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}
	
	  Label lableResponse = new Label(2,iCountTestCase,response);
	  sheet.addCell(lableResponse);


     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounter1;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==3)
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	


}

workbook.write();
workbook.close();

log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationScript-June16"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

log.info "*************************************************  STARTING CORE AUTOMATION DRIVER *************************************************";
/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}');
def TestDataFile = context.expand( '${#Project#TestDataFile}');
String APIName = context.expand( '${#Project#APIName}');
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";
log.info "		>>>>		==============================="
int Length =  TestDataFile.lastIndexOf('\\');
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResposeFileLocation = TestDataFile.substring(0,Length);

//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls";
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResponseFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
WritableSheet sheet = workbook.createSheet("Response",0);

Label label00 = new Label(0, 0, "TCID"); 
sheet.addCell(label00);

Label label01 = new Label(1, 0, "REQUEST"); 
sheet.addCell(label01);
  
Label label02 = new Label(2, 0, "RESPONSE"); 
sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();
 //log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {
//Variable to store the xPath of nodes to set to blank
List<String> xmlTagToSetBlank = new ArrayList<String>();

	 int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+setNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/

	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }



for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}

holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	 
rawReq=holder1.getXml();

	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/


	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";

def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq2);
	  		sheet.addCell(labelRawRequest);
	 	}
	 	else{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}
	
	 // Label lableResponse = new Label(2,iCountTestCase,response);
	 // sheet.addCell(lableResponse);


	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCountTestCase,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(2,iCountTestCase,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	Label labelRequest = new Label(1,iCountTestCase,rawReq);
	   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(2,iCountTestCase,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 
	  
	  
	  
	  
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounter1;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(3+iDivisionCount))
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;
}
//for loop end for test case
workbook.write();
workbook.close();

log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="SetReqProp"><con:settings/><con:config><script>String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
log.info "  >> propValue >> "+subscriberIdValue;
testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);
 //testRunner.testCase.setPropertyValue(key,value);

/*
String APIName = "updateLinkedExternalAccount";

testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200301');
testRunner.runTestStepByName(APIName);
*/</script></con:config></con:testStep><con:testStep type="request" name="Copy of createMerchant"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createMerchant</con:operation><con:request name="Copy of createMerchant" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
          <createMerchantRequest> 
            <subscriberId>200300</subscriberId> 
            <firstName>Abhim</firstName> 
            <lastName>Bhati</lastName> 
            
            <!--Optional:--> 
            <email>Abhimanyu.1test@bancbox.com</email> 
            <address> 
               <address1>31 Main St.</address1> 
               <!--Optional:--> 
               <address2>451</address2> 
               <city>kol</city> 
               <state>NY</state> 
               <zipcode>11111</zipcode> 
            </address> 
            <bankBusinessAccount> 
               <routingNumber>051000017</routingNumber> 
               <accountNumber>8878787879891111</accountNumber> 
               <holderName>ABHIMANYU</holderName> 
               <bankAccountType>SAVING</bankAccountType> 
            </bankBusinessAccount> 
            <merchantDetails> 
               <merchantCategoryCode>7399</merchantCategoryCode> 
               <maxTransactionAmount>9</maxTransactionAmount> 
               <customerServiceNumber>6787678911</customerServiceNumber> 
               <!--Optional:--> 
               <amexId>2042730143</amexId> 
               
               <softDescriptor>BBXTEST</softDescriptor> 
            </merchantDetails> 
            <primaryContact> 
               <firstName>ii</firstName> 
               <lastName>yy</lastName> 
               <phone>6789879878</phone> 
               <emailAddress>Abhimanyu.1test@bancbox.com</emailAddress> 
            </primaryContact> 
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards> 
            <visaAnnualSalesVolume>500</visaAnnualSalesVolume> 
            <organizationType>CORPORATION</organizationType> 
            <!--Optional:--> 
            <taxId>wsuu33w</taxId> 
            <!--Optional:--> 
            <setAsDefaultMerchantId>true</setAsDefaultMerchantId> 
         </createMerchantRequest> 
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createMerchantRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createMerchant"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createMerchant</con:operation><con:request name="createMerchant"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <firstName>${#TestCase#firstName}</firstName>
            <lastName>${#TestCase#lastName}</lastName>
            <ssn>${#TestCase#ssn}</ssn>
            <dob>${#TestCase#dob}</dob>
            <!--Optional:-->
            <email>${#TestCase#email}</email>
            <address>
               <address1>${#TestCase#address.address1}</address1>
               <!--Optional:-->
               <address2>${#TestCase#address.address2}</address2>
               <city>${#TestCase#address.city}</city>
               <state>${#TestCase#address.state}</state>
               <zipcode>${#TestCase#address.zipcode}</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber>${#TestCase#bankBusinessAccount.routingNumber}</routingNumber>
               <accountNumber>${#TestCase#bankBusinessAccount.accountNumber}</accountNumber>
               <holderName>${#TestCase#bankBusinessAccount.holderName}</holderName>
               <bankAccountType>${#TestCase#bankBusinessAccount.bankAccountType}</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>${#TestCase#merchantDetails.merchantCategoryCode}</merchantCategoryCode>
               <maxTransactionAmount>${#TestCase#merchantDetails.maxTransactionAmount}</maxTransactionAmount>
               <customerServiceNumber>${#TestCase#merchantDetails.customerServiceNumber}</customerServiceNumber>
               <!--Optional:-->
               <amexId>${#TestCase#merchantDetails.amexId}</amexId>
               <!--Optional:-->
               <discoverId>${#TestCase#merchantDetails.discoverId}</discoverId>
               <softDescriptor>${#TestCase#merchantDetails.softDescriptor}</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>${#TestCase#primaryContact.firstName}</firstName>
               <lastName>${#TestCase#primaryContact.lastName}</lastName>
               <phone>${#TestCase#primaryContact.phone}</phone>
               <emailAddress>${#TestCase#primaryContact.emailAddress}</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>${#TestCase#hasAcceptedCreditCards}</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>${#TestCase#visaAnnualSalesVolume}</visaAnnualSalesVolume>
            <organizationType>${#TestCase#organizationType}</organizationType>
            <!--Optional:-->
            <taxId>${#TestCase#taxId}</taxId>
            <!--Optional:-->
            <setAsDefaultMerchantId>${#TestCase#setAsDefaultMerchantId}</setAsDefaultMerchantId>
         </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateMerchant"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateMerchant</con:operation><con:request name="updateMerchant"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateMerchant>
         <updateMerchantRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <merchantId>${#TestCase#merchantId}</merchantId>
            <!--Optional:-->
            <address>
               <address1>${#TestCase#address.address1}</address1>
               <!--Optional:-->
               <address2>${#TestCase#address.address2}</address2>
               <city>${#TestCase#address.city}</city>
               <state>${#TestCase#address.state}</state>
               <zipcode>${#TestCase#address.zipcode}</zipcode>
            </address>
            <!--Optional:-->
            <primaryContact>
               <firstName>${#TestCase#primaryContact.firstName}</firstName>
               <lastName>${#TestCase#primaryContact.lastName}</lastName>
               <phone>${#TestCase#primaryContact.phone}</phone>
               <emailAddress>${#TestCase#primaryContact.emailAddress}</emailAddress>
            </primaryContact>
            <!--Optional:-->
            <bankBusinessAccount>
               <routingNumber>${#TestCase#bankBusinessAccount.routingNumber}</routingNumber>
               <accountNumber>${#TestCase#bankBusinessAccount.accountNumber}</accountNumber>
            </bankBusinessAccount>
            <!--Optional:-->
            <merchantDetails>
               <!--Optional:-->
               <maxTransactionAmount>${#TestCase#merchantDetails.maxTransactionAmount}</maxTransactionAmount>
               <!--Optional:-->
               <customerServiceNumber>${#TestCase#merchantDetails.customerServiceNumber}</customerServiceNumber>
               <!--Optional:-->
               <amexId>${#TestCase#merchantDetails.amexId}</amexId>
               <!--Optional:-->
               <discoverId>${#TestCase#merchantDetails.discoverId}</discoverId>
               <!--Optional:-->
               <softDescriptor>${#TestCase#merchantDetails.softDescriptor}</softDescriptor>
            </merchantDetails>
            <!--Optional:-->
            <setAsDefaultMerchantId>${#TestCase#setAsDefaultMerchantId}</setAsDefaultMerchantId>
         </updateMerchantRequest>
      </sch:updateMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="linkExternalAccount"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>linkExternalAccount</con:operation><con:request name="linkExternalAccount"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:linkExternalAccount>
         <linkExternalAccountRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>${#TestCase#referenceId}</referenceId>
            <account>
               <!--You have a CHOICE of the next 4 items at this level-->
               <bankAccount>
                  <routingNumber>${#TestCase#account.bankAccount.routingNumber}</routingNumber>
                  <accountNumber>${#TestCase#account.bankAccount.accountNumber}</accountNumber>
                  <holderName>${#TestCase#account.bankAccount.holderName}</holderName>
                  <bankAccountType>${#TestCase#account.bankAccount.bankAccountType}</bankAccountType>
               </bankAccount>
               <cardAccount>
                  <!--You have a CHOICE of the next 3 items at this level-->
                  <creditCardAccount>
                     <!--You have a CHOICE of the next 2 items at this level-->
                     <tokenizedId>${#TestCase#account.cardAccount.creditCardAccount.tokenizedId}</tokenizedId>
                     <creditCardDetails>
                        <number>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.number}</number>
                        <expiryDate>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.expiryDate}</expiryDate>
                        <type>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.type}</type>
                        <name>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.name}</name>
                        <cvv>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.cvv}</cvv>
                        <address>
                           <line1>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.line1}</line1>
                           <!--Optional:-->
                           <line2>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.line2}</line2>
                           <city>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.city}</city>
                           <state>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.state}</state>
                           <zipcode>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.zipcode}</zipcode>
                           <!--Optional:-->
                           <country>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.country}</country>
                        </address>
                        <!--Optional:-->
                        <orderSource>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.orderSource}</orderSource>
                     </creditCardDetails>
                  </creditCardAccount>
                  <debitCardAccount>
                     <number>${#TestCase#account.cardAccount.debitCardAccount.number}</number>
                     <type>${#TestCase#account.cardAccount.debitCardAccount.type}</type>
                     <pin>${#TestCase#account.cardAccount.debitCardAccount.pin}</pin>
                  </debitCardAccount>
                  <giftCardAccount>
                     <number>${#TestCase#account.cardAccount.giftCardAccount.number}</number>
                     <pin>${#TestCase#account.cardAccount.giftCardAccount.pin}</pin>
                  </giftCardAccount>
               </cardAccount>
               <paypalAccount>
                  <id>${#TestCase#account.paypalAccount.id}</id>
               </paypalAccount>
               <wireAccount>
                  <bankAccountDetails>
                     <routingNumber>${#TestCase#account.wireAccount.bankAccountDetails.routingNumber}</routingNumber>
                     <accountNumber>${#TestCase#account.wireAccount.bankAccountDetails.accountNumber}</accountNumber>
                     <holderName>${#TestCase#account.wireAccount.bankAccountDetails.holderName}</holderName>
                     <bankAccountType>${#TestCase#account.wireAccount.bankAccountDetails.bankAccountType}</bankAccountType>
                  </bankAccountDetails>
                  <address>
                     <line1>${#TestCase#account.wireAccount.address.line1}</line1>
                     <!--Optional:-->
                     <line2>${#TestCase#account.wireAccount.address.line2}</line2>
                     <city>${#TestCase#account.wireAccount.address.city}</city>
                     <state>${#TestCase#account.wireAccount.address.state}</state>
                     <zipcode>${#TestCase#account.wireAccount.address.zipcode}</zipcode>
                  </address>
               </wireAccount>
            </account>
         </linkExternalAccountRequest>
      </sch:linkExternalAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="searchBancboxPayees"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>searchBancBoxPayees</con:operation><con:request name="searchBancboxPayees"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:searchBancBoxPayees>
         <searchBancBoxPayeesRequest>
            <!--Optional:-->
            <payeeName>${#TestCase#payeeName}</payeeName>
            <!--Optional:-->
            <accountNumber>${#TestCase#accountNumber}</accountNumber>
            <!--Optional:-->
            <billerClass>${#TestCase#billerClass}</billerClass>
            <!--Optional:-->
            <billerType>${#TestCase#billerType}</billerType>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </searchBancBoxPayeesRequest>
      </sch:searchBancBoxPayees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>subscriberId</con:name><con:value>200300</con:value></con:property><con:property><con:name>merchantId</con:name><con:value>871</con:value></con:property><con:property><con:name>address.address1</con:name><con:value>22337 PeachTree</con:value></con:property><con:property><con:name>address.address2</con:name><con:value/></con:property><con:property><con:name>address.city</con:name><con:value>ATLANTA</con:value></con:property><con:property><con:name>address.state</con:name><con:value>GA</con:value></con:property><con:property><con:name>address.zipcode</con:name><con:value>16772</con:value></con:property><con:property><con:name>primaryContact.firstName</con:name><con:value>John</con:value></con:property><con:property><con:name>primaryContact.lastName</con:name><con:value>Smith</con:value></con:property><con:property><con:name>primaryContact.phone</con:name><con:value>9876543212</con:value></con:property><con:property><con:name>primaryContact.emailAddress</con:name><con:value>mehak@bancbox.com</con:value></con:property><con:property><con:name>bankBusinessAccount.routingNumber</con:name><con:value>051000017</con:value></con:property><con:property><con:name>bankBusinessAccount.accountNumber</con:name><con:value>9876543212</con:value></con:property><con:property><con:name>merchantDetails.maxTransactionAmount</con:name><con:value>2</con:value></con:property><con:property><con:name>merchantDetails.customerServiceNumber</con:name><con:value>4141414141</con:value></con:property><con:property><con:name>merchantDetails.amexId</con:name><con:value>44477444499</con:value></con:property><con:property><con:name>merchantDetails.discoverId</con:name><con:value/></con:property><con:property><con:name>merchantDetails.softDescriptor</con:name><con:value>bbx</con:value></con:property><con:property><con:name>setAsDefaultMerchantId</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="BVT_CC" searchProperties="true" id="dce1c7a2-2a3d-49b4-900b-a3eb78cd0567"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="datasource" name="DataSource1" id="71b3f5ad-90d8-4b31-b692-a4ed362fed00"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>C:/Users/mehak90/Desktop/BVT/BVT_CC.xls</file><worksheet>Sheet1</worksheet><cell>A2</cell><ignoreEmpty>false</ignoreEmpty></con:configuration></con:dataSource><con:property>subscriberId</con:property><con:property>createMerchant.ssn</con:property><con:property>createMechant.dob</con:property><con:property>createMerchant.taxId</con:property><con:property>createClient.referenceId</con:property><con:property>createClient.username</con:property><con:property>openAccount.referenceId</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="request" name="createMerchant" id="ce0adc2d-0b41-4fa7-b214-575b1f9d3451"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createMerchant</con:operation><con:request name="createMerchant"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>${DataSource1#subscriberId}</subscriberId>
            <firstName>Testingabcd</firstName>
            <lastName>ab</lastName>
            <!--Optional:-->
            <ssn>${DataSource1#createMerchant.ssn}</ssn>
            <!--Optional:-->
            <dob>${DataSource1#createMechant.dob}</dob>
            <!--Optional:-->
            <email>mehak+003@bancbox.com</email>
            <address>
               <address1>add 222334</address1>
               <!--Optional:-->
               <address2>Peach Tree</address2>
               <city>Atlanta</city>
               <state>GA</state>
               <zipcode>30318</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber>051000017</routingNumber>
               <accountNumber>5302551000011110</accountNumber>
               <holderName>MEHAK</holderName>
               <bankAccountType>SAVING</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>7399</merchantCategoryCode>
               <maxTransactionAmount>100000</maxTransactionAmount>
               <customerServiceNumber>6787678911</customerServiceNumber>
               <!--Optional:-->
               <amexId></amexId>
               <!--Optional:-->
               <discoverId></discoverId>
               <softDescriptor>create</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>mhk</firstName>
               <lastName>verma</lastName>
               <phone>9987654390</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>400</visaAnnualSalesVolume>
            <organizationType>INDIVIDUAL_SOLE_PROPRIETORSHIP</organizationType>
            <!--Optional:-->
            <taxId>${DataSource1#createMerchant.taxId}</taxId>
            <!--Optional:-->
            <setAsDefaultMerchantId>false</setAsDefaultMerchantId>
         </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:createMerchantResponse[1]/createMerchantResponse[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateMerchant" id="2da35adb-a37d-466e-8c9f-3579e9641302"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateMerchant</con:operation><con:request name="updateMerchant"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:updateMerchant>
         <updateMerchantRequest>
            <subscriberId>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/subscriberId[1]}</subscriberId>
            <merchantId>${createMerchant#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createMerchantResponse[1]/createMerchantResponse[1]/merchantId[1]}</merchantId>
            <!--Optional:-->
            <address>
               <address1>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/address1[1]}</address1>
               <!--Optional:-->
               <address2>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/address2[1]}</address2>
               <city>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/city[1]}</city>
               <state>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/state[1]}</state>
               <zipcode>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/zipcode[1]}</zipcode>
            </address>
            <!--Optional:-->
            <primaryContact>
               <firstName>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/firstName[1]}</firstName>
               <lastName>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/lastName[1]}</lastName>
               <phone>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/primaryContact[1]/phone[1]}</phone>
               <emailAddress>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/primaryContact[1]/emailAddress[1]}</emailAddress>
            </primaryContact>
            <!--Optional:-->
            <bankBusinessAccount>
               <routingNumber>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/bankBusinessAccount[1]/routingNumber[1]}</routingNumber>
               <accountNumber>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/bankBusinessAccount[1]/accountNumber[1]}</accountNumber>
            </bankBusinessAccount>
            <!--Optional:-->
            <merchantDetails>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               <softDescriptor>updated</softDescriptor>
            </merchantDetails>
            <!--Optional:-->
            <setAsDefaultMerchantId>false</setAsDefaultMerchantId>
         </updateMerchantRequest>
      </sch:updateMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:updateMerchantResponse[1]/updateMerchantResponse[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createClient"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createClient</con:operation><con:request name="createClient"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:createClient>
         <createClientRequest>
            <subscriberId>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <referenceId>${DataSource1#createClient.referenceId}</referenceId><firstName>JOHN</firstName>
            <!--Optional:-->
            <lastName>SMITH</lastName>
            <!--Optional:-->
            <middleInitial>M</middleInitial>
            <!--Optional:-->
            <ssn>112-22-3333</ssn>
            <!--Optional:-->
            <dob>1975-02-28</dob>
            <!--Optional:-->
            <address>
               <!--Optional:-->
               <line1>222333</line1>
               <!--Optional:-->
               <line2>Peach Place Tree</line2>
               <!--Optional:-->
               <city>Atlanta</city>
               <!--Optional:-->
               <state>GA</state>
               <!--Optional:-->
               <zipcode>30318</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>1234567890</homePhone>
            <!--Optional:-->
            <mobilePhone>1234567890</mobilePhone>
            <!--Optional:-->
            <workPhone>3606997616</workPhone>
            <!--Optional:-->
            <email>mehak+8899@bancbox.com</email>
            <!--Optional:-->
            
            <!--Optional:-->
            <username>${DataSource1#createClient.username}</username><merchantId>${createMerchant#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createMerchantResponse[1]/createMerchantResponse[1]/merchantId[1]}</merchantId>
         </createClientRequest>
      </sch:createClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="Simple Contains" name="Contains"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:createClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:createClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="schema.bancbox.com/BBX/createClient" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateClient" id="d7e55cb0-e952-41a8-b87e-bde1e8d506f3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateClient</con:operation><con:request name="updateClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:updateClient>
         <updateClientRequest>
            <subscriberId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/subscriberId[1]}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/bancBoxId[1]}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/subscriberReferenceId[1]}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <merchantId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/merchantId[1]}</merchantId>
            <!--Optional:-->
            <firstName>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/firstName[1]}</firstName>
            <!--Optional:-->
            <lastName>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/lastName[1]}</lastName>
            <!--Optional:-->
            <middleInitial>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/middleInitial[1]}</middleInitial>
            <!--Optional:-->
            <ssn>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/ssn[1]}</ssn>
            <!--Optional:-->
            <dob>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/dob[1]}</dob>
            <!--Optional:-->
            <address>
               <line1>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/line1[1]}</line1>
               <!--Optional:-->
               <line2>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/line2[1]}</line2>
               <city>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/city[1]}</city>
               <state>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/state[1]}</state>
               <zipcode>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/zipcode[1]}</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/homePhone[1]}</homePhone>
            <!--Optional:-->
            <mobilePhone>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/mobilePhone[1]}</mobilePhone>
            <!--Optional:-->
            <workPhone>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/workPhone[1]}</workPhone>
            <!--Optional:-->
            <email>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/email[1]}</email>
            <!--Optional:-->
            <username></username>
         </updateClientRequest>
      </sch:updateClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:updateClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="verifyClient"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>verifyClient</con:operation><con:request name="verifyClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:verifyClient>
         <verifyClient>
            <subscriberId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            <clientId>
               <!--Optional:-->
               <bancBoxId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/bancBoxId[1]}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/subscriberReferenceId[1]}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <generateQuestions>false</generateQuestions>
         </verifyClient>
      </sch:verifyClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:verifyClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:verifyClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/verifyClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="openAccount"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>openAccount</con:operation><con:request name="openAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:openAccount>
         <openAccountRequest>
            <subscriberId>${verifyClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:verifyClient[1]/verifyClient[1]/subscriberId[1]}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${verifyClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:verifyClient[1]/verifyClient[1]/clientId[1]/bancBoxId[1]}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${verifyClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:verifyClient[1]/verifyClient[1]/clientId[1]/subscriberReferenceId[1]}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            
            <!--Optional:-->
            
            <!--Optional:-->
            <referenceId>${DataSource1#openAccount.referenceId}</referenceId><accountType>GENERAL</accountType>
            <!--Optional:-->
            <routable>
               <!--Optional:-->
               <credits>YES</credits>
               <!--Optional:-->
               <debits>YES</debits>
            </routable>
            <!--Optional:-->
            
         </openAccountRequest>
      </sch:openAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:openAccountResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/openAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="collectFunds1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>collectFunds</con:operation><con:request name="collectFunds1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>${openAccount#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:openAccount[1]/openAccountRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <merchantId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/merchantId[1]}</merchantId>
               <method>
               <creditcard/>
               <!--You have a CHOICE of the next 3 items at this level-->
              
            </method>
            
               <source>
               <newExternalAccount><account><!--You have a CHOICE of the next 2 items at this level-->
                    
                     <creditCardAccount><!--You have a CHOICE of the next 2 items at this level-->
                        
                        <cardNotPresent><!--You have a CHOICE of the next 2 items at this level-->
                           
                           <creditCardDetails>
                              <number>5205277388152676</number>
                              <expiryDate>01/19</expiryDate>
                              <type>MASTERCARD</type>
                              <name>John Smith</name>
                              <cvv>349</cvv>
                              <address>
                                 <line1>2234</line1>
                                 <!--Optional:-->
                                 <line2>Peach Tree</line2>
                                 <city>ATLANTA</city>
                                 <state>GA</state>
                                 <zipcode>54321</zipcode>
                                 <!--Optional:-->
                                 
                              </address>
                              <!--Optional:-->
                            
                           </creditCardDetails>
                        </cardNotPresent>
                     </creditCardAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account><!--Optional:-->
                  <bancBoxId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/bancBoxId[1]}</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/subscriberReferenceId[1]}</subscriberReferenceId>
               </account>
              
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               
               <amount>1</amount>
               <!--Optional:-->
               
               <!--Optional:-->
              
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:collectFundsResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [itemStatus]"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns1"] = "schema.bancbox.com"
def node = holder.getDomNode( "//ns1:collectFundsResponse[1]/return[1]/itemStatuses[1]/itemStatus[1]" )

assert node != null
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [itemStatus]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:collectFundsResponse[1]/return[1]/itemStatuses[1]/itemStatus[1]/text()</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="collectFunds2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>collectFunds</con:operation><con:request name="collectFunds2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>${openAccount#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:openAccount[1]/openAccountRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <merchantId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/merchantId[1]}</merchantId>
               <method>
               <creditcard/>
               <!--You have a CHOICE of the next 3 items at this level-->
              
            </method>
            
               <source>
               <newExternalAccount><account><!--You have a CHOICE of the next 2 items at this level-->
                    
                     <creditCardAccount><!--You have a CHOICE of the next 2 items at this level-->
                        
                        <cardNotPresent><!--You have a CHOICE of the next 2 items at this level-->
                           
                           <creditCardDetails>
                              <number>5205277388152676</number>
                              <expiryDate>01/19</expiryDate>
                              <type>MASTERCARD</type>
                              <name>John Smith</name>
                              <cvv>349</cvv>
                              <address>
                                 <line1>2234</line1>
                                 <!--Optional:-->
                                 <line2>Peach Tree</line2>
                                 <city>ATLANTA</city>
                                 <state>GA</state>
                                 <zipcode>54321</zipcode>
                                 <!--Optional:-->
                                 
                              </address>
                              <!--Optional:-->
                            
                           </creditCardDetails>
                        </cardNotPresent>
                     </creditCardAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account><!--Optional:-->
                  <bancBoxId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/bancBoxId[1]}</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/subscriberReferenceId[1]}</subscriberReferenceId>
               </account>
              
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               
               <amount>1</amount>
               <!--Optional:-->
               
               <!--Optional:-->
              
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="Match content of [itemStatus]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:collectFundsResponse[1]/return[1]/itemStatuses[1]/itemStatus[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:collectFundsResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="changeParams"><con:settings/><con:config><script>import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

TestDataFile="C:\\Users\\mehak90\\Desktop\\BVT\\BVT_CC.xls";
Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));


TestDataWB.close();</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>ce0adc2d-0b41-4fa7-b214-575b1f9d3451</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2da35adb-a37d-466e-8c9f-3579e9641302</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d7e55cb0-e952-41a8-b87e-bde1e8d506f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71b3f5ad-90d8-4b31-b692-a4ed362fed00</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="BVT_token" searchProperties="true" id="9c3a31f1-d219-4550-b21a-568e74fe28c2"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="datasource" name="DataSource1"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>C:/Users/mehak90/Desktop/BVT/BVT_CC.xls</file><worksheet>Sheet1</worksheet><cell>A2</cell><ignoreEmpty>false</ignoreEmpty></con:configuration></con:dataSource><con:property>subscriberId</con:property><con:property>createMerchant.ssn</con:property><con:property>createMechant.dob</con:property><con:property>createMerchant.taxId</con:property><con:property>createClient.referenceId</con:property><con:property>createClient.username</con:property><con:property>openAccount.referenceId</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop1" disabled="true"><con:settings/><con:config><dataSourceStep>DataSource1</dataSourceStep><targetStep>createMerchant</targetStep></con:config></con:testStep><con:testStep type="request" name="createMerchant"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createMerchant</con:operation><con:request name="createMerchant"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>${DataSource1#subscriberId}</subscriberId>
            <firstName>Testingabcd</firstName>
            <lastName>ab</lastName>
            <!--Optional:-->
            <ssn>${DataSource1#createMerchant.ssn}</ssn>
            <!--Optional:-->
            <dob>${DataSource1#createMechant.dob}</dob>
            <!--Optional:-->
            <email>mehak+003@bancbox.com</email>
            <address>
               <address1>add 222334</address1>
               <!--Optional:-->
               <address2>Peach Tree</address2>
               <city>Atlanta</city>
               <state>GA</state>
               <zipcode>30318</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber>051000017</routingNumber>
               <accountNumber>5302551000011110</accountNumber>
               <holderName>MEHAK</holderName>
               <bankAccountType>SAVING</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>7399</merchantCategoryCode>
               <maxTransactionAmount>100000</maxTransactionAmount>
               <customerServiceNumber>6787678911</customerServiceNumber>
               <!--Optional:-->
               <amexId></amexId>
               <!--Optional:-->
               <discoverId></discoverId>
               <softDescriptor>create</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>mhk</firstName>
               <lastName>verma</lastName>
               <phone>9987654390</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>400</visaAnnualSalesVolume>
            <organizationType>INDIVIDUAL_SOLE_PROPRIETORSHIP</organizationType>
            <!--Optional:-->
            <taxId>${DataSource1#createMerchant.taxId}</taxId>
            <!--Optional:-->
            <setAsDefaultMerchantId>false</setAsDefaultMerchantId>
         </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:createMerchantResponse[1]/createMerchantResponse[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateMerchant"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateMerchant</con:operation><con:request name="updateMerchant"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:updateMerchant>
         <updateMerchantRequest>
            <subscriberId>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/subscriberId[1]}</subscriberId>
            <merchantId>${createMerchant#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createMerchantResponse[1]/createMerchantResponse[1]/merchantId[1]}</merchantId>
            <!--Optional:-->
            <address>
               <address1>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/address1[1]}</address1>
               <!--Optional:-->
               <address2>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/address2[1]}</address2>
               <city>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/city[1]}</city>
               <state>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/state[1]}</state>
               <zipcode>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/zipcode[1]}</zipcode>
            </address>
            <!--Optional:-->
            <primaryContact>
               <firstName>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/firstName[1]}</firstName>
               <lastName>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/lastName[1]}</lastName>
               <phone>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/primaryContact[1]/phone[1]}</phone>
               <emailAddress>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/primaryContact[1]/emailAddress[1]}</emailAddress>
            </primaryContact>
            <!--Optional:-->
            <bankBusinessAccount>
               <routingNumber>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/bankBusinessAccount[1]/routingNumber[1]}</routingNumber>
               <accountNumber>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/bankBusinessAccount[1]/accountNumber[1]}</accountNumber>
            </bankBusinessAccount>
            <!--Optional:-->
            <merchantDetails>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               <softDescriptor>updated</softDescriptor>
            </merchantDetails>
            <!--Optional:-->
            <setAsDefaultMerchantId>false</setAsDefaultMerchantId>
         </updateMerchantRequest>
      </sch:updateMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:updateMerchantResponse[1]/updateMerchantResponse[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createClient"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createClient</con:operation><con:request name="createClient"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:createClient>
         <createClientRequest>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <referenceId>${DataSource1#createClient.referenceId}</referenceId><firstName>JOHN</firstName>
            <!--Optional:-->
            <lastName>SMITH</lastName>
            <!--Optional:-->
            <middleInitial>M</middleInitial>
            <!--Optional:-->
            <ssn>112-22-3333</ssn>
            <!--Optional:-->
            <dob>1975-02-28</dob>
            <!--Optional:-->
            <address>
               <!--Optional:-->
               <line1>222333</line1>
               <!--Optional:-->
               <line2>Peach Place Tree</line2>
               <!--Optional:-->
               <city>Atlanta</city>
               <!--Optional:-->
               <state>GA</state>
               <!--Optional:-->
               <zipcode>30318</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>1234567890</homePhone>
            <!--Optional:-->
            <mobilePhone>1234567890</mobilePhone>
            <!--Optional:-->
            <workPhone>3606997616</workPhone>
            <!--Optional:-->
            <email>mehak+8899@bancbox.com</email>
            <!--Optional:-->
            
            <!--Optional:-->
            <username>${DataSource1#createClient.username}</username><merchantId>${createMerchant#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createMerchantResponse[1]/createMerchantResponse[1]/merchantId[1]}</merchantId>
         </createClientRequest>
      </sch:createClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="Simple Contains" name="Contains"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:createClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:createClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="schema.bancbox.com/BBX/createClient" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateClient"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateClient</con:operation><con:request name="updateClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:updateClient>
         <updateClientRequest>
            <subscriberId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/subscriberId[1]}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/bancBoxId[1]}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/subscriberReferenceId[1]}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <merchantId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/merchantId[1]}</merchantId>
            <!--Optional:-->
            <firstName>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/firstName[1]}</firstName>
            <!--Optional:-->
            <lastName>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/lastName[1]}</lastName>
            <!--Optional:-->
            <middleInitial>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/middleInitial[1]}</middleInitial>
            <!--Optional:-->
            <ssn>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/ssn[1]}</ssn>
            <!--Optional:-->
            <dob>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/dob[1]}</dob>
            <!--Optional:-->
            <address>
               <line1>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/line1[1]}</line1>
               <!--Optional:-->
               <line2>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/line2[1]}</line2>
               <city>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/city[1]}</city>
               <state>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/state[1]}</state>
               <zipcode>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/zipcode[1]}</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/homePhone[1]}</homePhone>
            <!--Optional:-->
            <mobilePhone>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/mobilePhone[1]}</mobilePhone>
            <!--Optional:-->
            <workPhone>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/workPhone[1]}</workPhone>
            <!--Optional:-->
            <email>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/email[1]}</email>
            <!--Optional:-->
            <username></username>
         </updateClientRequest>
      </sch:updateClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:updateClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="verifyClient"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>verifyClient</con:operation><con:request name="verifyClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:verifyClient>
         <verifyClient>
            <subscriberId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            <clientId>
               <!--Optional:-->
               <bancBoxId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/bancBoxId[1]}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/subscriberReferenceId[1]}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <generateQuestions>false</generateQuestions>
         </verifyClient>
      </sch:verifyClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:verifyClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:verifyClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/verifyClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="openAccount"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>openAccount</con:operation><con:request name="openAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:openAccount>
         <openAccountRequest>
            <subscriberId>${verifyClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:verifyClient[1]/verifyClient[1]/subscriberId[1]}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${verifyClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:verifyClient[1]/verifyClient[1]/clientId[1]/bancBoxId[1]}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${verifyClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:verifyClient[1]/verifyClient[1]/clientId[1]/subscriberReferenceId[1]}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            
            <!--Optional:-->
            
            <!--Optional:-->
            <referenceId>${DataSource1#openAccount.referenceId}</referenceId><accountType>GENERAL</accountType>
            <!--Optional:-->
            <routable>
               <!--Optional:-->
               <credits>YES</credits>
               <!--Optional:-->
               <debits>YES</debits>
            </routable>
            <!--Optional:-->
            
         </openAccountRequest>
      </sch:openAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:openAccountResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/openAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="collectFunds1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>collectFunds</con:operation><con:request name="collectFunds1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>${openAccount#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:openAccount[1]/openAccountRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <merchantId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/merchantId[1]}</merchantId>
               <method>
               <creditcard/>
               <!--You have a CHOICE of the next 3 items at this level-->
              
            </method>
            
               <source>
               <newExternalAccount><account><!--You have a CHOICE of the next 2 items at this level-->
                    
                     <creditCardAccount><!--You have a CHOICE of the next 2 items at this level-->
                        
                        <cardNotPresent><!--You have a CHOICE of the next 2 items at this level-->
                           
                           <creditCardDetails>
                              <number>5205277388152676</number>
                              <expiryDate>01/19</expiryDate>
                              <type>MASTERCARD</type>
                              <name>John Smith</name>
                              <cvv>349</cvv>
                              <address>
                                 <line1>2234</line1>
                                 <!--Optional:-->
                                 <line2>Peach Tree</line2>
                                 <city>ATLANTA</city>
                                 <state>GA</state>
                                 <zipcode>54321</zipcode>
                                 <!--Optional:-->
                                 
                              </address>
                              <!--Optional:-->
                            
                           </creditCardDetails>
                        </cardNotPresent>
                     </creditCardAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account><!--Optional:-->
                  <bancBoxId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/bancBoxId[1]}</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/subscriberReferenceId[1]}</subscriberReferenceId>
               </account>
              
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               
               <amount>1</amount>
               <!--Optional:-->
               
               <!--Optional:-->
              
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="XPath Match" name="Match content of [itemStatus]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:collectFundsResponse[1]/return[1]/itemStatuses[1]/itemStatus[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:collectFundsResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>ce0adc2d-0b41-4fa7-b214-575b1f9d3451</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2da35adb-a37d-466e-8c9f-3579e9641302</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d7e55cb0-e952-41a8-b87e-bde1e8d506f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71b3f5ad-90d8-4b31-b692-a4ed362fed00</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>APIName</con:name><con:value>updateMerchant</con:value></con:property><con:property><con:name>TestDataFile</con:name><con:value>E:\CORE QA\Final_Regression\merchants\updateMerchant.xls</con:value></con:property><con:property><con:name>global_username</con:name><con:value>Mehak</con:value></con:property><con:property><con:name>global_password</con:name><con:value>abcd1234</con:value></con:property><con:property><con:name>SetNo</con:name><con:value>1</con:value></con:property><con:property><con:name>Endpoint</con:name><con:value>qa-api.bancbox.com:9090</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>