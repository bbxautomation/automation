<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="BBCFPAutomation2" soapui-version="5.0.0" activeEnvironment="Default" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="TestSuite 1"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="true"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="CreateInvestor2"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="Automation_TestSuite"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value="ScenarioFileLocation=C:\Users\RaghavPal\Documents\Test_Data\QATestData\TeamTestData\ScenarioTD\AngelListFlows1.xls SetNo=1"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="Automation_TestCase"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Users\RaghavPal\Documents\Test_Data\Reports"/>
  <con:entry key="Save After" value="true"/>
  <con:entry key="Add Settings" value="true"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="BBCFP" type="rest" basePath="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="CreateWadlDocumentationAction@report-directory">D:\bbcfp documentation</con:setting></con:settings><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://api.bancboxcrowd.com</con:endpoint><con:endpoint>https://api.bancboxcrowd.com</con:endpoint><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:endpoint>https://perf-api.bancboxcrowd.com</con:endpoint><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:endpoint>https://sandbox-api.bancboxcrowd.com</con:endpoint></con:endpoints><con:resource name="getInvestorDetails" path="/crowd/v0/cfp/getInvestorDetails"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>id</con:name><con:value>334584612862</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>334584612862</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>investor_id</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="??" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/getInvestorDetails">get:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value="162670841647"/>
  <con:entry key="api_key" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
  <con:entry key="secret" value="DD7JOLd4Dw"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="verifyAnswers" path="/crowd/v0/cfp/verifyAnswers"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value>ref12456</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ref12456</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>id</con:name><con:value>274602070595</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>274602070595</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>question_token</con:name><con:value>139632745</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>139632745</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>answer_1</con:name><con:value>FULTON</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>FULTON</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>answer_type_1</con:name><con:value>current.county.b</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>current.county.b</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>answer_2</con:name><con:value>ATLANTA</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ATLANTA</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>answer_type_2</con:name><con:value>city.of.residence</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>city.of.residence</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>answer_3</con:name><con:value>2005</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2005</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>answer_type_3</con:name><con:value>vehicle.year</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>vehicle.year</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.9" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ver="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/verifyAnswers">ver:Response</con:element></con:representation><con:request name="2.9" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value="141415573618"/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="reference_id" value="ref12456555"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value="141415573618"/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="reference_id" value="ref12456555"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="getActivityDetails" path="/crowd/v0/cfp/getActivityDetails"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>1693c643-88ae-4b30-98d2-69d95c4aa47b</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1693c643-88ae-4b30-98d2-69d95c4aa47b</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value>781381408343</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>781381408343</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>reference_id</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.10" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/getActivityDetails">get:Response</con:element></con:representation><con:request name="2.10" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>957889sdsa


https://npninc.jira.com/browse/BBAPI-1023</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="escrow_id" value="934259090074"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>957889sdsa


https://npninc.jira.com/browse/BBAPI-1023</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="escrow_id" value="934259090074"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="createEscrowAccount" path="/crowd/v0/cfp/createEscrowAccount"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>name</con:name><con:value>TestJasEscrow</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>TestJasEscrow</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value>ES220313</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ES220313</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_id</con:name><con:value>336411563306</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>336411563306</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>start_date</con:name><con:value>2013-03-25</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2013-03-25</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>close_date</con:name><con:value>2013-05-01</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2013-05-01</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>funding_goal</con:name><con:value>100</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>100</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>goal_percentage</con:name><con:value>10</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>over_funding_percentage</con:name><con:value>50</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>50</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>over_funding_amount</con:name><con:value>20</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>20</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>contract_doc_reference_id</con:name><con:value>3364115633</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>3364115633</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>contract_term_reference_id</con:name><con:value>3364115633</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>3364115633</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>created_by</con:name><con:value>jaspinder</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>jaspinder</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfp_fee</con:name><con:value>10</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_fee</con:name><con:value>20</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>20</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>minimum_funding_amount</con:name><con:value>5</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>5</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>maximum_funding_amount</con:name><con:value>10</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>securities_offered</con:name><con:value>offered</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>offered</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>file</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>securities_offered_other</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>platform_signatory_name</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>platform_signatory_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>issuer_signatory_title</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>issuer_signatory_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>deal</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>contract_doc_filename</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>contract_doc_file_type</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>platform_signatory_title</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>issuer_signatory_name</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.10" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/form-data</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/createEscrowAccount">cre:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="2.10" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="issuer_id" value="771731573891"/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="over_funding_percentage" value="5"/>
  <con:entry key="securities_offered" value=""/>
  <con:entry key="reference_id" value="ES22036715====3wewe"/>
  <con:entry key="over_funding_amount" value="2000"/>
  <con:entry key="secret" value="242d5c6c3b"/>
  <con:entry key="close_date" value="2013-11-25"/>
  <con:entry key="start_date" value="2013-10-28"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="issuer_id" value="771731573891"/>
  <con:entry key="over_funding_percentage" value="5"/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="securities_offered" value=""/>
  <con:entry key="over_funding_amount" value="2000"/>
  <con:entry key="reference_id" value="ES22036715====3wewe"/>
  <con:entry key="secret" value="242d5c6c3b"/>
  <con:entry key="close_date" value="2013-11-25"/>
  <con:entry key="start_date" value="2013-10-28"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="createInvestor" path="/crowd/v0/cfp/createInvestor"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfp_id</con:name><con:value>139603739157</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>139603739157</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value>ref1234567</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ref1234567</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>first_name</con:name><con:value>JOHN</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>JOHN</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>middle_initial</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>last_name</con:name><con:value>Smith</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Smith</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>email</con:name><con:value>raghav+123@bancbox.com</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>raghav+123@bancbox.com</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>phone</con:name><con:value>1234567890</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1234567890</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>dob</con:name><con:value>1975-02-28</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1975-02-28</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ssn</con:name><con:value>3333</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>3333</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>address_1</con:name><con:value>222333</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>222333</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>address_2</con:name><con:value>"PEACHTREE PLACE"</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>"PEACHTREE PLACE"</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>city</con:name><con:value>ATLANTA</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ATLANTA</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>state</con:name><con:value>GA</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>GA</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>zip</con:name><con:value>30318</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>30318</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>user_id</con:name><con:value>jas58</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>jas58</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>created_by</con:name><con:value>jaspinder</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>jaspinder</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>company_tax_id</con:name><con:value>129748392 </con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>129748392 </con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>type</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>custodian_name</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>custodian_account_holder</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>custodian_account_number</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>custodian_account_type</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>custodian_account_routing</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>international</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>passport_number</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>passport_image</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>image_file_name</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>country</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>internal</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>verification_required</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>linked_bank_account_reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_number</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_type</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_holder</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_routing</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>withdraw_on_availability</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.9" method="POST"><con:settings/><con:parameters><con:parameter><con:name>company_registration_state</con:name><con:value>AL</con:value><con:style>QUERY</con:style><con:default>AL</con:default></con:parameter><con:parameter><con:name>company_name</con:name><con:value>JAS Co.</con:value><con:style>QUERY</con:style><con:default>JAS Co.</con:default></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/createInvestor">cre:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>text/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/form-data</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="CEP_2.8" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>{
   "request_id": 693543165545,
   "id": 621504134880,
   "bank_name": "Four Oaks Bank &amp; Trust Company",
   "account_number": "540126101156",
   "account_routing_number": "053112505",
   "account_type": "CHECKING",
   "type": "ANGEL_FUND"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="custodian_name" value="tesyshahsa"/>
  <con:entry key="middle_initial" value="k"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="cfp_id" value="362704280369"/>
  <con:entry key="address_2" value="PEACHTREE PLACE"/>
  <con:entry key="custodian_account_holder" value="Nahsdds"/>
  <con:entry key="type" value="CUSTODIAN"/>
  <con:entry key="company_tax_id" value="123456789"/>
  <con:entry key="company_name" value="JAS Company for investor"/>
  <con:entry key="email" value="ap@yopmail.com"/>
  <con:entry key="custodian_account_number" value="540126101156"/>
  <con:entry key="api_key" value="44a54efd-8407-426c-8ff6-be48a6683d16"/>
  <con:entry key="custodian_account_routing" value="053112505"/>
  <con:entry key="reference_id" value="hsdhj888"/>
  <con:entry key="secret" value="FBHSlsiYj7"/>
  <con:entry key="user_id" value="testanshul12@yopmail.com"/>
  <con:entry key="custodian_account_type" value="CHECKING"/>
</con:parameters></con:request><con:request name="cfp2.4" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="company_tax_id" value="123456789"/>
  <con:entry key="email" value="testanshul12@yopmail.com"/>
  <con:entry key="company_name" value="JAS Company India Limited."/>
  <con:entry key="middle_initial" value="k"/>
  <con:entry key="reference_id" value="InvestorJune24_1"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="user_id" value="InvestorJune24_1@yopmail.com"/>
  <con:entry key="cfp_id" value="139603739157 "/>
  <con:entry key="address_2" value="PEACHTREE PLACE"/>
  <con:entry key="type" value="ANGEL_FUND"/>
</con:parameters></con:request><con:request name="Copy of cfp2.4" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="company_tax_id" value="123456789"/>
  <con:entry key="email" value="testanshul12@yopmail.com"/>
  <con:entry key="company_name" value="JAS Company India Limited."/>
  <con:entry key="middle_initial" value="k"/>
  <con:entry key="reference_id" value="ansh8bnzm77xb45sdsjdsj"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="user_id" value="InvestorJune25_1@yopmail.com"/>
  <con:entry key="cfp_id" value="139603739157 "/>
  <con:entry key="address_2" value="PEACHTREE PLACE"/>
  <con:entry key="type" value="ANGEL_FUND"/>
</con:parameters></con:request><con:request name="2.7" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="company_tax_id" value="123456789"/>
  <con:entry key="email" value="testanshul12@yopmail.com"/>
  <con:entry key="company_name" value="JAS Company for investor"/>
  <con:entry key="api_key" value="e6842b30-4014-4201-adc7-e2325d65b055"/>
  <con:entry key="middle_initial" value="k"/>
  <con:entry key="reference_id" value="testwetueu7874478"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="secret" value="VUW5cQgvCV"/>
  <con:entry key="cfp_id" value="362704280369"/>
  <con:entry key="user_id" value="788Qa@yopmail.com"/>
  <con:entry key="address_2" value="PEACHTREE PLACE"/>
  <con:entry key="type" value="ANGEL_FUND"/>
</con:parameters></con:request><con:request name="sandbox" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://sandbox-api.bancboxcrowd.com</con:endpoint><con:request><![CDATA[1)<Response xmlns="https://sandbox-api.bancboxcrowd.com/crowd/v0/cfp/createInvestor">
   <account_number>542745102329</account_number>
   <account_routing_number>053112505</account_routing_number>
   <account_type>CHECKING</account_type>
   <bank_name>Four Oaks Bank &amp; Trust Company</bank_name>
   <id>227151012740</id>
   <request_id>223465327925</request_id>
</Response>

2)<Response xmlns="https://sandbox-api.bancboxcrowd.com/crowd/v0/cfp/createInvestor">
   <account_number>542745102148</account_number>
   <account_routing_number>053112505</account_routing_number>
   <account_type>CHECKING</account_type>
   <bank_name>Four Oaks Bank &amp; Trust Company</bank_name>
   <id>772733158782</id>
   <request_id>302620911183</request_id>
</Response>

3)<Response xmlns="https://sandbox-api.bancboxcrowd.com/crowd/v0/cfp/createInvestor">
   <account_number>542745103209</account_number>
   <account_routing_number>053112505</account_routing_number>
   <account_type>CHECKING</account_type>
   <bank_name>Four Oaks Bank &amp; Trust Company</bank_name>
   <id>405802286809</id>
   <request_id>776795395218</request_id>
   <type>ANGEL_FUND</type>
</Response>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="company_tax_id" value="123456789"/>
  <con:entry key="company_name" value="JAS Company for investor"/>
  <con:entry key="email" value="sand1@yopmail.com"/>
  <con:entry key="middle_initial" value="k"/>
  <con:entry key="api_key" value="1ed62a10-605f-4c74-ae59-35a4957b124e"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="reference_id" value="an1cxvcvdfdgd"/>
  <con:entry key="secret" value="Ie6U0I74uP"/>
  <con:entry key="user_id" value="sand1@yopmail.com"/>
  <con:entry key="cfp_id" value="406456831106"/>
  <con:entry key="address_2" value="PEACHTREE PLACE"/>
  <con:entry key="type" value="ANGEL_FUND"/>
</con:parameters></con:request><con:request name="sandbox" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://sandbox-api.bancboxcrowd.com</con:endpoint><con:request>{
   "request_id": 693543165545,
   "id": 621504134880,
   "bank_name": "Four Oaks Bank &amp; Trust Company",
   "account_number": "540126101156",
   "account_routing_number": "053112505",
   "account_type": "CHECKING",
   "type": "ANGEL_FUND"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="company_tax_id" value="123456789"/>
  <con:entry key="email" value="tep12@yopmail.com"/>
  <con:entry key="company_name" value="JAS Company for investor"/>
  <con:entry key="api_key" value="48542c6a-0e87-493f-90f1-25d24ab93b5f"/>
  <con:entry key="middle_initial" value="k"/>
  <con:entry key="reference_id" value="jj78rttdsdsgg"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="secret" value="6e4a45593e"/>
  <con:entry key="cfp_id" value="665843518254 "/>
  <con:entry key="user_id" value="testanshul12@yopmail.com"/>
  <con:entry key="address_2" value="PEACHTREE PLACE"/>
  <con:entry key="type" value="ANGEL_FUND"/>
</con:parameters></con:request><con:request name="UNVERIFIED_ CEP_2.8" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>{
   "request_id": 693543165545,
   "id": 621504134880,
   "bank_name": "Four Oaks Bank &amp; Trust Company",
   "account_number": "540126101156",
   "account_routing_number": "053112505",
   "account_type": "CHECKING",
   "type": "ANGEL_FUND"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="custodian_name" value="TESTTEST"/>
  <con:entry key="middle_initial" value="k"/>
  <con:entry key="ssn" value="112-22-5623"/>
  <con:entry key="cfp_id" value="362704280369"/>
  <con:entry key="address_2" value="PEACHTREE PLACE"/>
  <con:entry key="custodian_account_holder" value="trshjshahsja"/>
  <con:entry key="type" value="CUSTODIAN"/>
  <con:entry key="first_name" value="anshultest"/>
  <con:entry key="company_tax_id" value="123456789"/>
  <con:entry key="company_name" value="JAS Company for investor"/>
  <con:entry key="email" value="testkapildd23@yopmail.com"/>
  <con:entry key="custodian_account_number" value="540126101156"/>
  <con:entry key="api_key" value="44a54efd-8407-426c-8ff6-be48a6683d16"/>
  <con:entry key="custodian_account_routing" value="053112505"/>
  <con:entry key="dob" value="1975-02-22"/>
  <con:entry key="last_name" value="Smi"/>
  <con:entry key="reference_id" value="kanshsdnjnjd"/>
  <con:entry key="secret" value="FBHSlsiYj7"/>
  <con:entry key="user_id" value="anpoddp@yopmail.com"/>
  <con:entry key="custodian_account_type" value="SAVING"/>
</con:parameters></con:request><con:request name="Production_2.7" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="company_tax_id" value="123456789"/>
  <con:entry key="company_name" value="JAS Company for investor"/>
  <con:entry key="email" value="testanshul12@yopmail.com"/>
  <con:entry key="middle_initial" value="k"/>
  <con:entry key="api_key" value="b9888e53-3938-41d3-9d5f-8e064e6a613e"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="reference_id" value="testwetueu"/>
  <con:entry key="user_id" value="788Qa@yopmail.com"/>
  <con:entry key="cfp_id" value="365908505405"/>
  <con:entry key="address_2" value="PEACHTREE PLACE"/>
  <con:entry key="type" value="ANGEL_FUND"/>
</con:parameters></con:request><con:request name="CFP_ADMIN_2.8" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>{
   "request_id": 693543165545,
   "id": 621504134880,
   "bank_name": "Four Oaks Bank &amp; Trust Company",
   "account_number": "540126101156",
   "account_routing_number": "053112505",
   "account_type": "CHECKING",
   "type": "ANGEL_FUND"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="custodian_name" value="tesyshahsa"/>
  <con:entry key="middle_initial" value="k"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="cfp_id" value="419181252487"/>
  <con:entry key="address_2" value="PEACHTREE PLACE"/>
  <con:entry key="custodian_account_holder" value="Nahsdds"/>
  <con:entry key="type" value="CUSTODIAN"/>
  <con:entry key="company_tax_id" value="123456789"/>
  <con:entry key="company_name" value="JAS Company for investor"/>
  <con:entry key="email" value="ap12322333@yopmail.com"/>
  <con:entry key="custodian_account_number" value="540126101156"/>
  <con:entry key="api_key" value="85caf34f-518f-4393-bc84-e2d0a62440fb"/>
  <con:entry key="custodian_account_routing" value="053112505"/>
  <con:entry key="reference_id" value="hsdhj888ddd"/>
  <con:entry key="secret" value="16aa9030f2"/>
  <con:entry key="user_id" value="pesr12@yopmail.com"/>
  <con:entry key="custodian_account_type" value="CHECKING"/>
</con:parameters></con:request><con:request name="CFP_ADMIN_2.9" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>{
   "request_id": 693543165545,
   "id": 621504134880,
   "bank_name": "Four Oaks Bank &amp; Trust Company",
   "account_number": "540126101156",
   "account_routing_number": "053112505",
   "account_type": "CHECKING",
   "type": "ANGEL_FUND"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="zip" value="30339"/>
  <con:entry key="custodian_name" value="tesyshahsa"/>
  <con:entry key="middle_initial" value="k"/>
  <con:entry key="ssn" value="223-33-4444"/>
  <con:entry key="address_1" value="565"/>
  <con:entry key="cfp_id" value="419181252487"/>
  <con:entry key="address_2" value="Main Street"/>
  <con:entry key="custodian_account_holder" value="Nahsdds"/>
  <con:entry key="type" value="CUSTODIAN"/>
  <con:entry key="first_name" value="Johnny"/>
  <con:entry key="company_tax_id" value="123456789"/>
  <con:entry key="company_name" value="JAS comp"/>
  <con:entry key="email" value="jazz_inv5@yopmail.com"/>
  <con:entry key="custodian_account_number" value="540126101156"/>
  <con:entry key="api_key" value="8e18b40a-2d3e-42fc-988f-5322539927a0"/>
  <con:entry key="dob" value="1969-04-10"/>
  <con:entry key="custodian_account_routing" value="053112505"/>
  <con:entry key="last_name" value="Brown"/>
  <con:entry key="reference_id" value="jazz_inv5"/>
  <con:entry key="secret" value="tLHkr9Ov0B"/>
  <con:entry key="user_id" value="jazz_inv2"/>
  <con:entry key="custodian_account_type" value="CHECKING"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="company_tax_id" value="123456789"/>
  <con:entry key="email" value="testanshul12@yopmail.com"/>
  <con:entry key="company_name" value="JAS Company for investor"/>
  <con:entry key="api_key" value="e6842b30-4014-4201-adc7-e2325d65b055"/>
  <con:entry key="middle_initial" value="k"/>
  <con:entry key="reference_id" value="testwetueu7874478"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="secret" value="VUW5cQgvCV"/>
  <con:entry key="cfp_id" value="362704280369"/>
  <con:entry key="user_id" value="788Qa@yopmail.com"/>
  <con:entry key="address_2" value="PEACHTREE PLACE"/>
  <con:entry key="type" value="ANGEL_FUND"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="getEscrowList" path="/crowd/v0/cfp/getEscrowList"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfpId</con:name><con:value>139603739157</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>139603739157</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.10" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/getEscrowList">get:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="cfp2.4_DBupdate" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="cfpId" value="406456831106 "/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request><con:request name="sandbox" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://sandbox-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="cfpId" value="713066322619"/>
  <con:entry key="api_key" value="ea502b49-ce8e-4830-99aa-e8c16fe77f11"/>
  <con:entry key="secret" value="secret588330"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="verifyIdentity" path="/crowd/v0/escrow/verifyIdentityManually"><con:settings/><con:parameters><con:parameter><con:name>newCipStatus</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Id</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.6" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ver="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/verifyIdentity">ver:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="2.6" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="newCipStatus" value="242d5c6c3b"/>
  <con:entry key="Id" value="141415573618"/>
</con:parameters></con:request><con:request name="copy For Automation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="newCipStatus" value="242d5c6c3b"/>
  <con:entry key="Id" value="141415573618"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="createIssuer" path="/crowd/v0/cfp/createIssuer"><con:settings/><con:parameters><con:parameter required="false" disableUrlEncoding="false"><con:name>state</con:name><con:value>GA</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>GA</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>company_registration_state</con:name><con:value>AL</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AL</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>routing_number</con:name><con:value>011000028</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>011000028</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>company_name</con:name><con:value>Jaspinder Company AL</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Jaspinder Company AL</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>phone</con:name><con:value>1234567890</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1234567890</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>middle_initial</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>account_type</con:name><con:value>SAVING</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SAVING</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>created_by</con:name><con:value>Jaspinder </con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Jaspinder </con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>zip</con:name><con:value>30318</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>30318</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>first_name</con:name><con:value>JOHN</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>JOHN</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>dob</con:name><con:value>1975-02-28</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1975-02-28</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>user_id</con:name><con:value>jas60</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>jas60</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>ssn</con:name><con:value>3333</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>3333</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>address_1</con:name><con:value>222333</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>222333</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>email</con:name><con:value>raghav+123@bancbox.com</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>raghav+123@bancbox.com</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>account_number</con:name><con:value>12345678</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>12345678</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>reference_id</con:name><con:value>iss1234</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>iss1234</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>last_name</con:name><con:value>Smith</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Smith</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>bank_name</con:name><con:value>JOHN</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>JOHN</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>company_type</con:name><con:value>LLC</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>LLC</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>address_2</con:name><con:value>PEACHTREEPLACE</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PEACHTREEPLACE</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>cfp_id</con:name><con:value>139603739157</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>139603739157</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>company_tax_id</con:name><con:value>123456789</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>123456789</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>city</con:name><con:value>ATLANTA</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ATLANTA</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>ppp</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>passport_number</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>passport_image</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>image_file_name</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>country</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>internal</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>verification_required</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>linked_bank_account_reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_number</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_type</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_holder</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_routing</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>withdraw_on_availability</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.7" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/createIssuer">cre:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="cfp2.4_DBUpdate" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>{
   "request_id": 110745229927,
   "id": 183782206375,
   "bank_name": "Four Oaks Bank &amp; Trust Company",
   "account_number": "540126101583",
   "account_routing_number": "053112505",
   "account_type": "CHECKING"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="company_tax_id" value="012345678"/>
  <con:entry key="email" value="testanshul12@yopmail.com"/>
  <con:entry key="api_key" value="44a54efd-8407-426c-8ff6-be48a6683d16"/>
  <con:entry key="company_type" value="type"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="reference_id" value="kapiler"/>
  <con:entry key="secret" value="FBHSlsiYj7"/>
  <con:entry key="user_id" value="testanshul12@yopmail.com"/>
  <con:entry key="cfp_id" value="702802339093"/>
  <con:entry key="address_2" value="PEACHTREE PLACE"/>
</con:parameters></con:request><con:request name="sandbox" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://sandbox-api.bancboxcrowd.com</con:endpoint><con:request>/crowd/v0/cfp/getLinkedExternalAccount?api_key=&amp;secret=&amp;investor_id=</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="company_tax_id" value="012345678"/>
  <con:entry key="email" value="sandboxIssuer123@yopmail.com"/>
  <con:entry key="api_key" value="48542c6a-0e87-493f-90f1-25d24ab93b5f"/>
  <con:entry key="reference_id" value="sandboxIssuer123"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="secret" value="6e4a45593e"/>
  <con:entry key="cfp_id" value="665843518254"/>
  <con:entry key="user_id" value="sandboxIssuer123@yopmail.com"/>
  <con:entry key="address_2" value="PEACHTREE PLACE"/>
</con:parameters></con:request><con:request name="2.7" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>{
   "request_id": 110745229927,
   "id": 183782206375,
   "bank_name": "Four Oaks Bank &amp; Trust Company",
   "account_number": "540126101583",
   "account_routing_number": "053112505",
   "account_type": "CHECKING"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="company_tax_id" value="012345678"/>
  <con:entry key="email" value="raghav+123@bancbox.com"/>
  <con:entry key="api_key" value="e6842b30-4014-4201-adc7-e2325d65b055"/>
  <con:entry key="company_type" value="type"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="reference_id" value="kapilerss"/>
  <con:entry key="secret" value="VUW5cQgvCV"/>
  <con:entry key="user_id" value="raghav+123@bancbox.com"/>
  <con:entry key="cfp_id" value="362704280369"/>
  <con:entry key="address_2" value="PEACHTREE PLACE"/>
</con:parameters></con:request><con:request name="2.7sandbox" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://sandbox-api.bancboxcrowd.com</con:endpoint><con:request>/crowd/v0/cfp/getLinkedExternalAccount?api_key=&amp;secret=&amp;investor_id=</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="company_tax_id" value="012345678"/>
  <con:entry key="email" value="sandboxIssuer123@yopmail.com"/>
  <con:entry key="api_key" value="48542c6a-0e87-493f-90f1-25d24ab93b5f"/>
  <con:entry key="reference_id" value="sandboxIssuer123ccc"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="secret" value="6e4a45593e"/>
  <con:entry key="cfp_id" value="665843518254"/>
  <con:entry key="user_id" value="testanshul12@yopmail.com"/>
  <con:entry key="address_2" value="PEACHTREE PLACE"/>
</con:parameters></con:request><con:request name="PROD_ 2.7" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://api.bancboxcrowd.com</con:endpoint><con:request>{
   "request_id": 110745229927,
   "id": 183782206375,
   "bank_name": "Four Oaks Bank &amp; Trust Company",
   "account_number": "540126101583",
   "account_routing_number": "053112505",
   "account_type": "CHECKING"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="company_tax_id" value="012345678"/>
  <con:entry key="email" value="pap@yopmail.com"/>
  <con:entry key="api_key" value="b9888e53-3938-41d3-9d5f-8e064e6a613e"/>
  <con:entry key="company_type" value="type"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="reference_id" value="kapileriimm"/>
  <con:entry key="user_id" value="pap@yopmail.com"/>
  <con:entry key="cfp_id" value="362704280369"/>
  <con:entry key="address_2" value="PEACHTREE PLACE"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="verifyIdentity" path="/crowd/v0/cfp/verifyIdentity"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value>ref12456</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ref12456</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>id</con:name><con:value>274602070595</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>274602070595</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ssn</con:name><con:value>001-02-3333</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>001-02-3333</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>dob</con:name><con:value>1975-02-28</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1975-02-28</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>identification_file</con:name><con:value>bWFyaw==</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>bWFyaw==</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>identification_file_name</con:name><con:value>file1</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>file1</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>generate_questions</con:name><con:value>YES </con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>YES </con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.6" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ver="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/verifyIdentity">ver:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="2.6" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value="91595092138"/>
  <con:entry key="generate_questions" value=""/>
  <con:entry key="reference_id" value=""/>
</con:parameters></con:request><con:request name="CopyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value="91595092138"/>
  <con:entry key="generate_questions" value=""/>
  <con:entry key="reference_id" value=""/>
</con:parameters></con:request></con:method></con:resource><con:resource name="internal forgotPassword" path="/crowd/v0/escrow/forgotPassword"><con:settings/><con:parameters><con:parameter><con:name>preSharedKey</con:name><con:value>123qwe</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>123qwe</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>username</con:name><con:value>jas65 </con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>jas65 </con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="2.6" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:for="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/escrow/forgotPassword">for:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>anshul99953@yopmail.com</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="username" value="anshul736@yopmail.com" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="internal resetForgottenPassword" path="/crowd/v0/escrow/resetForgottenPassword"><con:settings/><con:parameters><con:parameter><con:name>preSharedKey</con:name><con:value>123qwe</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>123qwe</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>username</con:name><con:value>jas65</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>jas65</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>token</con:name><con:value>0806cdc1-a93a-4e56-aecc-0da4a1835197</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>0806cdc1-a93a-4e56-aecc-0da4a1835197</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>newPassword</con:name><con:value>1</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="2.6" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:res="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/escrow/resetForgottenPassword">res:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>
inv123-inv@yopmail.com/sprint1@
iss123@yopmail.com/sprint1@
anshul736@yopmail.com</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="anshul736@yopmail.com"/>
  <con:entry key="token" value="898165ee-a909-45ed-96e5-fdb1d5552204"/>
  <con:entry key="newPassword" value="sprint1@"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="cancelEscrow" path="/crowd/v0/cfp/cancelEscrow"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value>333031324886</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>333031324886</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reason</con:name><con:value>DEBT</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>DEBT</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>reason_other</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.9" method="POST"><con:settings/><con:parameters><con:parameter><con:name>reason_other</con:name><con:value>other how</con:value><con:style>QUERY</con:style><con:default>other how</con:default></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:can="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/cancelEscrow">can:Response</con:element></con:representation><con:request name="cfp2.4" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="reason" value="DEBT reason"/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="escrow_id" value="348406029037"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="reason" value="DEBT reason"/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="escrow_id" value="348406029037"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="internal getAgreementDocument" path="/crowd/v0/escrow/getAgreementDocument"><con:settings/><con:parameters><con:parameter><con:name>document_name</con:name><con:value>pdftesting2</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>pdftesting2</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>document_version</con:name><con:value>1 </con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1 </con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value>123qwe</con:value><con:style>QUERY</con:style><con:default>123qwe</con:default></con:parameter><con:parameter><con:name>secret</con:name><con:value>123qwe</con:value><con:style>QUERY</con:style><con:default>123qwe</con:default></con:parameter></con:parameters><con:method name="??" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/form-data</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="document_name" value="pdftesting23" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="submitAgreement" path="/crowd/v0/cfp/submitAgreement"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>agreement_type</con:name><con:value>ESIGN</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ESIGN</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>document_name</con:name><con:value>pdftesting23</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>pdftesting23</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>document_version</con:name><con:value>1</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>file_type</con:name><con:value>pdf</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>pdf</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>signed_document_attachment</con:name><con:value>"JVBERi0xLjQKJcOkw7zDtsOfCjIgMCBvYmoKPDwvTGVuZ3RoIDMgMCBSL0ZpbHRlci9GbGF0ZURl Y29kZT4 CnN0cmVhbQp4nB2KuwoCQQxF 3zFrYVZk7gzs8KQYkELu4WAhdj56Bbcxt83I4GTe3PC g BLHzASRyyiwXrs3J647rD ZZ/tTbNTLsOEqmM8 AP7s0AU/ro1FtPG2nGwJL0LNx45W25cLIWo cYo12d0vdHJaaMEP/LAbkQplbmRzdHJlYW0KZW5kb2JqCgozIDAgb2JqCjExNgplbmRvYmoKCjUg MCBvYmoKPDwvTGVuZ3RoIDYgMCBSL0ZpbHRlci9GbGF0ZURlY29kZS9MZW5ndGgxIDIzMDAwPj4K c3RyZWFtCnic7Xx5XFvHueg35xxtgJAQYBYBOpIQCMQis9iGECMMeAm2wTa2wTUBIQQoFkiWhAm5 ce3cLE5wEqdpmq1t7CR14tROLSALTtKa5HZ5adrG6Zr2pbHzkrTp4hvf1kmX2Oh9M ewOW5u733v j/f7Pev4m/lm5ptvvvm2OYdjKRIa8kIC7AUeXJ4BdzBDG68GgB8AEINnV0R88mctBsTPAKi 3Rvs G7jrsd1vAWi BqAI9/lHer/c9bubAHTpAAnb r3unr8vO6QFMEaQx5J 7GieHlFh xi2c/sHItcP Kr6ej 1TtO0PeNzP6x6Lx/Z5bKcMuK8P3qIvVgBkURnEQfeA93Pf1/0U23aAkqFgIBzpgdwYwDWH 6Hgw5A3 Jb/3I2xPSTIAwYt EhBV0jbHCwqlSg3/v34UdyOsBRNCFn8fGAFi7yC8h/DB9DWxC4od YJ2 LnaGT0bip2UAsMH9cBBy4RxZDK/AFFwDT0AdtMB9sApeh OQCCPkNRDACg1wBGzEBByshDSi gIfgl7AdQvA nAE7NMHbxIB8GiEIi6Aq9jssm D22AmkioN6 Aa8QPxkE5QivporIg5c UBsCtLA Hvth7E1sfRXeJ7mxMViN2G8gCfJhD3wBDHAdfD92ASXNhW54ktxIfgdm6IL9QoUwGtsBV8Gz8DPS hNg6GFG8qXkW/DjrcZJGpmKnY7 FbwkEvMjpX F2lHgcprgSvl5xCETIg6thPbhx9F/glySZLOZd sfzYithD2Psk/IlzcN/lVSiHA9ZAJ9wFj6I2fg7vwUcknlSSr5KjeL1B/l3xJsrWBENwA8bWV1F7 T8IxOEEWk8VcGpeG2kqDAtiMYwfgMK4/AadIE2knU Rl/rDCOV0bS4mlxn4bi0EhtKGEB FlXOM8 cSINrsBb IiQI0QUZRdvwh32wFfgFLyBcryNev8I/koK8XqH zy3J7Y1diT2PsqiBhMsgw2wDQKw C4bhMbTqK/Bt A/yCadByteF7yhuUJyL3Yu6zYMVKHszUm9C3vvRSuMwidfPcZdJRMRdLCPryUbS Rw6Q 8kk SX5JafkzNxO7vd8lH Nf0tYolDEqpHTIsjBda2wFfrRAp9Hbd L z0C34FXSSrJI8W4 o5/j/I 5q7gGvB7nXufe5m/lDwgXFLdNn5n w/QnsVFQoZetQj0MwddRCx SRShDAbmOhMm7KPk9 3DN8Iq/nrXwlX8e38u387fx9/P/gfySEhKPCrxRrFG7FUZV7enD6jVhT7BagWUKJcuVDEVTAUvSf XvSmHShfEK8Q3Ag3wSjcjf5yLxyCo7jvk/Aq/Ax DX9ECwAxo8w XH0Ave5WcjdeD5Fj5GXyHfIq eYd8TC/OgpedW8LVcvXcSq6PuxWv 7hT3M 5D/gs3sPv4ffi9Qj/HP9LAQRBiCnK8Fqt2K94Uvma yq5arepW/ DC2YuFF9svvj0N05nTn5u f/rl6d/GtsRGUH4bFEMJSroPpXwIffAwXl9HT3wOvou5  xdM1j8RjijQ49OJFb2hCK1WS1aRNXitIxvw2ozXVrINLzfpJv147SF7yb Sm8kt5C7yJXY9iHs7 TJ4iz H1PHkBr5 R0 Q35PfkTxw6McejN9u4fK6Uq8Kd1nOruGZuI159XACvIBfidqGFnuQmuBPc z/lk3sYX825 J/8Q/w3 Ff6n/N8ETigSSoUaYYvQJ9wsvC68IbwpfKIwKRoV/YpHFK8ojcoK5Wbl dcoHlceVHygvqJSqFlW36kbVT1UxtQ2z1fdw388uSHmlytdJWJEiXM dxrhI54OKfWQzakzJtfJ  /m7 x4peco4Xya/IKO/jd8Qe51dyf UDZAt3klh4k6Ka74U7IUaOcu9w57nfCqmklfsdsQtfIM9z Ab6eU7K8 hMhVbhZ8QEA9wuo5naTKe47/M38zbFvQrXiEXJa8Qj3BojCGS4ZTmNU7 MewEk/4nzc fmgTKhSfgA/1/pTietT3cu52Usj/VHgE3uet3J/JOXI/Zo0fkmuEXO5aroocxYx7keTAWbITguRL 4CIvkl TSSDkCP8kWcsloLWinJYsxaPvh7yZ/JSPg3YqI8njUkkLd47bzL kPMVXEoJZ4sdwA GJ E31n5jMNgxgB93H5mNMaMZv8hJRBOjyA f789Es0YyveVOxHP3uUL4KN4IQO7jWoxth4H682uA3K 4AX0wdvByT0IN8b2kh7M  swf3IwSa6DUhKP2TINZduD58UizoK5sBNX/Svm/ 9j1m8i/w7DRMTI mgK7QEfuFBoxM3Vh/t2PVw90YOsrcK/yWcVPoJmkAQji9CPo5W/BtXjmvIvrZ0INyrcNHhWKUGoR M/NOnPGV6dXgwus2eI1wsBtlXo5x3iKsxsx7f w63KEPz6i1eCa Cr7YA1CPttsYuzm2Hzpjj8a2 Qx9sih3B/LsrNg5LYJ induicAgVmGNfJd/G8 h/kv2Yt1fDrzAf2Ug6/B6vb6BEyxUvwqjwC8yd tbE7Yz DVNSHBTXUjafoezAA/456W81PQfn0em4stpIP4gl1GjbEnoyZSBz0x/yYeV CwyoF5p69 kKM47HK5apdfXXNVddWypUsqK8rLFjtLS4qLHIUF9vw8W67VYhZNOdlZxsyM9LRFKcmGJL0uUZsQ H6dRq5QKgecIFDVaV3aJ0byuqJBnXb26mLatbuxwz voiorYtXIhTVTsYmTiQkoXUvZeQumSKF2z lEQv1kBNcZHYaBWjP2ywipNk24Y2xO9qsLaL0bMMX8fwexiuRdxsxgliY3p/gxglXWJjdOWu/tHG rgZkNxYfV2 t98YVF8FYXDyi8YhF06zBMZK2nDCES2usHuNArUWhopnWhsZohrWBShDlbY3unmjL hrbGBqPZ3F5cFCX1Hmt3FKwrojoHI4F6tkxUWR9VsWVEH90N7BfHiqZG75zUQ3eXI6HH2uPe3hbl 3e10jSQHrtsQTbvhvfS5JjI31Lftmz9q5Ecb030ibY6O7hOjhza0zR8107K9HXlEOdvKrtGVuPCd qMKmTSKuxd3a3hYlt KCIt0H3ZO0O6 1kfZ0XSdGNdYV1v7R67rQMJmjUdg4Yh7PzHSdiJ2BzEZx tLXNao7WGq3t7oassRQY3TgykeESMxaOFBeN6ZMktY4l6mQkQTsf8c6OMYyRU6xp46xeCZXIugbd ISp6RJSkzYp7WkYL7zIY9SxDMvy0E5wV7UF7 KKa q5RfTX26 n8qMKmt4qjHwHa33r2jwt73HKP 0qb/CChKvWTW0XB8Bo86HNHCQuogqnq0KMq4nLUri4t2TXJRa1AvYoXqgxbUrbu9uhSVbzZT8 6f dEE3NqJ7N7RJbRG6jePgKnW0R7kuOjI1M5K6mY7snRmZnd5lRT9 hj2NpEbVebP/dPpFyY391VGy 6DOGvdJ40yZr04ZtbWLjaJes26bWBS1pfNnsmIwRaQAVHhVsqKk1VnS9jdvaaAf U9hWWht9Xasx 1FDGaHJ9G2/k2iWMM/KMFfrv9lnOtNGWQHkJNiXz/55JlRodmPUQcWVU37VaKtvjzOZ/ctJk7Byd xaq5afKeotWOhe2rFrQXiJcwyqPAQh7X1LptdDRuwdhKTFajoyut4srRrlH3ZGxvt1XUW0dP8G18 22iwsWvG/JOxF/YboyvvbMdN9JPqYjzWqW0UeOGTsQrWjXHkRe5beN o4k6Og0KY5L71DA9xKoo8 SyBDrVScxHEOeFIAGrKDXAvpDv3HNRdr1uvP16y7WAO1iOsvYLHYaU4yJ9mwIHgiXhD5qQsuBXyC dwtT6BDL8XyL0ic2eNVVjTdn3LbsbTk7yA5uR/aOHHWpudbcbH5Q8YDxiOIJo4oj2TmLTEa92aIx GXVmqyrdCiZOr1ObJ7kpV7IGn6dcaYm1Bh2ya8HbQwEmOfvzao0lbZHJkTMZm3Il0mHI0ed05hzK EXJe4Ox4Rk9NiD0dVPzzHfVtJyAnNjUeX0nJx N1FQ5Hu M9Pe6DDro04IqvRJjp/w3uk 7U4SD6 V/WvLnaSDuggyda8/Lw8qzUpJW1ReXmqubK8DE yJKtFpVSqrMnCo7q8 GRTX tJY15z6cWXnVty Fz3eaa 4RpWnV6ydfqU1t3rpJ d3mwpttgoxJCQkJvu3k X0Pr4QtfUMaqscPnRtdlX2ZQ1nfdn5 VPox54vOM5XqLRlBZVC1R71Hs1e5V3VAfUCjyTUZs80Wm8noMFvV5sREk8aoVpk5zqQ0qrL0Ro5Y E3W67HI47CiBYn0xVzzJ/cS1uqjIwaWmHM42fpCVla3WHFOrlcdqVXtUHKj0qmYVr9pVcqzIYSou xQn zGOi0WU8beSNm1oqg5WHKvlK0FtsuY9UnDlB9s24hb7j446z5zveu/hxR8fZGv1Z1Jv j/qL qDz9dEcNIoaqUiQjSYYq/dk/gv4jIlUOx2K8BSMdJMmMOlxaniSp1pyUsghVW7aE9vGSglHDFfmo 9Uoz6h prPiYUhjJr1DabImJho2bp3 uty/7TbjfubzOPvTJH5xOh5iWmdvqFFJ1 anlZXavgrv4 gbUkMm33ZFnt03Xb8tPE0uW7p4/Z0vQuD7/zphy7bfoXO1pSdWiJvbF3BIViByzjtroyDF8qIjqi 4 J50Al2KFA4mkkzp0mqniQrXaeWLFuSyRuFzvTOjM7MTqNSoVUkQuFUtRCJj2gjibt0wZygKVga dN6hvi1 n3Zf4i26fY4jwpFyvUFbrq3QVmaXZ1dkV5aSUq5YEHNEU0FBcflyvI uFZwZzhynyWm  uuLqytXa1YWt8Vu0W/VbCrY4sk3ExBnLTZXGJa3prRmtme1l28u3V2yv3L5k29JEPj6 IDneWGCN F6uvKnBWhwyh5DtyH1Q9WPqQ80jplP3lwu86pqrPVaesVy8zQoAzHiev4 PVHkLICzDJN7m0lQ8v zjJmB0zGnJwXsmlPRcbDKYUOR01CYkpCQqIjoTBRyNOwSmklFwGU9sW81Z6i4Y4RV46lghBTHsmb JFaXvjTpZBJ3Gh 0k44nnU7ikya5fc bjuU49BqioQSmgyXkZMmHJbESvsS1qtJV8jo2eCgRS5wl UyVCyUtkJVSRlXhLmu7A7NPR4dgZWnc2dP7sxY6doYuhqlIHetvZWup1SYa0KkKLfYkljsTd m n g/6P58 ir50/y7AOot J GJn/YhrSa5TlWzPiy/SlEOBLq c5CZjoXJiM644oRziE4oc frCcqJL LCi0GazloC5VlhNwOPQ1 hqpIA76uekmTAshlj888b3aPr3HIXS0d5CdIQfeunfgyeFKiE/XVQlO XVU5ArJwtJMkawlntShTMYmk5WA8Kq0W6voWTCFJ5TkcOn9lBbp5bl5eZcWS8jJMNRgO/FGboePY 9v7bHct/9639TR  dFWF6d8yM7JVNltm27P 3V9YWp0//bUvrj3ztH9kWVqmOU6xY9qx79C1ezYs L2/a3Ttw34aHT2sUtTml5I17v9B1y7ay3qKcf4vc2XrvTyozTKV4TsDq2DuK69HzE/BJYsy1 AHD EdVTcU/phWEyotpHblcJ9WqtHfhUu1KTXmPiS3k8JPS8yDt5F6/g12TTNJxZWylmu7K57KQavUbU cDqNScNp1mT1eCQTov3W6Xc6PqYIsx0zSBkx6mzxeZl5yXmJCUnFYCTpxSRFhdgiBWL6OG0xyeCw MKhTiyFNwIJqX7IBNQPp6MBHryQ9mGm5dEkaJuQkPVUcPkTk53FniZrcPH3D9B mP5i  a2Tf3lu 8I67ByZO/u2OQdRSYPqn069N95O7SQ2p/8HYmn1Hpl afmYCH2ZJHdl 9HbMz7H3Y79XfB3zcz4Z dTWNGojhACGcq7nyAEcM2RzJ54qTlyVfn/wgd5qLcapki8WgNxnjzBazyWg048O4UWO2ppiMmWar wZBEOM5isKQYDBbLJHnMpcs/RuI0GsIZM9UGDc9Ncq 6Eg2bkpJEvVPv0vP6RwqoavW1la4CIhaQ QwVnCriC5BRGZzY7LWTKQiwZdvdjko531qzDtLtOj0GCikbkN/TUpscZeu7Zs/tKHAoMEDBUkap0 qj2Vvoam4hB6sV1jyDAUkFqoMjTDNYZO2GYIwHWGGwxfJk/h0/qzhtfI34nhQ7ynwMzdDjsdZCf6  AngYkcmcgy1HMo5sUhba5iMffAcBqQrq4qi43JlZNVzGVVEnU7RN106Q5VhkaGK06ciZFQlY994 fBWyOSVVf302pYpzJbG4mW9xbLdDB28mMwdDKj2CU5Os5JKTmR0XRhLkr86ytZSSN mJnHvhX/F4 dk7bS7fmLrrq6quyr1KsvaDiE2fO5U/uEBoufHOmxR9vLErW0DO6AM/o59EHRLjNZdSDHj1OJC7L Vq6PG ZGxYfEp8QTYgJBm97tKk/sWbKZ257D4f0Mb7YsWmpMutoSR 9wrKJJBCc zvPw26wkPZdl 5Xg1HCN tPu3XfGL0iwaTdwjZncHMyYz5fnz9FQ9i/Z7r6OqykFPThJy4NGZxs/sc0YNeUrUAqqA HaFLhPvNkU9 U77FlpqVv66c6/VvFfUJZTd7vvL5fjKsmr7HtkyM8Dv2iEU2Gyl0jVw4tsmUmlIy hHtNxnvGp3CvJeT ZxRADE7qgUfQA53Xpl b0eIUitL JW0kbyR/f9od coMRYaSA2eqKtUuOluc CoVCqVLaUznBjBrKVdnzc 22EqdzJXE5N5A21bacNnuLM6wMq8L2cGHQuZfsVd6iusW t3Cv82Dh 4 Rx7pDz29k/yz7jFG9V7lPts/NExRmJdINoyhONJrCXGEG6VcxJzzbm5Oalp6VhEk3Jz89TqdU0 Mgry7diyp elldpVTrVdlZ XrjDp8W7YZMqht5ZpiywuvAUS8 nWDNpKMd Z78pvyQ/m782/J1 V P8k9OFG6YzTdkYEx5ci8WJOZzu5 WRjVyAdOVRWFfYJ06GCdzhBiqMIDCI fKQcr5 P0VrJj5056 PpAQcbD4UcTOuBIxcIjdEF8LtEinAZNQpZIqlPGDsQQWBoQdIR2EujzedF7q8IR5PAsIesAQQs S PCt/ivwyM7NnY830iay8jUUXp2ggTN 5ovSalDyuIae0 WpiJHE12UuWKNbaSra4L16cPjYTAaSO W9ZTZo2z2YqKcq dbiKPXVuSVZTB/v6M58Ybf/z 5/5a3amr UidIb2feuzd7Fdm/iiHmfMdzJw7 ENXI77TYPJV5uhG2zv7tjsDCj0ZZRbKEd2E5QqEQhr0cfYr5HqxWfC/2PvYVIE7f9FwFPyYP8Cl4 PSZ8TZGpLGacNFAFHOPDgR5KoQ7n/lCXjiFHe1fx24A DUl/MwQZJ5DDWjyblUiyZJyHECmUcQFy yFdkXAHpeMsk4UqwkB/LuAreJOdlXA153A9kXAO3cX S8TjFFv56GY HkPpHMp4AvRqXjGuVz2ie kPFE2K7fNqujPfrnZJyALqlSxvEWPqlBxnmoSmqScQFpbpFxBSQkfVHGlZCUdFDGVeBPisq4GpIN WTKugXpDqYzHcUcNIRmPh6rU7Nk3lOWpW2Rcy29LvUPGE6Ek/V2UhAhU6wkZSQxXUItkZDNcyfqL Ga5i/VUMVzN8DcM11EYZ7TKONsrcKuNoo8whGUcbZd4s42ijzI9kHG1kTJZxtJHRIeNoI M6GUcb ZdlkHG2U1STjaKOsN2QcbWTJl3G0keUhGUcbWWIyjjYqmGB4HN1XoY7h8XQvhUaGJ7B SYZEhi9l uJ7upbCe4cmIGwo3MDyF0XgYnsr4BBi iPXvYXgGm7uf4UZGI8mWzWieYriJ4c8yPJfRv8zwQoa/ zvBihv a4mpJ/j8wXFrrLxRPYP0OnuFsLw62Rx31H3AYoRVGIAhe6AU3eLAW4SmEVuhn DoIwCBC RKYSoR5bIcRp6cZ H6MQsceP80sQa2D97v9DTqWzkomwCUf8MDRLE2Z/ZR U11uMeaMKD diGStj vXU4w4/1RpzThzJE2KyNyC MEIJdWPbgGj4YYH0irMd6mNEEsM N/Cl1H67rx1boUzuo/k9mi5fM r4YtbOXw7E6ppMuwFNk7Cx/uJ4QjYYReXKXgP H/j7jNzZLmzM1oQU2uw/HP5vsNZjVqkx4cG2Cy 78A KtV/354i9lJt HDVCJOc6l/ENqWJyFw3o4Qiyknn07fhdL11WDbj2r3MrlRCOs LXMNM9n6Z W8llZJJ8KIDrUpmCSDvyD6m8zHcp3TCTqm92XZ8cGcXMFyNMBj/2jMh6CLFdUa5F2LOF0UdYvwhr mf6oJgfZnqiPljMr9bNZkl5mtOyGbsZZnJVuLi6pHCGmPZHthY66L9HjDPeZ9oy15ltcsuNaJm P bKNBpskw8nQzviG2k155D8NMVg WlG E9bgZrx7Gk0bYIJODWojGJqXpl2nCGAHdzFY7EZP04Ge6 68aWh/mdl8k1KNe98zximMngR96U1wCLj4jM1cM0E8arl0WZOM mHqYZ97ycIck2oxHJan1MT242 t2eB7cNsbcmzRGafHoYNMa15mV4 2xfyZQ35GA/PvIjoZtSf7SdSBHzafvM1LOloUJZ0cLaPZpEh lvVEORN54XoWdYPMWrsYT58ch5KOpL4gmzujVcmLdrHsu2s2JqiuQ/LaoVkL7Zj1uUvjS9LDPxdj 0u5WMM R/DowK7/kl5IeBuV8vlDjks/1MOtL3j3ENCxxGmJ7l9ZsYbwoxwj2u fllRaWrQeZTqR4 9i3wZilHjjDJ/GxGmO3UL3tdP7OjW143JOc7ursws/zQgvih0tKIm5GReoPIvFKyB923h U6/6yF /XIe7UbwM lG5B0PsVwrcRpmI/2MWwAvKWd6ZNsM4BxJ11uRroetMCLraH4 6WZzd8iyShqiGuhD uIHRUE Znyuor0tnQEQeCSzIoT3Mv4YWWHGGs5vl9MA8bj1Mf0Fmk5EFlD1MQyGm2xm7lrBzPoL0 1Xj/UIo6oFcJyxrzPbJEzjqljH4AuZdiGWGZgMpFW2HoZLylqJPyY2j2jCyZnfl/d8VhZomZnDi3 ynqMklaM pUI9XhvQ/Fm7KXRs5JlD9rfiD2bsKR3P6vwRG9k/6OC9raCFuIYzJ07nz5hZvr75 WC oKzlkdnM/M dsnO28slWlnxrJvuNMH dWdPD/l/Y3F3B/Cw7I48UTwPzzjA3iwbJswZl7m4mhZed qZKHUT9vl1ej0blLzv/dLHv75JNLWucfaWbmnmxYPnFpLPnm5cD5WV6KpF7ZWy6nr4C8L6ox74JM OhOzn16vR84kIRb5Q7MZo1u2zPyz8/IZeKGmpLPk017x6ZV9coyKqDk3uw fu0txs3PCy/LS5dem 2t8sn5HSmTLyKVtIdlp4TyhlQjeTKMg065OzyD9jc1H2xZk83jdvXZo7epimpfNYOv1D854Timap Q/P8du6 5LM15WdZw3dJTp/jN3Nehpn/zd0VzOS8OcoA0kp30ENM45R// x JLnme/eAnCUl/UtR FZT9Yy6bLvShz9rRnH sYXv/tOVmzkLpzi48bzfSSeNhVh28xAahS/Q9x5nuL8Du5Xrks4Ted0hP KDN54J x/gw/KSa98nm68Fyc4fdpO0raknYQkc/yy8XxjMXcl i6978k7ZyWP72CR75/65Zb8yXy yidhBM eGQ70 Yn HzT6pGLHp0H6P0wLEF KTwbLsNeJPU686F9NNkOTTOnE0cU4UiHjS/EZYimb tQQq8YmCAuX Xzvr/vsn48xY6SXamz0PW0eC3l63xys Jbb2e8V1gcFABLvE kAoGAi5I77AoBj0 e0rEBnfE/Z8QlVJm4qaAf4j2hMU1gzhvcVWVsxiLshKxzu8XN/r6 iNhcaM37A3t8va0 ga8YXG9 d1jcGBhwD2709g353aGZBaovGRbl8eot3lCYLlpWsqxMtK/zeUKBcKA3UnAJ/XwyNoQjbKBl07rW S2iPiK0hd493wB3aIQZ6P3OfYsjb5wtHvCFvj gbFCNIunmT2OKOiHli6zqxube3RHQP9ohef9g7 3I9kJbOcUEOBvpA72D8yv8srNoTcw77BPjrXh8YoFjdF3IN 7wjKEPKFA4NF4hafJxIIiWvdoR7v YATVWl7W2u8LoyxUZHe33ytGZmzZ6wuFI6I7GPS6ZRkpOa3ptqSN4x7XBgZ7cEeD3uFw0B30horE XlxhuN/n6Rd9EXHYHRZ7vGFf36C3p0QU10TEfuwJD3WHvTuHUAb/iNjt9QQGvGJg0Ev5UUUMB0L  nrA4EEABwkMejzcc7h3yM9FET8jLdBhGblQQ3Fqfb9DtF3uk3YfFYVSWOIBmEIcGe7yhS7WQjwL5 Ql4PM0T3yKU6QQPM7k8SGCUaRKaDFAsFhvr60S6i9/qIdzDs2 XFTXqpVRELhgJUVFTRroB/F7VE 71AIZ4fohnZQzc3YC2W4jMVwuRXuMOo6QPmjLlGGQfRzWXDUXI/oQXUPeSJINBSmM1u8oaA3MuRm vtLidw9GfGhnn6Rm9MgRMeDvEcORETStp98dcuNc5BbxecJi95BkH3ePO0g5RgJiH92H93qP1  n G/ajj3b7/L7ICC48FPQj0bAv0i/2BQLomShLYGAEpd7q6/GiIYfCkp90BwI7wkygAXef wbfoDcs eUXIixEQwUZA8tCegGdI2iIldvvDAUbW4wsH/e4RqbNnlzcU8dG9lvRHIsHq0tLh4eGSAVmRJeg6 pf2RAX/pQIR Q6h0INwZoaZDfwzRiCyhg//kxGGvn3oim7K uXXNyjX1da1rmteLzSvFtWvqG9dv ahTrVm1sbFzXuL5VG6eNY7EzGzAU72degKZDjaEzXyZk2a58uGXUFnW/kcAQnekJ7GKpQHJZygft NMAizC36UVmDSO7uC3m9VGElYjtO63ejsQLdETdqGK23QBiayYYxcEWvj3mg5PJopF5Uy5xcqO1I oM8rOSm17Ow8NEIk5EMXQdYophyd8xxYFgqjZFYVs5MRd4u73P4hllLc4bA3Mn92ibgZIxIjZWRm F7gnOROiE7rFcNDr8aGLfHrnImqR ngfm vu6fHROMbwD7EzoYh2h5huWS65RCi/b8Anezqjo3EZ jkg5mXoe6wwMY4Ie6vb7wv10HeQlqXsAXRLlR1MFR0TJTWUNLVyI6WNN79zmaBRisguzZTBoPN7Q oLyDkCw3Iw73B4YwWEPeXT48UKgPfHr7lA4t6cU4lWOR0s3uEcXCBSIY5XM2phtzy1L3Xp4tE3l2 ggfzW7d3hhGu445UU4LNm rwULEvq1haIC5dvKzYWeF0ajSbm7DTuXhxRQWWS8uXikuXVFZVVmnj /kHUfWYw0lapLB6LQ3xYDrDHTPpYQB8SR4gWbz2uw1uQ37Ebl5mxmT/ 9Uh/uOMf5sf4b/InEU7w L/DHrrxYufJi5cqLlSsvVuDKi5UrL1auvFi58mLlyouVKy9WrrxYufJi5cqLlSsvVq68WLnyYuX/ yRcrC/76MYe7Gf3lxt65ZI53wd9FpDvvy/P0Mw f1xZyhMVCk7BKuBrLqgUr0Bz8j7isZzFDc4 0  34SJY/ywOKiDqlC7MyjMv1jDpfHZ/ /OcTMyP4ynxOxKf6dicbGMtck1o4SVo/bC8rYwHhmVtk3  Xe4Y3hOmLDj9PgiIxt5e3zFChlZskxCJgqLy07XxfFvw4cIHP82fxr9jM2asJeUnavTYgfhPw86 QsAEh/hfQxSBAxf/q4ncvLKDJ/kf4Pj3 VdRUjrt1XFtUhky/B7/PBjAxD/HPyuPPDuRmFQGdWH  LiAwheUphDMI5xAECPBPwh6EAwjHEQTQYWlCKEVopj38Uf4oynmY/ld2LEsRAggHEARo5b O/Tto yR/hrwMLzr2Tvw9Ssd7Pf5HVX8M6E vHsD8H60exTeuDcvvLWNPxh X h7C9COsH5foB7DdifT/7 USkT/yW5vYsfYvMicn2ID4/nmPR1OTguIjgReMTuQ w VN191MBYEv5m3s9WGsO6DOsBqUZ17R43 W5mNdk kZZQdQpXuRtXvRs3tRs3tBgGHbpyhuVGiKeZvRJobkeZGpLkRteLkw7hemH6VAUs9gojA o97DqHfaH8VyCuEU678Fy3sQDtEWP4x6LECp7uCvG7eb0Mn6JqpcZbUv8r2oahffO5GRXXZgrqWJ o46IdaJc6yitl416JzQJtNc7kZkt1Ui1oy6R98C/IHCQgmUuQgVCA4LAe8ZzS00v8OthQA2uRNMe bg /R9ijEJwNxHCSL4MWNaBLGvhiqEGCAlNnDVnapQlq9mp4 nVCp8aladEoAvwe/gDP068g1vLN fCevoF/pVlWX02/yrFJWl98Tfyg Gj8VfypeEVVOKU8pzyjPKRWi0ql0KVuUXcqgcq/yHuUhpeYe 5T0qris GL83ntfHi/HOeFd8S7zCpCKH6m7lu lXGbDUIwQR7kEQUMed2C/y1yJ0ojU6URXXYj9g CdjSI5xC/AzWCmzpkE6HdDrs1WGvjn0XX8dGWhC6EILyqHJ2ZGYOpT9HRxDycTQRe mXB85geY5i CNdgS4stLba0SHWKu4AS6rEUEVoQeNZ3BgG9BsuZMac83oWgZOPnGM3MmIvO5S643PlTBSRKv3pI 7ikgrpraujKXBQuDwdBp7bR12jsPCwFrwBawBw4LzdZmW7O9 bBQa6211dprDwul1lJbqb30sGCy mmwmu mwcGDt8bUn176 VuhcG1i7Zy2/lH5zcNzhLGO1xUbrZ8czMsuW6uqu5o7jdjqxPIhwGoEH HZYmhFKEWoQAgoI7znqfxt6nsfdpaEboRFDgrKdpisHSJI/R/oNsjGJ0nFswzuPmj41XlzfXrcW0 24lwEIFH3sdw/BijlrDjrD K5RnW3yzTH2L9lMqEMDOPJsFtLN1twzDcBrUInQhBBAW8zm F0wjI HUsTQhDhOILAb8NrK7 VexqvY9wxvsilXZxqgkWL8PgwJKn1dXouAX1BS46w8kFW3sHKWlbmuhKv 0X58jfZb12hvu0abjwhnx4NNS 5jpdkVX6d9pk7bXKctqNMitzQwg5ZLZaWSluQPrFzPyiJXiln7 N7P2z2btf5i1XzVrd5q1V5vpvCyMYS2Xwsp4WpL7WXkNK/Nc8Sbtd03arSbtUpO2TkseIbg6rGBl DiuNtCR/ekbXoAPNi RP0ICcyHhNgWmSA1aR2HhNHVbT4zWrsLo4XvMIVn8fr/mi6SXyN8KONvLx eO57prpUcp6sEWj7z3L9H2QNHMX6HNZ9WD8BNcSG9dfGa26i9I/j/Iex/RhY1JT UWhh8w6SNaz/ q/K8r4wXdeOqXx4vGsFVH4YituoD40XvYe8Xx4vuwOre8SI/VgfGbVTA68ZrCk11SaQPcjlK6wEb RyVZK6 4Gjn7sV4lTW4cL6KzGugCk6R 3LoYq3wq5UvECi1sOdO4lW0yG6yMRRZYmdBGsLE6keiY 8FqwsFo9br0JuSifsb1n kvNi3Tj8BHRjT9ievcl3N8WbP4vsmb8qOmNE1Rd46bXiyaJ7TnTj6wv mr6TO0m2jJumiibVOHCyaJIjz5rGUMlRpOXIc6bjRX2mp61s9LAVR9HUB2uKTV 2bjM9ZMP2uOmm opeoGDCAO96Cw 1Fy01ra46aVtomCQ67anAxV5yp2hoyVWH3skmyZuKoaXHuJBXFiTyOPmcqxBXz rEyUzUtf4CpBRYZcRaqIqlu1RbVBdZWqXFWsElXZqixVitqg1qsT1QnqOLVarVQLak4N6pTJ2BmX g35/LkWpZz jJ9BSYLieoyXHvl4HHFFzGDvRZL6Ja9q0gkQNTdDUuiK61NE0qYptjC5zNEXVLZ9r GyPk7nZsRbnbJwm0tqGD0q5bjfQHlE4AIaW33mWk9Y233tXeTpqiUx5o6hajH2/CfcRt2BZVWFek w6Jdtem1huVJVSsbLlN0yaVj7pPumP9Jz47e37SpLfr17PZoGUVi2e1N0VX0p5dOcDu5QGPDCS5I q/a2E QGbmfjRtpPbmhonyUDCxdEMqihFSWbAAslAwuZYGRrGRm6qaWxYcxikYheIWsoEbrPK4yo T KVi0sgrxZaIRmXA7mMVy6XQ8nQHyRmuvnMEoDoGDNdAjBmWZRozGZDkiIbJRlbakOCMdtSNnx0 bthqk8RpBxtbx0ba2TqEzNHYJRr0ApmGUyON4//mx7viv0BMJtxv9XjoD2B1WRu9CF3R/bv606N7 u0VxrOct Zex8rq6Pf20dnujb1m9DdEea4M45vZcZthDh93WhjHwNLa2jXlc3oZxt8vdaHU3tE88 sae acFad8yuVb/nMsz2UGb1dK0nmi4z3ESHn6BrNdG1muhaT7ieYGs1bVxBmlraxtSwor1 u1RP cPFxGA9dRnP7ikX64HIWHFeZ0z9vfEEAPLbiHe3RBOuKqBaBDhXXFdfRIYxOOpRIf JMHkr//FVm 4wvkiDykx 4k6wpwQHqjr2H2XzgcjlAYGnJgGRlKZ30RDFrzpqboSvqDTDXRmsaoq6uhnf22wJD8 qW9z6U/WvF7DBWr21ByoOVhzvEYxNNSO3YaTltctXKclYNljOWA5aDluUdKB7W3PuWoOWj608EPo TSSCn8YGtuYQ1viPNiNDYfoBXCCMIC3nGHLUt9VZwMPTLy/zWCYjWBHKETYhKODfsPwJwrsIf0YQ 4GYsv4jwOMIE7eGL eLGdF8DXbHdQZNOOl824awsWzaJtbtXqjdtk rG9VJdU1eWjvV4bXlcnQ5v wAm8gOX3EX6F8HuEvyMo DK jDEfkry2PQxhB0Hx6TfSI7QIOyKE/iwDoeqOhB0OCLOfacCOCCWd  7EO6QMkPASoCjQIVkjEesN02hCtZz7/G6AbMg8KZW5kc3RyZWFtCmVuZG9iagoKNiAwIG9iagox MTEzNwplbmRvYmoKCjcgMCBvYmoKPDwvVHlwZS9Gb250RGVzY3JpcHRvci9Gb250TmFtZS9CQUFB QUErVGltZXNOZXdSb21hblBTTVQKL0ZsYWdzIDQKL0ZvbnRCQm94Wy01NjggLTMwNiAyMDI3IDEw MDZdL0l0YWxpY0FuZ2xlIDAKL0FzY2VudCA4OTEKL0Rlc2NlbnQgLTIxNgovQ2FwSGVpZ2h0IDEw MDYKL1N0ZW1WIDgwCi9Gb250RmlsZTIgNSAwIFI PgplbmRvYmoKCjggMCBvYmoKPDwvTGVuZ3Ro IDI2MC9GaWx0ZXIvRmxhdGVEZWNvZGU PgpzdHJlYW0KeJxdkE1PxCAQhu/8Co7rYQPttromDYmp NunBj1j3B1CYVhILhNJD/718rJp4gDzDzMvMO6TtH3utPHlzRgzg8aS0dLCazQnAI8xKo6LEUgl/ jdItFm4RCdphXz0svZ5M0yDyHnKrdzs PEgzwg0ir06CU3rGh0s7hHjYrP2CBbTHFDGGJUzhn2du X/gCJKmOvQxp5fdjkPwVfOwWcJniIo8ijITVcgGO6xlQQynDTdcxBFr y52zYpzEJ3ehsgiVlNYV C1wmrurIp/x ilwlLmnkOtd0kW8zP0W y9xGPmftfep/7RQniav6cYjF5lxwl/aZbEVDSsPvyq2x UZXON0BjfcMKZW5kc3RyZWFtCmVuZG9iagoKOSAwIG9iago8PC9UeXBlL0ZvbnQvU3VidHlwZS9U cnVlVHlwZS9CYXNlRm9udC9CQUFBQUErVGltZXNOZXdSb21hblBTTVQKL0ZpcnN0Q2hhciAwCi9M YXN0Q2hhciA4Ci9XaWR0aHNbNzc3IDYxMCA2MTAgNTU2IDI1MCA3MjIgNzIyIDYxMCA3MjIgXQov Rm9udERlc2NyaXB0b3IgNyAwIFIKL1RvVW5pY29kZSA4IDAgUgo PgplbmRvYmoKCjEwIDAgb2Jq Cjw8L0YxIDkgMCBSCj4 CmVuZG9iagoKMTEgMCBvYmoKPDwvRm9udCAxMCAwIFIKL1Byb2NTZXRb L1BERi9UZXh0XQo PgplbmRvYmoKCjEgMCBvYmoKPDwvVHlwZS9QYWdlL1BhcmVudCA0IDAgUi9S ZXNvdXJjZXMgMTEgMCBSL01lZGlhQm94WzAgMCA2MTIgNzkyXS9Hcm91cDw8L1MvVHJhbnNwYXJl bmN5L0NTL0RldmljZVJHQi9JIHRydWU Pi9Db250ZW50cyAyIDAgUj4 CmVuZG9iagoKNCAwIG9i ago8PC9UeXBlL1BhZ2VzCi9SZXNvdXJjZXMgMTEgMCBSCi9NZWRpYUJveFsgMCAwIDYxMiA3OTIg XQovS2lkc1sgMSAwIFIgXQovQ291bnQgMT4 CmVuZG9iagoKMTIgMCBvYmoKPDwvVHlwZS9DYXRh bG9nL1BhZ2VzIDQgMCBSCi9PcGVuQWN0aW9uWzEgMCBSIC9YWVogbnVsbCBudWxsIDBdCi9MYW5n KGVuLVBIKQo PgplbmRvYmoKCjEzIDAgb2JqCjw8L0F1dGhvcjxGRUZGMDA2RDAwNjQwMDY5MDA2 MTAwN0EwMDZFMDA2NzAwMjA Ci9DcmVhdG9yPEZFRkYwMDU3MDA3MjAwNjkwMDc0MDA2NTAwNzI  Ci9Qcm9kdWNlcjxGRUZGMDA0RjAwNzAwMDY1MDA2RTAwNEYwMDY2MDA2NjAwNjkwMDYzMDA2NTAw MkUwMDZGMDA3MjAwNjcwMDIwMDAzMzAwMkUwMDMyPgovQ3JlYXRpb25EYXRlKEQ6MjAxMzAzMjEx OTAyNTIrMDgnMDAnKT4 CmVuZG9iagoKeHJlZgowIDE0CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAw MDAxMjI3NyAwMDAwMCBuIAowMDAwMDAwMDE5IDAwMDAwIG4gCjAwMDAwMDAyMDYgMDAwMDAgbiAK MDAwMDAxMjQyMCAwMDAwMCBuIAowMDAwMDAwMjI2IDAwMDAwIG4gCjAwMDAwMTE0NDggMDAwMDAg biAKMDAwMDAxMTQ3MCAwMDAwMCBuIAowMDAwMDExNjY4IDAwMDAwIG4gCjAwMDAwMTE5OTcgMDAw MDAgbiAKMDAwMDAxMjE5MCAwMDAwMCBuIAowMDAwMDEyMjIyIDAwMDAwIG4gCjAwMDAwMTI1MTkg MDAwMDAgbiAKMDAwMDAxMjYxNiAwMDAwMCBuIAp0cmFpbGVyCjw8L1NpemUgMTQvUm9vdCAxMiAw IFIKL0luZm8gMTMgMCBSCi9JRCBbIDxCQUE3NjY1RDUzRDU4RTRGODhEQTVDOTNCRDBEMDcyMz4K PEJBQTc2NjVENTNENThFNEY4OERBNUM5M0JEMEQwNzIzPiBdCi9Eb2NDaGVja3N1bSAvRjhCODFD NkFBN0U3RDc3MkRBNEJFNUE2NDYzQkUyNTYKPj4Kc3RhcnR4cmVmCjEyODQ5CiUlRU9GCg=="</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>"JVBERi0xLjQKJcOkw7zDtsOfCjIgMCBvYmoKPDwvTGVuZ3RoIDMgMCBSL0ZpbHRlci9GbGF0ZURl Y29kZT4 CnN0cmVhbQp4nB2KuwoCQQxF 3zFrYVZk7gzs8KQYkELu4WAhdj56Bbcxt83I4GTe3PC g BLHzASRyyiwXrs3J647rD ZZ/tTbNTLsOEqmM8 AP7s0AU/ro1FtPG2nGwJL0LNx45W25cLIWo cYo12d0vdHJaaMEP/LAbkQplbmRzdHJlYW0KZW5kb2JqCgozIDAgb2JqCjExNgplbmRvYmoKCjUg MCBvYmoKPDwvTGVuZ3RoIDYgMCBSL0ZpbHRlci9GbGF0ZURlY29kZS9MZW5ndGgxIDIzMDAwPj4K c3RyZWFtCnic7Xx5XFvHueg35xxtgJAQYBYBOpIQCMQis9iGECMMeAm2wTa2wTUBIQQoFkiWhAm5 ce3cLE5wEqdpmq1t7CR14tROLSALTtKa5HZ5adrG6Zr2pbHzkrTp4hvf1kmX2Oh9M ewOW5u733v j/f7Pev4m/lm5ptvvvm2OYdjKRIa8kIC7AUeXJ4BdzBDG68GgB8AEINnV0R88mctBsTPAKi 3Rvs G7jrsd1vAWi BqAI9/lHer/c9bubAHTpAAnb r3unr8vO6QFMEaQx5J 7GieHlFh xi2c/sHItcP Kr6ej 1TtO0PeNzP6x6Lx/Z5bKcMuK8P3qIvVgBkURnEQfeA93Pf1/0U23aAkqFgIBzpgdwYwDWH 6Hgw5A3 Jb/3I2xPSTIAwYt EhBV0jbHCwqlSg3/v34UdyOsBRNCFn8fGAFi7yC8h/DB9DWxC4od YJ2 LnaGT0bip2UAsMH9cBBy4RxZDK/AFFwDT0AdtMB9sApeh OQCCPkNRDACg1wBGzEBByshDSi gIfgl7AdQvA nAE7NMHbxIB8GiEIi6Aq9jssm D22AmkioN6 Aa8QPxkE5QivporIg5c UBsCtLA Hvth7E1sfRXeJ7mxMViN2G8gCfJhD3wBDHAdfD92ASXNhW54ktxIfgdm6IL9QoUwGtsBV8Gz8DPS hNg6GFG8qXkW/DjrcZJGpmKnY7 FbwkEvMjpX F2lHgcprgSvl5xCETIg6thPbhx9F/glySZLOZd sfzYithD2Psk/IlzcN/lVSiHA9ZAJ9wFj6I2fg7vwUcknlSSr5KjeL1B/l3xJsrWBENwA8bWV1F7 T8IxOEEWk8VcGpeG2kqDAtiMYwfgMK4/AadIE2knU Rl/rDCOV0bS4mlxn4bi0EhtKGEB FlXOM8 cSINrsBb IiQI0QUZRdvwh32wFfgFLyBcryNev8I/koK8XqH zy3J7Y1diT2PsqiBhMsgw2wDQKw C4bhMbTqK/Bt A/yCadByteF7yhuUJyL3Yu6zYMVKHszUm9C3vvRSuMwidfPcZdJRMRdLCPryUbS Rw6Q 8kk SX5JafkzNxO7vd8lH Nf0tYolDEqpHTIsjBda2wFfrRAp9Hbd L z0C34FXSSrJI8W4 o5/j/I 5q7gGvB7nXufe5m/lDwgXFLdNn5n w/QnsVFQoZetQj0MwddRCx SRShDAbmOhMm7KPk9 3DN8Iq/nrXwlX8e38u387fx9/P/gfySEhKPCrxRrFG7FUZV7enD6jVhT7BagWUKJcuVDEVTAUvSf XvSmHShfEK8Q3Ag3wSjcjf5yLxyCo7jvk/Aq/Ax DX9ECwAxo8w XH0Ave5WcjdeD5Fj5GXyHfIq eYd8TC/OgpedW8LVcvXcSq6PuxWv 7hT3M 5D/gs3sPv4ffi9Qj/HP9LAQRBiCnK8Fqt2K94Uvma yq5arepW/ DC2YuFF9svvj0N05nTn5u f/rl6d/GtsRGUH4bFEMJSroPpXwIffAwXl9HT3wOvou5  xdM1j8RjijQ49OJFb2hCK1WS1aRNXitIxvw2ozXVrINLzfpJv147SF7yb Sm8kt5C7yJXY9iHs7 TJ4iz H1PHkBr5 R0 Q35PfkTxw6McejN9u4fK6Uq8Kd1nOruGZuI159XACvIBfidqGFnuQmuBPc z/lk3sYX825 J/8Q/w3 Ff6n/N8ETigSSoUaYYvQJ9wsvC68IbwpfKIwKRoV/YpHFK8ojcoK5Wbl dcoHlceVHygvqJSqFlW36kbVT1UxtQ2z1fdw388uSHmlytdJWJEiXM dxrhI54OKfWQzakzJtfJ  /m7 x4peco4Xya/IKO/jd8Qe51dyf UDZAt3klh4k6Ka74U7IUaOcu9w57nfCqmklfsdsQtfIM9z Ab6eU7K8 hMhVbhZ8QEA9wuo5naTKe47/M38zbFvQrXiEXJa8Qj3BojCGS4ZTmNU7 MewEk/4nzc fmgTKhSfgA/1/pTietT3cu52Usj/VHgE3uet3J/JOXI/Zo0fkmuEXO5aroocxYx7keTAWbITguRL 4CIvkl TSSDkCP8kWcsloLWinJYsxaPvh7yZ/JSPg3YqI8njUkkLd47bzL kPMVXEoJZ4sdwA GJ E31n5jMNgxgB93H5mNMaMZv8hJRBOjyA f789Es0YyveVOxHP3uUL4KN4IQO7jWoxth4H682uA3K 4AX0wdvByT0IN8b2kh7M  swf3IwSa6DUhKP2TINZduD58UizoK5sBNX/Svm/ 9j1m8i/w7DRMTI mgK7QEfuFBoxM3Vh/t2PVw90YOsrcK/yWcVPoJmkAQji9CPo5W/BtXjmvIvrZ0INyrcNHhWKUGoR M/NOnPGV6dXgwus2eI1wsBtlXo5x3iKsxsx7f w63KEPz6i1eCa Cr7YA1CPttsYuzm2Hzpjj8a2 Qx9sih3B/LsrNg5LYJ induicAgVmGNfJd/G8 h/kv2Yt1fDrzAf2Ug6/B6vb6BEyxUvwqjwC8yd tbE7Yz DVNSHBTXUjafoezAA/456W81PQfn0em4stpIP4gl1GjbEnoyZSBz0x/yYeV CwyoF5p69 kKM47HK5apdfXXNVddWypUsqK8rLFjtLS4qLHIUF9vw8W67VYhZNOdlZxsyM9LRFKcmGJL0uUZsQ H6dRq5QKgecIFDVaV3aJ0byuqJBnXb26mLatbuxwz voiorYtXIhTVTsYmTiQkoXUvZeQumSKF2z lEQv1kBNcZHYaBWjP2ywipNk24Y2xO9qsLaL0bMMX8fwexiuRdxsxgliY3p/gxglXWJjdOWu/tHG rgZkNxYfV2 t98YVF8FYXDyi8YhF06zBMZK2nDCES2usHuNArUWhopnWhsZohrWBShDlbY3unmjL hrbGBqPZ3F5cFCX1Hmt3FKwrojoHI4F6tkxUWR9VsWVEH90N7BfHiqZG75zUQ3eXI6HH2uPe3hbl 3e10jSQHrtsQTbvhvfS5JjI31Lftmz9q5Ecb030ibY6O7hOjhza0zR8107K9HXlEOdvKrtGVuPCd qMKmTSKuxd3a3hYlt KCIt0H3ZO0O6 1kfZ0XSdGNdYV1v7R67rQMJmjUdg4Yh7PzHSdiJ2BzEZx tLXNao7WGq3t7oassRQY3TgykeESMxaOFBeN6ZMktY4l6mQkQTsf8c6OMYyRU6xp46xeCZXIugbd ISp6RJSkzYp7WkYL7zIY9SxDMvy0E5wV7UF7 KKa q5RfTX26 n8qMKmt4qjHwHa33r2jwt73HKP 0qb/CChKvWTW0XB8Bo86HNHCQuogqnq0KMq4nLUri4t2TXJRa1AvYoXqgxbUrbu9uhSVbzZT8 6f dEE3NqJ7N7RJbRG6jePgKnW0R7kuOjI1M5K6mY7snRmZnd5lRT9 hj2NpEbVebP/dPpFyY391VGy 6DOGvdJ40yZr04ZtbWLjaJes26bWBS1pfNnsmIwRaQAVHhVsqKk1VnS9jdvaaAf U9hWWht9Xasx 1FDGaHJ9G2/k2iWMM/KMFfrv9lnOtNGWQHkJNiXz/55JlRodmPUQcWVU37VaKtvjzOZ/ctJk7Byd xaq5afKeotWOhe2rFrQXiJcwyqPAQh7X1LptdDRuwdhKTFajoyut4srRrlH3ZGxvt1XUW0dP8G18 22iwsWvG/JOxF/YboyvvbMdN9JPqYjzWqW0UeOGTsQrWjXHkRe5beN o4k6Og0KY5L71DA9xKoo8 SyBDrVScxHEOeFIAGrKDXAvpDv3HNRdr1uvP16y7WAO1iOsvYLHYaU4yJ9mwIHgiXhD5qQsuBXyC dwtT6BDL8XyL0ic2eNVVjTdn3LbsbTk7yA5uR/aOHHWpudbcbH5Q8YDxiOIJo4oj2TmLTEa92aIx GXVmqyrdCiZOr1ObJ7kpV7IGn6dcaYm1Bh2ya8HbQwEmOfvzao0lbZHJkTMZm3Il0mHI0ed05hzK EXJe4Ox4Rk9NiD0dVPzzHfVtJyAnNjUeX0nJx N1FQ5Hu M9Pe6DDro04IqvRJjp/w3uk 7U4SD6 V/WvLnaSDuggyda8/Lw8qzUpJW1ReXmqubK8DE yJKtFpVSqrMnCo7q8 GRTX tJY15z6cWXnVty Fz3eaa 4RpWnV6ydfqU1t3rpJ d3mwpttgoxJCQkJvu3k X0Pr4QtfUMaqscPnRtdlX2ZQ1nfdn5 VPox54vOM5XqLRlBZVC1R71Hs1e5V3VAfUCjyTUZs80Wm8noMFvV5sREk8aoVpk5zqQ0qrL0Ro5Y E3W67HI47CiBYn0xVzzJ/cS1uqjIwaWmHM42fpCVla3WHFOrlcdqVXtUHKj0qmYVr9pVcqzIYSou xQn zGOi0WU8beSNm1oqg5WHKvlK0FtsuY9UnDlB9s24hb7j446z5zveu/hxR8fZGv1Z1Jv j/qL qDz9dEcNIoaqUiQjSYYq/dk/gv4jIlUOx2K8BSMdJMmMOlxaniSp1pyUsghVW7aE9vGSglHDFfmo 9Uoz6h prPiYUhjJr1DabImJho2bp3 uty/7TbjfubzOPvTJH5xOh5iWmdvqFFJ1 anlZXavgrv4 gbUkMm33ZFnt03Xb8tPE0uW7p4/Z0vQuD7/zphy7bfoXO1pSdWiJvbF3BIViByzjtroyDF8qIjqi 4 J50Al2KFA4mkkzp0mqniQrXaeWLFuSyRuFzvTOjM7MTqNSoVUkQuFUtRCJj2gjibt0wZygKVga dN6hvi1 n3Zf4i26fY4jwpFyvUFbrq3QVmaXZ1dkV5aSUq5YEHNEU0FBcflyvI uFZwZzhynyWm  uuLqytXa1YWt8Vu0W/VbCrY4sk3ExBnLTZXGJa3prRmtme1l28u3V2yv3L5k29JEPj6 IDneWGCN F6uvKnBWhwyh5DtyH1Q9WPqQ80jplP3lwu86pqrPVaesVy8zQoAzHiev4 PVHkLICzDJN7m0lQ8v zjJmB0zGnJwXsmlPRcbDKYUOR01CYkpCQqIjoTBRyNOwSmklFwGU9sW81Z6i4Y4RV46lghBTHsmb JFaXvjTpZBJ3Gh 0k44nnU7ikya5fc bjuU49BqioQSmgyXkZMmHJbESvsS1qtJV8jo2eCgRS5wl UyVCyUtkJVSRlXhLmu7A7NPR4dgZWnc2dP7sxY6doYuhqlIHetvZWup1SYa0KkKLfYkljsTd m n g/6P58 ir50/y7AOot J GJn/YhrSa5TlWzPiy/SlEOBLq c5CZjoXJiM644oRziE4oc frCcqJL LCi0GazloC5VlhNwOPQ1 hqpIA76uekmTAshlj888b3aPr3HIXS0d5CdIQfeunfgyeFKiE/XVQlO XVU5ArJwtJMkawlntShTMYmk5WA8Kq0W6voWTCFJ5TkcOn9lBbp5bl5eZcWS8jJMNRgO/FGboePY 9v7bHct/9639TR  dFWF6d8yM7JVNltm27P 3V9YWp0//bUvrj3ztH9kWVqmOU6xY9qx79C1ezYs L2/a3Ttw34aHT2sUtTml5I17v9B1y7ay3qKcf4vc2XrvTyozTKV4TsDq2DuK69HzE/BJYsy1 AHD EdVTcU/phWEyotpHblcJ9WqtHfhUu1KTXmPiS3k8JPS8yDt5F6/g12TTNJxZWylmu7K57KQavUbU cDqNScNp1mT1eCQTov3W6Xc6PqYIsx0zSBkx6mzxeZl5yXmJCUnFYCTpxSRFhdgiBWL6OG0xyeCw MKhTiyFNwIJqX7IBNQPp6MBHryQ9mGm5dEkaJuQkPVUcPkTk53FniZrcPH3D9B mP5i  a2Tf3lu 8I67ByZO/u2OQdRSYPqn069N95O7SQ2p/8HYmn1Hpl afmYCH2ZJHdl 9HbMz7H3Y79XfB3zcz4Z dTWNGojhACGcq7nyAEcM2RzJ54qTlyVfn/wgd5qLcapki8WgNxnjzBazyWg048O4UWO2ppiMmWar wZBEOM5isKQYDBbLJHnMpcs/RuI0GsIZM9UGDc9Ncq 6Eg2bkpJEvVPv0vP6RwqoavW1la4CIhaQ QwVnCriC5BRGZzY7LWTKQiwZdvdjko531qzDtLtOj0GCikbkN/TUpscZeu7Zs/tKHAoMEDBUkap0 qj2Vvoam4hB6sV1jyDAUkFqoMjTDNYZO2GYIwHWGGwxfJk/h0/qzhtfI34nhQ7ynwMzdDjsdZCf6  AngYkcmcgy1HMo5sUhba5iMffAcBqQrq4qi43JlZNVzGVVEnU7RN106Q5VhkaGK06ciZFQlY994 fBWyOSVVf302pYpzJbG4mW9xbLdDB28mMwdDKj2CU5Os5JKTmR0XRhLkr86ytZSSN mJnHvhX/F4 dk7bS7fmLrrq6quyr1KsvaDiE2fO5U/uEBoufHOmxR9vLErW0DO6AM/o59EHRLjNZdSDHj1OJC7L Vq6PG ZGxYfEp8QTYgJBm97tKk/sWbKZ257D4f0Mb7YsWmpMutoSR 9wrKJJBCc zvPw26wkPZdl 5Xg1HCN tPu3XfGL0iwaTdwjZncHMyYz5fnz9FQ9i/Z7r6OqykFPThJy4NGZxs/sc0YNeUrUAqqA HaFLhPvNkU9 U77FlpqVv66c6/VvFfUJZTd7vvL5fjKsmr7HtkyM8Dv2iEU2Gyl0jVw4tsmUmlIy hHtNxnvGp3CvJeT ZxRADE7qgUfQA53Xpl b0eIUitL JW0kbyR/f9od coMRYaSA2eqKtUuOluc CoVCqVLaUznBjBrKVdnzc 22EqdzJXE5N5A21bacNnuLM6wMq8L2cGHQuZfsVd6iusW t3Cv82Dh 4 Rx7pDz29k/yz7jFG9V7lPts/NExRmJdINoyhONJrCXGEG6VcxJzzbm5Oalp6VhEk3Jz89TqdU0 Mgry7diyp elldpVTrVdlZ XrjDp8W7YZMqht5ZpiywuvAUS8 nWDNpKMd Z78pvyQ/m782/J1 V P8k9OFG6YzTdkYEx5ci8WJOZzu5 WRjVyAdOVRWFfYJ06GCdzhBiqMIDCI fKQcr5 P0VrJj5056 PpAQcbD4UcTOuBIxcIjdEF8LtEinAZNQpZIqlPGDsQQWBoQdIR2EujzedF7q8IR5PAsIesAQQs S PCt/ivwyM7NnY830iay8jUUXp2ggTN 5ovSalDyuIae0 WpiJHE12UuWKNbaSra4L16cPjYTAaSO W9ZTZo2z2YqKcq dbiKPXVuSVZTB/v6M58Ybf/z 5/5a3amr UidIb2feuzd7Fdm/iiHmfMdzJw7 ENXI77TYPJV5uhG2zv7tjsDCj0ZZRbKEd2E5QqEQhr0cfYr5HqxWfC/2PvYVIE7f9FwFPyYP8Cl4 PSZ8TZGpLGacNFAFHOPDgR5KoQ7n/lCXjiFHe1fx24A DUl/MwQZJ5DDWjyblUiyZJyHECmUcQFy yFdkXAHpeMsk4UqwkB/LuAreJOdlXA153A9kXAO3cX S8TjFFv56GY HkPpHMp4AvRqXjGuVz2ie kPFE2K7fNqujPfrnZJyALqlSxvEWPqlBxnmoSmqScQFpbpFxBSQkfVHGlZCUdFDGVeBPisq4GpIN WTKugXpDqYzHcUcNIRmPh6rU7Nk3lOWpW2Rcy29LvUPGE6Ek/V2UhAhU6wkZSQxXUItkZDNcyfqL Ga5i/VUMVzN8DcM11EYZ7TKONsrcKuNoo8whGUcbZd4s42ijzI9kHG1kTJZxtJHRIeNoI M6GUcb ZdlkHG2U1STjaKOsN2QcbWTJl3G0keUhGUcbWWIyjjYqmGB4HN1XoY7h8XQvhUaGJ7B SYZEhi9l uJ7upbCe4cmIGwo3MDyF0XgYnsr4BBi iPXvYXgGm7uf4UZGI8mWzWieYriJ4c8yPJfRv8zwQoa/ zvBihv a4mpJ/j8wXFrrLxRPYP0OnuFsLw62Rx31H3AYoRVGIAhe6AU3eLAW4SmEVuhn DoIwCBC RKYSoR5bIcRp6cZ H6MQsceP80sQa2D97v9DTqWzkomwCUf8MDRLE2Z/ZR U11uMeaMKD diGStj vXU4w4/1RpzThzJE2KyNyC MEIJdWPbgGj4YYH0irMd6mNEEsM N/Cl1H67rx1boUzuo/k9mi5fM r4YtbOXw7E6ppMuwFNk7Cx/uJ4QjYYReXKXgP H/j7jNzZLmzM1oQU2uw/HP5vsNZjVqkx4cG2Cy 78A KtV/354i9lJt HDVCJOc6l/ENqWJyFw3o4Qiyknn07fhdL11WDbj2r3MrlRCOs LXMNM9n6Z W8llZJJ8KIDrUpmCSDvyD6m8zHcp3TCTqm92XZ8cGcXMFyNMBj/2jMh6CLFdUa5F2LOF0UdYvwhr mf6oJgfZnqiPljMr9bNZkl5mtOyGbsZZnJVuLi6pHCGmPZHthY66L9HjDPeZ9oy15ltcsuNaJm P bKNBpskw8nQzviG2k155D8NMVg WlG E9bgZrx7Gk0bYIJODWojGJqXpl2nCGAHdzFY7EZP04Ge6 68aWh/mdl8k1KNe98zximMngR96U1wCLj4jM1cM0E8arl0WZOM mHqYZ97ycIck2oxHJan1MT242 t2eB7cNsbcmzRGafHoYNMa15mV4 2xfyZQ35GA/PvIjoZtSf7SdSBHzafvM1LOloUJZ0cLaPZpEh lvVEORN54XoWdYPMWrsYT58ch5KOpL4gmzujVcmLdrHsu2s2JqiuQ/LaoVkL7Zj1uUvjS9LDPxdj 0u5WMM R/DowK7/kl5IeBuV8vlDjks/1MOtL3j3ENCxxGmJ7l9ZsYbwoxwj2u fllRaWrQeZTqR4 9i3wZilHjjDJ/GxGmO3UL3tdP7OjW143JOc7ursws/zQgvih0tKIm5GReoPIvFKyB923h U6/6yF /XIe7UbwM lG5B0PsVwrcRpmI/2MWwAvKWd6ZNsM4BxJ11uRroetMCLraH4 6WZzd8iyShqiGuhD uIHRUE Znyuor0tnQEQeCSzIoT3Mv4YWWHGGs5vl9MA8bj1Mf0Fmk5EFlD1MQyGm2xm7lrBzPoL0 1Xj/UIo6oFcJyxrzPbJEzjqljH4AuZdiGWGZgMpFW2HoZLylqJPyY2j2jCyZnfl/d8VhZomZnDi3 ynqMklaM pUI9XhvQ/Fm7KXRs5JlD9rfiD2bsKR3P6vwRG9k/6OC9raCFuIYzJ07nz5hZvr75 WC oKzlkdnM/M dsnO28slWlnxrJvuNMH dWdPD/l/Y3F3B/Cw7I48UTwPzzjA3iwbJswZl7m4mhZed qZKHUT9vl1ej0blLzv/dLHv75JNLWucfaWbmnmxYPnFpLPnm5cD5WV6KpF7ZWy6nr4C8L6ox74JM OhOzn16vR84kIRb5Q7MZo1u2zPyz8/IZeKGmpLPk017x6ZV9coyKqDk3uw fu0txs3PCy/LS5dem 2t8sn5HSmTLyKVtIdlp4TyhlQjeTKMg065OzyD9jc1H2xZk83jdvXZo7epimpfNYOv1D854Timap Q/P8du6 5LM15WdZw3dJTp/jN3Nehpn/zd0VzOS8OcoA0kp30ENM45R// x JLnme/eAnCUl/UtR FZT9Yy6bLvShz9rRnH sYXv/tOVmzkLpzi48bzfSSeNhVh28xAahS/Q9x5nuL8Du5Xrks4Ted0hP KDN54J x/gw/KSa98nm68Fyc4fdpO0raknYQkc/yy8XxjMXcl i6978k7ZyWP72CR75/65Zb8yXy yidhBM eGQ70 Yn HzT6pGLHp0H6P0wLEF KTwbLsNeJPU686F9NNkOTTOnE0cU4UiHjS/EZYimb tQQq8YmCAuX Xzvr/vsn48xY6SXamz0PW0eC3l63xys Jbb2e8V1gcFABLvE kAoGAi5I77AoBj0 e0rEBnfE/Z8QlVJm4qaAf4j2hMU1gzhvcVWVsxiLshKxzu8XN/r6 iNhcaM37A3t8va0 ga8YXG9 d1jcGBhwD2709g353aGZBaovGRbl8eot3lCYLlpWsqxMtK/zeUKBcKA3UnAJ/XwyNoQjbKBl07rW S2iPiK0hd493wB3aIQZ6P3OfYsjb5wtHvCFvj gbFCNIunmT2OKOiHli6zqxube3RHQP9ohef9g7 3I9kJbOcUEOBvpA72D8yv8srNoTcw77BPjrXh8YoFjdF3IN 7wjKEPKFA4NF4hafJxIIiWvdoR7v YATVWl7W2u8LoyxUZHe33ytGZmzZ6wuFI6I7GPS6ZRkpOa3ptqSN4x7XBgZ7cEeD3uFw0B30horE XlxhuN/n6Rd9EXHYHRZ7vGFf36C3p0QU10TEfuwJD3WHvTuHUAb/iNjt9QQGvGJg0Ev5UUUMB0L  nrA4EEABwkMejzcc7h3yM9FET8jLdBhGblQQ3Fqfb9DtF3uk3YfFYVSWOIBmEIcGe7yhS7WQjwL5 Ql4PM0T3yKU6QQPM7k8SGCUaRKaDFAsFhvr60S6i9/qIdzDs2 XFTXqpVRELhgJUVFTRroB/F7VE 71AIZ4fohnZQzc3YC2W4jMVwuRXuMOo6QPmjLlGGQfRzWXDUXI/oQXUPeSJINBSmM1u8oaA3MuRm vtLidw9GfGhnn6Rm9MgRMeDvEcORETStp98dcuNc5BbxecJi95BkH3ePO0g5RgJiH92H93qP1  n G/ajj3b7/L7ICC48FPQj0bAv0i/2BQLomShLYGAEpd7q6/GiIYfCkp90BwI7wkygAXef wbfoDcs eUXIixEQwUZA8tCegGdI2iIldvvDAUbW4wsH/e4RqbNnlzcU8dG9lvRHIsHq0tLh4eGSAVmRJeg6 pf2RAX/pQIR Q6h0INwZoaZDfwzRiCyhg//kxGGvn3oim7K uXXNyjX1da1rmteLzSvFtWvqG9dv ahTrVm1sbFzXuL5VG6eNY7EzGzAU72degKZDjaEzXyZk2a58uGXUFnW/kcAQnekJ7GKpQHJZygft NMAizC36UVmDSO7uC3m9VGElYjtO63ejsQLdETdqGK23QBiayYYxcEWvj3mg5PJopF5Uy5xcqO1I oM8rOSm17Ow8NEIk5EMXQdYophyd8xxYFgqjZFYVs5MRd4u73P4hllLc4bA3Mn92ibgZIxIjZWRm F7gnOROiE7rFcNDr8aGLfHrnImqR ngfm vu6fHROMbwD7EzoYh2h5huWS65RCi/b8Anezqjo3EZ jkg5mXoe6wwMY4Ie6vb7wv10HeQlqXsAXRLlR1MFR0TJTWUNLVyI6WNN79zmaBRisguzZTBoPN7Q oLyDkCw3Iw73B4YwWEPeXT48UKgPfHr7lA4t6cU4lWOR0s3uEcXCBSIY5XM2phtzy1L3Xp4tE3l2 ggfzW7d3hhGu445UU4LNm rwULEvq1haIC5dvKzYWeF0ajSbm7DTuXhxRQWWS8uXikuXVFZVVmnj /kHUfWYw0lapLB6LQ3xYDrDHTPpYQB8SR4gWbz2uw1uQ37Ebl5mxmT/ 9Uh/uOMf5sf4b/InEU7w L/DHrrxYufJi5cqLlSsvVuDKi5UrL1auvFi58mLlyouVKy9WrrxYufJi5cqLlSsvVq68WLnyYuX/ yRcrC/76MYe7Gf3lxt65ZI53wd9FpDvvy/P0Mw f1xZyhMVCk7BKuBrLqgUr0Bz8j7isZzFDc4 0  34SJY/ywOKiDqlC7MyjMv1jDpfHZ/ /OcTMyP4ynxOxKf6dicbGMtck1o4SVo/bC8rYwHhmVtk3  Xe4Y3hOmLDj9PgiIxt5e3zFChlZskxCJgqLy07XxfFvw4cIHP82fxr9jM2asJeUnavTYgfhPw86 QsAEh/hfQxSBAxf/q4ncvLKDJ/kf4Pj3 VdRUjrt1XFtUhky/B7/PBjAxD/HPyuPPDuRmFQGdWH  LiAwheUphDMI5xAECPBPwh6EAwjHEQTQYWlCKEVopj38Uf4oynmY/ld2LEsRAggHEARo5b O/Tto yR/hrwMLzr2Tvw9Ssd7Pf5HVX8M6E vHsD8H60exTeuDcvvLWNPxh X h7C9COsH5foB7DdifT/7 USkT/yW5vYsfYvMicn2ID4/nmPR1OTguIjgReMTuQ w VN191MBYEv5m3s9WGsO6DOsBqUZ17R43 W5mNdk kZZQdQpXuRtXvRs3tRs3tBgGHbpyhuVGiKeZvRJobkeZGpLkRteLkw7hemH6VAUs9gojA o97DqHfaH8VyCuEU678Fy3sQDtEWP4x6LECp7uCvG7eb0Mn6JqpcZbUv8r2oahffO5GRXXZgrqWJ o46IdaJc6yitl416JzQJtNc7kZkt1Ui1oy6R98C/IHCQgmUuQgVCA4LAe8ZzS00v8OthQA2uRNMe bg /R9ijEJwNxHCSL4MWNaBLGvhiqEGCAlNnDVnapQlq9mp4 nVCp8aladEoAvwe/gDP068g1vLN fCevoF/pVlWX02/yrFJWl98Tfyg Gj8VfypeEVVOKU8pzyjPKRWi0ql0KVuUXcqgcq/yHuUhpeYe 5T0qris GL83ntfHi/HOeFd8S7zCpCKH6m7lu lXGbDUIwQR7kEQUMed2C/y1yJ0ojU6URXXYj9g CdjSI5xC/AzWCmzpkE6HdDrs1WGvjn0XX8dGWhC6EILyqHJ2ZGYOpT9HRxDycTQRe mXB85geY5i CNdgS4stLba0SHWKu4AS6rEUEVoQeNZ3BgG9BsuZMac83oWgZOPnGM3MmIvO5S643PlTBSRKv3pI 7ikgrpraujKXBQuDwdBp7bR12jsPCwFrwBawBw4LzdZmW7O9 bBQa6211dprDwul1lJbqb30sGCy mmwmu mwcGDt8bUn176 VuhcG1i7Zy2/lH5zcNzhLGO1xUbrZ8czMsuW6uqu5o7jdjqxPIhwGoEH HZYmhFKEWoQAgoI7znqfxt6nsfdpaEboRFDgrKdpisHSJI/R/oNsjGJ0nFswzuPmj41XlzfXrcW0 24lwEIFH3sdw/BijlrDjrD K5RnW3yzTH2L9lMqEMDOPJsFtLN1twzDcBrUInQhBBAW8zm F0wjI HUsTQhDhOILAb8NrK7 VexqvY9wxvsilXZxqgkWL8PgwJKn1dXouAX1BS46w8kFW3sHKWlbmuhKv 0X58jfZb12hvu0abjwhnx4NNS 5jpdkVX6d9pk7bXKctqNMitzQwg5ZLZaWSluQPrFzPyiJXiln7 N7P2z2btf5i1XzVrd5q1V5vpvCyMYS2Xwsp4WpL7WXkNK/Nc8Sbtd03arSbtUpO2TkseIbg6rGBl DiuNtCR/ekbXoAPNi RP0ICcyHhNgWmSA1aR2HhNHVbT4zWrsLo4XvMIVn8fr/mi6SXyN8KONvLx eO57prpUcp6sEWj7z3L9H2QNHMX6HNZ9WD8BNcSG9dfGa26i9I/j/Iex/RhY1JT UWhh8w6SNaz/ q/K8r4wXdeOqXx4vGsFVH4YituoD40XvYe8Xx4vuwOre8SI/VgfGbVTA68ZrCk11SaQPcjlK6wEb RyVZK6 4Gjn7sV4lTW4cL6KzGugCk6R 3LoYq3wq5UvECi1sOdO4lW0yG6yMRRZYmdBGsLE6keiY 8FqwsFo9br0JuSifsb1n kvNi3Tj8BHRjT9ievcl3N8WbP4vsmb8qOmNE1Rd46bXiyaJ7TnTj6wv mr6TO0m2jJumiibVOHCyaJIjz5rGUMlRpOXIc6bjRX2mp61s9LAVR9HUB2uKTV 2bjM9ZMP2uOmm opeoGDCAO96Cw 1Fy01ra46aVtomCQ67anAxV5yp2hoyVWH3skmyZuKoaXHuJBXFiTyOPmcqxBXz rEyUzUtf4CpBRYZcRaqIqlu1RbVBdZWqXFWsElXZqixVitqg1qsT1QnqOLVarVQLak4N6pTJ2BmX g35/LkWpZz jJ9BSYLieoyXHvl4HHFFzGDvRZL6Ja9q0gkQNTdDUuiK61NE0qYptjC5zNEXVLZ9r GyPk7nZsRbnbJwm0tqGD0q5bjfQHlE4AIaW33mWk9Y233tXeTpqiUx5o6hajH2/CfcRt2BZVWFek w6Jdtem1huVJVSsbLlN0yaVj7pPumP9Jz47e37SpLfr17PZoGUVi2e1N0VX0p5dOcDu5QGPDCS5I q/a2E QGbmfjRtpPbmhonyUDCxdEMqihFSWbAAslAwuZYGRrGRm6qaWxYcxikYheIWsoEbrPK4yo T KVi0sgrxZaIRmXA7mMVy6XQ8nQHyRmuvnMEoDoGDNdAjBmWZRozGZDkiIbJRlbakOCMdtSNnx0 bthqk8RpBxtbx0ba2TqEzNHYJRr0ApmGUyON4//mx7viv0BMJtxv9XjoD2B1WRu9CF3R/bv606N7 u0VxrOct Zex8rq6Pf20dnujb1m9DdEea4M45vZcZthDh93WhjHwNLa2jXlc3oZxt8vdaHU3tE88 sae acFad8yuVb/nMsz2UGb1dK0nmi4z3ESHn6BrNdG1muhaT7ieYGs1bVxBmlraxtSwor1 u1RP cPFxGA9dRnP7ikX64HIWHFeZ0z9vfEEAPLbiHe3RBOuKqBaBDhXXFdfRIYxOOpRIf JMHkr//FVm 4wvkiDykx 4k6wpwQHqjr2H2XzgcjlAYGnJgGRlKZ30RDFrzpqboSvqDTDXRmsaoq6uhnf22wJD8 qW9z6U/WvF7DBWr21ByoOVhzvEYxNNSO3YaTltctXKclYNljOWA5aDluUdKB7W3PuWoOWj608EPo TSSCn8YGtuYQ1viPNiNDYfoBXCCMIC3nGHLUt9VZwMPTLy/zWCYjWBHKETYhKODfsPwJwrsIf0YQ 4GYsv4jwOMIE7eGL eLGdF8DXbHdQZNOOl824awsWzaJtbtXqjdtk rG9VJdU1eWjvV4bXlcnQ5v wAm8gOX3EX6F8HuEvyMo DK jDEfkry2PQxhB0Hx6TfSI7QIOyKE/iwDoeqOhB0OCLOfacCOCCWd  7EO6QMkPASoCjQIVkjEesN02hCtZz7/G6AbMg8KZW5kc3RyZWFtCmVuZG9iagoKNiAwIG9iagox MTEzNwplbmRvYmoKCjcgMCBvYmoKPDwvVHlwZS9Gb250RGVzY3JpcHRvci9Gb250TmFtZS9CQUFB QUErVGltZXNOZXdSb21hblBTTVQKL0ZsYWdzIDQKL0ZvbnRCQm94Wy01NjggLTMwNiAyMDI3IDEw MDZdL0l0YWxpY0FuZ2xlIDAKL0FzY2VudCA4OTEKL0Rlc2NlbnQgLTIxNgovQ2FwSGVpZ2h0IDEw MDYKL1N0ZW1WIDgwCi9Gb250RmlsZTIgNSAwIFI PgplbmRvYmoKCjggMCBvYmoKPDwvTGVuZ3Ro IDI2MC9GaWx0ZXIvRmxhdGVEZWNvZGU PgpzdHJlYW0KeJxdkE1PxCAQhu/8Co7rYQPttromDYmp NunBj1j3B1CYVhILhNJD/718rJp4gDzDzMvMO6TtH3utPHlzRgzg8aS0dLCazQnAI8xKo6LEUgl/ jdItFm4RCdphXz0svZ5M0yDyHnKrdzs PEgzwg0ir06CU3rGh0s7hHjYrP2CBbTHFDGGJUzhn2du X/gCJKmOvQxp5fdjkPwVfOwWcJniIo8ijITVcgGO6xlQQynDTdcxBFr y52zYpzEJ3ehsgiVlNYV C1wmrurIp/x ilwlLmnkOtd0kW8zP0W y9xGPmftfep/7RQniav6cYjF5lxwl/aZbEVDSsPvyq2x UZXON0BjfcMKZW5kc3RyZWFtCmVuZG9iagoKOSAwIG9iago8PC9UeXBlL0ZvbnQvU3VidHlwZS9U cnVlVHlwZS9CYXNlRm9udC9CQUFBQUErVGltZXNOZXdSb21hblBTTVQKL0ZpcnN0Q2hhciAwCi9M YXN0Q2hhciA4Ci9XaWR0aHNbNzc3IDYxMCA2MTAgNTU2IDI1MCA3MjIgNzIyIDYxMCA3MjIgXQov Rm9udERlc2NyaXB0b3IgNyAwIFIKL1RvVW5pY29kZSA4IDAgUgo PgplbmRvYmoKCjEwIDAgb2Jq Cjw8L0YxIDkgMCBSCj4 CmVuZG9iagoKMTEgMCBvYmoKPDwvRm9udCAxMCAwIFIKL1Byb2NTZXRb L1BERi9UZXh0XQo PgplbmRvYmoKCjEgMCBvYmoKPDwvVHlwZS9QYWdlL1BhcmVudCA0IDAgUi9S ZXNvdXJjZXMgMTEgMCBSL01lZGlhQm94WzAgMCA2MTIgNzkyXS9Hcm91cDw8L1MvVHJhbnNwYXJl bmN5L0NTL0RldmljZVJHQi9JIHRydWU Pi9Db250ZW50cyAyIDAgUj4 CmVuZG9iagoKNCAwIG9i ago8PC9UeXBlL1BhZ2VzCi9SZXNvdXJjZXMgMTEgMCBSCi9NZWRpYUJveFsgMCAwIDYxMiA3OTIg XQovS2lkc1sgMSAwIFIgXQovQ291bnQgMT4 CmVuZG9iagoKMTIgMCBvYmoKPDwvVHlwZS9DYXRh bG9nL1BhZ2VzIDQgMCBSCi9PcGVuQWN0aW9uWzEgMCBSIC9YWVogbnVsbCBudWxsIDBdCi9MYW5n KGVuLVBIKQo PgplbmRvYmoKCjEzIDAgb2JqCjw8L0F1dGhvcjxGRUZGMDA2RDAwNjQwMDY5MDA2 MTAwN0EwMDZFMDA2NzAwMjA Ci9DcmVhdG9yPEZFRkYwMDU3MDA3MjAwNjkwMDc0MDA2NTAwNzI  Ci9Qcm9kdWNlcjxGRUZGMDA0RjAwNzAwMDY1MDA2RTAwNEYwMDY2MDA2NjAwNjkwMDYzMDA2NTAw MkUwMDZGMDA3MjAwNjcwMDIwMDAzMzAwMkUwMDMyPgovQ3JlYXRpb25EYXRlKEQ6MjAxMzAzMjEx OTAyNTIrMDgnMDAnKT4 CmVuZG9iagoKeHJlZgowIDE0CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAw MDAxMjI3NyAwMDAwMCBuIAowMDAwMDAwMDE5IDAwMDAwIG4gCjAwMDAwMDAyMDYgMDAwMDAgbiAK MDAwMDAxMjQyMCAwMDAwMCBuIAowMDAwMDAwMjI2IDAwMDAwIG4gCjAwMDAwMTE0NDggMDAwMDAg biAKMDAwMDAxMTQ3MCAwMDAwMCBuIAowMDAwMDExNjY4IDAwMDAwIG4gCjAwMDAwMTE5OTcgMDAw MDAgbiAKMDAwMDAxMjE5MCAwMDAwMCBuIAowMDAwMDEyMjIyIDAwMDAwIG4gCjAwMDAwMTI1MTkg MDAwMDAgbiAKMDAwMDAxMjYxNiAwMDAwMCBuIAp0cmFpbGVyCjw8L1NpemUgMTQvUm9vdCAxMiAw IFIKL0luZm8gMTMgMCBSCi9JRCBbIDxCQUE3NjY1RDUzRDU4RTRGODhEQTVDOTNCRDBEMDcyMz4K PEJBQTc2NjVENTNENThFNEY4OERBNUM5M0JEMEQwNzIzPiBdCi9Eb2NDaGVja3N1bSAvRjhCODFD NkFBN0U3RDc3MkRBNEJFNUE2NDYzQkUyNTYKPj4Kc3RhcnR4cmVmCjEyODQ5CiUlRU9GCg=="</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>signed_document_url</con:name><con:value>testUrl</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>testUrl</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>id</con:name><con:value>234857048670</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>234857048670</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfp_reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>document_text</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>client_ip_address</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>submit_time_stamp</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>represented_signature</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.9" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:sub="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/submitAgreement">sub:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>413</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>413</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>413</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>413</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value="379252830773"/>
  <con:entry key="signed_document_attachment" value="JVBERi0xLjQKJcOkw7zDtsOfCjIgMCBvYmoKPDwvTGVuZ3RoIDMgMCBSL0ZpbHRlci9GbGF0ZURl Y29kZT4 CnN0cmVhbQp4nB2KuwoCQQxF 3zFrYVZk7gzs8KQYkELu4WAhdj56Bbcxt83I4GTe3PC g BLHzASRyyiwXrs3J647rD ZZ/tTbNTLsOEqmM8 AP7s0AU/ro1FtPG2nGwJL0LNx45W25cLIWo cYo12d0vdHJaaMEP/LAbkQplbmRzdHJlYW0KZW5kb2JqCgozIDAgb2JqCjExNgplbmRvYmoKCjUg MCBvYmoKPDwvTGVuZ3RoIDYgMCBSL0ZpbHRlci9GbGF0ZURlY29kZS9MZW5ndGgxIDIzMDAwPj4K c3RyZWFtCnic7Xx5XFvHueg35xxtgJAQYBYBOpIQCMQis9iGECMMeAm2wTa2wTUBIQQoFkiWhAm5 ce3cLE5wEqdpmq1t7CR14tROLSALTtKa5HZ5adrG6Zr2pbHzkrTp4hvf1kmX2Oh9M ewOW5u733v j/f7Pev4m/lm5ptvvvm2OYdjKRIa8kIC7AUeXJ4BdzBDG68GgB8AEINnV0R88mctBsTPAKi 3Rvs G7jrsd1vAWi BqAI9/lHer/c9bubAHTpAAnb r3unr8vO6QFMEaQx5J 7GieHlFh xi2c/sHItcP Kr6ej 1TtO0PeNzP6x6Lx/Z5bKcMuK8P3qIvVgBkURnEQfeA93Pf1/0U23aAkqFgIBzpgdwYwDWH 6Hgw5A3 Jb/3I2xPSTIAwYt EhBV0jbHCwqlSg3/v34UdyOsBRNCFn8fGAFi7yC8h/DB9DWxC4od YJ2 LnaGT0bip2UAsMH9cBBy4RxZDK/AFFwDT0AdtMB9sApeh OQCCPkNRDACg1wBGzEBByshDSi gIfgl7AdQvA nAE7NMHbxIB8GiEIi6Aq9jssm D22AmkioN6 Aa8QPxkE5QivporIg5c UBsCtLA Hvth7E1sfRXeJ7mxMViN2G8gCfJhD3wBDHAdfD92ASXNhW54ktxIfgdm6IL9QoUwGtsBV8Gz8DPS hNg6GFG8qXkW/DjrcZJGpmKnY7 FbwkEvMjpX F2lHgcprgSvl5xCETIg6thPbhx9F/glySZLOZd sfzYithD2Psk/IlzcN/lVSiHA9ZAJ9wFj6I2fg7vwUcknlSSr5KjeL1B/l3xJsrWBENwA8bWV1F7 T8IxOEEWk8VcGpeG2kqDAtiMYwfgMK4/AadIE2knU Rl/rDCOV0bS4mlxn4bi0EhtKGEB FlXOM8 cSINrsBb IiQI0QUZRdvwh32wFfgFLyBcryNev8I/koK8XqH zy3J7Y1diT2PsqiBhMsgw2wDQKw C4bhMbTqK/Bt A/yCadByteF7yhuUJyL3Yu6zYMVKHszUm9C3vvRSuMwidfPcZdJRMRdLCPryUbS Rw6Q 8kk SX5JafkzNxO7vd8lH Nf0tYolDEqpHTIsjBda2wFfrRAp9Hbd L z0C34FXSSrJI8W4 o5/j/I 5q7gGvB7nXufe5m/lDwgXFLdNn5n w/QnsVFQoZetQj0MwddRCx SRShDAbmOhMm7KPk9 3DN8Iq/nrXwlX8e38u387fx9/P/gfySEhKPCrxRrFG7FUZV7enD6jVhT7BagWUKJcuVDEVTAUvSf XvSmHShfEK8Q3Ag3wSjcjf5yLxyCo7jvk/Aq/Ax DX9ECwAxo8w XH0Ave5WcjdeD5Fj5GXyHfIq eYd8TC/OgpedW8LVcvXcSq6PuxWv 7hT3M 5D/gs3sPv4ffi9Qj/HP9LAQRBiCnK8Fqt2K94Uvma yq5arepW/ DC2YuFF9svvj0N05nTn5u f/rl6d/GtsRGUH4bFEMJSroPpXwIffAwXl9HT3wOvou5  xdM1j8RjijQ49OJFb2hCK1WS1aRNXitIxvw2ozXVrINLzfpJv147SF7yb Sm8kt5C7yJXY9iHs7 TJ4iz H1PHkBr5 R0 Q35PfkTxw6McejN9u4fK6Uq8Kd1nOruGZuI159XACvIBfidqGFnuQmuBPc z/lk3sYX825 J/8Q/w3 Ff6n/N8ETigSSoUaYYvQJ9wsvC68IbwpfKIwKRoV/YpHFK8ojcoK5Wbl dcoHlceVHygvqJSqFlW36kbVT1UxtQ2z1fdw388uSHmlytdJWJEiXM dxrhI54OKfWQzakzJtfJ  /m7 x4peco4Xya/IKO/jd8Qe51dyf UDZAt3klh4k6Ka74U7IUaOcu9w57nfCqmklfsdsQtfIM9z Ab6eU7K8 hMhVbhZ8QEA9wuo5naTKe47/M38zbFvQrXiEXJa8Qj3BojCGS4ZTmNU7 MewEk/4nzc fmgTKhSfgA/1/pTietT3cu52Usj/VHgE3uet3J/JOXI/Zo0fkmuEXO5aroocxYx7keTAWbITguRL 4CIvkl TSSDkCP8kWcsloLWinJYsxaPvh7yZ/JSPg3YqI8njUkkLd47bzL kPMVXEoJZ4sdwA GJ E31n5jMNgxgB93H5mNMaMZv8hJRBOjyA f789Es0YyveVOxHP3uUL4KN4IQO7jWoxth4H682uA3K 4AX0wdvByT0IN8b2kh7M  swf3IwSa6DUhKP2TINZduD58UizoK5sBNX/Svm/ 9j1m8i/w7DRMTI mgK7QEfuFBoxM3Vh/t2PVw90YOsrcK/yWcVPoJmkAQji9CPo5W/BtXjmvIvrZ0INyrcNHhWKUGoR M/NOnPGV6dXgwus2eI1wsBtlXo5x3iKsxsx7f w63KEPz6i1eCa Cr7YA1CPttsYuzm2Hzpjj8a2 Qx9sih3B/LsrNg5LYJ induicAgVmGNfJd/G8 h/kv2Yt1fDrzAf2Ug6/B6vb6BEyxUvwqjwC8yd tbE7Yz DVNSHBTXUjafoezAA/456W81PQfn0em4stpIP4gl1GjbEnoyZSBz0x/yYeV CwyoF5p69 kKM47HK5apdfXXNVddWypUsqK8rLFjtLS4qLHIUF9vw8W67VYhZNOdlZxsyM9LRFKcmGJL0uUZsQ H6dRq5QKgecIFDVaV3aJ0byuqJBnXb26mLatbuxwz voiorYtXIhTVTsYmTiQkoXUvZeQumSKF2z lEQv1kBNcZHYaBWjP2ywipNk24Y2xO9qsLaL0bMMX8fwexiuRdxsxgliY3p/gxglXWJjdOWu/tHG rgZkNxYfV2 t98YVF8FYXDyi8YhF06zBMZK2nDCES2usHuNArUWhopnWhsZohrWBShDlbY3unmjL hrbGBqPZ3F5cFCX1Hmt3FKwrojoHI4F6tkxUWR9VsWVEH90N7BfHiqZG75zUQ3eXI6HH2uPe3hbl 3e10jSQHrtsQTbvhvfS5JjI31Lftmz9q5Ecb030ibY6O7hOjhza0zR8107K9HXlEOdvKrtGVuPCd qMKmTSKuxd3a3hYlt KCIt0H3ZO0O6 1kfZ0XSdGNdYV1v7R67rQMJmjUdg4Yh7PzHSdiJ2BzEZx tLXNao7WGq3t7oassRQY3TgykeESMxaOFBeN6ZMktY4l6mQkQTsf8c6OMYyRU6xp46xeCZXIugbd ISp6RJSkzYp7WkYL7zIY9SxDMvy0E5wV7UF7 KKa q5RfTX26 n8qMKmt4qjHwHa33r2jwt73HKP 0qb/CChKvWTW0XB8Bo86HNHCQuogqnq0KMq4nLUri4t2TXJRa1AvYoXqgxbUrbu9uhSVbzZT8 6f dEE3NqJ7N7RJbRG6jePgKnW0R7kuOjI1M5K6mY7snRmZnd5lRT9 hj2NpEbVebP/dPpFyY391VGy 6DOGvdJ40yZr04ZtbWLjaJes26bWBS1pfNnsmIwRaQAVHhVsqKk1VnS9jdvaaAf U9hWWht9Xasx 1FDGaHJ9G2/k2iWMM/KMFfrv9lnOtNGWQHkJNiXz/55JlRodmPUQcWVU37VaKtvjzOZ/ctJk7Byd xaq5afKeotWOhe2rFrQXiJcwyqPAQh7X1LptdDRuwdhKTFajoyut4srRrlH3ZGxvt1XUW0dP8G18 22iwsWvG/JOxF/YboyvvbMdN9JPqYjzWqW0UeOGTsQrWjXHkRe5beN o4k6Og0KY5L71DA9xKoo8 SyBDrVScxHEOeFIAGrKDXAvpDv3HNRdr1uvP16y7WAO1iOsvYLHYaU4yJ9mwIHgiXhD5qQsuBXyC dwtT6BDL8XyL0ic2eNVVjTdn3LbsbTk7yA5uR/aOHHWpudbcbH5Q8YDxiOIJo4oj2TmLTEa92aIx GXVmqyrdCiZOr1ObJ7kpV7IGn6dcaYm1Bh2ya8HbQwEmOfvzao0lbZHJkTMZm3Il0mHI0ed05hzK EXJe4Ox4Rk9NiD0dVPzzHfVtJyAnNjUeX0nJx N1FQ5Hu M9Pe6DDro04IqvRJjp/w3uk 7U4SD6 V/WvLnaSDuggyda8/Lw8qzUpJW1ReXmqubK8DE yJKtFpVSqrMnCo7q8 GRTX tJY15z6cWXnVty Fz3eaa 4RpWnV6ydfqU1t3rpJ d3mwpttgoxJCQkJvu3k X0Pr4QtfUMaqscPnRtdlX2ZQ1nfdn5 VPox54vOM5XqLRlBZVC1R71Hs1e5V3VAfUCjyTUZs80Wm8noMFvV5sREk8aoVpk5zqQ0qrL0Ro5Y E3W67HI47CiBYn0xVzzJ/cS1uqjIwaWmHM42fpCVla3WHFOrlcdqVXtUHKj0qmYVr9pVcqzIYSou xQn zGOi0WU8beSNm1oqg5WHKvlK0FtsuY9UnDlB9s24hb7j446z5zveu/hxR8fZGv1Z1Jv j/qL qDz9dEcNIoaqUiQjSYYq/dk/gv4jIlUOx2K8BSMdJMmMOlxaniSp1pyUsghVW7aE9vGSglHDFfmo 9Uoz6h prPiYUhjJr1DabImJho2bp3 uty/7TbjfubzOPvTJH5xOh5iWmdvqFFJ1 anlZXavgrv4 gbUkMm33ZFnt03Xb8tPE0uW7p4/Z0vQuD7/zphy7bfoXO1pSdWiJvbF3BIViByzjtroyDF8qIjqi 4 J50Al2KFA4mkkzp0mqniQrXaeWLFuSyRuFzvTOjM7MTqNSoVUkQuFUtRCJj2gjibt0wZygKVga dN6hvi1 n3Zf4i26fY4jwpFyvUFbrq3QVmaXZ1dkV5aSUq5YEHNEU0FBcflyvI uFZwZzhynyWm  uuLqytXa1YWt8Vu0W/VbCrY4sk3ExBnLTZXGJa3prRmtme1l28u3V2yv3L5k29JEPj6 IDneWGCN F6uvKnBWhwyh5DtyH1Q9WPqQ80jplP3lwu86pqrPVaesVy8zQoAzHiev4 PVHkLICzDJN7m0lQ8v zjJmB0zGnJwXsmlPRcbDKYUOR01CYkpCQqIjoTBRyNOwSmklFwGU9sW81Z6i4Y4RV46lghBTHsmb JFaXvjTpZBJ3Gh 0k44nnU7ikya5fc bjuU49BqioQSmgyXkZMmHJbESvsS1qtJV8jo2eCgRS5wl UyVCyUtkJVSRlXhLmu7A7NPR4dgZWnc2dP7sxY6doYuhqlIHetvZWup1SYa0KkKLfYkljsTd m n g/6P58 ir50/y7AOot J GJn/YhrSa5TlWzPiy/SlEOBLq c5CZjoXJiM644oRziE4oc frCcqJL LCi0GazloC5VlhNwOPQ1 hqpIA76uekmTAshlj888b3aPr3HIXS0d5CdIQfeunfgyeFKiE/XVQlO XVU5ArJwtJMkawlntShTMYmk5WA8Kq0W6voWTCFJ5TkcOn9lBbp5bl5eZcWS8jJMNRgO/FGboePY 9v7bHct/9639TR  dFWF6d8yM7JVNltm27P 3V9YWp0//bUvrj3ztH9kWVqmOU6xY9qx79C1ezYs L2/a3Ttw34aHT2sUtTml5I17v9B1y7ay3qKcf4vc2XrvTyozTKV4TsDq2DuK69HzE/BJYsy1 AHD EdVTcU/phWEyotpHblcJ9WqtHfhUu1KTXmPiS3k8JPS8yDt5F6/g12TTNJxZWylmu7K57KQavUbU cDqNScNp1mT1eCQTov3W6Xc6PqYIsx0zSBkx6mzxeZl5yXmJCUnFYCTpxSRFhdgiBWL6OG0xyeCw MKhTiyFNwIJqX7IBNQPp6MBHryQ9mGm5dEkaJuQkPVUcPkTk53FniZrcPH3D9B mP5i  a2Tf3lu 8I67ByZO/u2OQdRSYPqn069N95O7SQ2p/8HYmn1Hpl afmYCH2ZJHdl 9HbMz7H3Y79XfB3zcz4Z dTWNGojhACGcq7nyAEcM2RzJ54qTlyVfn/wgd5qLcapki8WgNxnjzBazyWg048O4UWO2ppiMmWar wZBEOM5isKQYDBbLJHnMpcs/RuI0GsIZM9UGDc9Ncq 6Eg2bkpJEvVPv0vP6RwqoavW1la4CIhaQ QwVnCriC5BRGZzY7LWTKQiwZdvdjko531qzDtLtOj0GCikbkN/TUpscZeu7Zs/tKHAoMEDBUkap0 qj2Vvoam4hB6sV1jyDAUkFqoMjTDNYZO2GYIwHWGGwxfJk/h0/qzhtfI34nhQ7ynwMzdDjsdZCf6  AngYkcmcgy1HMo5sUhba5iMffAcBqQrq4qi43JlZNVzGVVEnU7RN106Q5VhkaGK06ciZFQlY994 fBWyOSVVf302pYpzJbG4mW9xbLdDB28mMwdDKj2CU5Os5JKTmR0XRhLkr86ytZSSN mJnHvhX/F4 dk7bS7fmLrrq6quyr1KsvaDiE2fO5U/uEBoufHOmxR9vLErW0DO6AM/o59EHRLjNZdSDHj1OJC7L Vq6PG ZGxYfEp8QTYgJBm97tKk/sWbKZ257D4f0Mb7YsWmpMutoSR 9wrKJJBCc zvPw26wkPZdl 5Xg1HCN tPu3XfGL0iwaTdwjZncHMyYz5fnz9FQ9i/Z7r6OqykFPThJy4NGZxs/sc0YNeUrUAqqA HaFLhPvNkU9 U77FlpqVv66c6/VvFfUJZTd7vvL5fjKsmr7HtkyM8Dv2iEU2Gyl0jVw4tsmUmlIy hHtNxnvGp3CvJeT ZxRADE7qgUfQA53Xpl b0eIUitL JW0kbyR/f9od coMRYaSA2eqKtUuOluc CoVCqVLaUznBjBrKVdnzc 22EqdzJXE5N5A21bacNnuLM6wMq8L2cGHQuZfsVd6iusW t3Cv82Dh 4 Rx7pDz29k/yz7jFG9V7lPts/NExRmJdINoyhONJrCXGEG6VcxJzzbm5Oalp6VhEk3Jz89TqdU0 Mgry7diyp elldpVTrVdlZ XrjDp8W7YZMqht5ZpiywuvAUS8 nWDNpKMd Z78pvyQ/m782/J1 V P8k9OFG6YzTdkYEx5ci8WJOZzu5 WRjVyAdOVRWFfYJ06GCdzhBiqMIDCI fKQcr5 P0VrJj5056 PpAQcbD4UcTOuBIxcIjdEF8LtEinAZNQpZIqlPGDsQQWBoQdIR2EujzedF7q8IR5PAsIesAQQs S PCt/ivwyM7NnY830iay8jUUXp2ggTN 5ovSalDyuIae0 WpiJHE12UuWKNbaSra4L16cPjYTAaSO W9ZTZo2z2YqKcq dbiKPXVuSVZTB/v6M58Ybf/z 5/5a3amr UidIb2feuzd7Fdm/iiHmfMdzJw7 ENXI77TYPJV5uhG2zv7tjsDCj0ZZRbKEd2E5QqEQhr0cfYr5HqxWfC/2PvYVIE7f9FwFPyYP8Cl4 PSZ8TZGpLGacNFAFHOPDgR5KoQ7n/lCXjiFHe1fx24A DUl/MwQZJ5DDWjyblUiyZJyHECmUcQFy yFdkXAHpeMsk4UqwkB/LuAreJOdlXA153A9kXAO3cX S8TjFFv56GY HkPpHMp4AvRqXjGuVz2ie kPFE2K7fNqujPfrnZJyALqlSxvEWPqlBxnmoSmqScQFpbpFxBSQkfVHGlZCUdFDGVeBPisq4GpIN WTKugXpDqYzHcUcNIRmPh6rU7Nk3lOWpW2Rcy29LvUPGE6Ek/V2UhAhU6wkZSQxXUItkZDNcyfqL Ga5i/VUMVzN8DcM11EYZ7TKONsrcKuNoo8whGUcbZd4s42ijzI9kHG1kTJZxtJHRIeNoI M6GUcb ZdlkHG2U1STjaKOsN2QcbWTJl3G0keUhGUcbWWIyjjYqmGB4HN1XoY7h8XQvhUaGJ7B SYZEhi9l uJ7upbCe4cmIGwo3MDyF0XgYnsr4BBi iPXvYXgGm7uf4UZGI8mWzWieYriJ4c8yPJfRv8zwQoa/ zvBihv a4mpJ/j8wXFrrLxRPYP0OnuFsLw62Rx31H3AYoRVGIAhe6AU3eLAW4SmEVuhn DoIwCBC RKYSoR5bIcRp6cZ H6MQsceP80sQa2D97v9DTqWzkomwCUf8MDRLE2Z/ZR U11uMeaMKD diGStj vXU4w4/1RpzThzJE2KyNyC MEIJdWPbgGj4YYH0irMd6mNEEsM N/Cl1H67rx1boUzuo/k9mi5fM r4YtbOXw7E6ppMuwFNk7Cx/uJ4QjYYReXKXgP H/j7jNzZLmzM1oQU2uw/HP5vsNZjVqkx4cG2Cy 78A KtV/354i9lJt HDVCJOc6l/ENqWJyFw3o4Qiyknn07fhdL11WDbj2r3MrlRCOs LXMNM9n6Z W8llZJJ8KIDrUpmCSDvyD6m8zHcp3TCTqm92XZ8cGcXMFyNMBj/2jMh6CLFdUa5F2LOF0UdYvwhr mf6oJgfZnqiPljMr9bNZkl5mtOyGbsZZnJVuLi6pHCGmPZHthY66L9HjDPeZ9oy15ltcsuNaJm P bKNBpskw8nQzviG2k155D8NMVg WlG E9bgZrx7Gk0bYIJODWojGJqXpl2nCGAHdzFY7EZP04Ge6 68aWh/mdl8k1KNe98zximMngR96U1wCLj4jM1cM0E8arl0WZOM mHqYZ97ycIck2oxHJan1MT242 t2eB7cNsbcmzRGafHoYNMa15mV4 2xfyZQ35GA/PvIjoZtSf7SdSBHzafvM1LOloUJZ0cLaPZpEh lvVEORN54XoWdYPMWrsYT58ch5KOpL4gmzujVcmLdrHsu2s2JqiuQ/LaoVkL7Zj1uUvjS9LDPxdj 0u5WMM R/DowK7/kl5IeBuV8vlDjks/1MOtL3j3ENCxxGmJ7l9ZsYbwoxwj2u fllRaWrQeZTqR4 9i3wZilHjjDJ/GxGmO3UL3tdP7OjW143JOc7ursws/zQgvih0tKIm5GReoPIvFKyB923h U6/6yF /XIe7UbwM lG5B0PsVwrcRpmI/2MWwAvKWd6ZNsM4BxJ11uRroetMCLraH4 6WZzd8iyShqiGuhD uIHRUE Znyuor0tnQEQeCSzIoT3Mv4YWWHGGs5vl9MA8bj1Mf0Fmk5EFlD1MQyGm2xm7lrBzPoL0 1Xj/UIo6oFcJyxrzPbJEzjqljH4AuZdiGWGZgMpFW2HoZLylqJPyY2j2jCyZnfl/d8VhZomZnDi3 ynqMklaM pUI9XhvQ/Fm7KXRs5JlD9rfiD2bsKR3P6vwRG9k/6OC9raCFuIYzJ07nz5hZvr75 WC oKzlkdnM/M dsnO28slWlnxrJvuNMH dWdPD/l/Y3F3B/Cw7I48UTwPzzjA3iwbJswZl7m4mhZed qZKHUT9vl1ej0blLzv/dLHv75JNLWucfaWbmnmxYPnFpLPnm5cD5WV6KpF7ZWy6nr4C8L6ox74JM OhOzn16vR84kIRb5Q7MZo1u2zPyz8/IZeKGmpLPk017x6ZV9coyKqDk3uw fu0txs3PCy/LS5dem 2t8sn5HSmTLyKVtIdlp4TyhlQjeTKMg065OzyD9jc1H2xZk83jdvXZo7epimpfNYOv1D854Timap Q/P8du6 5LM15WdZw3dJTp/jN3Nehpn/zd0VzOS8OcoA0kp30ENM45R// x JLnme/eAnCUl/UtR FZT9Yy6bLvShz9rRnH sYXv/tOVmzkLpzi48bzfSSeNhVh28xAahS/Q9x5nuL8Du5Xrks4Ted0hP KDN54J x/gw/KSa98nm68Fyc4fdpO0raknYQkc/yy8XxjMXcl i6978k7ZyWP72CR75/65Zb8yXy yidhBM eGQ70 Yn HzT6pGLHp0H6P0wLEF KTwbLsNeJPU686F9NNkOTTOnE0cU4UiHjS/EZYimb tQQq8YmCAuX Xzvr/vsn48xY6SXamz0PW0eC3l63xys Jbb2e8V1gcFABLvE kAoGAi5I77AoBj0 e0rEBnfE/Z8QlVJm4qaAf4j2hMU1gzhvcVWVsxiLshKxzu8XN/r6 iNhcaM37A3t8va0 ga8YXG9 d1jcGBhwD2709g353aGZBaovGRbl8eot3lCYLlpWsqxMtK/zeUKBcKA3UnAJ/XwyNoQjbKBl07rW S2iPiK0hd493wB3aIQZ6P3OfYsjb5wtHvCFvj gbFCNIunmT2OKOiHli6zqxube3RHQP9ohef9g7 3I9kJbOcUEOBvpA72D8yv8srNoTcw77BPjrXh8YoFjdF3IN 7wjKEPKFA4NF4hafJxIIiWvdoR7v YATVWl7W2u8LoyxUZHe33ytGZmzZ6wuFI6I7GPS6ZRkpOa3ptqSN4x7XBgZ7cEeD3uFw0B30horE XlxhuN/n6Rd9EXHYHRZ7vGFf36C3p0QU10TEfuwJD3WHvTuHUAb/iNjt9QQGvGJg0Ev5UUUMB0L  nrA4EEABwkMejzcc7h3yM9FET8jLdBhGblQQ3Fqfb9DtF3uk3YfFYVSWOIBmEIcGe7yhS7WQjwL5 Ql4PM0T3yKU6QQPM7k8SGCUaRKaDFAsFhvr60S6i9/qIdzDs2 XFTXqpVRELhgJUVFTRroB/F7VE 71AIZ4fohnZQzc3YC2W4jMVwuRXuMOo6QPmjLlGGQfRzWXDUXI/oQXUPeSJINBSmM1u8oaA3MuRm vtLidw9GfGhnn6Rm9MgRMeDvEcORETStp98dcuNc5BbxecJi95BkH3ePO0g5RgJiH92H93qP1  n G/ajj3b7/L7ICC48FPQj0bAv0i/2BQLomShLYGAEpd7q6/GiIYfCkp90BwI7wkygAXef wbfoDcs eUXIixEQwUZA8tCegGdI2iIldvvDAUbW4wsH/e4RqbNnlzcU8dG9lvRHIsHq0tLh4eGSAVmRJeg6 pf2RAX/pQIR Q6h0INwZoaZDfwzRiCyhg//kxGGvn3oim7K uXXNyjX1da1rmteLzSvFtWvqG9dv ahTrVm1sbFzXuL5VG6eNY7EzGzAU72degKZDjaEzXyZk2a58uGXUFnW/kcAQnekJ7GKpQHJZygft NMAizC36UVmDSO7uC3m9VGElYjtO63ejsQLdETdqGK23QBiayYYxcEWvj3mg5PJopF5Uy5xcqO1I oM8rOSm17Ow8NEIk5EMXQdYophyd8xxYFgqjZFYVs5MRd4u73P4hllLc4bA3Mn92ibgZIxIjZWRm F7gnOROiE7rFcNDr8aGLfHrnImqR ngfm vu6fHROMbwD7EzoYh2h5huWS65RCi/b8Anezqjo3EZ jkg5mXoe6wwMY4Ie6vb7wv10HeQlqXsAXRLlR1MFR0TJTWUNLVyI6WNN79zmaBRisguzZTBoPN7Q oLyDkCw3Iw73B4YwWEPeXT48UKgPfHr7lA4t6cU4lWOR0s3uEcXCBSIY5XM2phtzy1L3Xp4tE3l2 ggfzW7d3hhGu445UU4LNm rwULEvq1haIC5dvKzYWeF0ajSbm7DTuXhxRQWWS8uXikuXVFZVVmnj /kHUfWYw0lapLB6LQ3xYDrDHTPpYQB8SR4gWbz2uw1uQ37Ebl5mxmT/ 9Uh/uOMf5sf4b/InEU7w L/DHrrxYufJi5cqLlSsvVuDKi5UrL1auvFi58mLlyouVKy9WrrxYufJi5cqLlSsvVq68WLnyYuX/ yRcrC/76MYe7Gf3lxt65ZI53wd9FpDvvy/P0Mw f1xZyhMVCk7BKuBrLqgUr0Bz8j7isZzFDc4 0  34SJY/ywOKiDqlC7MyjMv1jDpfHZ/ /OcTMyP4ynxOxKf6dicbGMtck1o4SVo/bC8rYwHhmVtk3  Xe4Y3hOmLDj9PgiIxt5e3zFChlZskxCJgqLy07XxfFvw4cIHP82fxr9jM2asJeUnavTYgfhPw86 QsAEh/hfQxSBAxf/q4ncvLKDJ/kf4Pj3 VdRUjrt1XFtUhky/B7/PBjAxD/HPyuPPDuRmFQGdWH  LiAwheUphDMI5xAECPBPwh6EAwjHEQTQYWlCKEVopj38Uf4oynmY/ld2LEsRAggHEARo5b O/Tto yR/hrwMLzr2Tvw9Ssd7Pf5HVX8M6E vHsD8H60exTeuDcvvLWNPxh X h7C9COsH5foB7DdifT/7 USkT/yW5vYsfYvMicn2ID4/nmPR1OTguIjgReMTuQ w VN191MBYEv5m3s9WGsO6DOsBqUZ17R43 W5mNdk kZZQdQpXuRtXvRs3tRs3tBgGHbpyhuVGiKeZvRJobkeZGpLkRteLkw7hemH6VAUs9gojA o97DqHfaH8VyCuEU678Fy3sQDtEWP4x6LECp7uCvG7eb0Mn6JqpcZbUv8r2oahffO5GRXXZgrqWJ o46IdaJc6yitl416JzQJtNc7kZkt1Ui1oy6R98C/IHCQgmUuQgVCA4LAe8ZzS00v8OthQA2uRNMe bg /R9ijEJwNxHCSL4MWNaBLGvhiqEGCAlNnDVnapQlq9mp4 nVCp8aladEoAvwe/gDP068g1vLN fCevoF/pVlWX02/yrFJWl98Tfyg Gj8VfypeEVVOKU8pzyjPKRWi0ql0KVuUXcqgcq/yHuUhpeYe 5T0qris GL83ntfHi/HOeFd8S7zCpCKH6m7lu lXGbDUIwQR7kEQUMed2C/y1yJ0ojU6URXXYj9g CdjSI5xC/AzWCmzpkE6HdDrs1WGvjn0XX8dGWhC6EILyqHJ2ZGYOpT9HRxDycTQRe mXB85geY5i CNdgS4stLba0SHWKu4AS6rEUEVoQeNZ3BgG9BsuZMac83oWgZOPnGM3MmIvO5S643PlTBSRKv3pI 7ikgrpraujKXBQuDwdBp7bR12jsPCwFrwBawBw4LzdZmW7O9 bBQa6211dprDwul1lJbqb30sGCy mmwmu mwcGDt8bUn176 VuhcG1i7Zy2/lH5zcNzhLGO1xUbrZ8czMsuW6uqu5o7jdjqxPIhwGoEH HZYmhFKEWoQAgoI7znqfxt6nsfdpaEboRFDgrKdpisHSJI/R/oNsjGJ0nFswzuPmj41XlzfXrcW0 24lwEIFH3sdw/BijlrDjrD K5RnW3yzTH2L9lMqEMDOPJsFtLN1twzDcBrUInQhBBAW8zm F0wjI HUsTQhDhOILAb8NrK7 VexqvY9wxvsilXZxqgkWL8PgwJKn1dXouAX1BS46w8kFW3sHKWlbmuhKv 0X58jfZb12hvu0abjwhnx4NNS 5jpdkVX6d9pk7bXKctqNMitzQwg5ZLZaWSluQPrFzPyiJXiln7 N7P2z2btf5i1XzVrd5q1V5vpvCyMYS2Xwsp4WpL7WXkNK/Nc8Sbtd03arSbtUpO2TkseIbg6rGBl DiuNtCR/ekbXoAPNi RP0ICcyHhNgWmSA1aR2HhNHVbT4zWrsLo4XvMIVn8fr/mi6SXyN8KONvLx eO57prpUcp6sEWj7z3L9H2QNHMX6HNZ9WD8BNcSG9dfGa26i9I/j/Iex/RhY1JT UWhh8w6SNaz/ q/K8r4wXdeOqXx4vGsFVH4YituoD40XvYe8Xx4vuwOre8SI/VgfGbVTA68ZrCk11SaQPcjlK6wEb RyVZK6 4Gjn7sV4lTW4cL6KzGugCk6R 3LoYq3wq5UvECi1sOdO4lW0yG6yMRRZYmdBGsLE6keiY 8FqwsFo9br0JuSifsb1n kvNi3Tj8BHRjT9ievcl3N8WbP4vsmb8qOmNE1Rd46bXiyaJ7TnTj6wv mr6TO0m2jJumiibVOHCyaJIjz5rGUMlRpOXIc6bjRX2mp61s9LAVR9HUB2uKTV 2bjM9ZMP2uOmm opeoGDCAO96Cw 1Fy01ra46aVtomCQ67anAxV5yp2hoyVWH3skmyZuKoaXHuJBXFiTyOPmcqxBXz rEyUzUtf4CpBRYZcRaqIqlu1RbVBdZWqXFWsElXZqixVitqg1qsT1QnqOLVarVQLak4N6pTJ2BmX g35/LkWpZz jJ9BSYLieoyXHvl4HHFFzGDvRZL6Ja9q0gkQNTdDUuiK61NE0qYptjC5zNEXVLZ9r GyPk7nZsRbnbJwm0tqGD0q5bjfQHlE4AIaW33mWk9Y233tXeTpqiUx5o6hajH2/CfcRt2BZVWFek w6Jdtem1huVJVSsbLlN0yaVj7pPumP9Jz47e37SpLfr17PZoGUVi2e1N0VX0p5dOcDu5QGPDCS5I q/a2E QGbmfjRtpPbmhonyUDCxdEMqihFSWbAAslAwuZYGRrGRm6qaWxYcxikYheIWsoEbrPK4yo T KVi0sgrxZaIRmXA7mMVy6XQ8nQHyRmuvnMEoDoGDNdAjBmWZRozGZDkiIbJRlbakOCMdtSNnx0 bthqk8RpBxtbx0ba2TqEzNHYJRr0ApmGUyON4//mx7viv0BMJtxv9XjoD2B1WRu9CF3R/bv606N7 u0VxrOct Zex8rq6Pf20dnujb1m9DdEea4M45vZcZthDh93WhjHwNLa2jXlc3oZxt8vdaHU3tE88 sae acFad8yuVb/nMsz2UGb1dK0nmi4z3ESHn6BrNdG1muhaT7ieYGs1bVxBmlraxtSwor1 u1RP cPFxGA9dRnP7ikX64HIWHFeZ0z9vfEEAPLbiHe3RBOuKqBaBDhXXFdfRIYxOOpRIf JMHkr//FVm 4wvkiDykx 4k6wpwQHqjr2H2XzgcjlAYGnJgGRlKZ30RDFrzpqboSvqDTDXRmsaoq6uhnf22wJD8 qW9z6U/WvF7DBWr21ByoOVhzvEYxNNSO3YaTltctXKclYNljOWA5aDluUdKB7W3PuWoOWj608EPo TSSCn8YGtuYQ1viPNiNDYfoBXCCMIC3nGHLUt9VZwMPTLy/zWCYjWBHKETYhKODfsPwJwrsIf0YQ 4GYsv4jwOMIE7eGL eLGdF8DXbHdQZNOOl824awsWzaJtbtXqjdtk rG9VJdU1eWjvV4bXlcnQ5v wAm8gOX3EX6F8HuEvyMo DK jDEfkry2PQxhB0Hx6TfSI7QIOyKE/iwDoeqOhB0OCLOfacCOCCWd  7EO6QMkPASoCjQIVkjEesN02hCtZz7/G6AbMg8KZW5kc3RyZWFtCmVuZG9iagoKNiAwIG9iagox MTEzNwplbmRvYmoKCjcgMCBvYmoKPDwvVHlwZS9Gb250RGVzY3JpcHRvci9Gb250TmFtZS9CQUFB QUErVGltZXNOZXdSb21hblBTTVQKL0ZsYWdzIDQKL0ZvbnRCQm94Wy01NjggLTMwNiAyMDI3IDEw MDZdL0l0YWxpY0FuZ2xlIDAKL0FzY2VudCA4OTEKL0Rlc2NlbnQgLTIxNgovQ2FwSGVpZ2h0IDEw MDYKL1N0ZW1WIDgwCi9Gb250RmlsZTIgNSAwIFI PgplbmRvYmoKCjggMCBvYmoKPDwvTGVuZ3Ro IDI2MC9GaWx0ZXIvRmxhdGVEZWNvZGU PgpzdHJlYW0KeJxdkE1PxCAQhu/8Co7rYQPttromDYmp NunBj1j3B1CYVhILhNJD/718rJp4gDzDzMvMO6TtH3utPHlzRgzg8aS0dLCazQnAI8xKo6LEUgl/ jdItFm4RCdphXz0svZ5M0yDyHnKrdzs PEgzwg0ir06CU3rGh0s7hHjYrP2CBbTHFDGGJUzhn2du X/gCJKmOvQxp5fdjkPwVfOwWcJniIo8ijITVcgGO6xlQQynDTdcxBFr y52zYpzEJ3ehsgiVlNYV C1wmrurIp/x ilwlLmnkOtd0kW8zP0W y9xGPmftfep/7RQniav6cYjF5lxwl/aZbEVDSsPvyq2x UZXON0BjfcMKZW5kc3RyZWFtCmVuZG9iagoKOSAwIG9iago8PC9UeXBlL0ZvbnQvU3VidHlwZS9U cnVlVHlwZS9CYXNlRm9udC9CQUFBQUErVGltZXNOZXdSb21hblBTTVQKL0ZpcnN0Q2hhciAwCi9M YXN0Q2hhciA4Ci9XaWR0aHNbNzc3IDYxMCA2MTAgNTU2IDI1MCA3MjIgNzIyIDYxMCA3MjIgXQov Rm9udERlc2NyaXB0b3IgNyAwIFIKL1RvVW5pY29kZSA4IDAgUgo PgplbmRvYmoKCjEwIDAgb2Jq Cjw8L0YxIDkgMCBSCj4 CmVuZG9iagoKMTEgMCBvYmoKPDwvRm9udCAxMCAwIFIKL1Byb2NTZXRb L1BERi9UZXh0XQo PgplbmRvYmoKCjEgMCBvYmoKPDwvVHlwZS9QYWdlL1BhcmVudCA0IDAgUi9S ZXNvdXJjZXMgMTEgMCBSL01lZGlhQm94WzAgMCA2MTIgNzkyXS9Hcm91cDw8L1MvVHJhbnNwYXJl bmN5L0NTL0RldmljZVJHQi9JIHRydWU Pi9Db250ZW50cyAyIDAgUj4 CmVuZG9iagoKNCAwIG9i ago8PC9UeXBlL1BhZ2VzCi9SZXNvdXJjZXMgMTEgMCBSCi9NZWRpYUJveFsgMCAwIDYxMiA3OTIg XQovS2lkc1sgMSAwIFIgXQovQ291bnQgMT4 CmVuZG9iagoKMTIgMCBvYmoKPDwvVHlwZS9DYXRh bG9nL1BhZ2VzIDQgMCBSCi9PcGVuQWN0aW9uWzEgMCBSIC9YWVogbnVsbCBudWxsIDBdCi9MYW5n KGVuLVBIKQo PgplbmRvYmoKCjEzIDAgb2JqCjw8L0F1dGhvcjxGRUZGMDA2RDAwNjQwMDY5MDA2 MTAwN0EwMDZFMDA2NzAwMjA Ci9DcmVhdG9yPEZFRkYwMDU3MDA3MjAwNjkwMDc0MDA2NTAwNzI  Ci9Qcm9kdWNlcjxGRUZGMDA0RjAwNzAwMDY1MDA2RTAwNEYwMDY2MDA2NjAwNjkwMDYzMDA2NTAw MkUwMDZGMDA3MjAwNjcwMDIwMDAzMzAwMkUwMDMyPgovQ3JlYXRpb25EYXRlKEQ6MjAxMzAzMjEx OTAyNTIrMDgnMDAnKT4 CmVuZG9iagoKeHJlZgowIDE0CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAw MDAxMjI3NyAwMDAwMCBuIAowMDAwMDAwMDE5IDAwMDAwIG4gCjAwMDAwMDAyMDYgMDAwMDAgbiAK MDAwMDAxMjQyMCAwMDAwMCBuIAowMDAwMDAwMjI2IDAwMDAwIG4gCjAwMDAwMTE0NDggMDAwMDAg biAKMDAwMDAxMTQ3MCAwMDAwMCBuIAowMDAwMDExNjY4IDAwMDAwIG4gCjAwMDAwMTE5OTcgMDAw MDAgbiAKMDAwMDAxMjE5MCAwMDAwMCBuIAowMDAwMDEyMjIyIDAwMDAwIG4gCjAwMDAwMTI1MTkg MDAwMDAgbiAKMDAwMDAxMjYxNiAwMDAwMCBuIAp0cmFpbGVyCjw8L1NpemUgMTQvUm9vdCAxMiAw IFIKL0luZm8gMTMgMCBSCi9JRCBbIDxCQUE3NjY1RDUzRDU4RTRGODhEQTVDOTNCRDBEMDcyMz4K PEJBQTc2NjVENTNENThFNEY4OERBNUM5M0JEMEQwNzIzPiBdCi9Eb2NDaGVja3N1bSAvRjhCODFD NkFBN0U3RDc3MkRBNEJFNUE2NDYzQkUyNTYKPj4Kc3RhcnR4cmVmCjEyODQ5CiUlRU9GCg=="/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value="379252830773"/>
  <con:entry key="signed_document_attachment" value="JVBERi0xLjQKJcOkw7zDtsOfCjIgMCBvYmoKPDwvTGVuZ3RoIDMgMCBSL0ZpbHRlci9GbGF0ZURl Y29kZT4 CnN0cmVhbQp4nB2KuwoCQQxF 3zFrYVZk7gzs8KQYkELu4WAhdj56Bbcxt83I4GTe3PC g BLHzASRyyiwXrs3J647rD ZZ/tTbNTLsOEqmM8 AP7s0AU/ro1FtPG2nGwJL0LNx45W25cLIWo cYo12d0vdHJaaMEP/LAbkQplbmRzdHJlYW0KZW5kb2JqCgozIDAgb2JqCjExNgplbmRvYmoKCjUg MCBvYmoKPDwvTGVuZ3RoIDYgMCBSL0ZpbHRlci9GbGF0ZURlY29kZS9MZW5ndGgxIDIzMDAwPj4K c3RyZWFtCnic7Xx5XFvHueg35xxtgJAQYBYBOpIQCMQis9iGECMMeAm2wTa2wTUBIQQoFkiWhAm5 ce3cLE5wEqdpmq1t7CR14tROLSALTtKa5HZ5adrG6Zr2pbHzkrTp4hvf1kmX2Oh9M ewOW5u733v j/f7Pev4m/lm5ptvvvm2OYdjKRIa8kIC7AUeXJ4BdzBDG68GgB8AEINnV0R88mctBsTPAKi 3Rvs G7jrsd1vAWi BqAI9/lHer/c9bubAHTpAAnb r3unr8vO6QFMEaQx5J 7GieHlFh xi2c/sHItcP Kr6ej 1TtO0PeNzP6x6Lx/Z5bKcMuK8P3qIvVgBkURnEQfeA93Pf1/0U23aAkqFgIBzpgdwYwDWH 6Hgw5A3 Jb/3I2xPSTIAwYt EhBV0jbHCwqlSg3/v34UdyOsBRNCFn8fGAFi7yC8h/DB9DWxC4od YJ2 LnaGT0bip2UAsMH9cBBy4RxZDK/AFFwDT0AdtMB9sApeh OQCCPkNRDACg1wBGzEBByshDSi gIfgl7AdQvA nAE7NMHbxIB8GiEIi6Aq9jssm D22AmkioN6 Aa8QPxkE5QivporIg5c UBsCtLA Hvth7E1sfRXeJ7mxMViN2G8gCfJhD3wBDHAdfD92ASXNhW54ktxIfgdm6IL9QoUwGtsBV8Gz8DPS hNg6GFG8qXkW/DjrcZJGpmKnY7 FbwkEvMjpX F2lHgcprgSvl5xCETIg6thPbhx9F/glySZLOZd sfzYithD2Psk/IlzcN/lVSiHA9ZAJ9wFj6I2fg7vwUcknlSSr5KjeL1B/l3xJsrWBENwA8bWV1F7 T8IxOEEWk8VcGpeG2kqDAtiMYwfgMK4/AadIE2knU Rl/rDCOV0bS4mlxn4bi0EhtKGEB FlXOM8 cSINrsBb IiQI0QUZRdvwh32wFfgFLyBcryNev8I/koK8XqH zy3J7Y1diT2PsqiBhMsgw2wDQKw C4bhMbTqK/Bt A/yCadByteF7yhuUJyL3Yu6zYMVKHszUm9C3vvRSuMwidfPcZdJRMRdLCPryUbS Rw6Q 8kk SX5JafkzNxO7vd8lH Nf0tYolDEqpHTIsjBda2wFfrRAp9Hbd L z0C34FXSSrJI8W4 o5/j/I 5q7gGvB7nXufe5m/lDwgXFLdNn5n w/QnsVFQoZetQj0MwddRCx SRShDAbmOhMm7KPk9 3DN8Iq/nrXwlX8e38u387fx9/P/gfySEhKPCrxRrFG7FUZV7enD6jVhT7BagWUKJcuVDEVTAUvSf XvSmHShfEK8Q3Ag3wSjcjf5yLxyCo7jvk/Aq/Ax DX9ECwAxo8w XH0Ave5WcjdeD5Fj5GXyHfIq eYd8TC/OgpedW8LVcvXcSq6PuxWv 7hT3M 5D/gs3sPv4ffi9Qj/HP9LAQRBiCnK8Fqt2K94Uvma yq5arepW/ DC2YuFF9svvj0N05nTn5u f/rl6d/GtsRGUH4bFEMJSroPpXwIffAwXl9HT3wOvou5  xdM1j8RjijQ49OJFb2hCK1WS1aRNXitIxvw2ozXVrINLzfpJv147SF7yb Sm8kt5C7yJXY9iHs7 TJ4iz H1PHkBr5 R0 Q35PfkTxw6McejN9u4fK6Uq8Kd1nOruGZuI159XACvIBfidqGFnuQmuBPc z/lk3sYX825 J/8Q/w3 Ff6n/N8ETigSSoUaYYvQJ9wsvC68IbwpfKIwKRoV/YpHFK8ojcoK5Wbl dcoHlceVHygvqJSqFlW36kbVT1UxtQ2z1fdw388uSHmlytdJWJEiXM dxrhI54OKfWQzakzJtfJ  /m7 x4peco4Xya/IKO/jd8Qe51dyf UDZAt3klh4k6Ka74U7IUaOcu9w57nfCqmklfsdsQtfIM9z Ab6eU7K8 hMhVbhZ8QEA9wuo5naTKe47/M38zbFvQrXiEXJa8Qj3BojCGS4ZTmNU7 MewEk/4nzc fmgTKhSfgA/1/pTietT3cu52Usj/VHgE3uet3J/JOXI/Zo0fkmuEXO5aroocxYx7keTAWbITguRL 4CIvkl TSSDkCP8kWcsloLWinJYsxaPvh7yZ/JSPg3YqI8njUkkLd47bzL kPMVXEoJZ4sdwA GJ E31n5jMNgxgB93H5mNMaMZv8hJRBOjyA f789Es0YyveVOxHP3uUL4KN4IQO7jWoxth4H682uA3K 4AX0wdvByT0IN8b2kh7M  swf3IwSa6DUhKP2TINZduD58UizoK5sBNX/Svm/ 9j1m8i/w7DRMTI mgK7QEfuFBoxM3Vh/t2PVw90YOsrcK/yWcVPoJmkAQji9CPo5W/BtXjmvIvrZ0INyrcNHhWKUGoR M/NOnPGV6dXgwus2eI1wsBtlXo5x3iKsxsx7f w63KEPz6i1eCa Cr7YA1CPttsYuzm2Hzpjj8a2 Qx9sih3B/LsrNg5LYJ induicAgVmGNfJd/G8 h/kv2Yt1fDrzAf2Ug6/B6vb6BEyxUvwqjwC8yd tbE7Yz DVNSHBTXUjafoezAA/456W81PQfn0em4stpIP4gl1GjbEnoyZSBz0x/yYeV CwyoF5p69 kKM47HK5apdfXXNVddWypUsqK8rLFjtLS4qLHIUF9vw8W67VYhZNOdlZxsyM9LRFKcmGJL0uUZsQ H6dRq5QKgecIFDVaV3aJ0byuqJBnXb26mLatbuxwz voiorYtXIhTVTsYmTiQkoXUvZeQumSKF2z lEQv1kBNcZHYaBWjP2ywipNk24Y2xO9qsLaL0bMMX8fwexiuRdxsxgliY3p/gxglXWJjdOWu/tHG rgZkNxYfV2 t98YVF8FYXDyi8YhF06zBMZK2nDCES2usHuNArUWhopnWhsZohrWBShDlbY3unmjL hrbGBqPZ3F5cFCX1Hmt3FKwrojoHI4F6tkxUWR9VsWVEH90N7BfHiqZG75zUQ3eXI6HH2uPe3hbl 3e10jSQHrtsQTbvhvfS5JjI31Lftmz9q5Ecb030ibY6O7hOjhza0zR8107K9HXlEOdvKrtGVuPCd qMKmTSKuxd3a3hYlt KCIt0H3ZO0O6 1kfZ0XSdGNdYV1v7R67rQMJmjUdg4Yh7PzHSdiJ2BzEZx tLXNao7WGq3t7oassRQY3TgykeESMxaOFBeN6ZMktY4l6mQkQTsf8c6OMYyRU6xp46xeCZXIugbd ISp6RJSkzYp7WkYL7zIY9SxDMvy0E5wV7UF7 KKa q5RfTX26 n8qMKmt4qjHwHa33r2jwt73HKP 0qb/CChKvWTW0XB8Bo86HNHCQuogqnq0KMq4nLUri4t2TXJRa1AvYoXqgxbUrbu9uhSVbzZT8 6f dEE3NqJ7N7RJbRG6jePgKnW0R7kuOjI1M5K6mY7snRmZnd5lRT9 hj2NpEbVebP/dPpFyY391VGy 6DOGvdJ40yZr04ZtbWLjaJes26bWBS1pfNnsmIwRaQAVHhVsqKk1VnS9jdvaaAf U9hWWht9Xasx 1FDGaHJ9G2/k2iWMM/KMFfrv9lnOtNGWQHkJNiXz/55JlRodmPUQcWVU37VaKtvjzOZ/ctJk7Byd xaq5afKeotWOhe2rFrQXiJcwyqPAQh7X1LptdDRuwdhKTFajoyut4srRrlH3ZGxvt1XUW0dP8G18 22iwsWvG/JOxF/YboyvvbMdN9JPqYjzWqW0UeOGTsQrWjXHkRe5beN o4k6Og0KY5L71DA9xKoo8 SyBDrVScxHEOeFIAGrKDXAvpDv3HNRdr1uvP16y7WAO1iOsvYLHYaU4yJ9mwIHgiXhD5qQsuBXyC dwtT6BDL8XyL0ic2eNVVjTdn3LbsbTk7yA5uR/aOHHWpudbcbH5Q8YDxiOIJo4oj2TmLTEa92aIx GXVmqyrdCiZOr1ObJ7kpV7IGn6dcaYm1Bh2ya8HbQwEmOfvzao0lbZHJkTMZm3Il0mHI0ed05hzK EXJe4Ox4Rk9NiD0dVPzzHfVtJyAnNjUeX0nJx N1FQ5Hu M9Pe6DDro04IqvRJjp/w3uk 7U4SD6 V/WvLnaSDuggyda8/Lw8qzUpJW1ReXmqubK8DE yJKtFpVSqrMnCo7q8 GRTX tJY15z6cWXnVty Fz3eaa 4RpWnV6ydfqU1t3rpJ d3mwpttgoxJCQkJvu3k X0Pr4QtfUMaqscPnRtdlX2ZQ1nfdn5 VPox54vOM5XqLRlBZVC1R71Hs1e5V3VAfUCjyTUZs80Wm8noMFvV5sREk8aoVpk5zqQ0qrL0Ro5Y E3W67HI47CiBYn0xVzzJ/cS1uqjIwaWmHM42fpCVla3WHFOrlcdqVXtUHKj0qmYVr9pVcqzIYSou xQn zGOi0WU8beSNm1oqg5WHKvlK0FtsuY9UnDlB9s24hb7j446z5zveu/hxR8fZGv1Z1Jv j/qL qDz9dEcNIoaqUiQjSYYq/dk/gv4jIlUOx2K8BSMdJMmMOlxaniSp1pyUsghVW7aE9vGSglHDFfmo 9Uoz6h prPiYUhjJr1DabImJho2bp3 uty/7TbjfubzOPvTJH5xOh5iWmdvqFFJ1 anlZXavgrv4 gbUkMm33ZFnt03Xb8tPE0uW7p4/Z0vQuD7/zphy7bfoXO1pSdWiJvbF3BIViByzjtroyDF8qIjqi 4 J50Al2KFA4mkkzp0mqniQrXaeWLFuSyRuFzvTOjM7MTqNSoVUkQuFUtRCJj2gjibt0wZygKVga dN6hvi1 n3Zf4i26fY4jwpFyvUFbrq3QVmaXZ1dkV5aSUq5YEHNEU0FBcflyvI uFZwZzhynyWm  uuLqytXa1YWt8Vu0W/VbCrY4sk3ExBnLTZXGJa3prRmtme1l28u3V2yv3L5k29JEPj6 IDneWGCN F6uvKnBWhwyh5DtyH1Q9WPqQ80jplP3lwu86pqrPVaesVy8zQoAzHiev4 PVHkLICzDJN7m0lQ8v zjJmB0zGnJwXsmlPRcbDKYUOR01CYkpCQqIjoTBRyNOwSmklFwGU9sW81Z6i4Y4RV46lghBTHsmb JFaXvjTpZBJ3Gh 0k44nnU7ikya5fc bjuU49BqioQSmgyXkZMmHJbESvsS1qtJV8jo2eCgRS5wl UyVCyUtkJVSRlXhLmu7A7NPR4dgZWnc2dP7sxY6doYuhqlIHetvZWup1SYa0KkKLfYkljsTd m n g/6P58 ir50/y7AOot J GJn/YhrSa5TlWzPiy/SlEOBLq c5CZjoXJiM644oRziE4oc frCcqJL LCi0GazloC5VlhNwOPQ1 hqpIA76uekmTAshlj888b3aPr3HIXS0d5CdIQfeunfgyeFKiE/XVQlO XVU5ArJwtJMkawlntShTMYmk5WA8Kq0W6voWTCFJ5TkcOn9lBbp5bl5eZcWS8jJMNRgO/FGboePY 9v7bHct/9639TR  dFWF6d8yM7JVNltm27P 3V9YWp0//bUvrj3ztH9kWVqmOU6xY9qx79C1ezYs L2/a3Ttw34aHT2sUtTml5I17v9B1y7ay3qKcf4vc2XrvTyozTKV4TsDq2DuK69HzE/BJYsy1 AHD EdVTcU/phWEyotpHblcJ9WqtHfhUu1KTXmPiS3k8JPS8yDt5F6/g12TTNJxZWylmu7K57KQavUbU cDqNScNp1mT1eCQTov3W6Xc6PqYIsx0zSBkx6mzxeZl5yXmJCUnFYCTpxSRFhdgiBWL6OG0xyeCw MKhTiyFNwIJqX7IBNQPp6MBHryQ9mGm5dEkaJuQkPVUcPkTk53FniZrcPH3D9B mP5i  a2Tf3lu 8I67ByZO/u2OQdRSYPqn069N95O7SQ2p/8HYmn1Hpl afmYCH2ZJHdl 9HbMz7H3Y79XfB3zcz4Z dTWNGojhACGcq7nyAEcM2RzJ54qTlyVfn/wgd5qLcapki8WgNxnjzBazyWg048O4UWO2ppiMmWar wZBEOM5isKQYDBbLJHnMpcs/RuI0GsIZM9UGDc9Ncq 6Eg2bkpJEvVPv0vP6RwqoavW1la4CIhaQ QwVnCriC5BRGZzY7LWTKQiwZdvdjko531qzDtLtOj0GCikbkN/TUpscZeu7Zs/tKHAoMEDBUkap0 qj2Vvoam4hB6sV1jyDAUkFqoMjTDNYZO2GYIwHWGGwxfJk/h0/qzhtfI34nhQ7ynwMzdDjsdZCf6  AngYkcmcgy1HMo5sUhba5iMffAcBqQrq4qi43JlZNVzGVVEnU7RN106Q5VhkaGK06ciZFQlY994 fBWyOSVVf302pYpzJbG4mW9xbLdDB28mMwdDKj2CU5Os5JKTmR0XRhLkr86ytZSSN mJnHvhX/F4 dk7bS7fmLrrq6quyr1KsvaDiE2fO5U/uEBoufHOmxR9vLErW0DO6AM/o59EHRLjNZdSDHj1OJC7L Vq6PG ZGxYfEp8QTYgJBm97tKk/sWbKZ257D4f0Mb7YsWmpMutoSR 9wrKJJBCc zvPw26wkPZdl 5Xg1HCN tPu3XfGL0iwaTdwjZncHMyYz5fnz9FQ9i/Z7r6OqykFPThJy4NGZxs/sc0YNeUrUAqqA HaFLhPvNkU9 U77FlpqVv66c6/VvFfUJZTd7vvL5fjKsmr7HtkyM8Dv2iEU2Gyl0jVw4tsmUmlIy hHtNxnvGp3CvJeT ZxRADE7qgUfQA53Xpl b0eIUitL JW0kbyR/f9od coMRYaSA2eqKtUuOluc CoVCqVLaUznBjBrKVdnzc 22EqdzJXE5N5A21bacNnuLM6wMq8L2cGHQuZfsVd6iusW t3Cv82Dh 4 Rx7pDz29k/yz7jFG9V7lPts/NExRmJdINoyhONJrCXGEG6VcxJzzbm5Oalp6VhEk3Jz89TqdU0 Mgry7diyp elldpVTrVdlZ XrjDp8W7YZMqht5ZpiywuvAUS8 nWDNpKMd Z78pvyQ/m782/J1 V P8k9OFG6YzTdkYEx5ci8WJOZzu5 WRjVyAdOVRWFfYJ06GCdzhBiqMIDCI fKQcr5 P0VrJj5056 PpAQcbD4UcTOuBIxcIjdEF8LtEinAZNQpZIqlPGDsQQWBoQdIR2EujzedF7q8IR5PAsIesAQQs S PCt/ivwyM7NnY830iay8jUUXp2ggTN 5ovSalDyuIae0 WpiJHE12UuWKNbaSra4L16cPjYTAaSO W9ZTZo2z2YqKcq dbiKPXVuSVZTB/v6M58Ybf/z 5/5a3amr UidIb2feuzd7Fdm/iiHmfMdzJw7 ENXI77TYPJV5uhG2zv7tjsDCj0ZZRbKEd2E5QqEQhr0cfYr5HqxWfC/2PvYVIE7f9FwFPyYP8Cl4 PSZ8TZGpLGacNFAFHOPDgR5KoQ7n/lCXjiFHe1fx24A DUl/MwQZJ5DDWjyblUiyZJyHECmUcQFy yFdkXAHpeMsk4UqwkB/LuAreJOdlXA153A9kXAO3cX S8TjFFv56GY HkPpHMp4AvRqXjGuVz2ie kPFE2K7fNqujPfrnZJyALqlSxvEWPqlBxnmoSmqScQFpbpFxBSQkfVHGlZCUdFDGVeBPisq4GpIN WTKugXpDqYzHcUcNIRmPh6rU7Nk3lOWpW2Rcy29LvUPGE6Ek/V2UhAhU6wkZSQxXUItkZDNcyfqL Ga5i/VUMVzN8DcM11EYZ7TKONsrcKuNoo8whGUcbZd4s42ijzI9kHG1kTJZxtJHRIeNoI M6GUcb ZdlkHG2U1STjaKOsN2QcbWTJl3G0keUhGUcbWWIyjjYqmGB4HN1XoY7h8XQvhUaGJ7B SYZEhi9l uJ7upbCe4cmIGwo3MDyF0XgYnsr4BBi iPXvYXgGm7uf4UZGI8mWzWieYriJ4c8yPJfRv8zwQoa/ zvBihv a4mpJ/j8wXFrrLxRPYP0OnuFsLw62Rx31H3AYoRVGIAhe6AU3eLAW4SmEVuhn DoIwCBC RKYSoR5bIcRp6cZ H6MQsceP80sQa2D97v9DTqWzkomwCUf8MDRLE2Z/ZR U11uMeaMKD diGStj vXU4w4/1RpzThzJE2KyNyC MEIJdWPbgGj4YYH0irMd6mNEEsM N/Cl1H67rx1boUzuo/k9mi5fM r4YtbOXw7E6ppMuwFNk7Cx/uJ4QjYYReXKXgP H/j7jNzZLmzM1oQU2uw/HP5vsNZjVqkx4cG2Cy 78A KtV/354i9lJt HDVCJOc6l/ENqWJyFw3o4Qiyknn07fhdL11WDbj2r3MrlRCOs LXMNM9n6Z W8llZJJ8KIDrUpmCSDvyD6m8zHcp3TCTqm92XZ8cGcXMFyNMBj/2jMh6CLFdUa5F2LOF0UdYvwhr mf6oJgfZnqiPljMr9bNZkl5mtOyGbsZZnJVuLi6pHCGmPZHthY66L9HjDPeZ9oy15ltcsuNaJm P bKNBpskw8nQzviG2k155D8NMVg WlG E9bgZrx7Gk0bYIJODWojGJqXpl2nCGAHdzFY7EZP04Ge6 68aWh/mdl8k1KNe98zximMngR96U1wCLj4jM1cM0E8arl0WZOM mHqYZ97ycIck2oxHJan1MT242 t2eB7cNsbcmzRGafHoYNMa15mV4 2xfyZQ35GA/PvIjoZtSf7SdSBHzafvM1LOloUJZ0cLaPZpEh lvVEORN54XoWdYPMWrsYT58ch5KOpL4gmzujVcmLdrHsu2s2JqiuQ/LaoVkL7Zj1uUvjS9LDPxdj 0u5WMM R/DowK7/kl5IeBuV8vlDjks/1MOtL3j3ENCxxGmJ7l9ZsYbwoxwj2u fllRaWrQeZTqR4 9i3wZilHjjDJ/GxGmO3UL3tdP7OjW143JOc7ursws/zQgvih0tKIm5GReoPIvFKyB923h U6/6yF /XIe7UbwM lG5B0PsVwrcRpmI/2MWwAvKWd6ZNsM4BxJ11uRroetMCLraH4 6WZzd8iyShqiGuhD uIHRUE Znyuor0tnQEQeCSzIoT3Mv4YWWHGGs5vl9MA8bj1Mf0Fmk5EFlD1MQyGm2xm7lrBzPoL0 1Xj/UIo6oFcJyxrzPbJEzjqljH4AuZdiGWGZgMpFW2HoZLylqJPyY2j2jCyZnfl/d8VhZomZnDi3 ynqMklaM pUI9XhvQ/Fm7KXRs5JlD9rfiD2bsKR3P6vwRG9k/6OC9raCFuIYzJ07nz5hZvr75 WC oKzlkdnM/M dsnO28slWlnxrJvuNMH dWdPD/l/Y3F3B/Cw7I48UTwPzzjA3iwbJswZl7m4mhZed qZKHUT9vl1ej0blLzv/dLHv75JNLWucfaWbmnmxYPnFpLPnm5cD5WV6KpF7ZWy6nr4C8L6ox74JM OhOzn16vR84kIRb5Q7MZo1u2zPyz8/IZeKGmpLPk017x6ZV9coyKqDk3uw fu0txs3PCy/LS5dem 2t8sn5HSmTLyKVtIdlp4TyhlQjeTKMg065OzyD9jc1H2xZk83jdvXZo7epimpfNYOv1D854Timap Q/P8du6 5LM15WdZw3dJTp/jN3Nehpn/zd0VzOS8OcoA0kp30ENM45R// x JLnme/eAnCUl/UtR FZT9Yy6bLvShz9rRnH sYXv/tOVmzkLpzi48bzfSSeNhVh28xAahS/Q9x5nuL8Du5Xrks4Ted0hP KDN54J x/gw/KSa98nm68Fyc4fdpO0raknYQkc/yy8XxjMXcl i6978k7ZyWP72CR75/65Zb8yXy yidhBM eGQ70 Yn HzT6pGLHp0H6P0wLEF KTwbLsNeJPU686F9NNkOTTOnE0cU4UiHjS/EZYimb tQQq8YmCAuX Xzvr/vsn48xY6SXamz0PW0eC3l63xys Jbb2e8V1gcFABLvE kAoGAi5I77AoBj0 e0rEBnfE/Z8QlVJm4qaAf4j2hMU1gzhvcVWVsxiLshKxzu8XN/r6 iNhcaM37A3t8va0 ga8YXG9 d1jcGBhwD2709g353aGZBaovGRbl8eot3lCYLlpWsqxMtK/zeUKBcKA3UnAJ/XwyNoQjbKBl07rW S2iPiK0hd493wB3aIQZ6P3OfYsjb5wtHvCFvj gbFCNIunmT2OKOiHli6zqxube3RHQP9ohef9g7 3I9kJbOcUEOBvpA72D8yv8srNoTcw77BPjrXh8YoFjdF3IN 7wjKEPKFA4NF4hafJxIIiWvdoR7v YATVWl7W2u8LoyxUZHe33ytGZmzZ6wuFI6I7GPS6ZRkpOa3ptqSN4x7XBgZ7cEeD3uFw0B30horE XlxhuN/n6Rd9EXHYHRZ7vGFf36C3p0QU10TEfuwJD3WHvTuHUAb/iNjt9QQGvGJg0Ev5UUUMB0L  nrA4EEABwkMejzcc7h3yM9FET8jLdBhGblQQ3Fqfb9DtF3uk3YfFYVSWOIBmEIcGe7yhS7WQjwL5 Ql4PM0T3yKU6QQPM7k8SGCUaRKaDFAsFhvr60S6i9/qIdzDs2 XFTXqpVRELhgJUVFTRroB/F7VE 71AIZ4fohnZQzc3YC2W4jMVwuRXuMOo6QPmjLlGGQfRzWXDUXI/oQXUPeSJINBSmM1u8oaA3MuRm vtLidw9GfGhnn6Rm9MgRMeDvEcORETStp98dcuNc5BbxecJi95BkH3ePO0g5RgJiH92H93qP1  n G/ajj3b7/L7ICC48FPQj0bAv0i/2BQLomShLYGAEpd7q6/GiIYfCkp90BwI7wkygAXef wbfoDcs eUXIixEQwUZA8tCegGdI2iIldvvDAUbW4wsH/e4RqbNnlzcU8dG9lvRHIsHq0tLh4eGSAVmRJeg6 pf2RAX/pQIR Q6h0INwZoaZDfwzRiCyhg//kxGGvn3oim7K uXXNyjX1da1rmteLzSvFtWvqG9dv ahTrVm1sbFzXuL5VG6eNY7EzGzAU72degKZDjaEzXyZk2a58uGXUFnW/kcAQnekJ7GKpQHJZygft NMAizC36UVmDSO7uC3m9VGElYjtO63ejsQLdETdqGK23QBiayYYxcEWvj3mg5PJopF5Uy5xcqO1I oM8rOSm17Ow8NEIk5EMXQdYophyd8xxYFgqjZFYVs5MRd4u73P4hllLc4bA3Mn92ibgZIxIjZWRm F7gnOROiE7rFcNDr8aGLfHrnImqR ngfm vu6fHROMbwD7EzoYh2h5huWS65RCi/b8Anezqjo3EZ jkg5mXoe6wwMY4Ie6vb7wv10HeQlqXsAXRLlR1MFR0TJTWUNLVyI6WNN79zmaBRisguzZTBoPN7Q oLyDkCw3Iw73B4YwWEPeXT48UKgPfHr7lA4t6cU4lWOR0s3uEcXCBSIY5XM2phtzy1L3Xp4tE3l2 ggfzW7d3hhGu445UU4LNm rwULEvq1haIC5dvKzYWeF0ajSbm7DTuXhxRQWWS8uXikuXVFZVVmnj /kHUfWYw0lapLB6LQ3xYDrDHTPpYQB8SR4gWbz2uw1uQ37Ebl5mxmT/ 9Uh/uOMf5sf4b/InEU7w L/DHrrxYufJi5cqLlSsvVuDKi5UrL1auvFi58mLlyouVKy9WrrxYufJi5cqLlSsvVq68WLnyYuX/ yRcrC/76MYe7Gf3lxt65ZI53wd9FpDvvy/P0Mw f1xZyhMVCk7BKuBrLqgUr0Bz8j7isZzFDc4 0  34SJY/ywOKiDqlC7MyjMv1jDpfHZ/ /OcTMyP4ynxOxKf6dicbGMtck1o4SVo/bC8rYwHhmVtk3  Xe4Y3hOmLDj9PgiIxt5e3zFChlZskxCJgqLy07XxfFvw4cIHP82fxr9jM2asJeUnavTYgfhPw86 QsAEh/hfQxSBAxf/q4ncvLKDJ/kf4Pj3 VdRUjrt1XFtUhky/B7/PBjAxD/HPyuPPDuRmFQGdWH  LiAwheUphDMI5xAECPBPwh6EAwjHEQTQYWlCKEVopj38Uf4oynmY/ld2LEsRAggHEARo5b O/Tto yR/hrwMLzr2Tvw9Ssd7Pf5HVX8M6E vHsD8H60exTeuDcvvLWNPxh X h7C9COsH5foB7DdifT/7 USkT/yW5vYsfYvMicn2ID4/nmPR1OTguIjgReMTuQ w VN191MBYEv5m3s9WGsO6DOsBqUZ17R43 W5mNdk kZZQdQpXuRtXvRs3tRs3tBgGHbpyhuVGiKeZvRJobkeZGpLkRteLkw7hemH6VAUs9gojA o97DqHfaH8VyCuEU678Fy3sQDtEWP4x6LECp7uCvG7eb0Mn6JqpcZbUv8r2oahffO5GRXXZgrqWJ o46IdaJc6yitl416JzQJtNc7kZkt1Ui1oy6R98C/IHCQgmUuQgVCA4LAe8ZzS00v8OthQA2uRNMe bg /R9ijEJwNxHCSL4MWNaBLGvhiqEGCAlNnDVnapQlq9mp4 nVCp8aladEoAvwe/gDP068g1vLN fCevoF/pVlWX02/yrFJWl98Tfyg Gj8VfypeEVVOKU8pzyjPKRWi0ql0KVuUXcqgcq/yHuUhpeYe 5T0qris GL83ntfHi/HOeFd8S7zCpCKH6m7lu lXGbDUIwQR7kEQUMed2C/y1yJ0ojU6URXXYj9g CdjSI5xC/AzWCmzpkE6HdDrs1WGvjn0XX8dGWhC6EILyqHJ2ZGYOpT9HRxDycTQRe mXB85geY5i CNdgS4stLba0SHWKu4AS6rEUEVoQeNZ3BgG9BsuZMac83oWgZOPnGM3MmIvO5S643PlTBSRKv3pI 7ikgrpraujKXBQuDwdBp7bR12jsPCwFrwBawBw4LzdZmW7O9 bBQa6211dprDwul1lJbqb30sGCy mmwmu mwcGDt8bUn176 VuhcG1i7Zy2/lH5zcNzhLGO1xUbrZ8czMsuW6uqu5o7jdjqxPIhwGoEH HZYmhFKEWoQAgoI7znqfxt6nsfdpaEboRFDgrKdpisHSJI/R/oNsjGJ0nFswzuPmj41XlzfXrcW0 24lwEIFH3sdw/BijlrDjrD K5RnW3yzTH2L9lMqEMDOPJsFtLN1twzDcBrUInQhBBAW8zm F0wjI HUsTQhDhOILAb8NrK7 VexqvY9wxvsilXZxqgkWL8PgwJKn1dXouAX1BS46w8kFW3sHKWlbmuhKv 0X58jfZb12hvu0abjwhnx4NNS 5jpdkVX6d9pk7bXKctqNMitzQwg5ZLZaWSluQPrFzPyiJXiln7 N7P2z2btf5i1XzVrd5q1V5vpvCyMYS2Xwsp4WpL7WXkNK/Nc8Sbtd03arSbtUpO2TkseIbg6rGBl DiuNtCR/ekbXoAPNi RP0ICcyHhNgWmSA1aR2HhNHVbT4zWrsLo4XvMIVn8fr/mi6SXyN8KONvLx eO57prpUcp6sEWj7z3L9H2QNHMX6HNZ9WD8BNcSG9dfGa26i9I/j/Iex/RhY1JT UWhh8w6SNaz/ q/K8r4wXdeOqXx4vGsFVH4YituoD40XvYe8Xx4vuwOre8SI/VgfGbVTA68ZrCk11SaQPcjlK6wEb RyVZK6 4Gjn7sV4lTW4cL6KzGugCk6R 3LoYq3wq5UvECi1sOdO4lW0yG6yMRRZYmdBGsLE6keiY 8FqwsFo9br0JuSifsb1n kvNi3Tj8BHRjT9ievcl3N8WbP4vsmb8qOmNE1Rd46bXiyaJ7TnTj6wv mr6TO0m2jJumiibVOHCyaJIjz5rGUMlRpOXIc6bjRX2mp61s9LAVR9HUB2uKTV 2bjM9ZMP2uOmm opeoGDCAO96Cw 1Fy01ra46aVtomCQ67anAxV5yp2hoyVWH3skmyZuKoaXHuJBXFiTyOPmcqxBXz rEyUzUtf4CpBRYZcRaqIqlu1RbVBdZWqXFWsElXZqixVitqg1qsT1QnqOLVarVQLak4N6pTJ2BmX g35/LkWpZz jJ9BSYLieoyXHvl4HHFFzGDvRZL6Ja9q0gkQNTdDUuiK61NE0qYptjC5zNEXVLZ9r GyPk7nZsRbnbJwm0tqGD0q5bjfQHlE4AIaW33mWk9Y233tXeTpqiUx5o6hajH2/CfcRt2BZVWFek w6Jdtem1huVJVSsbLlN0yaVj7pPumP9Jz47e37SpLfr17PZoGUVi2e1N0VX0p5dOcDu5QGPDCS5I q/a2E QGbmfjRtpPbmhonyUDCxdEMqihFSWbAAslAwuZYGRrGRm6qaWxYcxikYheIWsoEbrPK4yo T KVi0sgrxZaIRmXA7mMVy6XQ8nQHyRmuvnMEoDoGDNdAjBmWZRozGZDkiIbJRlbakOCMdtSNnx0 bthqk8RpBxtbx0ba2TqEzNHYJRr0ApmGUyON4//mx7viv0BMJtxv9XjoD2B1WRu9CF3R/bv606N7 u0VxrOct Zex8rq6Pf20dnujb1m9DdEea4M45vZcZthDh93WhjHwNLa2jXlc3oZxt8vdaHU3tE88 sae acFad8yuVb/nMsz2UGb1dK0nmi4z3ESHn6BrNdG1muhaT7ieYGs1bVxBmlraxtSwor1 u1RP cPFxGA9dRnP7ikX64HIWHFeZ0z9vfEEAPLbiHe3RBOuKqBaBDhXXFdfRIYxOOpRIf JMHkr//FVm 4wvkiDykx 4k6wpwQHqjr2H2XzgcjlAYGnJgGRlKZ30RDFrzpqboSvqDTDXRmsaoq6uhnf22wJD8 qW9z6U/WvF7DBWr21ByoOVhzvEYxNNSO3YaTltctXKclYNljOWA5aDluUdKB7W3PuWoOWj608EPo TSSCn8YGtuYQ1viPNiNDYfoBXCCMIC3nGHLUt9VZwMPTLy/zWCYjWBHKETYhKODfsPwJwrsIf0YQ 4GYsv4jwOMIE7eGL eLGdF8DXbHdQZNOOl824awsWzaJtbtXqjdtk rG9VJdU1eWjvV4bXlcnQ5v wAm8gOX3EX6F8HuEvyMo DK jDEfkry2PQxhB0Hx6TfSI7QIOyKE/iwDoeqOhB0OCLOfacCOCCWd  7EO6QMkPASoCjQIVkjEesN02hCtZz7/G6AbMg8KZW5kc3RyZWFtCmVuZG9iagoKNiAwIG9iagox MTEzNwplbmRvYmoKCjcgMCBvYmoKPDwvVHlwZS9Gb250RGVzY3JpcHRvci9Gb250TmFtZS9CQUFB QUErVGltZXNOZXdSb21hblBTTVQKL0ZsYWdzIDQKL0ZvbnRCQm94Wy01NjggLTMwNiAyMDI3IDEw MDZdL0l0YWxpY0FuZ2xlIDAKL0FzY2VudCA4OTEKL0Rlc2NlbnQgLTIxNgovQ2FwSGVpZ2h0IDEw MDYKL1N0ZW1WIDgwCi9Gb250RmlsZTIgNSAwIFI PgplbmRvYmoKCjggMCBvYmoKPDwvTGVuZ3Ro IDI2MC9GaWx0ZXIvRmxhdGVEZWNvZGU PgpzdHJlYW0KeJxdkE1PxCAQhu/8Co7rYQPttromDYmp NunBj1j3B1CYVhILhNJD/718rJp4gDzDzMvMO6TtH3utPHlzRgzg8aS0dLCazQnAI8xKo6LEUgl/ jdItFm4RCdphXz0svZ5M0yDyHnKrdzs PEgzwg0ir06CU3rGh0s7hHjYrP2CBbTHFDGGJUzhn2du X/gCJKmOvQxp5fdjkPwVfOwWcJniIo8ijITVcgGO6xlQQynDTdcxBFr y52zYpzEJ3ehsgiVlNYV C1wmrurIp/x ilwlLmnkOtd0kW8zP0W y9xGPmftfep/7RQniav6cYjF5lxwl/aZbEVDSsPvyq2x UZXON0BjfcMKZW5kc3RyZWFtCmVuZG9iagoKOSAwIG9iago8PC9UeXBlL0ZvbnQvU3VidHlwZS9U cnVlVHlwZS9CYXNlRm9udC9CQUFBQUErVGltZXNOZXdSb21hblBTTVQKL0ZpcnN0Q2hhciAwCi9M YXN0Q2hhciA4Ci9XaWR0aHNbNzc3IDYxMCA2MTAgNTU2IDI1MCA3MjIgNzIyIDYxMCA3MjIgXQov Rm9udERlc2NyaXB0b3IgNyAwIFIKL1RvVW5pY29kZSA4IDAgUgo PgplbmRvYmoKCjEwIDAgb2Jq Cjw8L0YxIDkgMCBSCj4 CmVuZG9iagoKMTEgMCBvYmoKPDwvRm9udCAxMCAwIFIKL1Byb2NTZXRb L1BERi9UZXh0XQo PgplbmRvYmoKCjEgMCBvYmoKPDwvVHlwZS9QYWdlL1BhcmVudCA0IDAgUi9S ZXNvdXJjZXMgMTEgMCBSL01lZGlhQm94WzAgMCA2MTIgNzkyXS9Hcm91cDw8L1MvVHJhbnNwYXJl bmN5L0NTL0RldmljZVJHQi9JIHRydWU Pi9Db250ZW50cyAyIDAgUj4 CmVuZG9iagoKNCAwIG9i ago8PC9UeXBlL1BhZ2VzCi9SZXNvdXJjZXMgMTEgMCBSCi9NZWRpYUJveFsgMCAwIDYxMiA3OTIg XQovS2lkc1sgMSAwIFIgXQovQ291bnQgMT4 CmVuZG9iagoKMTIgMCBvYmoKPDwvVHlwZS9DYXRh bG9nL1BhZ2VzIDQgMCBSCi9PcGVuQWN0aW9uWzEgMCBSIC9YWVogbnVsbCBudWxsIDBdCi9MYW5n KGVuLVBIKQo PgplbmRvYmoKCjEzIDAgb2JqCjw8L0F1dGhvcjxGRUZGMDA2RDAwNjQwMDY5MDA2 MTAwN0EwMDZFMDA2NzAwMjA Ci9DcmVhdG9yPEZFRkYwMDU3MDA3MjAwNjkwMDc0MDA2NTAwNzI  Ci9Qcm9kdWNlcjxGRUZGMDA0RjAwNzAwMDY1MDA2RTAwNEYwMDY2MDA2NjAwNjkwMDYzMDA2NTAw MkUwMDZGMDA3MjAwNjcwMDIwMDAzMzAwMkUwMDMyPgovQ3JlYXRpb25EYXRlKEQ6MjAxMzAzMjEx OTAyNTIrMDgnMDAnKT4 CmVuZG9iagoKeHJlZgowIDE0CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAw MDAxMjI3NyAwMDAwMCBuIAowMDAwMDAwMDE5IDAwMDAwIG4gCjAwMDAwMDAyMDYgMDAwMDAgbiAK MDAwMDAxMjQyMCAwMDAwMCBuIAowMDAwMDAwMjI2IDAwMDAwIG4gCjAwMDAwMTE0NDggMDAwMDAg biAKMDAwMDAxMTQ3MCAwMDAwMCBuIAowMDAwMDExNjY4IDAwMDAwIG4gCjAwMDAwMTE5OTcgMDAw MDAgbiAKMDAwMDAxMjE5MCAwMDAwMCBuIAowMDAwMDEyMjIyIDAwMDAwIG4gCjAwMDAwMTI1MTkg MDAwMDAgbiAKMDAwMDAxMjYxNiAwMDAwMCBuIAp0cmFpbGVyCjw8L1NpemUgMTQvUm9vdCAxMiAw IFIKL0luZm8gMTMgMCBSCi9JRCBbIDxCQUE3NjY1RDUzRDU4RTRGODhEQTVDOTNCRDBEMDcyMz4K PEJBQTc2NjVENTNENThFNEY4OERBNUM5M0JEMEQwNzIzPiBdCi9Eb2NDaGVja3N1bSAvRjhCODFD NkFBN0U3RDc3MkRBNEJFNUE2NDYzQkUyNTYKPj4Kc3RhcnR4cmVmCjEyODQ5CiUlRU9GCg=="/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="getAgreementDocument" path="/crowd/v0/cfp/getAgreementDocument"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>f9a2a8a9-fdaf-4d79-b511-d01d40078885</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>f9a2a8a9-fdaf-4d79-b511-d01d40078885</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>document_name</con:name><con:value>pdftesting2</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>pdftesting2</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>document_version</con:name><con:value>1</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>id</con:name><con:value>107852452868</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>107852452868</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>document_format</con:name><con:value>PDF</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PDF</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="2.8" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/getAgreementDocument">get:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value="521210911896"/>
  <con:entry key="document_name" value="pdftesting23"/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="getEscrowDetails" path="/crowd/v0/cfp/getEscrowDetails"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>refId12</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="2.9" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/getEscrowDetails">get:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>/crowd/v0/cfp/getEscrowDetails\
-d api_key=58c0c842-fb4d-4333-b393-76ef33944b59 \
-d escrow_id=71132663554 \
-d secret=242d5c6c3b \
-d reference_id=</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="d5186572-6508-4774-a202-3af020414862"/>
  <con:entry key="reference_id" value=""/>
  <con:entry key="escrow_id" value="978204212591"/>
  <con:entry key="secret" value="26d6e59b4f"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>/crowd/v0/cfp/getEscrowDetails\
-d api_key=58c0c842-fb4d-4333-b393-76ef33944b59 \
-d escrow_id=71132663554 \
-d secret=242d5c6c3b \
-d reference_id=</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="d5186572-6508-4774-a202-3af020414862"/>
  <con:entry key="reference_id" value=""/>
  <con:entry key="escrow_id" value="978204212591"/>
  <con:entry key="secret" value="26d6e59b4f"/>
</con:parameters></con:request></con:method><con:method name="Method 2" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="getEscrowActivity" path="/crowd/v0/cfp/getEscrowActivity"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value>708991123248 </con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>708991123248 </con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="??" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/form-data</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Copy of Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="escrow_id" value="357101817662"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="getEscrowList" path="/crowd/v0/cfp/getEscrowList"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2c525d96-b08a-4c07-90c3-a3a7fd2bdc7c</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2c525d96-b08a-4c07-90c3-a3a7fd2bdc7c</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="2.9" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/getEscrowList">get:Response</con:element></con:representation><con:request name="2.9" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>/crowd/v0/cfp/getEscrowList
-d api_key= 58c0c842-fb4d-4333-b393-76ef33944b59/
-d secret=242d5c6c3b</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="getIssuerList" path="/crowd/v0/cfp/getIssuerList"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="2.5" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/getIssuerList">get:Response</con:element></con:representation><con:request name="2.5" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="Internal getInvestorDetails" path="/crowd/v0/escrow/getInvestorDetails"><con:settings/><con:parameters><con:parameter><con:name>preSharedKey</con:name><con:value>123qwe</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>123qwe</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>123qwe</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>123qwe</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfpId</con:name><con:value>139603739157</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>139603739157</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Id</con:name><con:value>274602070595</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>274602070595</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>refId</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="2.9" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/escrow/getInvestorDetails">get:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="cfp2.4_internal" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="cfpId" value=""/>
  <con:entry key="Id" value="405012216349"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="getIssuerDetails" path="/crowd/v0/cfp/getIssuerDetails"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_id</con:name><con:value>143361877108</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>143361877108</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="2.5" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/getIssuerDetails">get:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="2.5" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="issuer_id" value="996317375237"/>
  <con:entry key="api_key" value="9570e9e6-70bd-4c27-85d5-6ec31bb0c31c"/>
  <con:entry key="secret" value="bd56b0fbdd"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="issuer_id" value="996317375237"/>
  <con:entry key="api_key" value="9570e9e6-70bd-4c27-85d5-6ec31bb0c31c"/>
  <con:entry key="secret" value="bd56b0fbdd"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="Internal getEscrowList" path="/crowd/v0/escrow/getEscrowList"><con:settings/><con:parameters><con:parameter><con:name>preSharedKey</con:name><con:value>123qwe</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>123qwe</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfpId</con:name><con:value>139603739157</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>139603739157</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="2.3" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/escrow/getEscrowList">get:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="fundEscrow" path="/crowd/v0/cfp/fundEscrow"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>submit_timestamp</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_reference_id</con:name><con:value>testfundschedule</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>testfundschedule</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value>950555</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>950555</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>amount</con:name><con:value>10000</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>10000</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>fund_on_availability</con:name><con:value>Y</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Y</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>text</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>client_ip_address</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>investor_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>linked_bank_account_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>linked_bank_account_reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_number</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_type</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_holder</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_routing</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.7" method="POST"><con:settings/><con:parameters><con:parameter><con:name>investor_id</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>escrow_id</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:fun="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/fundEscrow">fun:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="qa" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="amount" value="105"/>
  <con:entry key="api_key" value="7a2773b8-3cc8-40c3-b80f-8f19e9ea109f"/>
  <con:entry key="reference_id" value="950578"/>
  <con:entry key="investor_id" value="83818061493"/>
  <con:entry key="escrow_id" value="680451944040"/>
  <con:entry key="escrow_reference_id" value=""/>
  <con:entry key="fund_on_availability" value="N"/>
  <con:entry key="secret" value="06d52075d8"/>
</con:parameters></con:request><con:request name="sandbox2.7" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="amount" value="100"/>
  <con:entry key="api_key" value="03a23261-7f99-4f89-b295-32e26f45bb02"/>
  <con:entry key="reference_id" value="950578"/>
  <con:entry key="investor_id" value="456464498750"/>
  <con:entry key="escrow_id" value="626341294039"/>
  <con:entry key="secret" value="4520f12e16"/>
  <con:entry key="escrow_reference_id" value=""/>
  <con:entry key="fund_on_availability" value="N"/>
</con:parameters></con:request><con:request name="Copy of qa" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="amount" value="0"/>
  <con:entry key="text" value="submit"/>
  <con:entry key="client_ip_address" value="10.0.0.0"/>
  <con:entry key="api_key" value="8e18b40a-2d3e-42fc-988f-5322539927a0"/>
  <con:entry key="reference_id" value="950578"/>
  <con:entry key="investor_id" value="102394005406"/>
  <con:entry key="escrow_id" value="434308058563"/>
  <con:entry key="escrow_reference_id" value=""/>
  <con:entry key="fund_on_availability" value="N"/>
  <con:entry key="secret" value="tLHkr9Ov0B"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="amount" value="105"/>
  <con:entry key="api_key" value="7a2773b8-3cc8-40c3-b80f-8f19e9ea109f"/>
  <con:entry key="escrow_id" value="680451944040"/>
  <con:entry key="investor_id" value="83818061493"/>
  <con:entry key="reference_id" value="950578"/>
  <con:entry key="secret" value="06d52075d8"/>
  <con:entry key="fund_on_availability" value="N"/>
  <con:entry key="escrow_reference_id" value=""/>
</con:parameters></con:request></con:method></con:resource><con:resource name="closeEscrow" path="/crowd/v0/cfp/closeEscrow"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reason</con:name><con:value>&lt;close reason></con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>&lt;close reason></con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reason_other</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.9" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:clos="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/closeEscrow">clos:Response</con:element></con:representation><con:request name="2.9" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="reason_other" value="reason other"/>
  <con:entry key="escrow_id" value="721102365418"/>
  <con:entry key="reference_id" value="MayTwoZeroOne"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="reason_other" value="reason other"/>
  <con:entry key="escrow_id" value="721102365418"/>
  <con:entry key="reference_id" value="MayTwoZeroOne"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="completeCancelEscrow" path="/crowd/v0/cfp/completeCancelEscrow"><con:settings/><con:parameters><con:parameter><con:name>Id</con:name><con:value>507278733768</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>507278733768</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reason</con:name><con:value>FAILURE</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>FAILURE</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfpId</con:name><con:value>959936974258</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>959936974258</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="??" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Copy of Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="cfpId" value="139603739157"/>
  <con:entry key="Id" value="42860873743"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="createEscrowAccount" path="/crowd/v0/cfp/createEscrowAccount"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfp_fee</con:name><con:value>1</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>goal_percentage</con:name><con:value>0</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>0</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_id</con:name><con:value>557962357664</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>557962357664</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>securities_offered_other</con:name><con:value>yes</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>yes</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>maximum_funding_amount</con:name><con:value>1000</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1000</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>funding_goal</con:name><con:value>20000</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>20000</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>close_date</con:name><con:value>2013-05-04</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2013-05-04</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>platform_signatory_name</con:name><con:value>Crowdplatform</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Crowdplatform</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>created_by</con:name><con:value>Jazz</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Jazz</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>contract_doc_reference</con:name><con:value>contractDocfRefIdhere</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>contractDocfRefIdhere</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_signatory_title</con:name><con:value>Agreementdocument</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Agreementdocument</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>over_funding_amount</con:name><con:value>50000</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>50000</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_signatory_name</con:name><con:value>Jazzkaur</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Jazzkaur</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>name</con:name><con:value>John</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>John</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value>refMaytest12345</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>refMaytest12345</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_fee</con:name><con:value>10</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>over_funding_percentage</con:name><con:value>20</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>20</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>securities_offered</con:name><con:value>DEBT</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>DEBT</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>contract_term_reference_id</con:name><con:value>contracttermrefid</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>contracttermrefid</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>start_date</con:name><con:value>2013-05-02</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2013-05-02</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>platform_signatory_email</con:name><con:value>raghav+123@bancbox.com</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>raghav+123@bancbox.com</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>project_name</con:name><con:value>testmaytwo</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>testmaytwo</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_signatory_email</con:name><con:value>raghav+123@bancbox.com</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>raghav+123@bancbox.com</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>platform_signatory_title</con:name><con:value>crowd</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>crowd</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>minimum_funding_amount</con:name><con:value>500</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>500</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>debt_start_date</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>debt_coupon_rate</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>debt_face_value</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>debt_frequency</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>debt_term</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.4" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/createEscrowAccount">cre:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="created_by" value="Jazzzz"/>
  <con:entry key="platform_signatory_email" value="Platform_signatory1@yopmail.com"/>
  <con:entry key="maximum_funding_amount" value="5001"/>
  <con:entry key="project_name" value="MayFifteen"/>
  <con:entry key="securities_offered" value=""/>
  <con:entry key="over_funding_amount" value="500001"/>
  <con:entry key="close_date" value="2013-06-14"/>
  <con:entry key="funding_goal" value="150001"/>
  <con:entry key="securities_offered_other" value=""/>
  <con:entry key="issuer_signatory_name" value="Jazzzzkaur"/>
  <con:entry key="issuer_signatory_email" value="issuer_signatory1@yopmail.com"/>
  <con:entry key="issuer_id" value="333053058696"/>
  <con:entry key="name" value="EscrowOneFivetwo"/>
  <con:entry key="platform_signatory_title" value="crowdTitle"/>
  <con:entry key="reference_id" value="Mayfifteentwo"/>
  <con:entry key="start_date" value="2013-05-15"/>
  <con:entry key="minimum_funding_amount" value="1001"/>
</con:parameters></con:request><con:request name="cfp2.4_DBUpdate" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="created_by" value="Jazzzz"/>
  <con:entry key="maximum_funding_amount" value="500"/>
  <con:entry key="project_name" value="novFirst_423"/>
  <con:entry key="over_funding_amount" value="600"/>
  <con:entry key="close_date" value="2013-11-14"/>
  <con:entry key="funding_goal" value="350"/>
  <con:entry key="securities_offered_other" value=""/>
  <con:entry key="issuer_signatory_name" value="Jazzzzkaur"/>
  <con:entry key="issuer_id" value="771731573891"/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="name" value="novFirst_423"/>
  <con:entry key="platform_signatory_title" value="crowdTitle"/>
  <con:entry key="reference_id" value="novFirst_423"/>
  <con:entry key="secret" value="242d5c6c3b"/>
  <con:entry key="start_date" value="2013-11-01"/>
  <con:entry key="minimum_funding_amount" value="200"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="createEscrowAccount" path="/crowd/v0/cfp/createEscrowAccount"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfp_fee</con:name><con:value>1</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>goal_percentage</con:name><con:value>0</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>0</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_id</con:name><con:value>333053058696</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>333053058696</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>securities_offered_other</con:name><con:value>DEBT</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>DEBT</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>maximum_funding_amount</con:name><con:value>1000</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1000</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>funding_goal</con:name><con:value>20000</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>20000</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>close_date</con:name><con:value>2013-05-04</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2013-05-04</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>platform_signatory_name</con:name><con:value>Crowdplatform</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Crowdplatform</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>created_by</con:name><con:value>Jazz</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Jazz</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>contract_doc_reference</con:name><con:value>contractDocfRefIdhere</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>contractDocfRefIdhere</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_signatory_title</con:name><con:value>Agreementdocument</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Agreementdocument</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>over_funding_amount</con:name><con:value>50000</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>50000</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_signatory_name</con:name><con:value>Jazzkaur</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Jazzkaur</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>name</con:name><con:value>John</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>John</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value>Maytest12345</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Maytest12345</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_fee</con:name><con:value>10</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>over_funding_percentage</con:name><con:value>20</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>20</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>securities_offered</con:name><con:value>DEBT</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>DEBT</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>contract_term_reference_id</con:name><con:value>contracttermrefid</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>contracttermrefid</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>start_date</con:name><con:value>2013-05-14</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2013-05-14</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>platform_signatory_email</con:name><con:value>raghav+123@bancbox.com</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>raghav+123@bancbox.com</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>project_name</con:name><con:value>testmaytwo</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>testmaytwo</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_signatory_email</con:name><con:value>raghav+123@bancbox.com</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>raghav+123@bancbox.com</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>platform_signatory_title</con:name><con:value>crowd</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>crowd</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>minimum_funding_amount</con:name><con:value>500</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>500</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.3 Equity" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/createEscrowAccount">cre:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="maximum_funding_amount" value="100"/>
  <con:entry key="project_name" value="TestEquityOneSix11"/>
  <con:entry key="issuer_id" value="252320334880"/>
  <con:entry key="securities_offered" value="EQUITY"/>
  <con:entry key="name" value="TestEquityTwoSevenONE11"/>
  <con:entry key="over_funding_amount" value="400"/>
  <con:entry key="reference_id" value="TestEquityTwoSevenONE11"/>
  <con:entry key="close_date" value="2013-06-30"/>
  <con:entry key="funding_goal" value="200"/>
  <con:entry key="securities_offered_other" value="EQUITY"/>
  <con:entry key="start_date" value="2013-06-19"/>
  <con:entry key="minimum_funding_amount" value="50"/>
</con:parameters></con:request><con:request name="bbcfp-1351" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="escrow_fee" value="10.5"/>
  <con:entry key="maximum_funding_amount" value="500.6"/>
  <con:entry key="project_name" value="June213456"/>
  <con:entry key="issuer_id" value="252320334880"/>
  <con:entry key="over_funding_percentage" value="20.5"/>
  <con:entry key="securities_offered" value="EQUITY"/>
  <con:entry key="name" value="June213456"/>
  <con:entry key="over_funding_amount" value="500.5"/>
  <con:entry key="reference_id" value="June213456"/>
  <con:entry key="close_date" value="2013-06-30"/>
  <con:entry key="funding_goal" value="200.6"/>
  <con:entry key="securities_offered_other" value="EQUITY"/>
  <con:entry key="start_date" value="2013-06-24"/>
  <con:entry key="minimum_funding_amount" value="50.5"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="getEscrowDetail" path="/crowd/v0/cfp/getEscrowDetails"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="2.9" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/getEscrowDetails">get:Response</con:element></con:representation><con:request name="CFP2.4_DBupdate" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="escrow_id" value="348406029037"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request><con:request name="CFP2.9" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="escrow_id" value="934259090074"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="freezeInvestmentLedge" path="/crowd/v0/cfp/freezeInvestmentLedger"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value>721102365418</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>721102365418</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.2" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/form-data</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>text/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:fre="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/freezeInvestmentLedger">fre:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="escrow_id" value="513522448211" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="escrow_id" value="513522448211" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="updateInvestmentLedger" path="/crowd/v0/cfp/updateInvestmentLedger"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>investor_id</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>percent_invested</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>residence_code</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>class_code</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>tax_certification_code</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:upd="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/updateInvestmentLedger">upd:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="2a77a1e6-39a8-4b29-bca6-9ba7ae40f434"/>
  <con:entry key="escrow_id" value="879893918050"/>
  <con:entry key="residence_code" value="NY"/>
  <con:entry key="investor_id" value="97383052934"/>
  <con:entry key="secret" value="secret"/>
  <con:entry key="class_code" value="TR"/>
  <con:entry key="percent_invested" value="70"/>
  <con:entry key="tax_certification_code" value="N"/>
</con:parameters></con:request><con:request name="another cfp" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="2a77a1e6-39a8-4b29-bca6-9ba7ae40f434"/>
  <con:entry key="investor_id" value="738451990945"/>
  <con:entry key="residence_code" value="NY"/>
  <con:entry key="escrow_id" value="921196343193"/>
  <con:entry key="class_code" value="TR"/>
  <con:entry key="secret" value="secret"/>
  <con:entry key="percent_invested" value="70"/>
  <con:entry key="tax_certification_code" value="N"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="2a77a1e6-39a8-4b29-bca6-9ba7ae40f434"/>
  <con:entry key="escrow_id" value="879893918050"/>
  <con:entry key="residence_code" value="NY"/>
  <con:entry key="investor_id" value="97383052934"/>
  <con:entry key="secret" value="secret"/>
  <con:entry key="class_code" value="TR"/>
  <con:entry key="percent_invested" value="70"/>
  <con:entry key="tax_certification_code" value="N"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="createProceedsSchedules" path="/crowd/v0/cfp/createProceedsSchedules"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_id</con:name><con:value>252320334880</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>252320334880</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value>513522448211</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>513522448211</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>schedule_count</con:name><con:value>2</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>investor_id[0]</con:name><con:value>274602070595</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>274602070595</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>schedule_date[0]</con:name><con:value>2013-05-25</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2013-05-25</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>amount[0]</con:name><con:value>1</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfp_reference_id[0]</con:name><con:value>Vincent</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Vincent</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>memo[0]</con:name><con:value>first</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>first</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>investor_id[1]</con:name><con:value>97383052934</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>97383052934</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>schedule_date[1]</con:name><con:value>2013-05-25</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2013-05-25</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>amount[1]</con:name><con:value>2</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfp_reference_id[1]</con:name><con:value>Vincent</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Vincent</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>memo[1]</con:name><con:value>second</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>second</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.2" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/createProceedsSchedules">cre:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>sprint2.4@yopmail.com
cfpid=	585811360795
issuer id=996317375237</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="issuer_id" value="996317375237"/>
  <con:entry key="api_key" value="9570e9e6-70bd-4c27-85d5-6ec31bb0c31c"/>
  <con:entry key="investor_id[0]" value="392145737253"/>
  <con:entry key="escrow_id" value="69417686885"/>
  <con:entry key="secret" value="bd56b0fbdd"/>
  <con:entry key="investor_id[1]" value="710231280004"/>
  <con:entry key="schedule_date[1]" value="2013-08-25"/>
  <con:entry key="cfp_reference_id[0]" value="Vincent2"/>
  <con:entry key="cfp_reference_id[1]" value="Vincent2"/>
  <con:entry key="schedule_date[0]" value="2013-08-25"/>
</con:parameters></con:request><con:request name="prod_2.7" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="issuer_id" value="732726948640"/>
  <con:entry key="api_key" value="e027ab3a-ff20-4256-b06d-76095abe9268"/>
  <con:entry key="investor_id[0]" value="263175922240"/>
  <con:entry key="escrow_id" value="382013253941"/>
  <con:entry key="schedule_date[1]" value="2013-08-28"/>
  <con:entry key="investor_id[1]" value="919921222728"/>
  <con:entry key="cfp_reference_id[0]" value="985878"/>
  <con:entry key="cfp_reference_id[1]" value="466581"/>
  <con:entry key="schedule_date[0]" value="2013-08-28"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>sprint2.4@yopmail.com
cfpid=	585811360795
issuer id=996317375237</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="issuer_id" value="996317375237"/>
  <con:entry key="api_key" value="9570e9e6-70bd-4c27-85d5-6ec31bb0c31c"/>
  <con:entry key="investor_id[0]" value="392145737253"/>
  <con:entry key="escrow_id" value="69417686885"/>
  <con:entry key="secret" value="bd56b0fbdd"/>
  <con:entry key="investor_id[1]" value="710231280004"/>
  <con:entry key="schedule_date[1]" value="2013-08-25"/>
  <con:entry key="cfp_reference_id[0]" value="Vincent2"/>
  <con:entry key="cfp_reference_id[1]" value="Vincent2"/>
  <con:entry key="schedule_date[0]" value="2013-08-25"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="viewProceedsSchedule" path="/crowd/v0/cfp/getProceedsSchedules"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_id</con:name><con:value>252320334880</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>252320334880</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value>513522448211</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>513522448211</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>proceeds_batch_id</con:name><con:value>377b090d-75f7-47cf-be59-e57b2df977ae</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>377b090d-75f7-47cf-be59-e57b2df977ae</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>investor_id</con:name><con:value>274602070595</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>274602070595</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>schedule_id</con:name><con:value>124877</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>124877</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>schedule_start</con:name><con:value>2013-05-25</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2013-05-25</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>schedule_end</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>schedule_status</con:name><con:value>SCHEDULED</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SCHEDULED</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>order</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ascending</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>pageNo</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>resultsPerPage</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.2" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:view="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/viewProceedsSchedules">view:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="schedule_id" value=""/>
  <con:entry key="proceeds_batch_id" value=""/>
  <con:entry key="issuer_id" value=""/>
  <con:entry key="schedule_start" value=""/>
  <con:entry key="investor_id" value=""/>
  <con:entry key="escrow_id" value="879893918050"/>
  <con:entry key="schedule_status" value=""/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="schedule_id" value=""/>
  <con:entry key="proceeds_batch_id" value=""/>
  <con:entry key="issuer_id" value=""/>
  <con:entry key="schedule_start" value=""/>
  <con:entry key="investor_id" value=""/>
  <con:entry key="escrow_id" value="879893918050"/>
  <con:entry key="schedule_status" value=""/>
</con:parameters></con:request></con:method></con:resource><con:resource name="getInvestmentLedger" path="/crowd/v0/cfp/getInvestmentLedger"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value>921196343193</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>921196343193</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="2.2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/getInvestmentLedger">get:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="createEscrowAccount" path="/crowd/v0/cfp/createEscrowAccount"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfp_fee</con:name><con:value>1</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>goal_percentage</con:name><con:value>0</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>0</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_id</con:name><con:value>557962357664</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>557962357664</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>securities_offered_other</con:name><con:value>yes</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>yes</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>maximum_funding_amount</con:name><con:value>1000</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1000</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>funding_goal</con:name><con:value>20000</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>20000</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>close_date</con:name><con:value>2013-05-04</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2013-05-04</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>platform_signatory_name</con:name><con:value>Crowdplatform</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Crowdplatform</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>created_by</con:name><con:value>Jazz</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Jazz</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>contract_doc_reference</con:name><con:value>contractDocfRefIdhere</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>contractDocfRefIdhere</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_signatory_title</con:name><con:value>Agreementdocument</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Agreementdocument</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>over_funding_amount</con:name><con:value>50000</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>50000</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_signatory_name</con:name><con:value>Jazzkaur</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Jazzkaur</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>name</con:name><con:value>John</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>John</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value>refMaytest12345</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>refMaytest12345</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_fee</con:name><con:value>10</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>over_funding_percentage</con:name><con:value>20</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>20</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>securities_offered</con:name><con:value>OTHER</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>OTHER</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>contract_term_reference_id</con:name><con:value>contracttermrefid</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>contracttermrefid</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>start_date</con:name><con:value>2013-05-02</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2013-05-02</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>platform_signatory_email</con:name><con:value>raghav+123@bancbox.com</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>raghav+123@bancbox.com</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>project_name</con:name><con:value>testmaytwo</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>testmaytwo</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_signatory_email</con:name><con:value>raghav+123@bancbox.com</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>raghav+123@bancbox.com</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>platform_signatory_title</con:name><con:value>crowd</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>crowd</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>minimum_funding_amount</con:name><con:value>500</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>500</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>debt_start_date</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>debt_coupon_rate</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>debt_face_value</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>debt_frequency</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>debt_term</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>deal</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.4 deal" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/createEscrowAccount">cre:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="maximum_funding_amount" value="100"/>
  <con:entry key="project_name" value="MayThreeZeroTwo"/>
  <con:entry key="issuer_id" value="19009023020"/>
  <con:entry key="deal" value="0"/>
  <con:entry key="api_key" value="03a23261-7f99-4f89-b295-32e26f45bb02"/>
  <con:entry key="name" value="MayThreeZeroTwo"/>
  <con:entry key="over_funding_amount" value="100"/>
  <con:entry key="reference_id" value="nnbn"/>
  <con:entry key="secret" value="4520f12e16"/>
  <con:entry key="close_date" value="2013-08-20"/>
  <con:entry key="funding_goal" value="100"/>
  <con:entry key="start_date" value="2013-08-09"/>
  <con:entry key="minimum_funding_amount" value="50"/>
</con:parameters></con:request><con:request name="cfp2.3" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="maximum_funding_amount" value="100"/>
  <con:entry key="project_name" value="June14"/>
  <con:entry key="issuer_id" value="252320334880"/>
  <con:entry key="deal" value="0"/>
  <con:entry key="name" value="June14"/>
  <con:entry key="over_funding_amount" value="200"/>
  <con:entry key="reference_id" value="June14"/>
  <con:entry key="close_date" value="2013-06-13"/>
  <con:entry key="funding_goal" value="100"/>
  <con:entry key="start_date" value="2013-06-13"/>
  <con:entry key="minimum_funding_amount" value="50"/>
</con:parameters></con:request><con:request name="cfp2.4" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="maximum_funding_amount" value="100"/>
  <con:entry key="project_name" value="June27_dup"/>
  <con:entry key="issuer_id" value="991763820230"/>
  <con:entry key="deal" value="0"/>
  <con:entry key="name" value="June27_dup"/>
  <con:entry key="over_funding_amount" value="200"/>
  <con:entry key="reference_id" value="June27_dup"/>
  <con:entry key="close_date" value="2013-06-30"/>
  <con:entry key="funding_goal" value="100"/>
  <con:entry key="start_date" value="2013-06-27"/>
  <con:entry key="minimum_funding_amount" value="50"/>
</con:parameters></con:request></con:method><con:method name="Copy of deal" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/createEscrowAccount">cre:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>20352043352</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="maximum_funding_amount" value="100"/>
  <con:entry key="project_name" value="MayThreeZeroTwo"/>
  <con:entry key="issuer_id" value="19009023020"/>
  <con:entry key="deal" value="0"/>
  <con:entry key="api_key" value="03a23261-7f99-4f89-b295-32e26f45bb02"/>
  <con:entry key="name" value="MayThreeZeroTwo"/>
  <con:entry key="over_funding_amount" value="200"/>
  <con:entry key="reference_id" value="treujhkksdk"/>
  <con:entry key="secret" value="4520f12e16"/>
  <con:entry key="close_date" value="2013-08-20"/>
  <con:entry key="funding_goal" value="100"/>
  <con:entry key="start_date" value="2013-08-09"/>
  <con:entry key="minimum_funding_amount" value="50"/>
</con:parameters></con:request><con:request name="cfp2.3" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="maximum_funding_amount" value="100"/>
  <con:entry key="project_name" value="June14"/>
  <con:entry key="issuer_id" value="252320334880"/>
  <con:entry key="deal" value="0"/>
  <con:entry key="name" value="June14"/>
  <con:entry key="over_funding_amount" value="200"/>
  <con:entry key="reference_id" value="June14"/>
  <con:entry key="close_date" value="2013-06-13"/>
  <con:entry key="funding_goal" value="100"/>
  <con:entry key="start_date" value="2013-06-13"/>
  <con:entry key="minimum_funding_amount" value="50"/>
</con:parameters></con:request><con:request name="cfp2.4" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="maximum_funding_amount" value="100"/>
  <con:entry key="project_name" value="June27_dup"/>
  <con:entry key="issuer_id" value="991763820230"/>
  <con:entry key="deal" value="0"/>
  <con:entry key="name" value="June27_dup"/>
  <con:entry key="over_funding_amount" value="200"/>
  <con:entry key="reference_id" value="June27_dup"/>
  <con:entry key="close_date" value="2013-06-30"/>
  <con:entry key="funding_goal" value="100"/>
  <con:entry key="start_date" value="2013-06-27"/>
  <con:entry key="minimum_funding_amount" value="50"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="disburseEscrow" path="/crowd/v0/cfp/disburseEscrow"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value>104573744457</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>104573744457</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value>June11-3</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>June11-3</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reason</con:name><con:value>GOAL_MET</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>GOAL_MET</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reason_other</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>close_escrow_disbursal</con:name><con:value>NO</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NO</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_disbursal_amount</con:name><con:value>65</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>65</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_count</con:name><con:value>4</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>4</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_reference_id[0]</con:name><con:value>REF1635QQ</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>REF1635QQ</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_name[0]</con:name><con:value>ZeroJuneQ</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ZeroJuneQ</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_account_number[0]</con:name><con:value>100012</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>100012</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_address_line1_check[0]</con:name><con:value>adr1</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>adr1</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_address_line2_check[0]</con:name><con:value>adr2</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>adr2</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_address_city[0]</con:name><con:value>Kochi</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Kochi</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_address_state[0]</con:name><con:value>AL</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AL</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_address_zipcode[0]</con:name><con:value>12345</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>12345</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_chk_type[0]</con:name><con:value>STD</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>STD</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_disbursal_amount[0]</con:name><con:value>2.50</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2.50</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_reference_id[1]</con:name><con:value>REF91635QQ</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>REF91635QQ</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_name[1]</con:name><con:value>OneJuneQ</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>OneJuneQ</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_account_number[1]</con:name><con:value>100012</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>100012</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_payment_method[1]</con:name><con:value>ACH</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ACH</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_disbursal_amount[1]</con:name><con:value>3.50</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>3.50</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_routing_number_ach[1]</con:name><con:value>1000</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1000</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_account_type_ach[1]</con:name><con:value>SAVING</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SAVING</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_reference_id[2]</con:name><con:value>RE151635QQ</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RE151635QQ</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_name[2]</con:name><con:value>TwoJuneQ</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>TwoJuneQ</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_account_number[2]</con:name><con:value>100012</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>100012</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_payment_method[2]</con:name><con:value>ACH</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ACH</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_disbursal_amount[2]</con:name><con:value>4.03</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>4.03</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_routing_number_ach[2]</con:name><con:value>322271724</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>322271724</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_account_type_ach[2]</con:name><con:value>SAVING</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SAVING</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_reference_id[3]</con:name><con:value>RE1d1635QQ</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RE1d1635QQ</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_name[3]</con:name><con:value>ThreeJuneQ</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ThreeJuneQ</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_account_number[3]</con:name><con:value>1000499</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1000499</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_payment_method[3]</con:name><con:value>CHECK</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>CHECK</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_address_line1_check[3]</con:name><con:value>adr1</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>adr1</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_address_line2_check[3]</con:name><con:value>adr2</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>adr2</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_address_city[3]</con:name><con:value>San MAteo</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>San MAteo</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_address_state[3]</con:name><con:value>AL</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AL</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_address_zipcode[3]</con:name><con:value>12345</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>12345</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_chk_type[3]</con:name><con:value>STD</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>STD</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_disbursal_amount[3]</con:name><con:value>5.32</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>5.32</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>party_payment_method[0]</con:name><con:value>CHECK</con:value><con:style>QUERY</con:style><con:default>CHECK</con:default></con:parameter><con:parameter><con:name>Endpoint</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>party_routing_number_ach[0]</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>party_account_type_ach[0]</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>party_chk_type[1]</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>party_address_line1_check[1]</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>party_address_line2_check[1]</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>party_address_city[1]</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>party_address_state[1]</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>party_address_zipcode[1]</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>party_chk_type[2]</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>party_address_line1_check[2]</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>party_address_line2_check[2]</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>party_address_city[2]</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>party_address_state[2]</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>party_address_zipcode[2]</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>party_routing_number_ach[3]</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>party_account_type_ach[3]</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>linked_bank_account_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>linked_bank_account_reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_number</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_type</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_holder</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_routing</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:method name="2.3" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dis="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/disburseEscrow">dis:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" accept="" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="party_disbursal_amount[0]" value="5.80"/>
  <con:entry key="escrow_id" value="40034888149"/>
  <con:entry key="party_name[2]" value="TwoJuneQQ"/>
  <con:entry key="party_name[3]" value="ThreeJuneQQ"/>
  <con:entry key="party_name[1]" value="OneJuneQQ"/>
  <con:entry key="party_reference_id[2]" value="RE151635QQQ"/>
  <con:entry key="issuer_disbursal_amount" value="80"/>
  <con:entry key="party_reference_id[1]" value="REF91635QQQ"/>
  <con:entry key="party_reference_id[3]" value="RE1d1635QQQ"/>
  <con:entry key="reference_id" value="June-6-Equity"/>
  <con:entry key="close_escrow_disbursal" value="YES"/>
  <con:entry key="party_disbursal_amount[3]" value="5"/>
  <con:entry key="party_disbursal_amount[1]" value="5"/>
  <con:entry key="party_disbursal_amount[2]" value="5"/>
</con:parameters></con:request><con:request name="no" mediaType="application/x-www-form-urlencoded" accept="" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="party_disbursal_amount[0]" value="1"/>
  <con:entry key="escrow_id" value="40034888149"/>
  <con:entry key="party_name[2]" value="TwoJuneQQ"/>
  <con:entry key="party_name[3]" value="ThreeJuneQQ"/>
  <con:entry key="party_name[1]" value="OneJuneQQ"/>
  <con:entry key="party_routing_number_ach[1]" value="322271724"/>
  <con:entry key="party_reference_id[2]" value="RE151635QQQ"/>
  <con:entry key="issuer_disbursal_amount" value="24.70"/>
  <con:entry key="party_reference_id[1]" value="REF91635QQQ"/>
  <con:entry key="party_reference_id[3]" value="RE1d1635QQQ"/>
  <con:entry key="reference_id" value="June-6-Equity"/>
  <con:entry key="party_disbursal_amount[3]" value="1"/>
  <con:entry key="close_escrow_disbursal" value="YES"/>
  <con:entry key="party_disbursal_amount[1]" value="1"/>
  <con:entry key="party_disbursal_amount[2]" value="1"/>
</con:parameters></con:request><con:request name="Copy of no" mediaType="application/x-www-form-urlencoded" accept="" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>/v0/cfp/disburseEscrow -d api_key= -d secret= -d escrow_id=18701064896 -d reason=GOAL_MET -d close_escrow_disbursal=NO -d issuer_disbursal_amount=10.2 </con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="party_disbursal_amount[0]" value="1"/>
  <con:entry key="escrow_id" value="44121474316"/>
  <con:entry key="party_name[2]" value="TwoJuneQQ"/>
  <con:entry key="party_name[3]" value="ThreeJuneQQ"/>
  <con:entry key="party_name[1]" value="OneJuneQQ"/>
  <con:entry key="party_routing_number_ach[1]" value="322271724"/>
  <con:entry key="party_reference_id[2]" value="RE151635QQQ"/>
  <con:entry key="issuer_disbursal_amount" value=""/>
  <con:entry key="party_reference_id[1]" value="REF91635QQQ"/>
  <con:entry key="party_reference_id[3]" value="RE1d1635QQQ"/>
  <con:entry key="reference_id" value="June13"/>
  <con:entry key="party_disbursal_amount[3]" value="1"/>
  <con:entry key="party_disbursal_amount[1]" value="1"/>
  <con:entry key="party_disbursal_amount[2]" value="1"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" accept="" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="party_disbursal_amount[0]" value="5.80"/>
  <con:entry key="escrow_id" value="40034888149"/>
  <con:entry key="party_name[2]" value="TwoJuneQQ"/>
  <con:entry key="party_name[3]" value="ThreeJuneQQ"/>
  <con:entry key="party_name[1]" value="OneJuneQQ"/>
  <con:entry key="party_reference_id[2]" value="RE151635QQQ"/>
  <con:entry key="issuer_disbursal_amount" value="80"/>
  <con:entry key="party_reference_id[1]" value="REF91635QQQ"/>
  <con:entry key="party_reference_id[3]" value="RE1d1635QQQ"/>
  <con:entry key="reference_id" value="June-6-Equity"/>
  <con:entry key="close_escrow_disbursal" value="YES"/>
  <con:entry key="party_disbursal_amount[3]" value="5"/>
  <con:entry key="party_disbursal_amount[1]" value="5"/>
  <con:entry key="party_disbursal_amount[2]" value="5"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="changeInvestorContribution" path="/crowd/v0/cfp/changeInvestorContribution"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>investor_id</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>amount</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>investor_reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>issuer_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>issuer_reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>investment_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>Endpoint</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.3" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:chan="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/changeInvestorContribution">chan:Response</con:element></con:representation><con:request name="calculated_fee=0" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>{
   "request_id": 56827915019,
   "status": 1,
   "escrow_reference_id": "anshultest",
   "amount": 430,
   "escrow_id": 378558329890,
   "investor_id": 392145737253,
   "issuer_id": 22835101750,
   "transaction_id": 400748,
   "transaction_status": "COMPLETED",
   "trans_status": 1
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="e6842b30-4014-4201-adc7-e2325d65b055"/>
  <con:entry key="escrow_id" value="302739852199"/>
  <con:entry key="investor_id" value="922249175618"/>
  <con:entry key="secret" value="VUW5cQgvCV"/>
</con:parameters></con:request><con:request name="Copy of Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="amount" value="1.5"/>
  <con:entry key="api_key" value="2a77a1e6-39a8-4b29-bca6-9ba7ae40f434"/>
  <con:entry key="escrow_id" value="163102018184"/>
  <con:entry key="investor_id" value="83818061493"/>
</con:parameters></con:request><con:request name="Copy of Copy of Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="amount" value="54321.4"/>
  <con:entry key="api_key" value="2a77a1e6-39a8-4b29-bca6-9ba7ae40f434"/>
  <con:entry key="investor_id" value="83818061493"/>
  <con:entry key="escrow_id" value="765299786616"/>
</con:parameters></con:request><con:request name="Copy of Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="2a77a1e6-39a8-4b29-bca6-9ba7ae40f434"/>
  <con:entry key="escrow_id" value="44121474316"/>
  <con:entry key="investor_id" value="83818061493"/>
</con:parameters></con:request><con:request name="cfp2.3" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="9ee28b9b-5f40-445e-ab9f-4e999e72f344"/>
  <con:entry key="escrow_id" value="762048795916"/>
  <con:entry key="investor_id" value="493372125439"/>
  <con:entry key="secret" value="d011705255"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="9ee28b9b-5f40-445e-ab9f-4e999e72f344"/>
  <con:entry key="escrow_id" value="762048795916"/>
  <con:entry key="investor_id" value="493372125439"/>
  <con:entry key="secret" value="d011705255"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="transferFunds" path="/crowd/v0/cfp/transferFunds"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>123qwe</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>123qwe</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>source_id</con:name><con:value>23013288086</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>23013288086</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>destination_id</con:name><con:value>489167789646</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>489167789646</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>amount</con:name><con:value>10</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value>transfer10</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>transfer10</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>memo</con:name><con:value>memo</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>memo</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>text</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>client_ip_address</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>submit_timestamp</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>fund_on_availability</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>Endpoint</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.5" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tran="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/transferFunds">tran:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="calculated_fee" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request><![CDATA[392145737253
405012216349
805141795533


956585986893
<Response xmlns="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/transferFunds">
   <id>400517</id>
   <memo>memo field</memo>
   <reference_id>Jusdsds</reference_id>
   <request_id>566163182584</request_id>
   <trans_status>1</trans_status>
   <transaction_status>COMPLETED</transaction_status>
</Response>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="amount" value="200"/>
  <con:entry key="submit_timestamp" value="2013-06-05 01:01:01"/>
  <con:entry key="text" value="testrt"/>
  <con:entry key="client_ip_address" value="192.1.1.1"/>
  <con:entry key="memo" value="memo field"/>
  <con:entry key="api_key" value="e6842b30-4014-4201-adc7-e2325d65b055"/>
  <con:entry key="source_id" value="184354248440"/>
  <con:entry key="destination_id" value="31379303627"/>
  <con:entry key="reference_id" value="jhjjhhjsdsdsxdsa"/>
  <con:entry key="secret" value="VUW5cQgvCV"/>
</con:parameters></con:request><con:request name="another angel fund" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="amount" value="100"/>
  <con:entry key="memo" value="memo field"/>
  <con:entry key="api_key" value="2a77a1e6-39a8-4b29-bca6-9ba7ae40f434"/>
  <con:entry key="source_id" value="590349504909"/>
  <con:entry key="destination_id" value="869626783499"/>
  <con:entry key="reference_id" value="June25111"/>
</con:parameters></con:request><con:request name="another issuer" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>{
   "request_id": 546382678156,
   "id": 133125,
   "reference_id": "June26",
   "transaction_status": "COMPLETED",
   "trans_status": 0
}
{
   "request_id": 52773978823,
   "id": 133126,
   "reference_id": "June26_1",
   "transaction_status": "COMPLETED",
   "trans_status": 0
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="amount" value="100"/>
  <con:entry key="memo" value="memo field"/>
  <con:entry key="api_key" value="2a77a1e6-39a8-4b29-bca6-9ba7ae40f434"/>
  <con:entry key="source_id" value="29844347458"/>
  <con:entry key="destination_id" value="145426328009"/>
  <con:entry key="reference_id" value="June26_1"/>
</con:parameters></con:request><con:request name="sandbox" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://sandbox-api.bancboxcrowd.com</con:endpoint><con:request><![CDATA[897001440344---Ag
6732144233
400873830374-destination
============================
392145737253
405012216349


956585986893
<Response xmlns="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/transferFunds">
   <id>400517</id>
   <memo>memo field</memo>
   <reference_id>Jusdsds</reference_id>
   <request_id>566163182584</request_id>
   <trans_status>1</trans_status>
   <transaction_status>COMPLETED</transaction_status>
</Response>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="amount" value="200"/>
  <con:entry key="submit_timestamp" value="2013-06-05 01:01:01"/>
  <con:entry key="text" value="test"/>
  <con:entry key="client_ip_address" value="192.1.1.1"/>
  <con:entry key="memo" value="memo field"/>
  <con:entry key="source_id" value="6732144233"/>
  <con:entry key="api_key" value="48542c6a-0e87-493f-90f1-25d24ab93b5f"/>
  <con:entry key="destination_id" value="6732144233"/>
  <con:entry key="reference_id" value="Jusdr"/>
  <con:entry key="secret" value="6e4a45593e"/>
</con:parameters></con:request><con:request name="Copy of calculated_fee" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request><![CDATA[392145737253
405012216349


956585986893
<Response xmlns="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/transferFunds">
   <id>400517</id>
   <memo>memo field</memo>
   <reference_id>Jusdsds</reference_id>
   <request_id>566163182584</request_id>
   <trans_status>1</trans_status>
   <transaction_status>COMPLETED</transaction_status>
</Response>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="amount" value="200"/>
  <con:entry key="submit_timestamp" value="2013-06-05 01:01:01"/>
  <con:entry key="text" value="test"/>
  <con:entry key="client_ip_address" value="192.1.1.1"/>
  <con:entry key="memo" value="memo field"/>
  <con:entry key="source_id" value="628261414016"/>
  <con:entry key="api_key" value="e6842b30-4014-4201-adc7-e2325d65b055"/>
  <con:entry key="destination_id" value="628261414016"/>
  <con:entry key="reference_id" value="89999977xfdfdsdsdsfsd"/>
  <con:entry key="secret" value="VUW5cQgvCV"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request><![CDATA[392145737253
405012216349
805141795533


956585986893
<Response xmlns="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/transferFunds">
   <id>400517</id>
   <memo>memo field</memo>
   <reference_id>Jusdsds</reference_id>
   <request_id>566163182584</request_id>
   <trans_status>1</trans_status>
   <transaction_status>COMPLETED</transaction_status>
</Response>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="amount" value="200"/>
  <con:entry key="submit_timestamp" value="2013-06-05 01:01:01"/>
  <con:entry key="text" value="testrt"/>
  <con:entry key="client_ip_address" value="192.1.1.1"/>
  <con:entry key="memo" value="memo field"/>
  <con:entry key="source_id" value="184354248440"/>
  <con:entry key="api_key" value="e6842b30-4014-4201-adc7-e2325d65b055"/>
  <con:entry key="destination_id" value="31379303627"/>
  <con:entry key="reference_id" value="jhjjhhjsdsdsxdsa"/>
  <con:entry key="secret" value="VUW5cQgvCV"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="getAccountLedger" path="/crowd/v0/cfp/getAccountLedger"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>angel_fund_id</con:name><con:value>145426328009</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>145426328009</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="2.4" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/getAccountLedger">get:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>
</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="angel_fund_id" value="17399226824"/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request><con:request name="anothercfp" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="angel_fund_id" value="869626783499" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request><con:request name="issuer2" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="angel_fund_id" value="956585986893" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="getLinkedExternalAccount" path="/crowd/v0/cfp/getLinkedExternalAccount"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>investor_id</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="2.5" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/getLinkedExternalAccount">get:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="investor_id" value="141415573618"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="getInvestorList" path="/crowd/v0/cfp/getInvestorList"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>9570e9e6-70bd-4c27-85d5-6ec31bb0c31c</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>9570e9e6-70bd-4c27-85d5-6ec31bb0c31c</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>bd56b0fbdd</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>bd56b0fbdd</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="2.9" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/escrow/getInvestorList">get:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" accept="" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" accept="" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="createInvestmentAccount" path="/crowd/v0/cfp/createTemporaryFeeAccount"><con:settings/><con:parameters><con:parameter><con:name>secret</con:name><con:value>a79e33776d</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>a79e33776d</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfp_id</con:name><con:value>639470768993</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>639470768993</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>api_key</con:name><con:value>4e0eaa4335</con:value><con:style>QUERY</con:style><con:default>4e0eaa4335</con:default></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.8" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/createInvestmentAccount">cre:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="bb32cd45-a7f8-46b9-b94d-654f86351371"/>
  <con:entry key="secret" value="5f199b5617"/>
  <con:entry key="cfp_id" value="154287845517"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="fundAccount" path="/crowd/v0/cfp/fundAccount"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>9570e9e6-70bd-4c27-85d5-6ec31bb0c31c</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>9570e9e6-70bd-4c27-85d5-6ec31bb0c31c</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>bd56b0fbdd</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>bd56b0fbdd</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>agreement_type</con:name><con:value>CLICKTHROUGH</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>CLICKTHROUGH</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>document_name</con:name><con:value>"VIBGYO"</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>"VIBGYO"</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>document_version</con:name><con:value>1</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>client_ip_address</con:name><con:value>"192.1.1.1"</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>"192.1.1.1"</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>submit_timestamp</con:name><con:value>"2013-06-05 01:01:01"</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>"2013-06-05 01:01:01"</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>text</con:name><con:value>Text</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Text</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>represented_signature</con:name><con:value>"helooo"</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>"helooo"</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>file_type</con:name><con:value>"gg"</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>"gg"</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>investor_id</con:name><con:value>875290712947</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>875290712947</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>linked_bank_account_id</con:name><con:value>98788</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>98788</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>bank_account_number</con:name><con:value>"235254"</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>"235254"</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>bank_account_type</con:name><con:value>CHECKING</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>CHECKING</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>bank_account_holder</con:name><con:value>dff</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>dff</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>bank_account_routing</con:name><con:value>"8yu jhg"</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>"8yu jhg"</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>link_bank_account</con:name><con:value>N</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>N</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value>wrerer</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>wrerer</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>amount</con:name><con:value>78</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>78</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>memo </con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>document_text</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>signed_document_attachment</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>signed_document_url</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>memo</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>issuer_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>issuer_reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>linked_bank_account_reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>linked_account_reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supresss_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.9" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:fun="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/fundAccount">fun:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="submit_timestamp" value="2013-06-05 01:01:01"/>
  <con:entry key="client_ip_address" value="192.1.1.1"/>
  <con:entry key="linked_bank_account_id" value=""/>
  <con:entry key="bank_account_routing" value="051000017"/>
  <con:entry key="memo " value="nhjhyuy"/>
  <con:entry key="reference_id" value="wrererdd"/>
  <con:entry key="investor_id" value="724926032583"/>
  <con:entry key="bank_account_number" value="235254"/>
</con:parameters></con:request><con:request name="Copy of Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="submit_timestamp" value="2013-06-05 01:01:01"/>
  <con:entry key="client_ip_address" value="192.2.2.2"/>
  <con:entry key="linked_bank_account_id" value=""/>
  <con:entry key="bank_account_routing" value="051000017"/>
  <con:entry key="memo " value="nhjhyuy"/>
  <con:entry key="bank_account_number" value="235254"/>
</con:parameters></con:request><con:request name="Calculated_fee" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="submit_timestamp" value="2013-06-05 01:01:01"/>
  <con:entry key="client_ip_address" value="192.1.1.1"/>
  <con:entry key="linked_bank_account_id" value=""/>
  <con:entry key="api_key" value="e6842b30-4014-4201-adc7-e2325d65b055"/>
  <con:entry key="bank_account_routing" value="051000017"/>
  <con:entry key="memo " value="nhjhyuy"/>
  <con:entry key="reference_id" value="wrererdderrer"/>
  <con:entry key="secret" value="VUW5cQgvCV"/>
  <con:entry key="bank_account_number" value="235254"/>
</con:parameters></con:request><con:request name="remove_document_text(SANDBOX)" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://sandbox-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="submit_timestamp" value="2013-06-05 01:01:01"/>
  <con:entry key="client_ip_address" value="192.1.1.1"/>
  <con:entry key="linked_bank_account_id" value=""/>
  <con:entry key="bank_account_routing" value="051000017"/>
  <con:entry key="api_key" value="48542c6a-0e87-493f-90f1-25d24ab93b5f"/>
  <con:entry key="memo " value="nhjhyuy"/>
  <con:entry key="investor_id" value="413173472404"/>
  <con:entry key="reference_id" value="wrererdderrercc"/>
  <con:entry key="secret" value="6e4a45593e"/>
  <con:entry key="bank_account_number" value="235254"/>
</con:parameters></con:request><con:request name="Copy of remove_document_text(SANDBOX)" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://sandbox-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="submit_timestamp" value="2013-06-05 01:01:01"/>
  <con:entry key="client_ip_address" value="192.1.1.1"/>
  <con:entry key="linked_bank_account_id" value=""/>
  <con:entry key="api_key" value="48542c6a-0e87-493f-90f1-25d24ab93b5f"/>
  <con:entry key="bank_account_routing" value="051000017"/>
  <con:entry key="memo " value="nhjhyuy"/>
  <con:entry key="reference_id" value="wrererdderrer"/>
  <con:entry key="investor_id" value="413173472404"/>
  <con:entry key="secret" value="6e4a45593e"/>
  <con:entry key="bank_account_number" value="235254"/>
</con:parameters></con:request><con:request name="Copy of Calculated_fee" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="submit_timestamp" value="2013-06-05 01:01:01"/>
  <con:entry key="client_ip_address" value="192.1.1.1"/>
  <con:entry key="linked_bank_account_id" value=""/>
  <con:entry key="bank_account_routing" value="051000017"/>
  <con:entry key="api_key" value="e6842b30-4014-4201-adc7-e2325d65b055"/>
  <con:entry key="memo " value="nhjhyuy"/>
  <con:entry key="reference_id" value="wrererd"/>
  <con:entry key="secret" value="VUW5cQgvCV"/>
  <con:entry key="bank_account_number" value="235254"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="createIssuer" path="/crowd/v0/cfp/createIssuer"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfp_id</con:name><con:value>139603739157</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>139603739157</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value>iss123</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>iss123</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>first_name</con:name><con:value>JOHN</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>JOHN</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>middle_initial</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>last_name</con:name><con:value>Smith</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Smith</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>email</con:name><con:value>raghav+123@bancbox.com</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>raghav+123@bancbox.com</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>phone</con:name><con:value>1234567890</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1234567890</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>dob</con:name><con:value>1975-02-28</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1975-02-28</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ssn</con:name><con:value>3333</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>3333</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>address_1</con:name><con:value>222333</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>222333</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>address_2</con:name><con:value>PEACHTREE PLACE</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PEACHTREE PLACE</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>city</con:name><con:value>ATLANTA</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ATLANTA</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>state</con:name><con:value>GA</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>GA</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>zip</con:name><con:value>30318</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>30318</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>internal</con:name><con:value>jas60</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>jas60</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>company_tax_id</con:name><con:value>123456789</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>123456789</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>created_by</con:name><con:value>Jaspinder</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Jaspinder</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>company_name</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>company_registration_state</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>company_type</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>international</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>verification_required</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>linked_bank_account_reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_number</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_type</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_holder</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>bank_account_routing</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>withdraw_on_availability</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>Endpoint</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>passport_number</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>passport_image</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>image_file_name</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>country</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:method name="2.9" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/createIssuer">cre:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="company_registration_state" value="AL"/>
  <con:entry key="company_name" value="test"/>
  <con:entry key="email" value="jas60dc@yopmail.com"/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="state" value="DC"/>
  <con:entry key="reference_id" value="iss123dc"/>
  <con:entry key="secret" value="242d5c6c3b"/>
  <con:entry key="internal" value="jas_DC"/>
</con:parameters></con:request><con:request name="cfp2.9" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>/crowd/v0/cfp/getIssuerDetails?api_key=58c0c842-fb4d-4333-b393-76ef33944b59&amp;secret=242d5c6c3b&amp;issuer_id=474398169140</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="email" value="jas60dc@yopmail.com"/>
  <con:entry key="company_name" value="test"/>
  <con:entry key="company_registration_state" value="AL"/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="reference_id" value="iss123dc62222"/>
  <con:entry key="state" value="DC"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="secret" value="242d5c6c3b"/>
  <con:entry key="internal" value="jas_DC"/>
</con:parameters></con:request><con:request name="2.10" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>/crowd/v0/cfp/getIssuerDetails?api_key=58c0c842-fb4d-4333-b393-76ef33944b59&amp;secret=242d5c6c3b&amp;issuer_id=474398169140</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="company_registration_state" value="AL"/>
  <con:entry key="company_name" value="test"/>
  <con:entry key="email" value="jazz_iss2@yopmail.com"/>
  <con:entry key="api_key" value="8e18b40a-2d3e-42fc-988f-5322539927a0"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="state" value="DC"/>
  <con:entry key="reference_id" value="jazz_iss1"/>
  <con:entry key="secret" value="tLHkr9Ov0B"/>
  <con:entry key="cfp_id" value="19975302551"/>
  <con:entry key="internal" value="jas_DC"/>
</con:parameters></con:request><con:request name="copy For Automation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="company_registration_state" value="AL"/>
  <con:entry key="company_name" value="test"/>
  <con:entry key="email" value="jas60dc@yopmail.com"/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="state" value="DC"/>
  <con:entry key="reference_id" value="iss123dc"/>
  <con:entry key="secret" value="242d5c6c3b"/>
  <con:entry key="internal" value="jas_DC"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="getIssuerDetails" path="/crowd/v0/cfp/getIssuerDetails"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>58c0c842-fb4d-4333-b393-76ef33944b59</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>58c0c842-fb4d-4333-b393-76ef33944b59</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>242d5c6c3b</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>242d5c6c3b</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_id</con:name><con:value>474398169140</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>474398169140</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="2.9" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://api.bancboxcrowd.com/crowd/v0/cfp/getIssuerDetails">get:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>/crowd/v0/cfp/getIssuerDetails?api_key=58c0c842-fb4d-4333-b393-76ef33944b59&amp;secret=242d5c6c3b&amp;issuer_id=474398169140</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="issuer_id" value="485726319106" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="internal createIssuer" path="/crowd/v0/cfp/createIssuer"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfp_id</con:name><con:value>139603739157</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>139603739157</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value>iss123</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>iss123</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>first_name</con:name><con:value>JOHN</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>JOHN</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>middle_initial</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>last_name</con:name><con:value>Smith</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Smith</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>email</con:name><con:value>raghav+123@bancbox</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>raghav+123@bancbox</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>phone</con:name><con:value>1234567890</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1234567890</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>dob</con:name><con:value>1975-02-28</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1975-02-28</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ssn</con:name><con:value>3333</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>3333</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>address_1</con:name><con:value>222333</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>222333</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>address_2</con:name><con:value>PEACHTREE PLACE</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PEACHTREE PLACE</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>city</con:name><con:value>ATLANTA</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ATLANTA</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>state</con:name><con:value>GA</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>GA</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>zip</con:name><con:value>30318</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>30318</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>user_id</con:name><con:value>jas60</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>jas60</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>company_tax_id</con:name><con:value>123456789</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>123456789</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>created_by</con:name><con:value>Jaspinder</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Jaspinder</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>company_name</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>company_registration_state</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="2.9" method="POST"><con:settings/><con:parameters><con:parameter><con:name>withdraw_on_availability</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>company_type</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>type</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>internal</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>international</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>verification_required</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>linked_bank_account_reference_id</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>bank_account_number</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>bank_account_type</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>bank_account_holder</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>bank_account_routing</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>Endpoint</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/createIssuer">cre:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="email" value="jas60dc@yopmail.com"/>
  <con:entry key="company_name" value="test"/>
  <con:entry key="company_registration_state" value="AL"/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="reference_id" value="iss123dc"/>
  <con:entry key="state" value="DC"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="secret" value="242d5c6c3b"/>
  <con:entry key="user_id" value="jas_DC"/>
  <con:entry key="withdraw_on_availability" value="0"/>
</con:parameters></con:request><con:request name="cfp2.9" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>/crowd/v0/cfp/getIssuerDetails?api_key=58c0c842-fb4d-4333-b393-76ef33944b59&amp;secret=242d5c6c3b&amp;issuer_id=474398169140</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="email" value="jas60dc@yopmail.com"/>
  <con:entry key="company_name" value="test"/>
  <con:entry key="company_registration_state" value="AL"/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="reference_id" value="iss123dc6d"/>
  <con:entry key="state" value="DC"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="secret" value="242d5c6c3b"/>
  <con:entry key="user_id" value="jas_DC"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="createIssuer" path="/crowd/v0/cfp/createIssuer"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>68e0d3b9-9867-458d-92d6-a0972fd0840d</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>68e0d3b9-9867-458d-92d6-a0972fd0840d</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>dVAM9mVrZw</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>dVAM9mVrZw</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>first_name</con:name><con:value>JOHN</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>JOHN</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>middle_initial</con:name><con:value>J</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>J</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>last_name</con:name><con:value>SMITH</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SMITH</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>email</con:name><con:value>raghav+123@bancbox.com</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>raghav+123@bancbox.com</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>phone</con:name><con:value>1234567890</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1234567890</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>dob</con:name><con:value>1975-02-28</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1975-02-28</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ssn</con:name><con:value>112-22-3334</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>112-22-3334</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>address_1</con:name><con:value>222333</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>222333</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>address_2</con:name><con:value>PEACHTREEPLACE</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PEACHTREEPLACE</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>city</con:name><con:value>ATLANTA</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ATLANTA</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>state</con:name><con:value>GA</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>GA</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>zip</con:name><con:value>30318</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>30318</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>created_by</con:name><con:value>Sowmya</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Sowmya</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="test" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="https://api.bancboxcrowd.com/crowd/v0/cfp/createIssuer">cre:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request><![CDATA[/crowd/v0/cfp/createIssuer?api_key=68e0d3b9-9867-458d-92d6-a0972fd0840d&secret=dVAM9mVrZw&first_name=JOHN&middle_initial=J&last_name=SMITH&email=new-iss-2@yopmail.com&phone=1234567890&dob=1975-02-28&ssn=112-22-3334&address_1=222333&address_2=PEACHTREEPLACE&city=ATLANTA&state=GA&zip=30318&created_by=Sowmya]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="2.10" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="created_by" value="jazz"/>
  <con:entry key="first_name" value="JOHNI"/>
  <con:entry key="email" value="jazz_iss555@yopmail.com"/>
  <con:entry key="api_key" value="8e18b40a-2d3e-42fc-988f-5322539927a0"/>
  <con:entry key="secret" value="tLHkr9Ov0B"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="createInvestor" path="/crowd/v0/cfp/createInvestor"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>someapiKey</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>someapiKey</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>someSecret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>someSecret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>first_name</con:name><con:value>JOHN</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>JOHN</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>last_name</con:name><con:value>SMITH</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SMITH</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>email</con:name><con:value>raghav+123@bancbox.com</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>raghav+123@bancbox.com</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>phone</con:name><con:value>1234567890</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1234567890</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>dob</con:name><con:value>1975-02-28</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>1975-02-28</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ssn</con:name><con:value>112-22-3333</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>112-22-3333</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>address_1</con:name><con:value>"222333 PEACHTREE"</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>"222333 PEACHTREE"</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>city</con:name><con:value>ATLANTA</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ATLANTA</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>state</con:name><con:value>GA</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>GA</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>zip</con:name><con:value>30318</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>30318</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>company_name</con:name><con:value>"My Company"</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>"My Company"</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>company_tax_id</con:name><con:value>023456789</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>023456789</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>created_by</con:name><con:value>Mark</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>Mark</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="automation" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="https://api.bancboxcrowd.com/crowd/v0/cfp/createInvestor">cre:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="d5186572-6508-4774-a202-3af020414862"/>
  <con:entry key="secret" value="26d6e59b4f"/>
</con:parameters></con:request><con:request name="Request 2 negative" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="d5186572-6508-4774-a202-3af020414862"/>
  <con:entry key="secret" value=""/>
</con:parameters></con:request></con:method></con:resource><con:resource name="updateEscrowAccount" path="/crowd/v0/cfp/updateEscrowAccount"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>someApiKey</con:value><con:style>QUERY</con:style><con:default>someApiKey</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>someSecret</con:value><con:style>QUERY</con:style><con:default>someSecret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>id</con:name><con:value>someId</con:value><con:style>QUERY</con:style><con:default>someId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>close_date</con:name><con:value>2013-06-30</con:value><con:style>QUERY</con:style><con:default>2013-06-30</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value>Tst-Tst-Tst</con:value><con:style>QUERY</con:style><con:default>Tst-Tst-Tst</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>over_funding_amount</con:name><con:value>120</con:value><con:style>QUERY</con:style><con:default>120</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>funding_goal</con:name><con:value>110</con:value><con:style>QUERY</con:style><con:default>110</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:upd="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/updateEscrowAccount">upd:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="withdrawFunds" path="/crowd/v0/cfp/withdrawFunds"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>method</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_id</con:name><con:value>someIssuerId</con:value><con:style>QUERY</con:style><con:default>someIssuerId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>investor_id</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>amount</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>bank_account_routing</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>bank_account_number</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>bank_account_type</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>bank_account_holder</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>name</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>address_1</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>city</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>state</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>zip</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>check_method_type</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>text</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>client_ip_address</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>submit_timestamp</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>beneficiary_name</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>international_bank_account_number</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>swift_code</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>country</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>additional_info_wire</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Endpoint</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:wit="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/withdrawFunds">wit:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="amount" value="100"/>
  <con:entry key="submit_timestamp" value="2013-06-06 01:01:01"/>
  <con:entry key="text" value="test data"/>
  <con:entry key="issuer_id" value="185092216591"/>
  <con:entry key="client_ip_address" value="111.216.11.115"/>
  <con:entry key="api_key" value="44a54efd-8407-426c-8ff6-be48a6683d16"/>
  <con:entry key="secret" value="FBHSlsiYj7"/>
  <con:entry key="method" value="WIRE"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="amount" value="100"/>
  <con:entry key="submit_timestamp" value="2013-06-06 01:01:01"/>
  <con:entry key="text" value="test data"/>
  <con:entry key="issuer_id" value="185092216591"/>
  <con:entry key="client_ip_address" value="111.216.11.115"/>
  <con:entry key="api_key" value="44a54efd-8407-426c-8ff6-be48a6683d16"/>
  <con:entry key="secret" value="FBHSlsiYj7"/>
  <con:entry key="method" value="WIRE"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="confirmWireTransfer" path="/crowd/v0/cfp/confirmWireTransfer"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>8cce5e06-0edf-4af4-9dc7-2b782d4d80cf \</con:value><con:style>QUERY</con:style><con:default>8cce5e06-0edf-4af4-9dc7-2b782d4d80cf \</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>first_name</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>last_name</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>investor_id</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>investor_reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>memo</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>amount</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Endpoint</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:con1="https://api.bancboxcrowd.com/crowd/v0/cfp/confirmWireTransfer">con1:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="cancelProceedsSchedules" path="/crowd/v0/cfp/cancelProceedsSchedules"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>b671b591-a709-417d-90ac-4d31409217da</con:value><con:style>QUERY</con:style><con:default>b671b591-a709-417d-90ac-4d31409217da</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>00134f37f3</con:value><con:style>QUERY</con:style><con:default>00134f37f3</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_id</con:name><con:value>630179025601</con:value><con:style>QUERY</con:style><con:default>630179025601</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value>296397078757</con:value><con:style>QUERY</con:style><con:default>296397078757</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>proceeds_batch_id</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>schedule_id</con:name><con:value>400832</con:value><con:style>QUERY</con:style><con:default>400832</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:can="https://api.bancboxcrowd.com/crowd/v0/cfp/cancelProceedsSchedules">can:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="linkExternalAccount" path="/crowd/v0/cfp/linkExternalAccount"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>investor_id</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>issuer_id</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>linked_account_reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>bank_account_number</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>bank_account_holder</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>bank_account_routing</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>bank_account_type</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:lin="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/linkExternalAccount">lin:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="copyForAutomation" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="getInvestorDetails1" path="/crowd/v0/cfp/getInvestorDetails"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>investor_id</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Endpoint</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://beta-api.bancboxcrowd.com/crowd/v0/cfp/getInvestorDetails">get:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
  <con:entry key="investor_id" value="162670841647"/>
  <con:entry key="secret" value="DD7JOLd4Dw"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
  <con:entry key="investor_id" value="162670841647"/>
  <con:entry key="secret" value="DD7JOLd4Dw"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="verifyIdentity" path="/crowd/v0/cfp/verifyIdentity"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>id</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ssn</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>dob</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>generate_questions</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reference_id</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>identification_file</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>identification_file_name</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ver="https://api.bancboxcrowd.com/crowd/v0/cfp/verifyIdentity">ver:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>https://api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="copyOfAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value="176606247249"/>
  <con:entry key="api_key" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
  <con:entry key="secret" value="DD7JOLd4Dw"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="acceptEscrow" path="/crowd/v0/escrow/acceptEscrow"><con:settings/><con:parameters><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Id</con:name><con:value>965301475161</con:value><con:style>QUERY</con:style><con:default>965301475161</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Endpoint</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:acc="https://api.bancboxcrowd.com/crowd/v0/escrow/acceptEscrow">acc:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://sandbox-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="preSharedKey" value="DZzXwvNbW6z2sQ" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="Copy of acceptEscrow" path="/crowd/v0/escrow/acceptEscrow"><con:settings/><con:parameters><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Id</con:name><con:value>965301475161</con:value><con:style>QUERY</con:style><con:default>965301475161</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Endpoint</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:acc="https://api.bancboxcrowd.com/crowd/v0/escrow/acceptEscrow">acc:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://sandbox-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="preSharedKey" value="DZzXwvNbW6z2sQ" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="completeCancelEscrow" path="/crowd/v0/escrow/completeCancelEscrow"><con:settings/><con:parameters><con:parameter><con:name>preSharedKey</con:name><con:value>123qwe</con:value><con:style>QUERY</con:style><con:default>123qwe</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Id</con:name><con:value>117750323377</con:value><con:style>QUERY</con:style><con:default>117750323377</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>reason</con:name><con:value>FAILURE</con:value><con:style>QUERY</con:style><con:default>FAILURE</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfpId</con:name><con:value>894258754615</con:value><con:style>QUERY</con:style><con:default>894258754615</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Req1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:com="https://api.bancboxcrowd.com/crowd/v0/escrow/completeCancelEscrow">com:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="copy For Automation" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="completeEscrow" path="/crowd/v0/escrow/completeEscrow"><con:settings/><con:parameters><con:parameter><con:name>preSharedKey</con:name><con:value>123qwe</con:value><con:style>QUERY</con:style><con:default>123qwe</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Id</con:name><con:value>117750323377</con:value><con:style>QUERY</con:style><con:default>117750323377</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Endpoint</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Req1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:com="https://api.bancboxcrowd.com/crowd/v0/escrow/completeCancelEscrow">com:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="copy For Automation" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="confirmDisburseEscrow" path="/crowd/v0/escrow/confirmDisburseEscrow"><con:settings/><con:parameters><con:parameter><con:name>preSharedKey</con:name><con:value>123qwe</con:value><con:style>QUERY</con:style><con:default>123qwe</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>escrow_id</con:name><con:value>117750323377</con:value><con:style>QUERY</con:style><con:default>117750323377</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Endpoint</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>confirm_cancel</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:method name="Req1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:com="https://api.bancboxcrowd.com/crowd/v0/escrow/completeCancelEscrow">com:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="copy For Automation" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="completeModifyEscrow" path="/crowd/v0/escrow/completeModifyEscrow"><con:settings/><con:parameters><con:parameter><con:name>escrow_id</con:name><con:value>507278733768</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>507278733768</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>preSharedKey</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="??" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:com="https://qa-api.bancboxcrowd.com/crowd/v0/escrow/completeModifyEscrow">com:Response</con:element></con:representation><con:request name="Copy of Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="escrow_id" value="42860873743"/>
</con:parameters></con:request><con:request name="copy For Automation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="escrow_id" value="42860873743"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="getActivity" path="/crowd/v0/cfp/getActivity"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>entity_id</con:name><con:value>334584612862</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>334584612862</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>entity_type</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="??" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/getInvestorDetails">get:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
  <con:entry key="secret" value="DD7JOLd4Dw"/>
  <con:entry key="entity_type" value="INVESTOR"/>
  <con:entry key="entity_id" value="162670841647"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
  <con:entry key="secret" value="DD7JOLd4Dw"/>
  <con:entry key="entity_type" value="INVESTOR"/>
  <con:entry key="entity_id" value="162670841647"/>
</con:parameters></con:request><con:request name="copyForAutomation2" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
  <con:entry key="secret" value="DD7JOLd4Dw"/>
  <con:entry key="entity_type" value="INVESTOR"/>
  <con:entry key="entity_id" value="162670841647"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="getLedger" path="/crowd/v0/cfp/getLedger"><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:value>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>2a77a1e6-39a8-4b29-bca6-9ba7ae40f434</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>secret</con:name><con:value>secret</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>secret</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>entity_id</con:name><con:value>334584612862</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>334584612862</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>entity_type</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="??" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/getInvestorDetails">get:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
  <con:entry key="secret" value="DD7JOLd4Dw"/>
  <con:entry key="entity_type" value="INVESTOR"/>
  <con:entry key="entity_id" value="162670841647"/>
</con:parameters></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
  <con:entry key="secret" value="DD7JOLd4Dw"/>
  <con:entry key="entity_type" value="INVESTOR"/>
  <con:entry key="entity_id" value="162670841647"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="createCfp" path="/crowd/v0/escrow/createCfp"><con:settings/><con:parameters><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>name</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>UserName</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Password</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>RedirectUrl</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>WebhookUrl</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>CompanyName</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>WebSiteUrl</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>BusDescription</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>fName</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>lName</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>phone</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>a_1</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>a_t</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>a_c</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>a_s</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>a_z</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>created_by</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>refId</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>echeck_method</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>supress_email</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:method name="??" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/getInvestorDetails">get:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="preSharedKey" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
  <con:entry key="Password" value="INVESTOR"/>
  <con:entry key="name" value="DD7JOLd4Dw"/>
  <con:entry key="UserName" value="162670841647"/>
</con:parameters><con:parameterOrder><con:entry>preSharedKey</con:entry><con:entry>name</con:entry><con:entry>UserName</con:entry><con:entry>Password</con:entry><con:entry>RedirectUrl</con:entry><con:entry>WebhookUrl</con:entry><con:entry>CompanyName</con:entry><con:entry>WebSiteUrl</con:entry><con:entry>BusDescription</con:entry><con:entry>fName</con:entry><con:entry>lName</con:entry><con:entry>email</con:entry><con:entry>phone</con:entry><con:entry>a_1</con:entry><con:entry>a_t</con:entry><con:entry>a_c</con:entry><con:entry>a_s</con:entry><con:entry>a_z</con:entry><con:entry>created_by</con:entry><con:entry>refId</con:entry><con:entry>echeck_method</con:entry><con:entry>supress_email</con:entry></con:parameterOrder></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="preSharedKey" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
  <con:entry key="Password" value="INVESTOR"/>
  <con:entry key="name" value="DD7JOLd4Dw"/>
  <con:entry key="UserName" value="162670841647"/>
</con:parameters><con:parameterOrder><con:entry>preSharedKey</con:entry><con:entry>name</con:entry><con:entry>UserName</con:entry><con:entry>Password</con:entry><con:entry>RedirectUrl</con:entry><con:entry>WebhookUrl</con:entry><con:entry>CompanyName</con:entry><con:entry>WebSiteUrl</con:entry><con:entry>BusDescription</con:entry><con:entry>fName</con:entry><con:entry>lName</con:entry><con:entry>email</con:entry><con:entry>phone</con:entry><con:entry>a_1</con:entry><con:entry>a_t</con:entry><con:entry>a_c</con:entry><con:entry>a_s</con:entry><con:entry>a_z</con:entry><con:entry>created_by</con:entry><con:entry>refId</con:entry><con:entry>echeck_method</con:entry><con:entry>supress_email</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="getCfpDetails" path="/crowd/v0/escrow/getCfpDetails"><con:settings/><con:parameters><con:parameter><con:name>preSharedKey</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>cfpId</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="??" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/getInvestorDetails">get:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="cfpId" value="DD7JOLd4Dw"/>
  <con:entry key="preSharedKey" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
</con:parameters><con:parameterOrder><con:entry>preSharedKey</con:entry><con:entry>cfpId</con:entry></con:parameterOrder></con:request><con:request name="copyForAutomation" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:originalUri>https://qa-api.bancboxcrowd.com/crowd/v0/escrow/getCfpDetails</con:originalUri><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="cfpId" value="DD7JOLd4Dw"/>
  <con:entry key="preSharedKey" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
</con:parameters><con:parameterOrder><con:entry>preSharedKey</con:entry><con:entry>cfpId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite name="Automation_TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Automation_TestCase" searchProperties="true" id="03cae30e-4dfe-4ad0-ae08-6b38e275f270"><con:settings/><con:testStep type="groovy" name="AutomationDriver" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import com.eviware.soapui.*
import java.util.*
//import jxl.write.*

import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import jxl.write.Label;
//import jxl.write.WritableCellFormat;
//import jxl.write.WritableFont;

log.info "				>>>>>>>>>>>>>>>>>> : Starting Test Groovy 1"



int flagCount;
int iCountTestCase;
WritableWorkbook workbook;
WritableSheet sheet;
String ResponseParameter;
String ParameterDataType;

Workbook TestDataWB;
Sheet TestDataProp1;
Sheet TestDataValues1;
Sheet TestDataResponseSchema;
Sheet TestDataResponse;

String EnumDataCollection;
String enumType;

	def alert = com.eviware.soapui.support.UISupport;
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);

	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);

int labelCount = 1
	
try{


///log.info ">>>>>>" + testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")


//*************************************************************************//
//Enter Location of Test Data Excel File e.g. E:\\Test Data\\CreateInvestor.xls
//the excel file should be in xls format

//String TestDataFileNames = "C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\openEscrow.xls|C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\getEscrowDetails.xls"
//String TestDataFile = testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")
//String TestDataFile = ${#Project#ScenarioFileLocation}
String TestDataFileNames = context.expand('${#Project#ScenarioFileLocation}')

//Enter the name of API Request
//The name should be same as the API request name in the project
//String RequestAPINames = "openEscrow|getEscrowDetails"map1:{"request_id":4423542238,"id":626484610108,"bank_name":"Four Oaks Bank & Trust Company","account_number":"540126108022","account_routing_number":"053112505","account_type":"CHECKING","type":"CUSTODIAN"}
//String RequestAPIName = testRunner.testCase.testSuite.project.getPropertyValue("RequestName")
//String RequestAPIName = ${#Project#RequestName}
String RequestAPINames = context.expand('${#Project#RequestName}')

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//


String[] TestDataFileArray = TestDataFileNames.split("\\|");
String[] RequestAPINameArray = RequestAPINames.split("\\|");




//log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFileArray
int sizeOfTestDataFiles = TestDataFileArray.size();
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfTestDataFiles"+sizeOfTestDataFiles

//log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPINameArray
int sizeOfRequestAPI = RequestAPINameArray.size()
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfRequestAPI"+sizeOfRequestAPI


if(sizeOfTestDataFiles!=sizeOfRequestAPI)
{
alert.showInfoMessage("Number of Test Data Files and Request API must be the same","ALERT MESSAGE");
//system.exit();
return;
}

for(iNoOfTestRequests=0;iNoOfTestRequests < sizeOfRequestAPI;iNoOfTestRequests++)
{//************START loop for No of Reqeusts
	

  
String TestDataFile = TestDataFileArray[iNoOfTestRequests]
String RequestAPIName = RequestAPINameArray[iNoOfTestRequests]
log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFile
log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPIName
log.info "				>>>>>>>>>>>>>>>>>> : setNo :"+setNo







 int Length =  TestDataFile.lastIndexOf( '\\' )
 String ResposeFileLocation = TestDataFile.substring(0,Length)
 	//Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
	 //log.info "				>>>>>>>>>>>>>>>>>> : time :"+currentTime

	//Getting location to create the TestResponseFile
	String TestResponseFile = ResposeFileLocation + "\\"+RequestAPIName+"-TestResponse-" +currentTime+".xls"
	log.info "				>>>>>>>>>>>>>>>>>> : TestResponseFile :"+TestResponseFile
	//Creating Response Excel File
	workbook = Workbook.createWorkbook(new File(TestResponseFile));
	sheet = workbook.createSheet("Response",0)




	
	//Get the Test Data Excel File
	TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

	//Get the Sheet having Test Data Properties
	TestDataProp1 = TestDataWB.getSheet("Request Schema")

	//Get the Sheet having Test Data Values
	TestDataValues1 = TestDataWB.getSheet("Request Values")


	//Get the Sheet having Test Data Response Properties
	TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
	TestDataResponse = TestDataWB.getSheet("Response Values")




	//Count Rows and Columns in Properties sheet
	PropRowCount = TestDataProp1.getRows()
	PropColCount = TestDataProp1.getColumns()


	//Count Rows and Columns in Response Schema sheet
	ResponseSchemaRowCount = TestDataResponseSchema.getRows()
	ResponseSchemaColCount = TestDataResponseSchema.getColumns()

	//log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
	//log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount

	//Count Rows and Columns in Response sheet
	ResponseRowCount = TestDataResponse.getRows()
	ValuesColCount = TestDataResponse.getColumns()

	//log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
	//log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount









	//Count Rows and Columns in Values sheet
	ValuesRowCount = TestDataValues1.getRows()
	ValuesColCount = TestDataValues1.getColumns()
	log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesRowCount " +ValuesRowCount
	log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesColCount " +ValuesColCount
	//This will display an information message
	//def alert = com.eviware.soapui.support.UISupport;
	//alert.showInfoMessage("Hello World !");
	//alert.showInfoMessage("Hello World !","soapUI Warning !")
	log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
	log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != (ValuesColCount-2))
{
	workbook.write()
	workbook.close()
	
	alert.showInfoMessage("Mismatch in the count of Properties and Values");
	log.info "				>>>>>>>>>>>>>>>>>>>> : Mismatch in the count of Properties and Values"
	
	return;
}


//********Iterating loop for No of Test Cases in Test Data Sheet*********//



for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases

//flush();
ResponseParameter = "";
ParameterDataType = "";
EnumDataCollection = "";
enumType="";


	
	if(!(TestDataValues1.getCell(2,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}
 flagCount = 2


		Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
		sheet.addCell(label00);

		Label label01 = new Label(1, 0, "RESPONSE"); //column=0=A,row=0=1
		sheet.addCell(label01);

		log.info "				>>>>>>>>>>>>>>>>>> : STARTING TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
		//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
		//sheet.addCell(label02);


for(iCounter=1;iCounter<(ValuesColCount-2);iCounter++)
{
	//log.info "				>>>>>>>>>>>>>>>>>> : IN FOR LOOP "
	testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+2,iCountTestCase).getContents())
}

//Getting Reqeust Curl
def ReqHolder1 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
log.info "				>>>> ReqHolder1 =:"+ReqHolder1


//Running the API Request with the Test Parameters-Values
testRunner.runTestStepByName(RequestAPIName)

//Getting Reqeust Curl
log.info "ok"
def ReqHolder2 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
log.info "				>>>> ReqHolder2 =:"+ReqHolder2


//*******************************************************************************************//

log.info "				>>>>>>>>>>>>>>>>>> : Starting Validate JSON Response Groovy"


//Getting JSON Response
def holder = testRunner.testCase.getTestStepByName(RequestAPIName).getPropertyValue("response")
//log.info "        JSON response holder            "+holder

//Parsing JSON Response
def slurper = new JsonSlurper()
def ParsedJSONResponse = slurper.parseText(holder)
//log.info "        JSON Parsed               "+ParsedJSONResponse

//Stringification of JSON response
String ResponseInString = holder.toString()
//log.info "         JSON String                "+ResponseInString
String ParsedJSONResponseInString = ParsedJSONResponse.toString()


log.info "				>>>>>>>>>>>>>>>>>> : Parsed JSON in String :" +ParsedJSONResponseInString
Label label = new Label(1, iCountTestCase, ResponseInString); //column=0=A,row=0=1
		sheet.addCell(label);
//log.info "				>>>>>>>>>>>>>>>>>> : ResponseSchemaRowCount :"+ResponseSchemaRowCount


for(iCounter=1;iCounter<ResponseSchemaRowCount;iCounter++)
{//******************start loop for Response Schema validation
//flush2
ParameterDataType = "";
	
	if(TestDataResponseSchema.getCell(1,iCounter).getContents() == "Y")
	{
		//log.info "          >>   YES  " +iCounter
		String requiredParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"'
		log.info "				>>>>>>>>>>>>>>>>>> : requiredParameter :"+requiredParameter
		if(!(ParsedJSONResponseInString.contains(requiredParameter)))
		{
			
			log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the mandatory parameter - "+TestDataResponseSchema.getCell(0,iCounter).getContents() 
			String MandatoryParameterMissing = "The response does not contain the mandatory parameter - "+requiredParameter
			Label label2 = new Label(flagCount, iCountTestCase, MandatoryParameterMissing);
			sheet.addCell(label2);
			flagCount = flagCount+1
			//testRunner.fail
		}
	}



//******NOV-8*****FOR TESTING DATATYPE OF VALUES//
if(!(TestDataResponseSchema.getCell(2,iCounter).getContents().isEmpty()))
	{
		ParameterDataType="";
		//String ResponseParameter = TestDataResponseSchema.getCell(0,iCounter).getContents()
		ResponseParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"'
		ParameterDataType = TestDataResponseSchema.getCell(2,iCounter).getContents()
		log.info  "				>>>>>>>>>>>>>>>>>> : ResponseParameter :"+ResponseParameter
		log.info  "				>>>>>>>>>>>>>>>>>> : ParameterDataType :"+ParameterDataType



// int Length =  TestDataFile.lastIndexOf( '\\' )
// String ResposeFileLocation = TestDataFile.substring(0,Length)
 int IndexOfParam =  ParsedJSONResponseInString.lastIndexOf(ResponseParameter)
 int LengthOfParam = ResponseParameter.size()
// log.info "     >>>>>>>>>>>>>>>.   IndexOfParam "+IndexOfParam
 //log.info "     >>>>>>>>>>>>>>>.  LengthOfParam "+LengthOfParam

  if(IndexOfParam > -1)
  {
// log.info "       <<>>>>>>>> ParsedJSONResponseInString"+ParsedJSONResponseInString
 //int LastIndexOfValue = ParsedJSONResponseInString.substring(ResponseParameter,indexOf(","))
 //log.info "             >>>>>>>>...   LastIndexOfValue "+LastIndexOfValue

 IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf(",", IndexOfParam)
 //log.info "				>>>> IndexOfSubsequentComma:"+IndexOfSubsequentComma 

		//log.info  "     >>>>>>>>>>>>>>>.   IndexOfSubsequentComma "+IndexOfSubsequentComma
 
if(IndexOfSubsequentComma<1)
{
	IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf("}", IndexOfParam)
	//log.info "				>>>> IndexOfSubsequentComma:"+IndexOfSubsequentComma 

	if(IndexOfSubsequentComma<1)
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Could not find the value for the parameter : "+ResponseParameter
	}
}



if(ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))
 	{
 		EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
		log.info "				>>>> Enum Data Collection :"+EnumDataCollection
 		/*
 		if(EnumDataCollection.matches("[,a-zA-Z]*"))
 		{
 			enumType = "String"
 			log.info "Enum Value is String"
 		}
 		else
 		{
 			enumType = "Number"
 			log.info "Enum Value is NOT String"
 		}
 		*/
 		if(!(EnumDataCollection.matches("[0-9,]*")))
 		{
 			enumType = "String"
 			log.info "Enum Value is String"
 		}
 		else
 		{
 			enumType = "Number"
 			log.info "Enum Value is NOT String"
 		}
 	}

 //if((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || (ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))) //********** **
 // if(!((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || enumType=="String")) //********** **
 	//if(!((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String"))) //********** **

//Thread.sleep(500) 
if(((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String"))) //********** **

 {
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO STRING/DATE/ENUMstring BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	//ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText
 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
 
 else
 {
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO NON -- STRING/DATE/ENUMstring BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	
 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText

 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
 //ResposeValueText = ParsedJSONResponseInString.substring(ParsedJSONResponseInString.indexOf(ResponseParameter)+LengthOfParam, (ParsedJSONResponseInString.indexOf(","))+(IndexOfParam));
 //ResposeValueText = ParsedJSONResponseInString.substring((IndexOfParam+LengthOfParam+2),(IndexOfParam+LengthOfParam+2)+(ParsedJSONResponseInString.indexOf(",")))
 //ResposeValueText = ParsedJSONResponseInString.substring((32),ParsedJSONResponseInString.indexOf(","))
 //s.indexOf(")")
 //log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :"+ResposeValueText
// assert ResposeValueText.isNumber()

//try{

log.info "				>>>> The ResponseValueText is :"+ResposeValueText
	
if(ParameterDataType.toString().equalsIgnoreCase("String"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to STRING IF block"
	 String returnDataType = String.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : StringValue :"+returnDataType
}	
if(ParameterDataType.toString().equalsIgnoreCase("Long"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to LONG IF block"
	//log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :" +ResposeValueText
	long returnDataType = Long.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : LongValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Int"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Int IF block"
	 int returnDataType = Integer.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : IntValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Float"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Float IF block"
	//log.info "				>>>>>>>>>>>>>>>>>> : FloatValue text "+ResposeValueText
	 float returnDataType = Float.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : FloatValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Boolean"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Boolean IF block"
	 boolean returnDataType = Boolean.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : BooleanValue :"+returnDataType
	
}
if(ParameterDataType.toString().equalsIgnoreCase("Date"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Date IF block"
	 
	 SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
	 Date date = null;
	  date = format.parse(ResposeValueText);
	 //date returnDataType = date.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : DateValue  :"+date
}
if(ParameterDataType.toString().toLowerCase().contains(("Enum").toLowerCase()))
{

	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
	EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
	log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection

	if(!(EnumDataCollection.toString().toLowerCase().contains((ResposeValueText).toLowerCase())))
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText"
	String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection
	Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label4);
	flagCount = flagCount+1
	}
	/*
	String[] EnumData = EnumDataCollection.split(",")
	int sizeOfEnumData = EnumData.size()
	log.info "			>>>>>>>>>>>>>> sizeOfEnumData :"+sizeOfEnumData
	
	
	for(iCountOfEnumData=0;iCountOfEnumData<sizeOfEnumData;iCountOfEnumData++)
	{
	log.info "			>>>>>>> EnumData :"+EnumData[iCountOfEnumData]
	
	}
	 //date returnDataType = date.valueOf(ResposeValueText)
	 //log.info "        >>>>>>>>>.     EnumValue  "+returnDataType
	*/
}




/*
}
  catch(all)
{
	log.info "             >>>>>>>>>> Some Exception Occured"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	
//workbook.write()
//workbook.close()

}
*/
 //long.info "  >>>>>>>>>>>>>>>   "+bool
 //ValueDataType = ResposeValueText.getClass()
 //log.info " >>>>>>>>>>>> ValueDataType ="+ValueDataType

  }

	}
//******NOV-8*****// 

//*****************************************************************8888888
//*****************************************************************8888888
//openEscrowopenEscrowParameterDataType = "";
}//******************END loop for Response Schema validation





for(iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{
	//if(IsEmpty(TestDataResponse.getCell(iCounter,1).getContents()))


	if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
	{
		//log.info " >>>>>>>>>>>>   not NULL"
		String ParamValueField = '"'+TestDataResponse.getCell(iCounter1,0).getContents()+'":"'+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()+'"'
		String ParamValueFieldForIntType = '"'+TestDataResponse.getCell(iCounter1,0).getContents()+'":'+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()
		log.info " >>>>>>>>>>>  ParamValueField is : "+ParamValueField 
//1
		
		if(!(ParsedJSONResponseInString.contains(ParamValueField))  && !(ParsedJSONResponseInString.contains(ParamValueFieldForIntType)) )
		{
			log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the value - "+ParamValueField
			
			
			//log.info "           >>>>>>>> flag Count  "+flagCount
			//label1 = "label"+flagCount
			//Label label1 = new Label(0, 1, "TC_001"); //column=0=A,row=0=1
			//sheet.addCell(label1);
			
			//Label label+""+flagCount = new Label
			Label label3 = new Label(flagCount, iCountTestCase, "The response does not contain the value - "+ParamValueField+"");
			sheet.addCell(label3);
			flagCount = flagCount+1
		}
	}
}

if(flagCount==2)
{
	/*
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);
	*/
	//log.info  "				>>>>>>>>>>>>>>>>>> : if loop - flagCount "+flagCount
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label02);
	// sheet.addCell(new jxl.write.Label(0,0,"User Name",normalFormat));
}
else{
	/*
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);
	*/
	//log.info  "				>>>>>>>>>>>>>>>>>> : else loop - flagCount "+flagCount
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
}	
log.info "				>>>>>>>>>>>>>>>>>> : END TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
}//************END loop for No of Test Cases

workbook.write()
workbook.close()
}//************END loop for No of Reqeusts


}
catch (NumberFormatException e)
{
	log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : NumberFormatException"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	workbook.write()
	workbook.close()
}
catch(ParseException parseEx)
{
	log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : ParseException"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	workbook.write()
	workbook.close()
}
catch(FileNotFoundException f) 
{
   workbook.write()
   workbook.close()
   f.printStackTrace();
   log.info "				>>>>>>>>>>>>>>>>>> : FILE NOT FOUND"
   //alert.showInfoMessage("Hello World !","soapUI Warning !")
   alert.showInfoMessage("Please Check the File Name and Location is Correct","FILE NOT FOUND");
  
}
catch(all)
{
	
	//String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	String Exception1 = "An Exception Occurred : "+all+""
	log.info "				>>>>>>>>>>>>>>>>>> : Exception1 : "+Exception1
	Label label5 = new Label(flagCount, iCountTestCase, Exception1);
	sheet.addCell(label5);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	
	workbook.write()
	workbook.close()

}

log.info "				>>>>>>>>>>>>>>>>>> : End of Validate JSON Response Groovy"
log.info "				>>>>>>>>>>>>>>>>>> : End of AutomationDriver script"
]]></script></con:config></con:testStep><con:testStep type="groovy" name="SetGlobalProperty" disabled="true"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.setPropertyValue("PropertyName","PropertyValue");</script></con:config></con:testStep><con:testStep type="groovy" name="AutomationScenario" disabled="true"><con:settings/><con:config><script><![CDATA[ 
/***********************************************************************************************************************
 * *********************************************************************************************************************
 * AutomationScenario script - This script reads the scenario file and run the steps in the scenario.
 * The scenario file is an excel workbook where each scenario is plaNegativeTestingced in a sheet of the workbook.
 * The script reads the workbook and executes through all the scenarios present in the workbook.
 * 
 * The user is provided with the flexibility of choosing the scenarios to run during execution from the scenario excel.
 * Scenarios having RunSwitch=1 will be considered for execution and those having RunSwitch=0 will be ignored.
 * 
 * The steps in the scenario are the test cases created in the individual test data files for that request.
 * Both the scenario file and the testData files for individual api requests should be present at the same location.
 * After performing basic validations, each step in the scenario is executed (executing the mentioned Test Case from the mentioned Test Data sheet)
 * 
 * After successful execution of the scenarios a result file (excel) will get created in the same loccation where your scenario file is located. 
 * *********************************************************************************************************************
 * *********************************************************************************************************************
 */

 
import jxl.*;
import com.eviware.soapui.*;
import java.util.*;

import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder;

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;

import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;

//importing jars for DB connection
import com.eviware.soapui.support.XmlHolder
import groovy.sql.Sql;


log.info "				>>>>>>>>>>>>>>>>>> : Starting AutomationScenario Script";
//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet TestDataProp1;
Sheet TestDataValues1;
Sheet TestDataResponseSchema;
Sheet TestDataResponse;
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//****************************************************
//Array to separate and store cell contents based on |
//****************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//**********************************************************
//Couner for looping through number of steps in the scenario
//**********************************************************
int iCounter1;
//************************
//starting try catch block
//************************
try{

	//***************************************************
	//Get the scenario file location. 
	//This can be passed as a parameter from commandline.
	//***************************************************
	//String TestScenarioFile = "C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\TeamTestData\\ScenarioTD\\ScenarioSheet2.xls"
	String TestScenarioFile = context.expand('${#Project#ScenarioFileLocation}');
	//***************************************************
	//Get the set No
	//This can be passed as a parameter from commandline.
	//***************************************************
	//String TestScenarioFile = 1;
	String SetNo = context.expand('${#Project#SetNo}');

	//Put GlobalParam NegativeTesting as Y when testing for unit test data for Error Codes.
	//This will continue the scenario even if a step in it fails
	String NegativeTesting = context.expand('${#Project#NegativeTesting}');
	log.info "NegativeTestingFlag = "+NegativeTesting;

	
				
	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	NoOfScenarioSheets = getSenarioSheets.size();
	log.info "				>>>> NoOfScenarioSheets : "+NoOfScenarioSheets;

		//************************************
		//Create workbook for writing response
		//************************************
		//log.info "				>>>> TestScenarioFile = "+TestScenarioFile;
 		int Length =  TestScenarioFile.lastIndexOf( '\\' );
 		int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
 		//log.info "				Length : "+Length;
 		//log.info "				Length2 : "+Length2;
 		String excelName = TestScenarioFile.substring(Length+1,Length2);
 		//log.info "				>>>> excelName - "+excelName;
 		String ResposeFileLocation = TestScenarioFile.substring(0,Length);
 		//Getting Current Time
     	 currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
	 	//log.info "				>>>>>>>>>>>>>>>>>> : time :"+currentTime
		//Getting location to create the TestResponseFile
		String workingDir = System.getProperty("user.dir");
		String ScenarioResponseFile = ResposeFileLocation + "\\"+excelName+"-Response-" +currentTime+".xls";
		log.info "				>>>>>>>>>>>>>>>>>> : ScenarioResponseFile :"+ScenarioResponseFile;
		//Creating Response Excel File
		workbook = Workbook.createWorkbook(new File(ScenarioResponseFile));

		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(sheetCount=1;sheetCount<NoOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();			
		log.info "				>>>> Reading Sheet : "+sheetName;
		
		/*
		//condition to check sheet name contains 'scenario'
		if(!(sheetName.toLowerCase().contains('scenario')))
		{
			alert.showInfoMessage("Sheet:"+(sheetCount+1)+"does not have name -Scenario"+(sheetCount+1));
			log.info "				>>>>: Sheet:"+(sheetCount+1)+"does not have name -Scenario"+(sheetCount+1);
			continue;
		}
		*/

		//*************************************************
		//condition to check RunSwitch. 
		//Only scenarios with RunSwitch 1 will be executed.
		//Changing RunSwitch to Set No
		//*************************************************
		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info "Scenario in sheet "+sheetName+" not set for execution";
			continue;
		}
		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);
	


					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "CURL"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);





	
		//****************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();
		log.info  "				>>>>>>>>>>>>>>>>>> : ScenarioRowCount:"+ScenarioRowCount;
		log.info  "				>>>>>>>>>>>>>>>>>> : ScenarioColCount:"+ScenarioColCount;
	
		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];

			//******************************************************
			//Starting loop for number of steps in the scenario
			//******************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);

			iCountFlag=0;
			log.info "				>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> : Reading Row No :"+(iCounter1+1);
			log.info "				>>>> ********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents();
			//************************************************
			//condition to check if the scenario step is empty
			//************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}
			////log.info "				>>>> Step Name is :"+SenarioSheet1.getCell(1,iCounter1).getContents();


			//************************************
			//Checking if step refers to complete RightSignProcess
			//************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('rightsign')))
			{
			 	
			 	//******************************
			 	//Running Right Sign
			 	//****************************** 
			 	//String emailCredentials = SenarioSheet1.getCell(3,iCounter1).getContents().toString();
				//Calling func for Right Sign

				
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa-angellist-issuer')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for ISSUER of AngelList in QA";
			 	Thread.sleep(10000);
			 	testRunner.runTestStepByName('RightSignProcessForIssuer-AL-QA');
				Thread.sleep(10000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa-angellist-cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for CFP for AngelList in QA";
			 	Thread.sleep(10000);
			 	testRunner.runTestStepByName('RightSignProcessForCfp-AL-QA');
				Thread.sleep(10000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for CFP" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}

			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta-angellist-cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for CFP for AngelList in beta";
			 	Thread.sleep(10000);
			 	testRunner.runTestStepByName('RightSignProcessForCfp-AL-BETA');
				Thread.sleep(10000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for CFP" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta-angellist-issuer')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for ISSUER of AngelList in BETA";
			 	Thread.sleep(10000);
			 	testRunner.runTestStepByName('RightSignProcessForIssuer-AL-BETA');
				Thread.sleep(10000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa-localstake-issuer')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for ISSUER of LocalStake in QA";
			 	Thread.sleep(10000);
			 	testRunner.runTestStepByName('RightSignProcessForIssuer-LS-QA');
				Thread.sleep(10000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta-localstake-issuer')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for ISSUER of LocalStake in BETA";
			 	Thread.sleep(10000);
			 	testRunner.runTestStepByName('RightSignProcessForIssuer-LS-BETA');
				Thread.sleep(10000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa-localstake-cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for CFP of LocalStake in QA";
			 	Thread.sleep(10000);
			 	testRunner.runTestStepByName('RightSignProcessForCfp-LS-QA');
				Thread.sleep(10000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta-localstake-cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for CFP of LocalStake in BETA";
			 	Thread.sleep(10000);
			 	testRunner.runTestStepByName('RightSignProcessForCfp-LS-BETA');
				Thread.sleep(10000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			//continue;
			}
/*
//************************************
			//Checking if step refers to complete RightSignProcess
			//************************************
			if((SenarioSheet1.getCell(1,iCounter1).getContents().toLowerCase().contains('rightsign')))
			{
			 	
			 	//******************************
			 	//Running Right Sign
			 	//****************************** 
			 	//String emailCredentials = SenarioSheet1.getCell(3,iCounter1).getContents().toString();
				//Calling func for Right Sign

				
			 	if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-2)+" is Completing Right Sign Process for CFP";
			 	testRunner.runTestStepByName('RightSignProcessForCfp');
				Thread.sleep(10000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(0, iCounter1,"Right Signature Process Completed" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			continue;
			}
*/			
			//************************************
			//Checking if step refers to Run a Job
			//************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('outbound')))
			{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Running Outbound job";
			 	//******************************
			 	//Running Four Oaks Outbound job
			 	//****************************** 
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta')))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-BETAOutbound');
			 	Thread.sleep(5000);
			 	log.info "				>>>> FourOaksOutBoundJob Executed in BETA";
			 	Label labeljobBetaOutbound = new Label(3, iCounter1,"job-FourOaksOutBound-Beta EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobBetaOutbound);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa')))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-QAOutbound');
			 	Thread.sleep(5000);
			 	log.info "				>>>> FourOaksOutBoundJob Executed in QA";
			 	Label labeljobQAOutbound = new Label(3, iCounter1,"job-FourOaksOutBound-QA EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAOutbound);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('reg')))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-REGOutbound');
			 	Thread.sleep(5000);
			 	log.info "				>>>> FourOaksOutBoundJob Executed in REG";
			 	Label labeljobQAOutbound = new Label(3, iCounter1,"job-FourOaksOutBound-REG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAOutbound);
			 	continue;
				}
				//STAGING JOBS (SANDBOX)
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('stg')))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-STGOutbound');
			 	Thread.sleep(5000);
			 	log.info "				>>>> FourOaksOutBoundJob Executed in STAGING";
			 	Label labeljobQAOutbound = new Label(3, iCounter1,"job-FourOaksOutBound-STG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAOutbound);
			 	continue;
				}
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('draft')))
			{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Running Draft Realization job";
			 	//******************************
			 	//Running Four Oaks Outbound job
			 	//****************************** 
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta')))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-BETARealizeDraft');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Draft Realization job Executed in BETA";
			 	Label labeljobBetaDraftRealization = new Label(3, iCounter1,"job-DraftRealization-Beta EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobBetaDraftRealization);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa')))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-QARealizeDraft');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Draft Realization job Executed in QA";
			 	Label labeljobQADraftRealization = new Label(3, iCounter1,"job-DraftRealization-QA EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQADraftRealization);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('reg')))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-REGRealizeDraft');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Draft Realization job Executed in REG";
			 	Label labeljobQADraftRealization = new Label(3, iCounter1,"job-DraftRealization-REG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQADraftRealization);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('stg')))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-STGRealizeDraft');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Draft Realization job Executed in STAGING";
			 	Label labeljobQADraftRealization = new Label(3, iCounter1,"job-DraftRealization-STG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQADraftRealization);
			 	continue;
				}
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('push')))
			{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Running Push Notification job";
			 	//******************************
			 	//Running Four Oaks Outbound job
			 	//****************************** 
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta')))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-BETAPushNotification');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Push Notification job Executed in BETA";
			 	Label labeljobBetaPushNotification = new Label(3, iCounter1,"job-PushNotification-Beta EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobBetaPushNotification);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa')))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-QAPushNotification');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Push Notification job Executed in QA";
			 	Label labeljobQAPushNotification = new Label(3, iCounter1,"job-PushNotification-QA EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAPushNotification);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('reg')))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-REGPushNotification');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Push Notification job Executed in REG";
			 	Label labeljobQAPushNotification = new Label(3, iCounter1,"job-PushNotification-REG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAPushNotification);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('stg')))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-STGPushNotification');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Push Notification job Executed in STAGING";
			 	Label labeljobQAPushNotification = new Label(3, iCounter1,"job-PushNotification-STG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAPushNotification);
			 	continue;
				}
			}

/////////start java fw from here Mar 25
			
			else 
			{
			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;

			
			
			
			////mapName = "map"+mapNo;
			
			
			
			//mapName = mapNo
			//log.info "				>>>mapName is ="+mapName;
			//***************************
			//creating a dynamic hash map
			//***************************
			HashMap mapName= [:];
			////////////log.info "				>>>> map:"+mapName;
			//***********************************************************
			//get the contents from the cell containing the scenario step
			//***********************************************************
			//cellContents = SenarioSheet1.getCell(1,iCounter1).getContents();
		 	//log.info "			>>>>>>>> cellContents: "+cellContents;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents();

				//***************************************************************
				//Condition to check the stepName has correct API name and format
				//***************************************************************
				if(!((RequestName.contains('createInvestor')) || (RequestName.contains('getInvestorDetails')) || (RequestName.contains('getInvestorList')) || (RequestName.contains('submitAgreement')) || (RequestName.contains('verifyIdentity')) || (RequestName.contains('verifyAnswers')) || (RequestName.contains('createIssuer')) || (RequestName.contains('getIssuerDetail')) || (RequestName.contains('getIssuerList')) || (RequestName.contains('openEscrow')) || (RequestName.contains('fundAccount')) || (RequestName.contains('fundEscrow')) || (RequestName.contains('changeInvestorContribution')) || (RequestName.contains('cancelEscrow')) || (RequestName.contains('closeEscrow')) || (RequestName.contains('getEscrowDetails')) || (RequestName.contains('getEscrowList')) || (RequestName.contains('getActivityDetails')) || (RequestName.contains('updateEscrowAccount')) || (RequestName.contains('withdrawFunds')) || (RequestName.contains('transferFunds')) || (RequestName.contains('confirmWireTransfer')) || (RequestName.contains('disburseEscrow')) || (RequestName.contains('updateInvestmentLedger')) || (RequestName.contains('freezeInvestmentLedger')) || (RequestName.contains('createProceedsSchedules')) || (RequestName.contains('viewProceedsSchedules')) || (RequestName.contains('cancelProceedsSchedules')) || (RequestName.contains('getInvestmentLedger')) || (RequestName.contains('linkExternalAccount')) || (RequestName.contains('acceptEscrow')) || (RequestName.contains('completeCancelEscrow')) || (RequestName.contains('confirmDisburseEscrow')) || (RequestName.contains('completeEscrow')) || (RequestName.contains('verifyIdentityManually')) || (RequestName.contains('completeModifyEscrow')) || (RequestName.contains('getProceedsSchedules')) || (RequestName.contains('getActivity')) || (RequestName.contains('getLedger'))))
				{
					alert.showInfoMessage("For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" does NOT contain a valid API reqeust name");
					log.info "				>>>> For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" does NOT contain a valid API reqeust name";
					//continue;
					break;
				}



				
				
				/*
				 * COMMENTING THIS PART BECAUSE CHANGING THE SCENARIO SHEET FORMAT
				 * instead of having api name and TCID in same cell, will have it in separate cells(separate columns) 
				  
				if(!((cellContents.contains("createInvestor|")) || (cellContents.contains("getInvestorDetails|")) || (cellContents.contains("getInvestorList|")) || (cellContents.contains("submitAgreement|")) || (cellContents.contains("verifyIdentity|")) || (cellContents.contains("verifyAnswers|")) || (cellContents.contains("createIssuer|")) || (cellContents.contains("getIssuerDetails|")) || (cellContents.contains("getIssuerList|")) || (cellContents.contains("openEscrow|")) || (cellContents.contains("fundAccount|")) || (cellContents.contains("fundEscrow|")) || (cellContents.contains("changeInvestorContribution|")) || (cellContents.contains("cancelEscrow|")) || (cellContents.contains("closeEscrow|")) || (cellContents.contains("getEscrowDetails|")) || (cellContents.contains("getEscrowList|")) || (cellContents.contains("getActivityDetails|")) || (cellContents.contains("updateEscrowAccount|")) || (cellContents.contains("withdrawFunds|")) || (cellContents.contains("transferFunds|")) || (cellContents.contains("confirmWireTransfer|")) || (cellContents.contains("disburseEscrow|")) || (cellContents.contains("updateInvestmentLedger|")) || (cellContents.contains("freezeInvestmentLedger|")) || (cellContents.contains("createProceedsSchedules|")) || (cellContents.contains("viewProceedsSchedules|")) || (cellContents.contains("cancelProceedsSchedules|")) || (cellContents.contains("getInvestmentLedger|")) || (cellContents.contains("linkExternalAccount|")) || (cellContents.contains("acceptEscrow|"))))
				{
					alert.showInfoMessage("For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-2)+" does NOT contain a valid API reqeust name");
					log.info "				>>>> For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-2)+" does NOT contain a valid API reqeust name";
					//continue;
					break;
				}
				//************************************
				//taking the cell contents in an array
				//************************************
			 	String[] TestDataRequestArray = cellContents.split("\\|");
				int TestDataRequestArraySize = TestDataRequestArray.size();
				if(TestDataRequestArraySize<2)
				{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-2)+" is not in proper format";
			 	continue;
			 	}
			 	//********************************
			 	//extracting request name and TCID
			 	//********************************
				String RequestName = TestDataRequestArray[0].trim();
				String TestCaseID = TestDataRequestArray[1].trim();
				log.info "				>>>> Request Name is :"+RequestName;
				log.info "				>>>> TCID is :"+TestCaseID;
				*/

				
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				log.info "				>>>> TestDataFile is :"+TestDataFile;

				//****************************
				//Get the Test Data Excel File
				//****************************
				TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
				//*****************************************
				//Get the Sheet having Test Data Properties
				//*****************************************
				TestDataProp1 = TestDataWB.getSheet("Request Schema");
				//*************************************
				//Get the Sheet having Test Data Values
				//*************************************
				TestDataValues1 = TestDataWB.getSheet("Request Values");
				//Get the Sheet having Test Data Response Properties
				TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
				TestDataResponse = TestDataWB.getSheet("Response Values");
				//******************************************
				//Count Rows and Columns in Properties sheet
				//******************************************
				PropRowCount = TestDataProp1.getRows();
				PropColCount = TestDataProp1.getColumns();
				log.info "				>>>>>>>>>>>>>>>>>>>> : PropRowCount " +PropRowCount;
				//***********************************************
				//Count Rows and Columns in Response Schema sheet
				//***********************************************
				ResponseSchemaRowCount = TestDataResponseSchema.getRows();
				ResponseSchemaColCount = TestDataResponseSchema.getColumns();
				//log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount;
				//log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount;
				//****************************************
				//Count Rows and Columns in Response sheet
				//****************************************
				ResponseRowCount = TestDataResponse.getRows();
				ResponseColCount = TestDataResponse.getColumns();
				//log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount;
				//log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount;
				//Count Rows and Columns in Values sheet
				ValuesRowCount = TestDataValues1.getRows();
				ValuesColCount = TestDataValues1.getColumns();
				//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesRowCount " +ValuesRowCount;
				log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesColCount " +ValuesColCount;
				//log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount;
				//log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount;
	
				//****************************************************************************************
				//Condition to check the parameters present in RequestSchema = parameters in RequestValues
				//****************************************************************************************
				if(PropRowCount != (ValuesColCount-3))
				{
				workbook.write();
				workbook.close();
				alert.showInfoMessage("Mismatch in the count of Properties and Values for Scenario "+sheetName+" Step No " +(iCounter1-2)+"\n");
				log.info "				>>>>>>>>>>>>>>>>>>>> : Mismatch in the count of Properties and Values. "+sheetName+" Step No " +(iCounter1-2)+"\n";
				//return;
				break stepCountLoop;
				//break ScenarioCountLoop;
				}
				//***********************************************************************
				//********Iterating loop for No of Test Cases in Test Data Sheet*********
				//***********************************************************************
				for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
				{//************START loop for No of Test Cases
				
				//flush();
				ResponseParameter = "";
				ParameterDataType = "";
				EnumDataCollection = "";
				enumType="";
			
			
				
				if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
					//log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Test Case :"+TestCaseID;
					//iCountTestCase = iCountTestCase-1
					continue;
				}
			 	flagCount = 8;
			
					SenarioSheet1.getCell(1,iCounter1).getContents();

					/*
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "CURL"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);
					*/
					/*
					Label label00 = new Label(0, 2, "SenarioStep"); //column=0=A,row=0=1
					sheet.addCell(label00);
					Label label01 = new Label(1, 2, "TCID"); //column=0=A,row=0=1
					sheet.addCell(label01);

					Label labelDescriptionHeader = new Label(2, 2, "Description"); //column=0=A,row=0=1
					sheet.addCell(labelDescriptionHeader);
					Label labelExpectedHeader = new Label(3, 2, "Expected Result"); //column=0=A,row=0=1
					sheet.addCell(labelExpectedHeader);

					
					Label labelCurlHeader = new Label(4, 2, "Curl"); //column=0=A,row=0=1
					sheet.addCell(labelCurlHeader);
					
					Label labelTCID = new Label(5, 2, "Response"); //column=0=A,row=0=1
					sheet.addCell(labelTCID);
					*/

					Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
					sheet.addCell(stepNoValue);

					Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
					sheet.addCell(descriptionValue);

					Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
					sheet.addCell(expectedValue);

					Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
					sheet.addCell(referencesValue);
					
					/*
					Label labelTCDescription = new Label(2, iCounter1, TestDataValues1.getCell(1,iCountTestCase).getContents()); //column=0=A,row=0=1
					sheet.addCell(labelTCDescription);

					Label labelTCExpected = new Label(3, iCounter1, TestDataValues1.getCell(2,iCountTestCase).getContents()); //column=0=A,row=0=1
					sheet.addCell(labelTCExpected);
					*/

					
					log.info "				>>>>>>>>>>>>>>>>>> : STARTING TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
					//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
					//sheet.addCell(label02);
			
					//***************************************
					//Setting parameter values in the request
					//***************************************
					String key = "";
					String value = "";
					String requestData = "";
					for(iCounter=1;iCounter<(ValuesColCount-3);iCounter++)
					{
						//*****************************************************************
						//Taking values of parameter and its value from the Test Data sheet
						//*****************************************************************
						key = TestDataProp1.getCell(0,iCounter).getContents();
						value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents();
						//testRunner.testCase.getTestStepByName(RequestName).setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+2,iCountTestCase).getContents());
						testRunner.testCase.getTestStepByName(RequestName).setPropertyValue( key, value);
	
						if(value.contains(" "))
						{
							value = '"'+value+'"';
						}
						//**********************************************
						//Generating the curl request from key and value
						//**********************************************
						if(key=="email")
						{
							requestData = requestData+"--data-urlencode "+key+"="+value+" \\\n";
						}
						else{
						requestData = requestData+"-d "+key+"="+value+" \\\n";
						}
					
					}
					
					
				//******************************
				//Start condition for References
				//******************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				///////log.info "				>>>> This scenario step has References";
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has References";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];
				
				
				
				//Checking if child references are made in the References
				String[] getReferenceSplittedByDot = RefText.split("\\.");
				int NoOfDotsInReferences = getReferenceSplittedByDot.size();
				String ReferringValue = "";
				String paramName = "";
				if(NoOfDotsInReferences>2)
				{
				log.info "			>>>>>>>>. came to if block NoOfDotsInReferences>2 ";
				int RefTextSize = RefText.size();
				int indexOfEqual =  RefText.lastIndexOf('=');
				int indexOfFirstDot =  RefText.indexOf('.');
				int indexOfFirstLastDot =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,indexOfEqual);
				log.info "				>>> paramName="+paramName;
				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(indexOfEqual+1,indexOfFirstDot);
				log.info "				>>> stepToRefer="+stepToRefer;
				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch1 =  RefText.substring(indexOfFirstDot+1,indexOfFirstLastDot);
				log.info "				>>> paramValueToFetch1="+paramValueToFetch1;

				String paramValueToFetch2 =  RefText.substring(indexOfFirstLastDot+1,RefTextSize);
				log.info "				>>> paramValueToFetch2="+paramValueToFetch2;


				//mapToRefer = "map"+stepToRefer;

				mapToRefer = stepToRefer;
				mapToRefer = Integer.parseInt(mapToRefer);
				
				//log.info "				>>>>Value from Global Map 1 : "+(globalMap.get("map"+stepToRefer)).get(paramValueToFetch)
				//log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(stepToRefer);
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(Integer.parseInt(stepToRefer));
				//String ReferringValue = globalMap.get(1);
				//log.info "				>>>>>>>>>>>>>>>>>. ReferringValue = "+ReferringValue;
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);
				log.info "				*********  ReferringValue = "+ReferringValue
				//String ReferringValue = (globalMap.get("map"+stepToRefer)).get(paramValueToFetch);
				//ReferringValue =  mapToRefer.get(paramValueToFetch);
				}
				
				
				
				
				else{
				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;
				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;
				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				////mapToRefer = "map"+stepToRefer;

				mapToRefer = Integer.parseInt(stepToRefer);
				
				//log.info "				>>>>Value from Global Map 1 : "+(globalMap.get("map"+stepToRefer)).get(paramValueToFetch)
				//log.info "				>>>> map "+stepToRefer+" = "+globalMap.get("map"+stepToRefer);
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
				////String ReferringValue = (globalMap.get("map"+stepToRefer)).get(paramValueToFetch);
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch);
				//ReferringValue =  mapToRefer.get(paramValueToFetch);
				}//end of Else
				
				log.info "				>>>> ReferringValue:"+ReferringValue;
				//log.info"					>>>> mapNameValue:"+mapToRefer.get(paramValueToFetch);
				//*****************************************
				//setting the referred value in the request
				//*****************************************
				testRunner.testCase.getTestStepByName(RequestName).setPropertyValue(paramName, ReferringValue);
				}
			}
			}//End condition for References

			
			//Start condition to check for overwriting values
			/**
			 * Commenting this out as is not required.[overwrite values]
			 * This takes value from the 4th column of the scenario sheet
			 * The values are given like - reference_id=123,maximum_funding_amount=1001
			 * this will overwrite the value of reference_id to 123 and maximum_funding_amount to 1001 before running the request.
			 */
			 /*
			//change row number to variable
			if(!(SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			if(SenarioSheet1.getCell(3,iCounter1).getContents().contains("="))
			{
				log.info "				>>>> This scenario step has Overwrite values";

				//for loop for no of overwirtes and updating overwritten value in request
				getOverwriteArray = SenarioSheet1.getCell(3,iCounter1).getContents();
				log.info "				>>>> getOverwriteArray: "+getOverwriteArray;


				String[] getOverwriteValues = getOverwriteArray.split("\\,");
				int NoOfOverwrites = getOverwriteValues.size();

				for(iCountOverwrite=0;iCountOverwrite<NoOfOverwrites;iCountOverwrite++)
				{
					//*********************
				String OverwriteText = getOverwriteValues[iCountOverwrite].trim();
				log.info "				>>>> OverwriteText+"+iCountOverwrite+" = "+getOverwriteValues[iCountOverwrite];
				//reference_id=123

				String[] overwriteTextArray = OverwriteText.split("\\=");

				//Get the parameter name 
				String overwriteParamName = overwriteTextArray[0];
				log.info "				>>> overwriteParamName="+overwriteParamName;
				
				String overwriteValue = overwriteTextArray[1];
				log.info "				>>> overwriteValue="+overwriteValue;
				testRunner.testCase.getTestStepByName(RequestName).setPropertyValue(overwriteParamName, overwriteValue);
				}	
			}
			}	*/
			//*******************************************************
			//Run the test request***********************************
			//Running the API Request with the Test Parameters-Values
			//*******************************************************
			log.info "				>>>> Executing Request.";
			testRunner.runTestStepByName(RequestName);
			//******************************************************************
			//creating the curl request with endpoint and logging to result file
			//******************************************************************
			String requestURL = context.httpMethod.getURI();
			//log.info "				>>>> requestURL : "+requestURL;
			requestData = "curl -k -v "+requestURL+" \\\n"+requestData;
			log.info "				>>>> New requestData : \n "+requestData;
			//
			//Logging the curl in result file
			Label labelCurl = new Label(6, iCounter1, requestData); //column=0=A,row=0=1
			sheet.addCell(labelCurl);
			//*********************************
			//get the response from the request
			//*********************************
			def holder = testRunner.testCase.getTestStepByName(RequestName).getPropertyValue("response");
			def slurper = new JsonSlurper();
			def ParsedJSONResponse = slurper.parseText(holder);
			log.info "				>>>>>>>>>>>>>>>>>> : ParsedJSONResponse :"+ParsedJSONResponse;
			String ResponseInString = holder.toString();
			//log.info "				>>>> ResponseInString : "+ResponseInString;
			String ParsedJSONResponseInString = ParsedJSONResponse.toString();
			log.info "				>>>>>>>>>>>>>>>>>> : Parsed JSON in String :" +ParsedJSONResponseInString;
			//***********************************************
			//condition to check if null response is recieved
			//***********************************************
			if(holder==null || holder=='')
			{
				/*
				if(NegativeTesting=="Y"){
						log.info "				>>>> : For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" got a null Response";
				continue;
				}*/
				
				alert.showInfoMessage("For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" got a null Response");
				log.info "				>>>> : For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" got a null Response";
				break stepCountLoop;
				//break;
			}

/*
			//preparing input to be put in map
 			String mapInputText = "";
 			mapInputText = ParsedJSONResponseInString;
 			mapInputText = mapInputText.substring(1, mapInputText.length() - 1);
 			if(mapInputText.contains("{"))
			{
				//mapInputText = mapInputText.replaceFirst("{", "");
				mapInputText = mapInputText.replace("{","[");
			}
			if(mapInputText.contains("}"))
			{
				//mapInputText = mapInputText.substring(0, mapInputText.length() - 1);
				mapInputText = mapInputText.replace("}","]");
			}

			log.info "				>>>>>>>>>>>>>>> mapInputText = "+mapInputText;
			//ParsedJSONResponseInString


			//converting string to map

			// Seperator ',' is specified here, to split string on this basis
			for(String keyValue : mapInputText.split(" *, *")) {        
			 
			// Here the each part is futher splitted taking in account the equal sign ':'  which demarcates the key
			// and valuefor the hashmap        
			String[] pairs = keyValue.split(" *: *", 2);    
			 
			// Those key and values are then put into hashmap     
			mapName.put(pairs[0], pairs.length == 1 ? "" : pairs[1]);
			
			}
*/
			
			
			/////mapName = mapInputText;
			
			mapName = ParsedJSONResponse;
			
			
			
			//mapName = ParsedJSONResponseInString;
			log.info "				>>>> mapContents : "+mapName;
			/*
			//globalMap.put("map"+mapNo,mapName);
			HashMap gbMap1 = [:];
			HashMap myMap = [:];
			myMap = ["request_id":290626627695, "api_status":1, "id":550575383612, "bank_name":"Four Oaks Bank & Trust Company", "account_number":"540126120766", "account_routing_number":"053112505", "account_type":"CHECKING", "linked_external_bank_account":["id":326878, "bank_account_number":"2352154", "bank_account_holder":"John", "bank_account_type":"SAVING", "bank_account_routing":"322271724"]];
			gbMap1.put('myKey',myMap);
			log.info "	Local GlobalMap Now looks like - "+gbMap1;
			refVal1 = (gbMap1.get('myKey')).get('id');
			log.info "	***********		refVal1 = "+refVal1;
			*/
			
			//globalMap.put('myKey',mapName);
			globalMap.put(mapNo,mapName);
			//globalMap.put(mapName,mapName);
			log.info "		GlobalMap Now looks like - "+globalMap;
			
			//referVal = (globalMap.get("1")).get('linked_external_bank_account').get('bank_account_holder');
			//referVal = globalMap.get(2);
			//log.info " inner map " + globalMap.get(mapNo);
			///referVal = (globalMap.get(mapNo)).get('linked_external_bank_account').get('linked_bank_account_reference_id');
			//referVal = (globalMap.get(1)).get('linked_external_bank_account').get('bank_account_holder');
			//log.info	"				>>>			>>>. 			>> referVal = "+referVal;
			//********************************************
			//Validating Response and creating result file
			//********************************************
			//Label label = new Label(1, iCountTestCase, ResponseInString); //column=0=A,row=0=1
			Label responseValue = new Label(7, iCounter1, ResponseInString);
			sheet.addCell(responseValue);
		
				//******************************
				//validating response assertions
				//******************************
				for(iCounter=1;iCounter<ResponseSchemaRowCount;iCounter++)
				{//******************start loop for Response Schema validation
				//flush2
				ParameterDataType = "";
				String requiredParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"';
						
					if(TestDataResponseSchema.getCell(1,iCounter).getContents() == "Y")
					{
						//log.info "          >>   YES  " +iCounter
						requiredParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"';
						log.info "				>>>>>>>>>>>>>>>>>> : requiredParameter :"+requiredParameter;
						if(!(ParsedJSONResponseInString.contains(requiredParameter)))
						{
							log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the mandatory parameter - "+TestDataResponseSchema.getCell(0,iCounter).getContents();
							String MandatoryParameterMissing = "The response does not contain the mandatory parameter - "+requiredParameter;
							//Label label2 = new Label(flagCount, iCountTestCase, MandatoryParameterMissing);
							Label label2 = new Label(flagCount, iCounter1, MandatoryParameterMissing);
							sheet.addCell(label2);
							flagCount = flagCount+1;
							//testRunner.fail
						}
					}
				
					
			//********************
			//validating datatypes
			//********************
			if(!(TestDataResponseSchema.getCell(2,iCounter).getContents().isEmpty()))
				{
					ParameterDataType="";
					//String ResponseParameter = TestDataResponseSchema.getCell(0,iCounter).getContents()
					ResponseParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"';
					ParameterDataType = TestDataResponseSchema.getCell(2,iCounter).getContents();
					////log.info  "				>>>>>>>>>>>>>>>>>> : ResponseParameter :"+ResponseParameter;
					////log.info  "				>>>>>>>>>>>>>>>>>> : ParameterDataType :"+ParameterDataType;
			ResponseParameter = ResponseParameter+'":';

					int IndexOfParam =  ParsedJSONResponseInString.lastIndexOf(ResponseParameter);
					int LengthOfParam = ResponseParameter.size();
			
			  if(IndexOfParam > -1)
			  {
			 	IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf(",", IndexOfParam);
				if(IndexOfSubsequentComma<1)
				{
					IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf("}", IndexOfParam);
					if(IndexOfSubsequentComma<1)
					{
						log.info "				>>>>>>>>>>>>>>>>>> : Could not find the value for the parameter : "+ResponseParameter;
					}
				}
				if(ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))
			 	{
			 		EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"));
					////log.info "				>>>> Enum Data Collection :"+EnumDataCollection;
			 		/*
			 		if(EnumDataCollection.matches("[,a-zA-Z]*"))
			 		{
			 			enumType = "String"
			 			log.info "Enum Value is String"
			 		}
			 		else
			 		{
			 			enumType = "Number"
			 			log.info "Enum Value is NOT String"
			 		}
			 		*/
			 		if(!(EnumDataCollection.matches("[0-9,]*")))
			 		{
			 			enumType = "String";
			 			log.info "Enum Value is String";
			 		}
			 		else
			 		{
			 			enumType = "Number";
			 			log.info "Enum Value is NOT String";
			 		}
			 	}
			
			 //if((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || (ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))) //********** **
			 // if(!((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || enumType=="String")) //********** **
			 	//if(!((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String"))) //********** **
			
			//Thread.sleep(500) 
			if(((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String"))) //********** **
			
			 {
			 	////log.info  "				>>>>>>>>>>>>>>>>>> : In STRING/DATE/ENUMstring BLOCK";
			 	///log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType;
			 	ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
				//ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
				log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText;
			 if(ResposeValueText.contains("}"))
			{
				ResposeValueText = ResposeValueText.replace("}","");
			}
			 if(ResposeValueText.contains("]"))
			{
				ResposeValueText = ResposeValueText.replace("]","");
			}
			 }
			 
			 else
			 {
			 	////log.info  "				>>>>>>>>>>>>>>>>>> : In NON -- STRING/DATE/ENUMstring BLOCK";
			 	////log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType;
			 	
			 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
			 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
				log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText;
			
			 if(ResposeValueText.contains("}"))
			{
				ResposeValueText = ResposeValueText.replace("}","");
			}
			 if(ResposeValueText.contains("]"))
			{
				ResposeValueText = ResposeValueText.replace("]","");
			}
			 }
			 //ResposeValueText = ParsedJSONResponseInString.substring(ParsedJSONResponseInString.indexOf(ResponseParameter)+LengthOfParam, (ParsedJSONResponseInString.indexOf(","))+(IndexOfParam));
			 //ResposeValueText = ParsedJSONResponseInString.substring((IndexOfParam+LengthOfParam+2),(IndexOfParam+LengthOfParam+2)+(ParsedJSONResponseInString.indexOf(",")))
			 //ResposeValueText = ParsedJSONResponseInString.substring((32),ParsedJSONResponseInString.indexOf(","))
			 //s.indexOf(")")
			 //log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :"+ResposeValueText
			// assert ResposeValueText.isNumber()
			
			//try{
			
			log.info "				>>>> The ResponseValueText is :"+ResposeValueText;
				
			if(ParameterDataType.toString().equalsIgnoreCase("String"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to STRING IF block"
				 String returnDataType = String.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : StringValue :"+returnDataType;
			}	
			if(ParameterDataType.toString().equalsIgnoreCase("Long"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to LONG IF block"
				//log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :" +ResposeValueText
				long returnDataType = Long.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : LongValue :"+returnDataType;
			}
			if(ParameterDataType.toString().equalsIgnoreCase("Int"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Int IF block"
				 int returnDataType = Integer.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : IntValue :"+returnDataType;
			}
			if(ParameterDataType.toString().equalsIgnoreCase("Float"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Float IF block"
				//log.info "				>>>>>>>>>>>>>>>>>> : FloatValue text "+ResposeValueText
				 float returnDataType = Float.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : FloatValue :"+returnDataType;
			}
			if(ParameterDataType.toString().equalsIgnoreCase("Boolean"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Boolean IF block"
				 boolean returnDataType = Boolean.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : BooleanValue :"+returnDataType;
				
			}
			if(ParameterDataType.toString().equalsIgnoreCase("Date"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Date IF block"
				 
				 SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
				 Date date = null;
				 date = format.parse(ResposeValueText);
				 //date returnDataType = date.valueOf(ResposeValueText)
				 log.info "				>>>>>>>>>>>>>>>>>> : DateValue  :"+date;
			}
			if(ParameterDataType.toString().toLowerCase().contains(("Enum").toLowerCase()))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
				EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"));
				log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection;
			
				if(!(EnumDataCollection.toString().toLowerCase().contains((ResposeValueText).toLowerCase())))
				{
					log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText";
				String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection;
				//Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
				Label label4 = new Label(flagCount, iCounter1, dataTypeIncorrect);
				sheet.addCell(label4);
				flagCount = flagCount+1;
				}
				/*
				String[] EnumData = EnumDataCollection.split(",")
				int sizeOfEnumData = EnumData.size()
				log.info "			>>>>>>>>>>>>>> sizeOfEnumData :"+sizeOfEnumData
				
				
				for(iCountOfEnumData=0;iCountOfEnumData<sizeOfEnumData;iCountOfEnumData++)
				{
				log.info "			>>>>>>> EnumData :"+EnumData[iCountOfEnumData]
				
				}
				 //date returnDataType = date.valueOf(ResposeValueText)
				 //log.info "        >>>>>>>>>.     EnumValue  "+returnDataType
				*/
			}
			
			
			
			
			/*
			}
			  catch(all)
			{
				log.info "             >>>>>>>>>> Some Exception Occured"
				String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
				Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
				sheet.addCell(label3);
				flagCount = flagCount+1
				
			//workbook.write()
			//workbook.close()
			
			}
			*/
			 //long.info "  >>>>>>>>>>>>>>>   "+bool
			 //ValueDataType = ResposeValueText.getClass()
			 //log.info " >>>>>>>>>>>> ValueDataType ="+ValueDataType
			
			  }
			
				}
			//******NOV-8*****// 
			
			//*****************************************************************8888888
			//*****************************************************************8888888
			//openEscrowopenEscrowParameterDataType = "";
			}//******************END loop for Response Schema validation
			
			
			
			///////////////////////////
			////??????????????/
			
			
			
			log.info "				>>>> ResponseColCount : "+ResponseColCount;
			for(iCountofResponse=1;iCountofResponse<ResponseColCount;iCountofResponse++)
			{
				//if(IsEmpty(TestDataResponse.getCell(iCounter,1).getContents()))
			
				if(!(TestDataResponse.getCell(iCountofResponse,iCountTestCase).getContents().isEmpty()))
				{
					//log.info " >>>>>>>>>>>>   not NULL"
					String ParamValueField = '"'+TestDataResponse.getCell(iCountofResponse,0).getContents()+'":"'+TestDataResponse.getCell(iCountofResponse,iCountTestCase).getContents()+'"';
					String ParamValueFieldForIntType = '"'+TestDataResponse.getCell(iCountofResponse,0).getContents()+'":'+TestDataResponse.getCell(iCountofResponse,iCountTestCase).getContents();
					log.info " >>>>>>>>>>>  ParamValueField is : "+ParamValueField ;
			//1
					
					if(!(ParsedJSONResponseInString.contains(ParamValueField))  && !(ParsedJSONResponseInString.contains(ParamValueFieldForIntType)) )
					{
						log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the value - "+ParamValueField;
						
						
						//log.info "           >>>>>>>> flag Count  "+flagCount
						//label1 = "label"+flagCount
						//Label label1 = new Label(0, 1, "TC_001"); //column=0=A,row=0=1
						//sheet.addCell(label1);
						
						//Label label+""+flagCount = new Label
						//Label label3 = new Label(flagCount, iCountTestCase, "The response does not contain the value - "+ParamValueField+"");
						Label label3 = new Label(flagCount, iCounter1, "The response does not contain the value - "+ParamValueField+"");
						sheet.addCell(label3);
						flagCount = flagCount+1;
					}
				}
			}
			
			
			
			
			
			////////////////////
			
			log.info "				>>>> flagCount is : "+flagCount;
			
			if(flagCount==8)
			{
				
				/*
				//Creating Writable font to be used in the response sheet
				WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
				//creating plain format to write data in excel sheet
			     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
				normalFormat.setBackground(jxl.format.Colour.GREEN);
				*/
				//log.info  "				>>>>>>>>>>>>>>>>>> : if loop - flagCount "+flagCount
				//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1,RequestName ,normalFormat); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label0002 = new Label(4, iCounter1,TestCaseID ,normalFormat); //column=0=A,row=0=1
				sheet.addCell(label0002);
				log.info "				>>>> flagCount If block because flagCount is : "+flagCount;
				// sheet.addCell(new jxl.write.Label(0,0,"User Name",normalFormat));
			}
			else{
				/*
				//Creating Writable font to be used in the response sheet
				WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
				//creating plain format to write data in excel sheet
			     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
				
				normalFormat2.setBackground(jxl.format.Colour.RED);
				*/
				//log.info  "				>>>>>>>>>>>>>>>>>> : else loop - flagCount "+flagCount
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1, RequestName,normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label0002 = new Label(4, iCounter1, TestCaseID,normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label0002);
				log.info "				>>>> flagCount else block because flagCount is : "+flagCount;
				//break ScenarioCountLoop:
			}	
			//?????????????
						
			
						/*
						}////************END loop for No of Test Cases
			
						//workbook.write();
						//workbook.close(); 
						}///Else end
					
			workbook.write();
			workbook.close(); 	
				}//END loop for number of steps in the scenario
			
			
			}//END loop for number of scenario sheets
				
			
			*/
			
			
			
			
			//***********************************Validating Response
			
			
			
			
			
			
			
			/*
			log.info "				>>>> Writing to excel.";
			workbook.write();
			workbook.close();			
			*/
						}//END loop for No of Test Cases
			
							
						 }//ELSE END
			log.info "				END loop for number of steps in the scenario";

			if(flagCount>8)
			{
				if(NegativeTesting=="Y")
				{
					continue;
				}
				else{
				log.info "Coming Out of this Scenario as the Step Failed";
				break stepCountLoop;
				}
			}
			}//END loop for number of steps in the scenario
			
			
			
			
			//log.info	"				>>>> EXIT HERE";
			//Emptying all Global hashmap
			globalMap = [:];
			//return;
			
			
			
				
			}//END loop for number of scenario sheets
			
			
			log.info "				>>>> Writing to excel.";
			workbook.write();
			workbook.close();
			
			}//END of try

			
			catch(FileNotFoundException f) 
			{
			   workbook.write();
			   workbook.close();
			   f.printStackTrace();
			   log.info "				>>>>>>>>>>>>>>>>>> : FILE NOT FOUND";
			   //alert.showInfoMessage("Hello World !","soapUI Warning !")
			   alert.showInfoMessage("Please Check the File Name and Location is Correct","FILE NOT FOUND");
			  
			}
			
			
			catch (NumberFormatException e)
			{
				log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : NumberFormatException";
				String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType;
				Label label3 = new Label(flagCount, iCounter1, dataTypeIncorrect);
				sheet.addCell(label3);
				flagCount = flagCount+1;

				WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
				 WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
				normalFormat2.setBackground(jxl.format.Colour.RED);
				
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1, RequestName, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label002 = new Label(4, iCounter1, TestCaseID, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label002);
				workbook.write();
				workbook.close();
			}
			catch(ParseException parseEx)
			{
				log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : ParseException";
				String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType;
				Label label3 = new Label(flagCount, iCounter1, dataTypeIncorrect);
				sheet.addCell(label3);
				flagCount = flagCount+1;

				WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
				 WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
				normalFormat2.setBackground(jxl.format.Colour.RED);
				
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1, RequestName, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label002 = new Label(4, iCounter1, TestCaseID, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label002);
				workbook.write();
				workbook.close();
			}
			catch(all)
			{
				
				//String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
				String Exception1 = "An Exception Occurred : "+all+"";
				log.info "				>>>>>>>>>>>>>>>>>> : Exception1 : "+Exception1;
				Label label5 = new Label(flagCount, iCounter1, Exception1);
				sheet.addCell(label5);
				flagCount = flagCount+1;

				WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
				WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
				normalFormat2.setBackground(jxl.format.Colour.RED);
				
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1, RequestName, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label002 = new Label(4, iCounter1, TestCaseID, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label002);
				
				workbook.write();
				workbook.close();
			
			}
			
			
			log.info "				>>>>>>>>>>>>>>>>>> : END of AutomationScenario Script";
			
/***********************************
 ***********************************
 * End of Automation Scenario Script
 ***********************************
 ***********************************
***********************************/]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriverV3.0"><con:settings/><con:config><script><![CDATA[
/***********************************************************************************************************************
 * *********************************************************************************************************************
 * AutomationScenario script - This script reads the scenario file and run the steps in the scenario.
 * The scenario file is an excel workbook where each scenario is plaNegativeTestingced in a sheet of the workbook.
 * The script reads the workbook and executes through all the scenarios present in the workbook.
 * 
 * The user is provided with the flexibility of choosing the scenarios to run during execution from the scenario excel.
 * Scenarios having RunSwitch=1 will be considered for execution and those having RunSwitch=0 will be ignored.
 * 
 * The steps in the scenario are the test cases created in the individual test data files for that request.
 * Both the scenario file and the testData files for individual api requests should be present at the same location.
 * After performing basic validations, each step in the scenario is executed (executing the mentioned Test Case from the mentioned Test Data sheet)
 * 
 * After successful execution of the scenarios a result file (excel) will get created in the same loccation where your scenario file is located. 
 * *********************************************************************************************************************
 * *********************************************************************************************************************
 */

 
import jxl.*;
import com.eviware.soapui.*;
import java.util.*;

import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder;

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;

import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;

//importing jars for DB connection
import com.eviware.soapui.support.XmlHolder
import groovy.sql.Sql;


log.info "				>>>>>>>>>>>>>>>>>> : Starting AutomationScenario Script";


//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet TestDataProp1;
Sheet TestDataValues1;
Sheet TestDataResponseSchema;
Sheet TestDataResponse;
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//****************************************************
//Array to separate and store cell contents based on |
//****************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//**********************************************************
//Couner for looping through number of steps in the scenario
//**********************************************************
int iCounter1;

String jobEnv="";
String issuerRightSignMail="";
String cfpRightSignMail="";
//************************
//starting try catch block
//************************
try{

	//***************************************************
	//Get the scenario file location. 
	//This can be passed as a parameter from commandline.
	//***************************************************
	//String TestScenarioFile = "C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\TeamTestData\\ScenarioTD\\ScenarioSheet2.xls"
	String TestScenarioFile = context.expand('${#Project#ScenarioFileLocation}');
	//***************************************************
	//Get the set No
	//This can be passed as a parameter from commandline.
	//***************************************************
	//String TestScenarioFile = 1;
	String SetNo = context.expand('${#Project#SetNo}');

	//Put GlobalParam NegativeTesting as Y when testing for unit test data for Error Codes.
	//This will continue the scenario even if a step in it fails
	String NegativeTesting = context.expand('${#Project#NegativeTesting}');
	log.info "NegativeTestingFlag = "+NegativeTesting;

	
				
	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	NoOfScenarioSheets = getSenarioSheets.size();
	log.info "				>>>> NoOfScenarioSheets : "+NoOfScenarioSheets;

		//************************************
		//Create workbook for writing response
		//************************************
		//log.info "				>>>> TestScenarioFile = "+TestScenarioFile;
 		int Length =  TestScenarioFile.lastIndexOf( '\\' );
 		int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
 		//log.info "				Length : "+Length;
 		//log.info "				Length2 : "+Length2;
 		String excelName = TestScenarioFile.substring(Length+1,Length2);
 		//log.info "				>>>> excelName - "+excelName;
 		String envName =  testRunner.testCase.getPropertyValue("p_job_env");
 		//log.info "				>>>> excelName - "+excelName;
 		String ResposeFileLocation = TestScenarioFile.substring(0,Length);
 		//Getting Current Time
     	 currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
	 	//log.info "				>>>>>>>>>>>>>>>>>> : time :"+currentTime
		//Getting location to create the TestResponseFile
		String workingDir = System.getProperty("user.dir");
		String ScenarioResponseFile = ResposeFileLocation + "\\"+envName+"-"+excelName+"-Response-" +currentTime+".xls";
 		log.info "				>>>>>>>>>>>>>>>>>> : ScenarioResponseFile :"+ScenarioResponseFile;
		//Creating Response Excel File
		workbook = Workbook.createWorkbook(new File(ScenarioResponseFile));

		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(sheetCount=1;sheetCount<NoOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();			
		log.info "				>>>> Reading Sheet : "+sheetName;

		
		/*
		//condition to check sheet name contains 'scenario'
		if(!(sheetName.toLowerCase().contains('scenario')))
		{
			alert.showInfoMessage("Sheet:"+(sheetCount+1)+"does not have name -Scenario"+(sheetCount+1));
			log.info "				>>>>: Sheet:"+(sheetCount+1)+"does not have name -Scenario"+(sheetCount+1);
			continue;
		}
		*/

		//*************************************************
		//condition to check RunSwitch. 
		//Only scenarios with RunSwitch 1 will be executed.
		//Changing RunSwitch to Set No
		//*************************************************
		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info "Scenario in sheet "+sheetName+" not set for execution";
			continue;
		}


		
			//Condition to check that if the Scenario is a SetUp scenario then remove all existing TestCase level properties.
			if(sheetName.toLowerCase().contains('setup'))
			{
			//***************************************
			//Removing all Test Case level Properties
			//***************************************
			alert.showInfoMessage("Verify you have updated these in SetUp scneario :\n1. Endpoint\n2. preSharedKey\n3. UniqueCfp UserName");
			//testRunner.runTestStepByName("RemoveTCProperties");
			
			}

		
		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);
	


					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "CURL"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);





	
		//****************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();
		log.info  "				>>>>>>>>>>>>>>>>>> : ScenarioRowCount:"+ScenarioRowCount;
		log.info  "				>>>>>>>>>>>>>>>>>> : ScenarioColCount:"+ScenarioColCount;
	
		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];

			//******************************************************
			//Starting loop for number of steps in the scenario
			//******************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);

			iCountFlag=0;
			log.info "				>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> : Reading Row No :"+(iCounter1+1);
			log.info "				>>>> ********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents();
			//************************************************
			//condition to check if the scenario step is empty
			//************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}
			////log.info "				>>>> Step Name is :"+SenarioSheet1.getCell(1,iCounter1).getContents();


			//****************************************************
			//Checking if step refers to complete RightSignProcess
			//****************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('rightsign')))
			{
			 	
			 	//******************************
			 	//Running Right Sign
			 	//****************************** 
			 	//String emailCredentials = SenarioSheet1.getCell(3,iCounter1).getContents().toString();
				//Calling func for Right Sign


			//Checking if the cell where email owner for right sign is provided is empty. Script will then take up the email owner from TC prop
			 if(SenarioSheet1.getCell(5,iCounter1).getContents().isEmpty())
			{
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('issuer')))
			{
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for ISSUER";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForIssuerCommon');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;	
			}
			else if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('cfp')))
			{
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for CFP";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForCfpCommon');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for CFP" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;
			}
			issuerRightSignMail = testRunner.testCase.getPropertyValue("p_issuerRightSignEmail");
			cfpRightSignMail = testRunner.testCase.getPropertyValue("p_cfpRightSignEmail");
			}
				
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa-angellist-issuer')) || (issuerRightSignMail.equalsIgnoreCase('qa-angellist-issuer')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for ISSUER of AngelList in QA";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForIssuer-AL-QA');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa-angellist-cfp')) || (cfpRightSignMail.equalsIgnoreCase('qa-angellist-cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for CFP for AngelList in QA";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForCfp-AL-QA');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for CFP" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}

			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta-angellist-cfp')) || (cfpRightSignMail.equalsIgnoreCase('beta-angellist-cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for CFP for AngelList in beta";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForCfp-AL-BETA');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for CFP" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta-angellist-issuer')) || (issuerRightSignMail.equalsIgnoreCase('beta-angellist-issuer')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for ISSUER of AngelList in BETA";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForIssuer-AL-BETA');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa-localstake-issuer')) || (issuerRightSignMail.equalsIgnoreCase('qa-localstake-issuer')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for ISSUER of LocalStake in QA";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForIssuer-LS-QA');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta-localstake-issuer')) || (issuerRightSignMail.equalsIgnoreCase('beta-localstake-issuer')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for ISSUER of LocalStake in BETA";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForIssuer-LS-BETA');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa-localstake-cfp')) || (cfpRightSignMail.equalsIgnoreCase('qa-localstake-cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for CFP of LocalStake in QA";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForCfp-LS-QA');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta-localstake-cfp')) || (cfpRightSignMail.equalsIgnoreCase('beta-localstake-cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for CFP of LocalStake in BETA";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForCfp-LS-BETA');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			//continue;
			}
/*
//************************************
			//Checking if step refers to complete RightSignProcess
			//************************************
			if((SenarioSheet1.getCell(1,iCounter1).getContents().toLowerCase().contains('rightsign')))
			{
			 	
			 	//******************************
			 	//Running Right Sign
			 	//****************************** 
			 	//String emailCredentials = SenarioSheet1.getCell(3,iCounter1).getContents().toString();
				//Calling func for Right Sign

				
			 	if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-2)+" is Completing Right Sign Process for CFP";
			 	testRunner.runTestStepByName('RightSignProcessForCfp');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(0, iCounter1,"Right Signature Process Completed" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			continue;
			}
*/			
			//************************************
			//Checking if step refers to Run a Job
			//************************************
			
			//Checking if the cell where env for runnning job is provided is empty. Script will then take up the job env from TC prop
			 if(SenarioSheet1.getCell(5,iCounter1).getContents().isEmpty())
				{
				jobEnv = testRunner.testCase.getPropertyValue("p_job_env");
				}
			
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('outbound')))
			{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Running Outbound job";
			 	//******************************
			 	//Running Four Oaks Outbound job
			 	//****************************** 
			 	
			 	
			 	
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta')) || (jobEnv.equalsIgnoreCase("beta")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-BETAOutbound');
			 	Thread.sleep(5000);
			 	log.info "				>>>> FourOaksOutBoundJob Executed in BETA";
			 	Label labeljobBetaOutbound = new Label(3, iCounter1,"job-FourOaksOutBound-Beta EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobBetaOutbound);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa')) || (jobEnv.equalsIgnoreCase("qa")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-QAOutbound');
			 	Thread.sleep(5000);
			 	log.info "				>>>> FourOaksOutBoundJob Executed in QA";
			 	Label labeljobQAOutbound = new Label(3, iCounter1,"job-FourOaksOutBound-QA EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAOutbound);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('reg')) || (jobEnv.equalsIgnoreCase("reg")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-REGOutbound');
			 	Thread.sleep(5000);
			 	log.info "				>>>> FourOaksOutBoundJob Executed in REG";
			 	Label labeljobQAOutbound = new Label(3, iCounter1,"job-FourOaksOutBound-REG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAOutbound);
			 	continue;
				}
				//STAGING JOBS (SANDBOX)
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('stg'))|| (jobEnv.equalsIgnoreCase("stg")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-STGOutbound');
			 	Thread.sleep(5000);
			 	log.info "				>>>> FourOaksOutBoundJob Executed in STAGING";
			 	Label labeljobQAOutbound = new Label(3, iCounter1,"job-FourOaksOutBound-STG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAOutbound);
			 	continue;
				}
				//Perf Jobs
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('perf'))|| (jobEnv.equalsIgnoreCase("perf")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-PERFOutbound');
			 	Thread.sleep(5000);
			 	log.info "				>>>> FourOaksOutBoundJob Executed in PERF";
			 	//Label //LabeljobBetaOutbound = new //Label(3, iCounter1,"job-FourOaksOutBound-Beta EXECUTED" ,//normalFormat); 
				//sheet.addCell(//LabeljobBetaOutbound);
			 	continue;
				}
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('draft')))
			{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Running Draft Realization job";
			 	//******************************
			 	//Running Four Oaks Outbound job
			 	//****************************** 
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta'))|| (jobEnv.equalsIgnoreCase("beta")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-BETARealizeDraft');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Draft Realization job Executed in BETA";
			 	Label labeljobBetaDraftRealization = new Label(3, iCounter1,"job-DraftRealization-Beta EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobBetaDraftRealization);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa'))|| (jobEnv.equalsIgnoreCase("qa")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-QARealizeDraft');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Draft Realization job Executed in QA";
			 	Label labeljobQADraftRealization = new Label(3, iCounter1,"job-DraftRealization-QA EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQADraftRealization);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('reg'))|| (jobEnv.equalsIgnoreCase("reg")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-REGRealizeDraft');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Draft Realization job Executed in REG";
			 	Label labeljobQADraftRealization = new Label(3, iCounter1,"job-DraftRealization-REG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQADraftRealization);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('stg'))|| (jobEnv.equalsIgnoreCase("stg")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-STGRealizeDraft');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Draft Realization job Executed in STAGING";
			 	Label labeljobQADraftRealization = new Label(3, iCounter1,"job-DraftRealization-STG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQADraftRealization);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('perf'))|| (jobEnv.equalsIgnoreCase("perf")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-PERFRealizeDraft');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Draft Realization job Executed in PERF";
			 	//Label //LabeljobBetaDraftRealization = new //Label(3, iCounter1,"job-DraftRealization-Beta EXECUTED" ,//normalFormat); 
				//sheet.addCell(//LabeljobBetaDraftRealization);
			 	continue;
				}
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('push')))
			{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Running Push Notification job";
			 	//******************************
			 	//Running Four Oaks Outbound job
			 	//****************************** 
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta'))|| (jobEnv.equalsIgnoreCase("beta")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-BETAPushNotification');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Push Notification job Executed in BETA";
			 	Label labeljobBetaPushNotification = new Label(3, iCounter1,"job-PushNotification-Beta EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobBetaPushNotification);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa'))|| (jobEnv.equalsIgnoreCase("qa")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-QAPushNotification');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Push Notification job Executed in QA";
			 	Label labeljobQAPushNotification = new Label(3, iCounter1,"job-PushNotification-QA EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAPushNotification);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('reg'))|| (jobEnv.equalsIgnoreCase("reg")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-REGPushNotification');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Push Notification job Executed in REG";
			 	Label labeljobQAPushNotification = new Label(3, iCounter1,"job-PushNotification-REG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAPushNotification);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('stg')) || (jobEnv.equalsIgnoreCase("stg")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-STGPushNotification');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Push Notification job Executed in STAGING";
			 	Label labeljobQAPushNotification = new Label(3, iCounter1,"job-PushNotification-STG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAPushNotification);
			 	continue;
				}
				
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('perf'))|| (jobEnv.equalsIgnoreCase("perf")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-PERFPushNotification');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Push Notification job Executed in PERF";
			 	//Label //LabeljobBetaPushNotification = new //Label(3, iCounter1,"job-PushNotification-Beta EXECUTED" ,//normalFormat); 
				//sheet.addCell(//LabeljobBetaPushNotification);
			 	continue;
				}
			}

/////////start java fw from here Mar 25
			
			else 
			{
			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;

			
			
			
			////mapName = "map"+mapNo;
			
			
			
			//mapName = mapNo
			//log.info "				>>>mapName is ="+mapName;
			//***************************
			//creating a dynamic hash map
			//***************************
			HashMap mapName= [:];
			////////////log.info "				>>>> map:"+mapName;
			//***********************************************************
			//get the contents from the cell containing the scenario step
			//***********************************************************
			//cellContents = SenarioSheet1.getCell(1,iCounter1).getContents();
		 	//log.info "			>>>>>>>> cellContents: "+cellContents;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents();

				//***************************************************************
				//Condition to check the stepName has correct API name and format
				//***************************************************************
				if(!((RequestName.contains('createInvestor')) || (RequestName.contains('getInvestorDetails')) || (RequestName.contains('getInvestorList')) || (RequestName.contains('submitAgreement')) || (RequestName.contains('verifyIdentity')) || (RequestName.contains('verifyAnswers')) || (RequestName.contains('createIssuer')) || (RequestName.contains('getIssuerDetail')) || (RequestName.contains('getIssuerList')) || (RequestName.contains('openEscrow')) || (RequestName.contains('fundAccount')) || (RequestName.contains('fundEscrow')) || (RequestName.contains('changeInvestorContribution')) || (RequestName.contains('cancelEscrow')) || (RequestName.contains('closeEscrow')) || (RequestName.contains('getEscrowDetails')) || (RequestName.contains('getEscrowList')) || (RequestName.contains('getActivityDetails')) || (RequestName.contains('updateEscrowAccount')) || (RequestName.contains('withdrawFunds')) || (RequestName.contains('transferFunds')) || (RequestName.contains('confirmWireTransfer')) || (RequestName.contains('disburseEscrow')) || (RequestName.contains('updateInvestmentLedger')) || (RequestName.contains('freezeInvestmentLedger')) || (RequestName.contains('createProceedsSchedules')) || (RequestName.contains('viewProceedsSchedules')) || (RequestName.contains('cancelProceedsSchedules')) || (RequestName.contains('getInvestmentLedger')) || (RequestName.contains('linkExternalAccount')) || (RequestName.contains('acceptEscrow')) || (RequestName.contains('completeCancelEscrow')) || (RequestName.contains('confirmDisburseEscrow')) || (RequestName.contains('completeEscrow')) || (RequestName.contains('verifyIdentityManually')) || (RequestName.contains('completeModifyEscrow')) || (RequestName.contains('getProceedsSchedules')) || (RequestName.contains('getActivity')) || (RequestName.contains('getLedger')) || (RequestName.contains('createCfp')) || (RequestName.contains('getCfpDetails')) || (RequestName.contains('SetUp'))))
				{
					alert.showInfoMessage("For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" does NOT contain a valid API reqeust name");
					log.info "				>>>> For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" does NOT contain a valid API reqeust name";
					//continue;
					break;
				}



				
				
				/*
				 * COMMENTING THIS PART BECAUSE CHANGING THE SCENARIO SHEET FORMAT
				 * instead of having api name and TCID in same cell, will have it in separate cells(separate columns) 
				  
				if(!((cellContents.contains("createInvestor|")) || (cellContents.contains("getInvestorDetails|")) || (cellContents.contains("getInvestorList|")) || (cellContents.contains("submitAgreement|")) || (cellContents.contains("verifyIdentity|")) || (cellContents.contains("verifyAnswers|")) || (cellContents.contains("createIssuer|")) || (cellContents.contains("getIssuerDetails|")) || (cellContents.contains("getIssuerList|")) || (cellContents.contains("openEscrow|")) || (cellContents.contains("fundAccount|")) || (cellContents.contains("fundEscrow|")) || (cellContents.contains("changeInvestorContribution|")) || (cellContents.contains("cancelEscrow|")) || (cellContents.contains("closeEscrow|")) || (cellContents.contains("getEscrowDetails|")) || (cellContents.contains("getEscrowList|")) || (cellContents.contains("getActivityDetails|")) || (cellContents.contains("updateEscrowAccount|")) || (cellContents.contains("withdrawFunds|")) || (cellContents.contains("transferFunds|")) || (cellContents.contains("confirmWireTransfer|")) || (cellContents.contains("disburseEscrow|")) || (cellContents.contains("updateInvestmentLedger|")) || (cellContents.contains("freezeInvestmentLedger|")) || (cellContents.contains("createProceedsSchedules|")) || (cellContents.contains("viewProceedsSchedules|")) || (cellContents.contains("cancelProceedsSchedules|")) || (cellContents.contains("getInvestmentLedger|")) || (cellContents.contains("linkExternalAccount|")) || (cellContents.contains("acceptEscrow|"))))
				{
					alert.showInfoMessage("For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-2)+" does NOT contain a valid API reqeust name");
					log.info "				>>>> For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-2)+" does NOT contain a valid API reqeust name";
					//continue;
					break;
				}
				//************************************
				//taking the cell contents in an array
				//************************************
			 	String[] TestDataRequestArray = cellContents.split("\\|");
				int TestDataRequestArraySize = TestDataRequestArray.size();
				if(TestDataRequestArraySize<2)
				{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-2)+" is not in proper format";
			 	continue;
			 	}
			 	//********************************
			 	//extracting request name and TCID
			 	//********************************
				String RequestName = TestDataRequestArray[0].trim();
				String TestCaseID = TestDataRequestArray[1].trim();
				log.info "				>>>> Request Name is :"+RequestName;
				log.info "				>>>> TCID is :"+TestCaseID;
				*/


				//Condition to check if stepName is 'SetUp' then bypass the below code
				if(RequestName=="SetUp")
				{
				
				
				//**********************************
				//Start condition for Setting Values
				//*********************************
				if(!(SenarioSheet1.getCell(6,iCounter1).getContents()==""))
				{

				if(SenarioSheet1.getCell(6,iCounter1).getContents().contains("="))
				{
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" is SETTING property values";
				//**************************************
				//Fetching the Set Values text from sheet
				//**************************************
				getSetValuesArray = SenarioSheet1.getCell(6,iCounter1).getContents();
				log.info "				>>>> getSetValuesArray: "+getSetValuesArray;
				String[] getSetValues = getSetValuesArray.split("\\,");
				int NoOfValuesToSet = getSetValues.size();

				//*********************************************************
				//Starting a loop for Setting all values in the properties
				//*********************************************************
				for(iCountofSetVal=0;iCountofSetVal<NoOfValuesToSet;iCountofSetVal++)
				{
					
				String RefTextVal = getSetValues[iCountofSetVal].trim();
				//log.info "				>>>> RefText+"+(iCountofSetVal+1)+" = "+getSetValues[iCountofSetVal];
				log.info "				>>>> RefText+"+(iCountofSetVal+1)+" = "+RefTextVal;
				
				String[] propValSet = RefTextVal.split("\\=");
				log.info "				>>>> propValSet : "+propValSet;
				int SizeOfPropValSet = propValSet.size();
				if(!(SizeOfPropValSet==2)){
					log.info "			>>>> Size of Prop Value Set is NOT 2 for : "+RefTextVal;
					alert.showInfoMessage("size of Prop Value Set is NOT 2 for : "+RefTextVal);
					continue;
				}
				String prop = propValSet[0];
				String val = propValSet[1];

				log.info "			>>> prop : "+prop;
				log.info "			>>> val : "+val;

				def checkIfPropAlreadyExist = testRunner.testCase.getPropertyValue(prop);

				if(checkIfPropAlreadyExist==null)
				{
					alert.showInfoMessage("The property "+prop+" does not already exist. New property will be created.");
					log.info "			>>>>	The property "+prop+" does not already exist. New property will be created.";
				}
				
				String referValToPut = "";

				if(val.contains("'"))
				{
				val = val.replace("'","");
				referValToPut = val;
				log.info"				 >>>>	referValToPut : "+referValToPut;
				}
				
log.info "				---------------------------------------------------";
log.info "				>>>> Putting Global Values for Test Case NOW :  "+prop+":"+referValToPut;	
testRunner.testCase.setPropertyValue(prop,referValToPut);






				
				}//end of for - for(iCountofSetVal=0;iCountofSetVal<NoOfValuesToSet;iCountofSetVal++)
				}//end of if - if(SenarioSheet1.getCell(6,iCounter1).getContents().contains("="))
				}//end of if - if(!(SenarioSheet1.getCell(6,iCounter1).getContents()==""))

				//**********************************
				//END condition for Setting Values
				//*********************************




					Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
					sheet.addCell(stepNoValue);

					Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
					sheet.addCell(descriptionValue);

					Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
					sheet.addCell(expectedValue);

					Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
					sheet.addCell(referencesValue);

					// add step name label with color
					Label label02 = new Label(3, iCounter1,RequestName ,normalFormat); //column=0=A,row=0=1
					sheet.addCell(label02);



				continue;
				}//END Condition to check if stepName is 'SetUp' then bypass the below code
				












				
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				//String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				//Test Data files for the API Request must be available in a folder named 'TestDataFiles' in the same location where scenario file is placed.
				String TestDataFile = TestDataFileLocation + "\\TestData\\"+RequestName+".xls";
				
				log.info "				>>>> TestDataFile is :"+TestDataFile;

				//****************************
				//Get the Test Data Excel File
				//****************************
				TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
				//*****************************************
				//Get the Sheet having Test Data Properties
				//*****************************************
				TestDataProp1 = TestDataWB.getSheet("Request Schema");
				//*************************************
				//Get the Sheet having Test Data Values
				//*************************************
				TestDataValues1 = TestDataWB.getSheet("Request Values");
				//Get the Sheet having Test Data Response Properties
				TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
				TestDataResponse = TestDataWB.getSheet("Response Values");
				//******************************************
				//Count Rows and Columns in Properties sheet
				//******************************************
				PropRowCount = TestDataProp1.getRows();
				PropColCount = TestDataProp1.getColumns();
				log.info "				>>>>>>>>>>>>>>>>>>>> : PropRowCount " +PropRowCount;
				//***********************************************
				//Count Rows and Columns in Response Schema sheet
				//***********************************************
				ResponseSchemaRowCount = TestDataResponseSchema.getRows();
				ResponseSchemaColCount = TestDataResponseSchema.getColumns();
				//log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount;
				//log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount;
				//****************************************
				//Count Rows and Columns in Response sheet
				//****************************************
				ResponseRowCount = TestDataResponse.getRows();
				ResponseColCount = TestDataResponse.getColumns();
				//log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount;
				//log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount;
				//Count Rows and Columns in Values sheet
				ValuesRowCount = TestDataValues1.getRows();
				ValuesColCount = TestDataValues1.getColumns();
				//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesRowCount " +ValuesRowCount;
				log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesColCount " +ValuesColCount;
				//log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount;
				//log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount;
	
				//****************************************************************************************
				//Condition to check the parameters present in RequestSchema = parameters in RequestValues
				//****************************************************************************************
				if(PropRowCount != (ValuesColCount-3))
				{
				workbook.write();
				workbook.close();
				alert.showInfoMessage("Mismatch in the count of Properties and Values for Scenario "+sheetName+" Step No " +(iCounter1-2)+"\n");
				log.info "				>>>>>>>>>>>>>>>>>>>> : Mismatch in the count of Properties and Values. "+sheetName+" Step No " +(iCounter1-2)+"\n";
				//return;
				break stepCountLoop;
				//break ScenarioCountLoop;
				}
				//***********************************************************************
				//********Iterating loop for No of Test Cases in Test Data Sheet*********
				//***********************************************************************
				for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
				{//************START loop for No of Test Cases
				
				//flush();
				ResponseParameter = "";
				ParameterDataType = "";
				EnumDataCollection = "";
				enumType="";
			
			
				
				if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
					//log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Test Case :"+TestCaseID;
					//iCountTestCase = iCountTestCase-1
					continue;
				}
			 	flagCount = 8;
			
					SenarioSheet1.getCell(1,iCounter1).getContents();

					/*
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "CURL"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);
					*/
					/*
					Label label00 = new Label(0, 2, "SenarioStep"); //column=0=A,row=0=1
					sheet.addCell(label00);
					Label label01 = new Label(1, 2, "TCID"); //column=0=A,row=0=1
					sheet.addCell(label01);

					Label labelDescriptionHeader = new Label(2, 2, "Description"); //column=0=A,row=0=1
					sheet.addCell(labelDescriptionHeader);
					Label labelExpectedHeader = new Label(3, 2, "Expected Result"); //column=0=A,row=0=1
					sheet.addCell(labelExpectedHeader);

					
					Label labelCurlHeader = new Label(4, 2, "Curl"); //column=0=A,row=0=1
					sheet.addCell(labelCurlHeader);
					
					Label labelTCID = new Label(5, 2, "Response"); //column=0=A,row=0=1
					sheet.addCell(labelTCID);
					*/

					Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
					sheet.addCell(stepNoValue);

					Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
					sheet.addCell(descriptionValue);

					Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
					sheet.addCell(expectedValue);

					Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
					sheet.addCell(referencesValue);
					
					/*
					Label labelTCDescription = new Label(2, iCounter1, TestDataValues1.getCell(1,iCountTestCase).getContents()); //column=0=A,row=0=1
					sheet.addCell(labelTCDescription);

					Label labelTCExpected = new Label(3, iCounter1, TestDataValues1.getCell(2,iCountTestCase).getContents()); //column=0=A,row=0=1
					sheet.addCell(labelTCExpected);
					*/

					
					log.info "				>>>>>>>>>>>>>>>>>> : STARTING TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
					//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
					//sheet.addCell(label02);
			
					//***************************************
					//Setting parameter values in the request
					//***************************************
					String key = "";
					String value = "";
					String requestData = "";
					for(iCounter=1;iCounter<(ValuesColCount-3);iCounter++)
					{
						//*****************************************************************
						//Taking values of parameter and its value from the Test Data sheet
						//*****************************************************************
						key = TestDataProp1.getCell(0,iCounter).getContents();
						value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents();
						//testRunner.testCase.getTestStepByName(RequestName).setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+2,iCountTestCase).getContents());
						testRunner.testCase.getTestStepByName(RequestName).setPropertyValue( key, value);
	
						if(value.contains(" "))
						{
							value = '"'+value+'"';
						}
						//**********************************************
						//Generating the curl request from key and value
						//**********************************************
						if(key=="email")
						{
							requestData = requestData+"--data-urlencode "+key+"="+value+" \\\n";
						}
						else{
						requestData = requestData+"-d "+key+"="+value+" \\\n";
						}
					
					}
					











				//*******************************************************************
				//Start condition for Getting Global properties and setting in Request
				//********************************************************************
				if(!(SenarioSheet1.getCell(7,iCounter1).getContents()==""))
				{

				if(SenarioSheet1.getCell(7,iCounter1).getContents().contains("="))
				{
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" is GETTING property values and SETTING in Request";
				//***************************************
				//Fetching the Set Values text from sheet
				//***************************************
				getGetValuesArray = SenarioSheet1.getCell(7,iCounter1).getContents();
				//log.info "				>>>> getSetValuesArray: "+getGetValuesArray;
				String[] getGetValues = getGetValuesArray.split("\\,");
				int NoOfValuesToGet = getGetValues.size();

				//********************************************************
				//Starting a loop for Setting all values in the properties
				//********************************************************
				for(iCountofGetVal=0;iCountofGetVal<NoOfValuesToGet;iCountofGetVal++)
				{
					
				String RefTextValtoGet = getGetValues[iCountofGetVal].trim();
				//log.info "				>>>> RefText+"+(iCountofSetVal+1)+" = "+getSetValues[iCountofSetVal];
				//log.info "				>>>> RefText+"+(iCountofGetVal+1)+" = "+RefTextValtoGet;
				
				String[] propValSettoGet = RefTextValtoGet.split("\\=");
				//log.info "				>>>> propValSettoGet : "+propValSettoGet;
				int SizeOfPropValSettoGet = propValSettoGet.size();
				if(!(SizeOfPropValSettoGet==2)){
					log.info "			>>>> Size of Prop Value Set to GET is NOT 2 for : "+RefTextValtoGet;
					alert.showInfoMessage("size of Prop Value Set to GET is NOT 2 for : "+RefTextValtoGet);
					continue;
				}
				String prop = propValSettoGet[0];
				String val = propValSettoGet[1];

				log.info "			>>> prop : "+prop;
				log.info "			>>> val : "+val;

				def valueToSet = testRunner.testCase.getPropertyValue(val);
				log.info "			>>>> Value to SET = "+valueToSet;
				if(valueToSet==null)
				{
					alert.showInfoMessage("The property "+val+" does NOT EXIST");
					log.info "			>>>>	The property "+val+" does NOT EXIST";
					continue;
				}
				
			testRunner.testCase.getTestStepByName(RequestName).setPropertyValue(prop, valueToSet);
				




				
				}//end of for - for(iCountofSetVal=0;iCountofSetVal<NoOfValuesToSet;iCountofSetVal++)
				}//end of if - if(SenarioSheet1.getCell(7,iCounter1).getContents().contains("="))
				}//end of if - if(!(SenarioSheet1.getCell(7,iCounter1).getContents()==""))



				//*******************************************************************
				//END condition for Getting Global properties and setting in Request
				//********************************************************************
























					
				//******************************
				//Start condition for References
				//******************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				///////log.info "				>>>> This scenario step has References";
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has References";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];
				
				
				
				//Checking if child references are made in the References
				String[] getReferenceSplittedByDot = RefText.split("\\.");
				int NoOfDotsInReferences = getReferenceSplittedByDot.size();
				String ReferringValue = "";
				String paramName = "";
				if(NoOfDotsInReferences>2)
				{
				log.info "			>>>>>>>>. came to if block NoOfDotsInReferences>2 ";
				int RefTextSize = RefText.size();
				int indexOfEqual =  RefText.lastIndexOf('=');
				int indexOfFirstDot =  RefText.indexOf('.');
				int indexOfFirstLastDot =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,indexOfEqual);
				log.info "				>>> paramName="+paramName;
				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(indexOfEqual+1,indexOfFirstDot);
				log.info "				>>> stepToRefer="+stepToRefer;
				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch1 =  RefText.substring(indexOfFirstDot+1,indexOfFirstLastDot);
				log.info "				>>> paramValueToFetch1="+paramValueToFetch1;

				String paramValueToFetch2 =  RefText.substring(indexOfFirstLastDot+1,RefTextSize);
				log.info "				>>> paramValueToFetch2="+paramValueToFetch2;


				//mapToRefer = "map"+stepToRefer;

				mapToRefer = stepToRefer;
				mapToRefer = Integer.parseInt(mapToRefer);
				
				//log.info "				>>>>Value from Global Map 1 : "+(globalMap.get("map"+stepToRefer)).get(paramValueToFetch)
				//log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(stepToRefer);
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(Integer.parseInt(stepToRefer));
				//String ReferringValue = globalMap.get(1);
				//log.info "				>>>>>>>>>>>>>>>>>. ReferringValue = "+ReferringValue;
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);
				log.info "				*********  ReferringValue = "+ReferringValue
				//String ReferringValue = (globalMap.get("map"+stepToRefer)).get(paramValueToFetch);
				//ReferringValue =  mapToRefer.get(paramValueToFetch);
				}
				
				
				
				
				else{
				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;
				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;
				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				////mapToRefer = "map"+stepToRefer;

				mapToRefer = Integer.parseInt(stepToRefer);
				
				//log.info "				>>>>Value from Global Map 1 : "+(globalMap.get("map"+stepToRefer)).get(paramValueToFetch)
				//log.info "				>>>> map "+stepToRefer+" = "+globalMap.get("map"+stepToRefer);
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
				////String ReferringValue = (globalMap.get("map"+stepToRefer)).get(paramValueToFetch);
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch);
				//ReferringValue =  mapToRefer.get(paramValueToFetch);
				}//end of Else
				
				log.info "				>>>> ReferringValue:"+ReferringValue;
				//log.info"					>>>> mapNameValue:"+mapToRefer.get(paramValueToFetch);
				//*****************************************
				//setting the referred value in the request
				//*****************************************
				testRunner.testCase.getTestStepByName(RequestName).setPropertyValue(paramName, ReferringValue);
				}
			}
			}//End condition for References

			
			//Start condition to check for overwriting values
			/**
			 * Commenting this out as is not required.[overwrite values]
			 * This takes value from the 4th column of the scenario sheet
			 * The values are given like - reference_id=123,maximum_funding_amount=1001
			 * this will overwrite the value of reference_id to 123 and maximum_funding_amount to 1001 before running the request.
			 */
			 /*
			//change row number to variable
			if(!(SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			if(SenarioSheet1.getCell(3,iCounter1).getContents().contains("="))
			{
				log.info "				>>>> This scenario step has Overwrite values";

				//for loop for no of overwirtes and updating overwritten value in request
				getOverwriteArray = SenarioSheet1.getCell(3,iCounter1).getContents();
				log.info "				>>>> getOverwriteArray: "+getOverwriteArray;


				String[] getOverwriteValues = getOverwriteArray.split("\\,");
				int NoOfOverwrites = getOverwriteValues.size();

				for(iCountOverwrite=0;iCountOverwrite<NoOfOverwrites;iCountOverwrite++)
				{
					//*********************
				String OverwriteText = getOverwriteValues[iCountOverwrite].trim();
				log.info "				>>>> OverwriteText+"+iCountOverwrite+" = "+getOverwriteValues[iCountOverwrite];
				//reference_id=123

				String[] overwriteTextArray = OverwriteText.split("\\=");

				//Get the parameter name 
				String overwriteParamName = overwriteTextArray[0];
				log.info "				>>> overwriteParamName="+overwriteParamName;
				
				String overwriteValue = overwriteTextArray[1];
				log.info "				>>> overwriteValue="+overwriteValue;
				testRunner.testCase.getTestStepByName(RequestName).setPropertyValue(overwriteParamName, overwriteValue);
				}	
			}
			}	*/
			//*******************************************************
			//Run the test request***********************************
			//Running the API Request with the Test Parameters-Values
			//*******************************************************
			log.info "				>>>> Executing Request.";
			testRunner.runTestStepByName(RequestName);
			//******************************************************************
			//creating the curl request with endpoint and logging to result file
			//******************************************************************
			String requestURL = context.httpMethod.getURI();
			//log.info "				>>>> requestURL : "+requestURL;
			requestData = "curl -k -v "+requestURL+" \\\n"+requestData;
			log.info "				>>>> New requestData : \n "+requestData;
			//
			//Logging the curl in result file
			Label labelCurl = new Label(6, iCounter1, requestData); //column=0=A,row=0=1
			sheet.addCell(labelCurl);
			//*********************************
			//get the response from the request
			//*********************************
			def holder = testRunner.testCase.getTestStepByName(RequestName).getPropertyValue("response");
			def slurper = new JsonSlurper();
			def ParsedJSONResponse = slurper.parseText(holder);
			log.info "				>>>>>>>>>>>>>>>>>> : ParsedJSONResponse :"+ParsedJSONResponse;
			String ResponseInString = holder.toString();
			//log.info "				>>>> ResponseInString : "+ResponseInString;
			String ParsedJSONResponseInString = ParsedJSONResponse.toString();
			log.info "				>>>>>>>>>>>>>>>>>> : Parsed JSON in String :" +ParsedJSONResponseInString;
			//***********************************************
			//condition to check if null response is recieved
			//***********************************************
			if(holder==null || holder=='')
			{
				/*
				if(NegativeTesting=="Y"){
						log.info "				>>>> : For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" got a null Response";
				continue;
				}*/
				
				alert.showInfoMessage("For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" got a null Response");
				log.info "				>>>> : For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" got a null Response";
				break stepCountLoop;
				//break;
			}

/*
			//preparing input to be put in map
 			String mapInputText = "";
 			mapInputText = ParsedJSONResponseInString;
 			mapInputText = mapInputText.substring(1, mapInputText.length() - 1);
 			if(mapInputText.contains("{"))
			{
				//mapInputText = mapInputText.replaceFirst("{", "");
				mapInputText = mapInputText.replace("{","[");
			}
			if(mapInputText.contains("}"))
			{
				//mapInputText = mapInputText.substring(0, mapInputText.length() - 1);
				mapInputText = mapInputText.replace("}","]");
			}

			log.info "				>>>>>>>>>>>>>>> mapInputText = "+mapInputText;
			//ParsedJSONResponseInString


			//converting string to map

			// Seperator ',' is specified here, to split string on this basis
			for(String keyValue : mapInputText.split(" *, *")) {        
			 
			// Here the each part is futher splitted taking in account the equal sign ':'  which demarcates the key
			// and valuefor the hashmap        
			String[] pairs = keyValue.split(" *: *", 2);    
			 
			// Those key and values are then put into hashmap     
			mapName.put(pairs[0], pairs.length == 1 ? "" : pairs[1]);
			
			}
*/
			
			
			/////mapName = mapInputText;
			
			mapName = ParsedJSONResponse;
			
			
			
			//mapName = ParsedJSONResponseInString;
			log.info "				>>>> mapContents : "+mapName;
			/*
			//globalMap.put("map"+mapNo,mapName);
			HashMap gbMap1 = [:];
			HashMap myMap = [:];
			myMap = ["request_id":290626627695, "api_status":1, "id":550575383612, "bank_name":"Four Oaks Bank & Trust Company", "account_number":"540126120766", "account_routing_number":"053112505", "account_type":"CHECKING", "linked_external_bank_account":["id":326878, "bank_account_number":"2352154", "bank_account_holder":"John", "bank_account_type":"SAVING", "bank_account_routing":"322271724"]];
			gbMap1.put('myKey',myMap);
			log.info "	Local GlobalMap Now looks like - "+gbMap1;
			refVal1 = (gbMap1.get('myKey')).get('id');
			log.info "	***********		refVal1 = "+refVal1;
			*/
			
			//globalMap.put('myKey',mapName);
			globalMap.put(mapNo,mapName);
			//globalMap.put(mapName,mapName);
			log.info "		GlobalMap Now looks like - "+globalMap;
			
			//referVal = (globalMap.get("1")).get('linked_external_bank_account').get('bank_account_holder');
			//referVal = globalMap.get(2);
			//log.info " inner map " + globalMap.get(mapNo);
			///referVal = (globalMap.get(mapNo)).get('linked_external_bank_account').get('linked_bank_account_reference_id');
			//referVal = (globalMap.get(1)).get('linked_external_bank_account').get('bank_account_holder');
			//log.info	"				>>>			>>>. 			>> referVal = "+referVal;
			//********************************************
			//Validating Response and creating result file
			//********************************************
			//Label label = new Label(1, iCountTestCase, ResponseInString); //column=0=A,row=0=1
			Label responseValue = new Label(7, iCounter1, ResponseInString);
			sheet.addCell(responseValue);















				


				//**********************************
				//Start condition for Setting Values
				//*********************************
				if(!(SenarioSheet1.getCell(6,iCounter1).getContents()==""))
				{

				if(SenarioSheet1.getCell(6,iCounter1).getContents().contains("="))
				{
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" is SETTING property values";
				//**************************************
				//Fetching the Set Values text from sheet
				//**************************************
				getSetValuesArray = SenarioSheet1.getCell(6,iCounter1).getContents();
				log.info "				>>>> getSetValuesArray: "+getSetValuesArray;
				String[] getSetValues = getSetValuesArray.split("\\,");
				int NoOfValuesToSet = getSetValues.size();

				//*********************************************************
				//Starting a loop for Setting all values in the properties
				//*********************************************************
				for(iCountofSetVal=0;iCountofSetVal<NoOfValuesToSet;iCountofSetVal++)
				{
					
				String RefTextVal = getSetValues[iCountofSetVal].trim();
				//log.info "				>>>> RefText+"+(iCountofSetVal+1)+" = "+getSetValues[iCountofSetVal];
				log.info "				>>>> RefText+"+(iCountofSetVal+1)+" = "+RefTextVal;
				
				String[] propValSet = RefTextVal.split("\\=");
				log.info "				>>>> propValSet : "+propValSet;
				int SizeOfPropValSet = propValSet.size();
				if(!(SizeOfPropValSet==2)){
					log.info "			>>>> Size of Prop Value Set is NOT 2 for : "+RefTextVal;
					alert.showInfoMessage("size of Prop Value Set is NOT 2 for : "+RefTextVal);
					continue;
				}
				String prop = propValSet[0];
				String val = propValSet[1];

				log.info "			>>> prop : "+prop;
				log.info "			>>> val : "+val;

				def checkIfPropAlreadyExist = testRunner.testCase.getPropertyValue(prop);

				if(checkIfPropAlreadyExist==null)
				{
					alert.showInfoMessage("The property "+prop+" does not already exist. New property will be created.");
					log.info "			>>>>	The property "+prop+" does not already exist. New property will be created.";
				}
				
String referValToPut = "";

if(val.contains("'"))
{
	val = val.replace("'","");
	referValToPut = val;
	log.info"				 >>>>	referValToPut : "+referValToPut;
}
else{
referValToPut = mapName.get(val);
log.info"				 >>>>	referValToPut : "+referValToPut;
}

if(referValToPut==null)
{
	log.info "    >>    NULL value found in response for "+prop;
	continue;
}
log.info "				---------------------------------------------------";
log.info "				>>>> Putting Global Values for Test Case NOW :  "+prop+":"+referValToPut;	
testRunner.testCase.setPropertyValue(prop,referValToPut);




				
				}//end of for - for(iCountofSetVal=0;iCountofSetVal<NoOfValuesToSet;iCountofSetVal++)
				}//end of if - if(SenarioSheet1.getCell(6,iCounter1).getContents().contains("="))
				}//end of if - if(!(SenarioSheet1.getCell(6,iCounter1).getContents()==""))

				//**********************************
				//END condition for Setting Values
				//*********************************
				














		
				//******************************
				//validating response assertions
				//******************************
				for(iCounter=1;iCounter<ResponseSchemaRowCount;iCounter++)
				{//******************start loop for Response Schema validation
				//flush2
				ParameterDataType = "";
				String requiredParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"';
						
					if(TestDataResponseSchema.getCell(1,iCounter).getContents() == "Y")
					{
						//log.info "          >>   YES  " +iCounter
						requiredParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"';
						log.info "				>>>>>>>>>>>>>>>>>> : requiredParameter :"+requiredParameter;
						if(!(ParsedJSONResponseInString.contains(requiredParameter)))
						{
							log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the mandatory parameter - "+TestDataResponseSchema.getCell(0,iCounter).getContents();
							String MandatoryParameterMissing = "The response does not contain the mandatory parameter - "+requiredParameter;
							//Label label2 = new Label(flagCount, iCountTestCase, MandatoryParameterMissing);
							Label label2 = new Label(flagCount, iCounter1, MandatoryParameterMissing);
							sheet.addCell(label2);
							flagCount = flagCount+1;
							//testRunner.fail
						}
					}
				
					
			//********************
			//validating datatypes
			//********************
			if(!(TestDataResponseSchema.getCell(2,iCounter).getContents().isEmpty()))
				{
					ParameterDataType="";
					//String ResponseParameter = TestDataResponseSchema.getCell(0,iCounter).getContents()
					ResponseParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"';
					ParameterDataType = TestDataResponseSchema.getCell(2,iCounter).getContents();
					////log.info  "				>>>>>>>>>>>>>>>>>> : ResponseParameter :"+ResponseParameter;
					////log.info  "				>>>>>>>>>>>>>>>>>> : ParameterDataType :"+ParameterDataType;
			ResponseParameter = ResponseParameter+'":';

					int IndexOfParam =  ParsedJSONResponseInString.lastIndexOf(ResponseParameter);
					int LengthOfParam = ResponseParameter.size();
			
			  if(IndexOfParam > -1)
			  {
			 	IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf(",", IndexOfParam);
				if(IndexOfSubsequentComma<1)
				{
					IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf("}", IndexOfParam);
					if(IndexOfSubsequentComma<1)
					{
						log.info "				>>>>>>>>>>>>>>>>>> : Could not find the value for the parameter : "+ResponseParameter;
					}
				}
				if(ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))
			 	{
			 		EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"));
					////log.info "				>>>> Enum Data Collection :"+EnumDataCollection;
			 		/*
			 		if(EnumDataCollection.matches("[,a-zA-Z]*"))
			 		{
			 			enumType = "String"
			 			log.info "Enum Value is String"
			 		}
			 		else
			 		{
			 			enumType = "Number"
			 			log.info "Enum Value is NOT String"
			 		}
			 		*/
			 		if(!(EnumDataCollection.matches("[0-9,]*")))
			 		{
			 			enumType = "String";
			 			log.info "Enum Value is String";
			 		}
			 		else
			 		{
			 			enumType = "Number";
			 			log.info "Enum Value is NOT String";
			 		}
			 	}
			
			 //if((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || (ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))) //********** **
			 // if(!((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || enumType=="String")) //********** **
			 	//if(!((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String"))) //********** **
			
			//Thread.sleep(500) 
			if(((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String"))) //********** **
			
			 {
			 	////log.info  "				>>>>>>>>>>>>>>>>>> : In STRING/DATE/ENUMstring BLOCK";
			 	///log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType;
			 	ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
				//ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
				log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText;
			 if(ResposeValueText.contains("}"))
			{
				ResposeValueText = ResposeValueText.replace("}","");
			}
			 if(ResposeValueText.contains("]"))
			{
				ResposeValueText = ResposeValueText.replace("]","");
			}
			 }
			 
			 else
			 {
			 	////log.info  "				>>>>>>>>>>>>>>>>>> : In NON -- STRING/DATE/ENUMstring BLOCK";
			 	////log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType;
			 	
			 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
			 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
				log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText;
			
			 if(ResposeValueText.contains("}"))
			{
				ResposeValueText = ResposeValueText.replace("}","");
			}
			 if(ResposeValueText.contains("]"))
			{
				ResposeValueText = ResposeValueText.replace("]","");
			}
			 }
			 //ResposeValueText = ParsedJSONResponseInString.substring(ParsedJSONResponseInString.indexOf(ResponseParameter)+LengthOfParam, (ParsedJSONResponseInString.indexOf(","))+(IndexOfParam));
			 //ResposeValueText = ParsedJSONResponseInString.substring((IndexOfParam+LengthOfParam+2),(IndexOfParam+LengthOfParam+2)+(ParsedJSONResponseInString.indexOf(",")))
			 //ResposeValueText = ParsedJSONResponseInString.substring((32),ParsedJSONResponseInString.indexOf(","))
			 //s.indexOf(")")
			 //log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :"+ResposeValueText
			// assert ResposeValueText.isNumber()
			
			//try{
			
			log.info "				>>>> The ResponseValueText is :"+ResposeValueText;
				
			if(ParameterDataType.toString().equalsIgnoreCase("String"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to STRING IF block"
				 String returnDataType = String.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : StringValue :"+returnDataType;
			}	
			if(ParameterDataType.toString().equalsIgnoreCase("Long"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to LONG IF block"
				//log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :" +ResposeValueText
				long returnDataType = Long.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : LongValue :"+returnDataType;
			}
			if(ParameterDataType.toString().equalsIgnoreCase("Int"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Int IF block"
				 int returnDataType = Integer.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : IntValue :"+returnDataType;
			}
			if(ParameterDataType.toString().equalsIgnoreCase("Float"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Float IF block"
				//log.info "				>>>>>>>>>>>>>>>>>> : FloatValue text "+ResposeValueText
				 float returnDataType = Float.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : FloatValue :"+returnDataType;
			}
			if(ParameterDataType.toString().equalsIgnoreCase("Boolean"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Boolean IF block"
				 boolean returnDataType = Boolean.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : BooleanValue :"+returnDataType;
				
			}
			if(ParameterDataType.toString().equalsIgnoreCase("Date"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Date IF block"
				 
				 SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
				 Date date = null;
				 date = format.parse(ResposeValueText);
				 //date returnDataType = date.valueOf(ResposeValueText)
				 log.info "				>>>>>>>>>>>>>>>>>> : DateValue  :"+date;
			}
			if(ParameterDataType.toString().toLowerCase().contains(("Enum").toLowerCase()))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
				EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"));
				log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection;
			
				if(!(EnumDataCollection.toString().toLowerCase().contains((ResposeValueText).toLowerCase())))
				{
					log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText";
				String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection;
				//Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
				Label label4 = new Label(flagCount, iCounter1, dataTypeIncorrect);
				sheet.addCell(label4);
				flagCount = flagCount+1;
				}
				/*
				String[] EnumData = EnumDataCollection.split(",")
				int sizeOfEnumData = EnumData.size()
				log.info "			>>>>>>>>>>>>>> sizeOfEnumData :"+sizeOfEnumData
				
				
				for(iCountOfEnumData=0;iCountOfEnumData<sizeOfEnumData;iCountOfEnumData++)
				{
				log.info "			>>>>>>> EnumData :"+EnumData[iCountOfEnumData]
				
				}
				 //date returnDataType = date.valueOf(ResposeValueText)
				 //log.info "        >>>>>>>>>.     EnumValue  "+returnDataType
				*/
			}
			
			
			
			
			/*
			}
			  catch(all)
			{
				log.info "             >>>>>>>>>> Some Exception Occured"
				String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
				Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
				sheet.addCell(label3);
				flagCount = flagCount+1
				
			//workbook.write()
			//workbook.close()
			
			}
			*/
			 //long.info "  >>>>>>>>>>>>>>>   "+bool
			 //ValueDataType = ResposeValueText.getClass()
			 //log.info " >>>>>>>>>>>> ValueDataType ="+ValueDataType
			
			  }
			
				}
			//******NOV-8*****// 
			
			//*****************************************************************8888888
			//*****************************************************************8888888
			//openEscrowopenEscrowParameterDataType = "";
			}//******************END loop for Response Schema validation
			
			
			
			///////////////////////////
			////??????????????/
			
			
			
			log.info "				>>>> ResponseColCount : "+ResponseColCount;
			for(iCountofResponse=1;iCountofResponse<ResponseColCount;iCountofResponse++)
			{
				//if(IsEmpty(TestDataResponse.getCell(iCounter,1).getContents()))
			
				if(!(TestDataResponse.getCell(iCountofResponse,iCountTestCase).getContents().isEmpty()))
				{
					//log.info " >>>>>>>>>>>>   not NULL"
					String ParamValueField = '"'+TestDataResponse.getCell(iCountofResponse,0).getContents()+'":"'+TestDataResponse.getCell(iCountofResponse,iCountTestCase).getContents()+'"';
					String ParamValueFieldForIntType = '"'+TestDataResponse.getCell(iCountofResponse,0).getContents()+'":'+TestDataResponse.getCell(iCountofResponse,iCountTestCase).getContents();
					log.info " >>>>>>>>>>>  ParamValueField is : "+ParamValueField ;
			//1
					
					if(!(ParsedJSONResponseInString.contains(ParamValueField))  && !(ParsedJSONResponseInString.contains(ParamValueFieldForIntType)) )
					{
						log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the value - "+ParamValueField;
						
						
						//log.info "           >>>>>>>> flag Count  "+flagCount
						//label1 = "label"+flagCount
						//Label label1 = new Label(0, 1, "TC_001"); //column=0=A,row=0=1
						//sheet.addCell(label1);
						
						//Label label+""+flagCount = new Label
						//Label label3 = new Label(flagCount, iCountTestCase, "The response does not contain the value - "+ParamValueField+"");
						Label label3 = new Label(flagCount, iCounter1, "The response does not contain the value - "+ParamValueField+"");
						sheet.addCell(label3);
						flagCount = flagCount+1;
					}
				}
			}
			
			
			
			
			
			////////////////////
			
			log.info "				>>>> flagCount is : "+flagCount;
			
			if(flagCount==8)
			{
				
				/*
				//Creating Writable font to be used in the response sheet
				WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
				//creating plain format to write data in excel sheet
			     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
				normalFormat.setBackground(jxl.format.Colour.GREEN);
				*/
				//log.info  "				>>>>>>>>>>>>>>>>>> : if loop - flagCount "+flagCount
				//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1,RequestName ,normalFormat); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label0002 = new Label(4, iCounter1,TestCaseID ,normalFormat); //column=0=A,row=0=1
				sheet.addCell(label0002);
				log.info "				>>>> flagCount If block because flagCount is : "+flagCount;
				// sheet.addCell(new jxl.write.Label(0,0,"User Name",normalFormat));
			}
			else{
				/*
				//Creating Writable font to be used in the response sheet
				WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
				//creating plain format to write data in excel sheet
			     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
				
				normalFormat2.setBackground(jxl.format.Colour.RED);
				*/
				//log.info  "				>>>>>>>>>>>>>>>>>> : else loop - flagCount "+flagCount
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1, RequestName,normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label0002 = new Label(4, iCounter1, TestCaseID,normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label0002);
				log.info "				>>>> flagCount else block because flagCount is : "+flagCount;
				//break ScenarioCountLoop:
			}	
			//?????????????
						
			
						/*
						}////************END loop for No of Test Cases
			
						//workbook.write();
						//workbook.close(); 
						}///Else end
					
			workbook.write();
			workbook.close(); 	
				}//END loop for number of steps in the scenario
			
			
			}//END loop for number of scenario sheets
				
			
			*/
			
			
			
			
			//***********************************Validating Response
			
			
			
			
			
			
			
			/*
			log.info "				>>>> Writing to excel.";
			workbook.write();
			workbook.close();			
			*/
						}//END loop for No of Test Cases
			
							
						 }//ELSE END
			log.info "				END loop for number of steps in the scenario";

			if(flagCount>8)
			{
				if(NegativeTesting=="Y")
				{
					continue;
				}
				else{
				log.info "Coming Out of this Scenario as the Step Failed";
				break stepCountLoop;
				}
			}
			}//END loop for number of steps in the scenario
			
			
			
			
			//log.info	"				>>>> EXIT HERE";
			//Emptying all Global hashmap
			globalMap = [:];
			//return;
			
			
			
				
			}//END loop for number of scenario sheets
			
			
			log.info "				>>>> Writing to excel.";
			workbook.write();
			workbook.close();
			
			}//END of try

			
			catch(FileNotFoundException f) 
			{
			   workbook.write();
			   workbook.close();
			   f.printStackTrace();
			   log.info "				>>>>>>>>>>>>>>>>>> : FILE NOT FOUND";
			   //alert.showInfoMessage("Hello World !","soapUI Warning !")
			   alert.showInfoMessage("Please Check the File Name and Location is Correct","FILE NOT FOUND");
			  
			}
			
			
			catch (NumberFormatException e)
			{
				log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : NumberFormatException";
				String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType;
				Label label3 = new Label(flagCount, iCounter1, dataTypeIncorrect);
				sheet.addCell(label3);
				flagCount = flagCount+1;

				WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
				 WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
				normalFormat2.setBackground(jxl.format.Colour.RED);
				
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1, RequestName, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label002 = new Label(4, iCounter1, TestCaseID, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label002);
				workbook.write();
				workbook.close();
			}
			catch(ParseException parseEx)
			{
				log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : ParseException";
				String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType;
				Label label3 = new Label(flagCount, iCounter1, dataTypeIncorrect);
				sheet.addCell(label3);
				flagCount = flagCount+1;

				WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
				 WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
				normalFormat2.setBackground(jxl.format.Colour.RED);
				
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1, RequestName, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label002 = new Label(4, iCounter1, TestCaseID, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label002);
				workbook.write();
				workbook.close();
			}
			catch(all)
			{
				
				//String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
				String Exception1 = "An Exception Occurred : "+all+"";
				log.info "				>>>>>>>>>>>>>>>>>> : Exception1 : "+Exception1;
				Label label5 = new Label(flagCount, iCounter1, Exception1);
				sheet.addCell(label5);
				flagCount = flagCount+1;

				WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
				WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
				normalFormat2.setBackground(jxl.format.Colour.RED);
				
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1, RequestName, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label002 = new Label(4, iCounter1, TestCaseID, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label002);
				
				workbook.write();
				workbook.close();
			
			}
			
			
			log.info "				>>>>>>>>>>>>>>>>>> : END of AutomationScenario Script";
			
/***********************************
 ***********************************
 * End of Automation Scenario Script
 ***********************************
 ***********************************
***********************************/]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationScenarioApr12" disabled="true"><con:settings/><con:config><script><![CDATA[
/***********************************************************************************************************************
 * *********************************************************************************************************************
 * AutomationScenario script - This script reads the scenario file and run the steps in the scenario.
 * The scenario file is an excel workbook where each scenario is plaNegativeTestingced in a sheet of the workbook.
 * The script reads the workbook and executes through all the scenarios present in the workbook.
 * 
 * The user is provided with the flexibility of choosing the scenarios to run during execution from the scenario excel.
 * Scenarios having RunSwitch=1 will be considered for execution and those having RunSwitch=0 will be ignored.
 * 
 * The steps in the scenario are the test cases created in the individual test data files for that request.
 * Both the scenario file and the testData files for individual api requests should be present at the same location.
 * After performing basic validations, each step in the scenario is executed (executing the mentioned Test Case from the mentioned Test Data sheet)
 * 
 * After successful execution of the scenarios a result file (excel) will get created in the same loccation where your scenario file is located. 
 * *********************************************************************************************************************
 * *********************************************************************************************************************
 */

 
import jxl.*;
import com.eviware.soapui.*;
import java.util.*;

import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder;

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;

import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;

//importing jars for DB connection
import com.eviware.soapui.support.XmlHolder
import groovy.sql.Sql;


log.info "				>>>>>>>>>>>>>>>>>> : Starting AutomationScenario Script";


//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet TestDataProp1;
Sheet TestDataValues1;
Sheet TestDataResponseSchema;
Sheet TestDataResponse;
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//****************************************************
//Array to separate and store cell contents based on |
//****************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//**********************************************************
//Couner for looping through number of steps in the scenario
//**********************************************************
int iCounter1;

String jobEnv="";
String issuerRightSignMail="";
String cfpRightSignMail="";
//************************
//starting try catch block
//************************
try{

	//***************************************************
	//Get the scenario file location. 
	//This can be passed as a parameter from commandline.
	//***************************************************
	//String TestScenarioFile = "C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\TeamTestData\\ScenarioTD\\ScenarioSheet2.xls"
	String TestScenarioFile = context.expand('${#Project#ScenarioFileLocation}');
	//***************************************************
	//Get the set No
	//This can be passed as a parameter from commandline.
	//***************************************************
	//String TestScenarioFile = 1;
	String SetNo = context.expand('${#Project#SetNo}');

	//Put GlobalParam NegativeTesting as Y when testing for unit test data for Error Codes.
	//This will continue the scenario even if a step in it fails
	String NegativeTesting = context.expand('${#Project#NegativeTesting}');
	log.info "NegativeTestingFlag = "+NegativeTesting;

	
				
	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	NoOfScenarioSheets = getSenarioSheets.size();
	log.info "				>>>> NoOfScenarioSheets : "+NoOfScenarioSheets;

		//************************************
		//Create workbook for writing response
		//************************************
		//log.info "				>>>> TestScenarioFile = "+TestScenarioFile;
 		int Length =  TestScenarioFile.lastIndexOf( '\\' );
 		int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
 		//log.info "				Length : "+Length;
 		//log.info "				Length2 : "+Length2;
 		String excelName = TestScenarioFile.substring(Length+1,Length2);
 		//log.info "				>>>> excelName - "+excelName;
 		String ResposeFileLocation = TestScenarioFile.substring(0,Length);
 		//Getting Current Time
     	 currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
	 	//log.info "				>>>>>>>>>>>>>>>>>> : time :"+currentTime
		//Getting location to create the TestResponseFile
		String workingDir = System.getProperty("user.dir");
		String ScenarioResponseFile = ResposeFileLocation + "\\"+excelName+"-Response-" +currentTime+".xls";
		log.info "				>>>>>>>>>>>>>>>>>> : ScenarioResponseFile :"+ScenarioResponseFile;
		//Creating Response Excel File
		workbook = Workbook.createWorkbook(new File(ScenarioResponseFile));

		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(sheetCount=1;sheetCount<NoOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();			
		log.info "				>>>> Reading Sheet : "+sheetName;

		
		/*
		//condition to check sheet name contains 'scenario'
		if(!(sheetName.toLowerCase().contains('scenario')))
		{
			alert.showInfoMessage("Sheet:"+(sheetCount+1)+"does not have name -Scenario"+(sheetCount+1));
			log.info "				>>>>: Sheet:"+(sheetCount+1)+"does not have name -Scenario"+(sheetCount+1);
			continue;
		}
		*/

		//*************************************************
		//condition to check RunSwitch. 
		//Only scenarios with RunSwitch 1 will be executed.
		//Changing RunSwitch to Set No
		//*************************************************
		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info "Scenario in sheet "+sheetName+" not set for execution";
			continue;
		}


		
			//Condition to check that if the Scenario is a SetUp scenario then remove all existing TestCase level properties.
			if(sheetName.toLowerCase().contains('setup'))
			{
			//***************************************
			//Removing all Test Case level Properties
			//***************************************
			alert.showInfoMessage("Verify you have updated these in SetUp scneario :\n1. Endpoint\n2. preSharedKey\n3. UniqueCfp UserName");
			testRunner.runTestStepByName("RemoveTCProperties");
			
			}

		
		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);
	


					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "CURL"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);





	
		//****************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();
		log.info  "				>>>>>>>>>>>>>>>>>> : ScenarioRowCount:"+ScenarioRowCount;
		log.info  "				>>>>>>>>>>>>>>>>>> : ScenarioColCount:"+ScenarioColCount;
	
		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];

			//******************************************************
			//Starting loop for number of steps in the scenario
			//******************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);

			iCountFlag=0;
			log.info "				>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> : Reading Row No :"+(iCounter1+1);
			log.info "				>>>> ********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents();
			//************************************************
			//condition to check if the scenario step is empty
			//************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}
			////log.info "				>>>> Step Name is :"+SenarioSheet1.getCell(1,iCounter1).getContents();


			//****************************************************
			//Checking if step refers to complete RightSignProcess
			//****************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('rightsign')))
			{
			 	
			 	//******************************
			 	//Running Right Sign
			 	//****************************** 
			 	//String emailCredentials = SenarioSheet1.getCell(3,iCounter1).getContents().toString();
				//Calling func for Right Sign


			//Checking if the cell where email owner for right sign is provided is empty. Script will then take up the email owner from TC prop
			 if(SenarioSheet1.getCell(5,iCounter1).getContents().isEmpty())
			{
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('issuer')))
			{
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for ISSUER";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForIssuerCommon');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;	
			}
			else if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('cfp')))
			{
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for CFP";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForCfpCommon');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for CFP" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;
			}
			issuerRightSignMail = testRunner.testCase.getPropertyValue("p_issuerRightSignEmail");
			cfpRightSignMail = testRunner.testCase.getPropertyValue("p_cfpRightSignEmail");
			}
				
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa-angellist-issuer')) || (issuerRightSignMail.equalsIgnoreCase('qa-angellist-issuer')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for ISSUER of AngelList in QA";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForIssuer-AL-QA');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa-angellist-cfp')) || (cfpRightSignMail.equalsIgnoreCase('qa-angellist-cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for CFP for AngelList in QA";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForCfp-AL-QA');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for CFP" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}

			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta-angellist-cfp')) || (cfpRightSignMail.equalsIgnoreCase('beta-angellist-cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for CFP for AngelList in beta";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForCfp-AL-BETA');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for CFP" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta-angellist-issuer')) || (issuerRightSignMail.equalsIgnoreCase('beta-angellist-issuer')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for ISSUER of AngelList in BETA";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForIssuer-AL-BETA');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa-localstake-issuer')) || (issuerRightSignMail.equalsIgnoreCase('qa-localstake-issuer')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for ISSUER of LocalStake in QA";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForIssuer-LS-QA');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta-localstake-issuer')) || (issuerRightSignMail.equalsIgnoreCase('beta-localstake-issuer')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for ISSUER of LocalStake in BETA";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForIssuer-LS-BETA');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa-localstake-cfp')) || (cfpRightSignMail.equalsIgnoreCase('qa-localstake-cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for CFP of LocalStake in QA";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForCfp-LS-QA');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta-localstake-cfp')) || (cfpRightSignMail.equalsIgnoreCase('beta-localstake-cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for CFP of LocalStake in BETA";
			 	Thread.sleep(6000);
			 	testRunner.runTestStepByName('RightSignProcessForCfp-LS-BETA');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			//continue;
			}
/*
//************************************
			//Checking if step refers to complete RightSignProcess
			//************************************
			if((SenarioSheet1.getCell(1,iCounter1).getContents().toLowerCase().contains('rightsign')))
			{
			 	
			 	//******************************
			 	//Running Right Sign
			 	//****************************** 
			 	//String emailCredentials = SenarioSheet1.getCell(3,iCounter1).getContents().toString();
				//Calling func for Right Sign

				
			 	if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-2)+" is Completing Right Sign Process for CFP";
			 	testRunner.runTestStepByName('RightSignProcessForCfp');
				Thread.sleep(6000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(0, iCounter1,"Right Signature Process Completed" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			continue;
			}
*/			
			//************************************
			//Checking if step refers to Run a Job
			//************************************
			
			//Checking if the cell where env for runnning job is provided is empty. Script will then take up the job env from TC prop
			 if(SenarioSheet1.getCell(5,iCounter1).getContents().isEmpty())
				{
				jobEnv = testRunner.testCase.getPropertyValue("p_job_env");
				}
			
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('outbound')))
			{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Running Outbound job";
			 	//******************************
			 	//Running Four Oaks Outbound job
			 	//****************************** 
			 	
			 	
			 	
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta')) || (jobEnv.equalsIgnoreCase("beta")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-BETAOutbound');
			 	Thread.sleep(5000);
			 	log.info "				>>>> FourOaksOutBoundJob Executed in BETA";
			 	Label labeljobBetaOutbound = new Label(3, iCounter1,"job-FourOaksOutBound-Beta EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobBetaOutbound);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa')) || (jobEnv.equalsIgnoreCase("qa")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-QAOutbound');
			 	Thread.sleep(5000);
			 	log.info "				>>>> FourOaksOutBoundJob Executed in QA";
			 	Label labeljobQAOutbound = new Label(3, iCounter1,"job-FourOaksOutBound-QA EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAOutbound);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('reg')) || (jobEnv.equalsIgnoreCase("reg")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-REGOutbound');
			 	Thread.sleep(5000);
			 	log.info "				>>>> FourOaksOutBoundJob Executed in REG";
			 	Label labeljobQAOutbound = new Label(3, iCounter1,"job-FourOaksOutBound-REG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAOutbound);
			 	continue;
				}
				//STAGING JOBS (SANDBOX)
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('stg'))|| (jobEnv.equalsIgnoreCase("stg")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-STGOutbound');
			 	Thread.sleep(5000);
			 	log.info "				>>>> FourOaksOutBoundJob Executed in STAGING";
			 	Label labeljobQAOutbound = new Label(3, iCounter1,"job-FourOaksOutBound-STG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAOutbound);
			 	continue;
				}
				//Perf Jobs
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('perf'))|| (jobEnv.equalsIgnoreCase("perf")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-PERFOutbound');
			 	Thread.sleep(5000);
			 	log.info "				>>>> FourOaksOutBoundJob Executed in PERF";
			 	//Label //LabeljobBetaOutbound = new //Label(3, iCounter1,"job-FourOaksOutBound-Beta EXECUTED" ,//normalFormat); 
				//sheet.addCell(//LabeljobBetaOutbound);
			 	continue;
				}
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('draft')))
			{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Running Draft Realization job";
			 	//******************************
			 	//Running Four Oaks Outbound job
			 	//****************************** 
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta'))|| (jobEnv.equalsIgnoreCase("beta")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-BETARealizeDraft');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Draft Realization job Executed in BETA";
			 	Label labeljobBetaDraftRealization = new Label(3, iCounter1,"job-DraftRealization-Beta EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobBetaDraftRealization);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa'))|| (jobEnv.equalsIgnoreCase("qa")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-QARealizeDraft');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Draft Realization job Executed in QA";
			 	Label labeljobQADraftRealization = new Label(3, iCounter1,"job-DraftRealization-QA EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQADraftRealization);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('reg'))|| (jobEnv.equalsIgnoreCase("reg")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-REGRealizeDraft');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Draft Realization job Executed in REG";
			 	Label labeljobQADraftRealization = new Label(3, iCounter1,"job-DraftRealization-REG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQADraftRealization);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('stg'))|| (jobEnv.equalsIgnoreCase("stg")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-STGRealizeDraft');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Draft Realization job Executed in STAGING";
			 	Label labeljobQADraftRealization = new Label(3, iCounter1,"job-DraftRealization-STG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQADraftRealization);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('perf'))|| (jobEnv.equalsIgnoreCase("perf")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-PERFRealizeDraft');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Draft Realization job Executed in PERF";
			 	//Label //LabeljobBetaDraftRealization = new //Label(3, iCounter1,"job-DraftRealization-Beta EXECUTED" ,//normalFormat); 
				//sheet.addCell(//LabeljobBetaDraftRealization);
			 	continue;
				}
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('push')))
			{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Running Push Notification job";
			 	//******************************
			 	//Running Four Oaks Outbound job
			 	//****************************** 
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta'))|| (jobEnv.equalsIgnoreCase("beta")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-BETAPushNotification');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Push Notification job Executed in BETA";
			 	Label labeljobBetaPushNotification = new Label(3, iCounter1,"job-PushNotification-Beta EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobBetaPushNotification);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa'))|| (jobEnv.equalsIgnoreCase("qa")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-QAPushNotification');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Push Notification job Executed in QA";
			 	Label labeljobQAPushNotification = new Label(3, iCounter1,"job-PushNotification-QA EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAPushNotification);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('reg'))|| (jobEnv.equalsIgnoreCase("reg")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-REGPushNotification');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Push Notification job Executed in REG";
			 	Label labeljobQAPushNotification = new Label(3, iCounter1,"job-PushNotification-REG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAPushNotification);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('stg')) || (jobEnv.equalsIgnoreCase("stg")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-STGPushNotification');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Push Notification job Executed in STAGING";
			 	Label labeljobQAPushNotification = new Label(3, iCounter1,"job-PushNotification-STG EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAPushNotification);
			 	continue;
				}
				
			if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('perf'))|| (jobEnv.equalsIgnoreCase("perf")))
				{
				Thread.sleep(5000);
			 	testRunner.runTestStepByName('RunJob-PERFPushNotification');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Push Notification job Executed in PERF";
			 	//Label //LabeljobBetaPushNotification = new //Label(3, iCounter1,"job-PushNotification-Beta EXECUTED" ,//normalFormat); 
				//sheet.addCell(//LabeljobBetaPushNotification);
			 	continue;
				}
			}

/////////start java fw from here Mar 25
			
			else 
			{
			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;

			
			
			
			////mapName = "map"+mapNo;
			
			
			
			//mapName = mapNo
			//log.info "				>>>mapName is ="+mapName;
			//***************************
			//creating a dynamic hash map
			//***************************
			HashMap mapName= [:];
			////////////log.info "				>>>> map:"+mapName;
			//***********************************************************
			//get the contents from the cell containing the scenario step
			//***********************************************************
			//cellContents = SenarioSheet1.getCell(1,iCounter1).getContents();
		 	//log.info "			>>>>>>>> cellContents: "+cellContents;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents();

				//***************************************************************
				//Condition to check the stepName has correct API name and format
				//***************************************************************
				if(!((RequestName.contains('createInvestor')) || (RequestName.contains('getInvestorDetails')) || (RequestName.contains('getInvestorList')) || (RequestName.contains('submitAgreement')) || (RequestName.contains('verifyIdentity')) || (RequestName.contains('verifyAnswers')) || (RequestName.contains('createIssuer')) || (RequestName.contains('getIssuerDetail')) || (RequestName.contains('getIssuerList')) || (RequestName.contains('openEscrow')) || (RequestName.contains('fundAccount')) || (RequestName.contains('fundEscrow')) || (RequestName.contains('changeInvestorContribution')) || (RequestName.contains('cancelEscrow')) || (RequestName.contains('closeEscrow')) || (RequestName.contains('getEscrowDetails')) || (RequestName.contains('getEscrowList')) || (RequestName.contains('getActivityDetails')) || (RequestName.contains('updateEscrowAccount')) || (RequestName.contains('withdrawFunds')) || (RequestName.contains('transferFunds')) || (RequestName.contains('confirmWireTransfer')) || (RequestName.contains('disburseEscrow')) || (RequestName.contains('updateInvestmentLedger')) || (RequestName.contains('freezeInvestmentLedger')) || (RequestName.contains('createProceedsSchedules')) || (RequestName.contains('viewProceedsSchedules')) || (RequestName.contains('cancelProceedsSchedules')) || (RequestName.contains('getInvestmentLedger')) || (RequestName.contains('linkExternalAccount')) || (RequestName.contains('acceptEscrow')) || (RequestName.contains('completeCancelEscrow')) || (RequestName.contains('confirmDisburseEscrow')) || (RequestName.contains('completeEscrow')) || (RequestName.contains('verifyIdentityManually')) || (RequestName.contains('completeModifyEscrow')) || (RequestName.contains('getProceedsSchedules')) || (RequestName.contains('getActivity')) || (RequestName.contains('getLedger')) || (RequestName.contains('createCfp')) || (RequestName.contains('getCfpDetails')) || (RequestName.contains('SetUp'))))
				{
					alert.showInfoMessage("For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" does NOT contain a valid API reqeust name");
					log.info "				>>>> For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" does NOT contain a valid API reqeust name";
					//continue;
					break;
				}



				
				
				/*
				 * COMMENTING THIS PART BECAUSE CHANGING THE SCENARIO SHEET FORMAT
				 * instead of having api name and TCID in same cell, will have it in separate cells(separate columns) 
				  
				if(!((cellContents.contains("createInvestor|")) || (cellContents.contains("getInvestorDetails|")) || (cellContents.contains("getInvestorList|")) || (cellContents.contains("submitAgreement|")) || (cellContents.contains("verifyIdentity|")) || (cellContents.contains("verifyAnswers|")) || (cellContents.contains("createIssuer|")) || (cellContents.contains("getIssuerDetails|")) || (cellContents.contains("getIssuerList|")) || (cellContents.contains("openEscrow|")) || (cellContents.contains("fundAccount|")) || (cellContents.contains("fundEscrow|")) || (cellContents.contains("changeInvestorContribution|")) || (cellContents.contains("cancelEscrow|")) || (cellContents.contains("closeEscrow|")) || (cellContents.contains("getEscrowDetails|")) || (cellContents.contains("getEscrowList|")) || (cellContents.contains("getActivityDetails|")) || (cellContents.contains("updateEscrowAccount|")) || (cellContents.contains("withdrawFunds|")) || (cellContents.contains("transferFunds|")) || (cellContents.contains("confirmWireTransfer|")) || (cellContents.contains("disburseEscrow|")) || (cellContents.contains("updateInvestmentLedger|")) || (cellContents.contains("freezeInvestmentLedger|")) || (cellContents.contains("createProceedsSchedules|")) || (cellContents.contains("viewProceedsSchedules|")) || (cellContents.contains("cancelProceedsSchedules|")) || (cellContents.contains("getInvestmentLedger|")) || (cellContents.contains("linkExternalAccount|")) || (cellContents.contains("acceptEscrow|"))))
				{
					alert.showInfoMessage("For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-2)+" does NOT contain a valid API reqeust name");
					log.info "				>>>> For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-2)+" does NOT contain a valid API reqeust name";
					//continue;
					break;
				}
				//************************************
				//taking the cell contents in an array
				//************************************
			 	String[] TestDataRequestArray = cellContents.split("\\|");
				int TestDataRequestArraySize = TestDataRequestArray.size();
				if(TestDataRequestArraySize<2)
				{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-2)+" is not in proper format";
			 	continue;
			 	}
			 	//********************************
			 	//extracting request name and TCID
			 	//********************************
				String RequestName = TestDataRequestArray[0].trim();
				String TestCaseID = TestDataRequestArray[1].trim();
				log.info "				>>>> Request Name is :"+RequestName;
				log.info "				>>>> TCID is :"+TestCaseID;
				*/


				//Condition to check if stepName is 'SetUp' then bypass the below code
				if(RequestName=="SetUp")
				{
				
				
				//**********************************
				//Start condition for Setting Values
				//*********************************
				if(!(SenarioSheet1.getCell(6,iCounter1).getContents()==""))
				{

				if(SenarioSheet1.getCell(6,iCounter1).getContents().contains("="))
				{
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" is SETTING property values";
				//**************************************
				//Fetching the Set Values text from sheet
				//**************************************
				getSetValuesArray = SenarioSheet1.getCell(6,iCounter1).getContents();
				log.info "				>>>> getSetValuesArray: "+getSetValuesArray;
				String[] getSetValues = getSetValuesArray.split("\\,");
				int NoOfValuesToSet = getSetValues.size();

				//*********************************************************
				//Starting a loop for Setting all values in the properties
				//*********************************************************
				for(iCountofSetVal=0;iCountofSetVal<NoOfValuesToSet;iCountofSetVal++)
				{
					
				String RefTextVal = getSetValues[iCountofSetVal].trim();
				//log.info "				>>>> RefText+"+(iCountofSetVal+1)+" = "+getSetValues[iCountofSetVal];
				log.info "				>>>> RefText+"+(iCountofSetVal+1)+" = "+RefTextVal;
				
				String[] propValSet = RefTextVal.split("\\=");
				log.info "				>>>> propValSet : "+propValSet;
				int SizeOfPropValSet = propValSet.size();
				if(!(SizeOfPropValSet==2)){
					log.info "			>>>> Size of Prop Value Set is NOT 2 for : "+RefTextVal;
					alert.showInfoMessage("size of Prop Value Set is NOT 2 for : "+RefTextVal);
					continue;
				}
				String prop = propValSet[0];
				String val = propValSet[1];

				log.info "			>>> prop : "+prop;
				log.info "			>>> val : "+val;

				def checkIfPropAlreadyExist = testRunner.testCase.getPropertyValue(prop);

				if(checkIfPropAlreadyExist==null)
				{
					alert.showInfoMessage("The property "+prop+" does not already exist. New property will be created.");
					log.info "			>>>>	The property "+prop+" does not already exist. New property will be created.";
				}
				
				String referValToPut = "";

				if(val.contains("'"))
				{
				val = val.replace("'","");
				referValToPut = val;
				log.info"				 >>>>	referValToPut : "+referValToPut;
				}
				
log.info "				---------------------------------------------------";
log.info "				>>>> Putting Global Values for Test Case NOW :  "+prop+":"+referValToPut;	
testRunner.testCase.setPropertyValue(prop,referValToPut);






				
				}//end of for - for(iCountofSetVal=0;iCountofSetVal<NoOfValuesToSet;iCountofSetVal++)
				}//end of if - if(SenarioSheet1.getCell(6,iCounter1).getContents().contains("="))
				}//end of if - if(!(SenarioSheet1.getCell(6,iCounter1).getContents()==""))

				//**********************************
				//END condition for Setting Values
				//*********************************




					Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
					sheet.addCell(stepNoValue);

					Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
					sheet.addCell(descriptionValue);

					Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
					sheet.addCell(expectedValue);

					Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
					sheet.addCell(referencesValue);

					// add step name label with color
					Label label02 = new Label(3, iCounter1,RequestName ,normalFormat); //column=0=A,row=0=1
					sheet.addCell(label02);



				continue;
				}//END Condition to check if stepName is 'SetUp' then bypass the below code
				












				
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				log.info "				>>>> TestDataFile is :"+TestDataFile;

				//****************************
				//Get the Test Data Excel File
				//****************************
				TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
				//*****************************************
				//Get the Sheet having Test Data Properties
				//*****************************************
				TestDataProp1 = TestDataWB.getSheet("Request Schema");
				//*************************************
				//Get the Sheet having Test Data Values
				//*************************************
				TestDataValues1 = TestDataWB.getSheet("Request Values");
				//Get the Sheet having Test Data Response Properties
				TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
				TestDataResponse = TestDataWB.getSheet("Response Values");
				//******************************************
				//Count Rows and Columns in Properties sheet
				//******************************************
				PropRowCount = TestDataProp1.getRows();
				PropColCount = TestDataProp1.getColumns();
				log.info "				>>>>>>>>>>>>>>>>>>>> : PropRowCount " +PropRowCount;
				//***********************************************
				//Count Rows and Columns in Response Schema sheet
				//***********************************************
				ResponseSchemaRowCount = TestDataResponseSchema.getRows();
				ResponseSchemaColCount = TestDataResponseSchema.getColumns();
				//log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount;
				//log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount;
				//****************************************
				//Count Rows and Columns in Response sheet
				//****************************************
				ResponseRowCount = TestDataResponse.getRows();
				ResponseColCount = TestDataResponse.getColumns();
				//log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount;
				//log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount;
				//Count Rows and Columns in Values sheet
				ValuesRowCount = TestDataValues1.getRows();
				ValuesColCount = TestDataValues1.getColumns();
				//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesRowCount " +ValuesRowCount;
				log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesColCount " +ValuesColCount;
				//log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount;
				//log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount;
	
				//****************************************************************************************
				//Condition to check the parameters present in RequestSchema = parameters in RequestValues
				//****************************************************************************************
				if(PropRowCount != (ValuesColCount-3))
				{
				workbook.write();
				workbook.close();
				alert.showInfoMessage("Mismatch in the count of Properties and Values for Scenario "+sheetName+" Step No " +(iCounter1-2)+"\n");
				log.info "				>>>>>>>>>>>>>>>>>>>> : Mismatch in the count of Properties and Values. "+sheetName+" Step No " +(iCounter1-2)+"\n";
				//return;
				break stepCountLoop;
				//break ScenarioCountLoop;
				}
				//***********************************************************************
				//********Iterating loop for No of Test Cases in Test Data Sheet*********
				//***********************************************************************
				for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
				{//************START loop for No of Test Cases
				
				//flush();
				ResponseParameter = "";
				ParameterDataType = "";
				EnumDataCollection = "";
				enumType="";
			
			
				
				if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
					//log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Test Case :"+TestCaseID;
					//iCountTestCase = iCountTestCase-1
					continue;
				}
			 	flagCount = 8;
			
					SenarioSheet1.getCell(1,iCounter1).getContents();

					/*
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "CURL"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);
					*/
					/*
					Label label00 = new Label(0, 2, "SenarioStep"); //column=0=A,row=0=1
					sheet.addCell(label00);
					Label label01 = new Label(1, 2, "TCID"); //column=0=A,row=0=1
					sheet.addCell(label01);

					Label labelDescriptionHeader = new Label(2, 2, "Description"); //column=0=A,row=0=1
					sheet.addCell(labelDescriptionHeader);
					Label labelExpectedHeader = new Label(3, 2, "Expected Result"); //column=0=A,row=0=1
					sheet.addCell(labelExpectedHeader);

					
					Label labelCurlHeader = new Label(4, 2, "Curl"); //column=0=A,row=0=1
					sheet.addCell(labelCurlHeader);
					
					Label labelTCID = new Label(5, 2, "Response"); //column=0=A,row=0=1
					sheet.addCell(labelTCID);
					*/

					Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
					sheet.addCell(stepNoValue);

					Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
					sheet.addCell(descriptionValue);

					Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
					sheet.addCell(expectedValue);

					Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
					sheet.addCell(referencesValue);
					
					/*
					Label labelTCDescription = new Label(2, iCounter1, TestDataValues1.getCell(1,iCountTestCase).getContents()); //column=0=A,row=0=1
					sheet.addCell(labelTCDescription);

					Label labelTCExpected = new Label(3, iCounter1, TestDataValues1.getCell(2,iCountTestCase).getContents()); //column=0=A,row=0=1
					sheet.addCell(labelTCExpected);
					*/

					
					log.info "				>>>>>>>>>>>>>>>>>> : STARTING TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
					//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
					//sheet.addCell(label02);
			
					//***************************************
					//Setting parameter values in the request
					//***************************************
					String key = "";
					String value = "";
					String requestData = "";
					for(iCounter=1;iCounter<(ValuesColCount-3);iCounter++)
					{
						//*****************************************************************
						//Taking values of parameter and its value from the Test Data sheet
						//*****************************************************************
						key = TestDataProp1.getCell(0,iCounter).getContents();
						value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents();
						//testRunner.testCase.getTestStepByName(RequestName).setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+2,iCountTestCase).getContents());
						testRunner.testCase.getTestStepByName(RequestName).setPropertyValue( key, value);
	
						if(value.contains(" "))
						{
							value = '"'+value+'"';
						}
						//**********************************************
						//Generating the curl request from key and value
						//**********************************************
						if(key=="email")
						{
							requestData = requestData+"--data-urlencode "+key+"="+value+" \\\n";
						}
						else{
						requestData = requestData+"-d "+key+"="+value+" \\\n";
						}
					
					}
					











				//*******************************************************************
				//Start condition for Getting Global properties and setting in Request
				//********************************************************************
				if(!(SenarioSheet1.getCell(7,iCounter1).getContents()==""))
				{

				if(SenarioSheet1.getCell(7,iCounter1).getContents().contains("="))
				{
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" is GETTING property values and SETTING in Request";
				//***************************************
				//Fetching the Set Values text from sheet
				//***************************************
				getGetValuesArray = SenarioSheet1.getCell(7,iCounter1).getContents();
				//log.info "				>>>> getSetValuesArray: "+getGetValuesArray;
				String[] getGetValues = getGetValuesArray.split("\\,");
				int NoOfValuesToGet = getGetValues.size();

				//********************************************************
				//Starting a loop for Setting all values in the properties
				//********************************************************
				for(iCountofGetVal=0;iCountofGetVal<NoOfValuesToGet;iCountofGetVal++)
				{
					
				String RefTextValtoGet = getGetValues[iCountofGetVal].trim();
				//log.info "				>>>> RefText+"+(iCountofSetVal+1)+" = "+getSetValues[iCountofSetVal];
				//log.info "				>>>> RefText+"+(iCountofGetVal+1)+" = "+RefTextValtoGet;
				
				String[] propValSettoGet = RefTextValtoGet.split("\\=");
				//log.info "				>>>> propValSettoGet : "+propValSettoGet;
				int SizeOfPropValSettoGet = propValSettoGet.size();
				if(!(SizeOfPropValSettoGet==2)){
					log.info "			>>>> Size of Prop Value Set to GET is NOT 2 for : "+RefTextValtoGet;
					alert.showInfoMessage("size of Prop Value Set to GET is NOT 2 for : "+RefTextValtoGet);
					continue;
				}
				String prop = propValSettoGet[0];
				String val = propValSettoGet[1];

				log.info "			>>> prop : "+prop;
				log.info "			>>> val : "+val;

				def valueToSet = testRunner.testCase.getPropertyValue(val);
				log.info "			>>>> Value to SET = "+valueToSet;
				if(valueToSet==null)
				{
					alert.showInfoMessage("The property "+val+" does NOT EXIST");
					log.info "			>>>>	The property "+val+" does NOT EXIST";
					continue;
				}
				
			testRunner.testCase.getTestStepByName(RequestName).setPropertyValue(prop, valueToSet);
				




				
				}//end of for - for(iCountofSetVal=0;iCountofSetVal<NoOfValuesToSet;iCountofSetVal++)
				}//end of if - if(SenarioSheet1.getCell(7,iCounter1).getContents().contains("="))
				}//end of if - if(!(SenarioSheet1.getCell(7,iCounter1).getContents()==""))



				//*******************************************************************
				//END condition for Getting Global properties and setting in Request
				//********************************************************************
























					
				//******************************
				//Start condition for References
				//******************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				///////log.info "				>>>> This scenario step has References";
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has References";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];
				
				
				
				//Checking if child references are made in the References
				String[] getReferenceSplittedByDot = RefText.split("\\.");
				int NoOfDotsInReferences = getReferenceSplittedByDot.size();
				String ReferringValue = "";
				String paramName = "";
				if(NoOfDotsInReferences>2)
				{
				log.info "			>>>>>>>>. came to if block NoOfDotsInReferences>2 ";
				int RefTextSize = RefText.size();
				int indexOfEqual =  RefText.lastIndexOf('=');
				int indexOfFirstDot =  RefText.indexOf('.');
				int indexOfFirstLastDot =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,indexOfEqual);
				log.info "				>>> paramName="+paramName;
				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(indexOfEqual+1,indexOfFirstDot);
				log.info "				>>> stepToRefer="+stepToRefer;
				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch1 =  RefText.substring(indexOfFirstDot+1,indexOfFirstLastDot);
				log.info "				>>> paramValueToFetch1="+paramValueToFetch1;

				String paramValueToFetch2 =  RefText.substring(indexOfFirstLastDot+1,RefTextSize);
				log.info "				>>> paramValueToFetch2="+paramValueToFetch2;


				//mapToRefer = "map"+stepToRefer;

				mapToRefer = stepToRefer;
				mapToRefer = Integer.parseInt(mapToRefer);
				
				//log.info "				>>>>Value from Global Map 1 : "+(globalMap.get("map"+stepToRefer)).get(paramValueToFetch)
				//log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(stepToRefer);
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(Integer.parseInt(stepToRefer));
				//String ReferringValue = globalMap.get(1);
				//log.info "				>>>>>>>>>>>>>>>>>. ReferringValue = "+ReferringValue;
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);
				log.info "				*********  ReferringValue = "+ReferringValue
				//String ReferringValue = (globalMap.get("map"+stepToRefer)).get(paramValueToFetch);
				//ReferringValue =  mapToRefer.get(paramValueToFetch);
				}
				
				
				
				
				else{
				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;
				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;
				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				////mapToRefer = "map"+stepToRefer;

				mapToRefer = Integer.parseInt(stepToRefer);
				
				//log.info "				>>>>Value from Global Map 1 : "+(globalMap.get("map"+stepToRefer)).get(paramValueToFetch)
				//log.info "				>>>> map "+stepToRefer+" = "+globalMap.get("map"+stepToRefer);
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
				////String ReferringValue = (globalMap.get("map"+stepToRefer)).get(paramValueToFetch);
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch);
				//ReferringValue =  mapToRefer.get(paramValueToFetch);
				}//end of Else
				
				log.info "				>>>> ReferringValue:"+ReferringValue;
				//log.info"					>>>> mapNameValue:"+mapToRefer.get(paramValueToFetch);
				//*****************************************
				//setting the referred value in the request
				//*****************************************
				testRunner.testCase.getTestStepByName(RequestName).setPropertyValue(paramName, ReferringValue);
				}
			}
			}//End condition for References

			
			//Start condition to check for overwriting values
			/**
			 * Commenting this out as is not required.[overwrite values]
			 * This takes value from the 4th column of the scenario sheet
			 * The values are given like - reference_id=123,maximum_funding_amount=1001
			 * this will overwrite the value of reference_id to 123 and maximum_funding_amount to 1001 before running the request.
			 */
			 /*
			//change row number to variable
			if(!(SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			if(SenarioSheet1.getCell(3,iCounter1).getContents().contains("="))
			{
				log.info "				>>>> This scenario step has Overwrite values";

				//for loop for no of overwirtes and updating overwritten value in request
				getOverwriteArray = SenarioSheet1.getCell(3,iCounter1).getContents();
				log.info "				>>>> getOverwriteArray: "+getOverwriteArray;


				String[] getOverwriteValues = getOverwriteArray.split("\\,");
				int NoOfOverwrites = getOverwriteValues.size();

				for(iCountOverwrite=0;iCountOverwrite<NoOfOverwrites;iCountOverwrite++)
				{
					//*********************
				String OverwriteText = getOverwriteValues[iCountOverwrite].trim();
				log.info "				>>>> OverwriteText+"+iCountOverwrite+" = "+getOverwriteValues[iCountOverwrite];
				//reference_id=123

				String[] overwriteTextArray = OverwriteText.split("\\=");

				//Get the parameter name 
				String overwriteParamName = overwriteTextArray[0];
				log.info "				>>> overwriteParamName="+overwriteParamName;
				
				String overwriteValue = overwriteTextArray[1];
				log.info "				>>> overwriteValue="+overwriteValue;
				testRunner.testCase.getTestStepByName(RequestName).setPropertyValue(overwriteParamName, overwriteValue);
				}	
			}
			}	*/
			//*******************************************************
			//Run the test request***********************************
			//Running the API Request with the Test Parameters-Values
			//*******************************************************
			log.info "				>>>> Executing Request.";
			testRunner.runTestStepByName(RequestName);
			//******************************************************************
			//creating the curl request with endpoint and logging to result file
			//******************************************************************
			String requestURL = context.httpMethod.getURI();
			//log.info "				>>>> requestURL : "+requestURL;
			requestData = "curl -k -v "+requestURL+" \\\n"+requestData;
			log.info "				>>>> New requestData : \n "+requestData;
			//
			//Logging the curl in result file
			Label labelCurl = new Label(6, iCounter1, requestData); //column=0=A,row=0=1
			sheet.addCell(labelCurl);
			//*********************************
			//get the response from the request
			//*********************************
			def holder = testRunner.testCase.getTestStepByName(RequestName).getPropertyValue("response");
			def slurper = new JsonSlurper();
			def ParsedJSONResponse = slurper.parseText(holder);
			log.info "				>>>>>>>>>>>>>>>>>> : ParsedJSONResponse :"+ParsedJSONResponse;
			String ResponseInString = holder.toString();
			//log.info "				>>>> ResponseInString : "+ResponseInString;
			String ParsedJSONResponseInString = ParsedJSONResponse.toString();
			log.info "				>>>>>>>>>>>>>>>>>> : Parsed JSON in String :" +ParsedJSONResponseInString;
			//***********************************************
			//condition to check if null response is recieved
			//***********************************************
			if(holder==null || holder=='')
			{
				/*
				if(NegativeTesting=="Y"){
						log.info "				>>>> : For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" got a null Response";
				continue;
				}*/
				
				alert.showInfoMessage("For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" got a null Response");
				log.info "				>>>> : For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" got a null Response";
				break stepCountLoop;
				//break;
			}

/*
			//preparing input to be put in map
 			String mapInputText = "";
 			mapInputText = ParsedJSONResponseInString;
 			mapInputText = mapInputText.substring(1, mapInputText.length() - 1);
 			if(mapInputText.contains("{"))
			{
				//mapInputText = mapInputText.replaceFirst("{", "");
				mapInputText = mapInputText.replace("{","[");
			}
			if(mapInputText.contains("}"))
			{
				//mapInputText = mapInputText.substring(0, mapInputText.length() - 1);
				mapInputText = mapInputText.replace("}","]");
			}

			log.info "				>>>>>>>>>>>>>>> mapInputText = "+mapInputText;
			//ParsedJSONResponseInString


			//converting string to map

			// Seperator ',' is specified here, to split string on this basis
			for(String keyValue : mapInputText.split(" *, *")) {        
			 
			// Here the each part is futher splitted taking in account the equal sign ':'  which demarcates the key
			// and valuefor the hashmap        
			String[] pairs = keyValue.split(" *: *", 2);    
			 
			// Those key and values are then put into hashmap     
			mapName.put(pairs[0], pairs.length == 1 ? "" : pairs[1]);
			
			}
*/
			
			
			/////mapName = mapInputText;
			
			mapName = ParsedJSONResponse;
			
			
			
			//mapName = ParsedJSONResponseInString;
			log.info "				>>>> mapContents : "+mapName;
			/*
			//globalMap.put("map"+mapNo,mapName);
			HashMap gbMap1 = [:];
			HashMap myMap = [:];
			myMap = ["request_id":290626627695, "api_status":1, "id":550575383612, "bank_name":"Four Oaks Bank & Trust Company", "account_number":"540126120766", "account_routing_number":"053112505", "account_type":"CHECKING", "linked_external_bank_account":["id":326878, "bank_account_number":"2352154", "bank_account_holder":"John", "bank_account_type":"SAVING", "bank_account_routing":"322271724"]];
			gbMap1.put('myKey',myMap);
			log.info "	Local GlobalMap Now looks like - "+gbMap1;
			refVal1 = (gbMap1.get('myKey')).get('id');
			log.info "	***********		refVal1 = "+refVal1;
			*/
			
			//globalMap.put('myKey',mapName);
			globalMap.put(mapNo,mapName);
			//globalMap.put(mapName,mapName);
			log.info "		GlobalMap Now looks like - "+globalMap;
			
			//referVal = (globalMap.get("1")).get('linked_external_bank_account').get('bank_account_holder');
			//referVal = globalMap.get(2);
			//log.info " inner map " + globalMap.get(mapNo);
			///referVal = (globalMap.get(mapNo)).get('linked_external_bank_account').get('linked_bank_account_reference_id');
			//referVal = (globalMap.get(1)).get('linked_external_bank_account').get('bank_account_holder');
			//log.info	"				>>>			>>>. 			>> referVal = "+referVal;
			//********************************************
			//Validating Response and creating result file
			//********************************************
			//Label label = new Label(1, iCountTestCase, ResponseInString); //column=0=A,row=0=1
			Label responseValue = new Label(7, iCounter1, ResponseInString);
			sheet.addCell(responseValue);















				


				//**********************************
				//Start condition for Setting Values
				//*********************************
				if(!(SenarioSheet1.getCell(6,iCounter1).getContents()==""))
				{

				if(SenarioSheet1.getCell(6,iCounter1).getContents().contains("="))
				{
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" is SETTING property values";
				//**************************************
				//Fetching the Set Values text from sheet
				//**************************************
				getSetValuesArray = SenarioSheet1.getCell(6,iCounter1).getContents();
				log.info "				>>>> getSetValuesArray: "+getSetValuesArray;
				String[] getSetValues = getSetValuesArray.split("\\,");
				int NoOfValuesToSet = getSetValues.size();

				//*********************************************************
				//Starting a loop for Setting all values in the properties
				//*********************************************************
				for(iCountofSetVal=0;iCountofSetVal<NoOfValuesToSet;iCountofSetVal++)
				{
					
				String RefTextVal = getSetValues[iCountofSetVal].trim();
				//log.info "				>>>> RefText+"+(iCountofSetVal+1)+" = "+getSetValues[iCountofSetVal];
				log.info "				>>>> RefText+"+(iCountofSetVal+1)+" = "+RefTextVal;
				
				String[] propValSet = RefTextVal.split("\\=");
				log.info "				>>>> propValSet : "+propValSet;
				int SizeOfPropValSet = propValSet.size();
				if(!(SizeOfPropValSet==2)){
					log.info "			>>>> Size of Prop Value Set is NOT 2 for : "+RefTextVal;
					alert.showInfoMessage("size of Prop Value Set is NOT 2 for : "+RefTextVal);
					continue;
				}
				String prop = propValSet[0];
				String val = propValSet[1];

				log.info "			>>> prop : "+prop;
				log.info "			>>> val : "+val;

				def checkIfPropAlreadyExist = testRunner.testCase.getPropertyValue(prop);

				if(checkIfPropAlreadyExist==null)
				{
					alert.showInfoMessage("The property "+prop+" does not already exist. New property will be created.");
					log.info "			>>>>	The property "+prop+" does not already exist. New property will be created.";
				}
				
String referValToPut = "";

if(val.contains("'"))
{
	val = val.replace("'","");
	referValToPut = val;
	log.info"				 >>>>	referValToPut : "+referValToPut;
}
else{
referValToPut = mapName.get(val);
log.info"				 >>>>	referValToPut : "+referValToPut;
}

if(referValToPut==null)
{
	log.info "    >>    NULL value found in response for "+prop;
	continue;
}
log.info "				---------------------------------------------------";
log.info "				>>>> Putting Global Values for Test Case NOW :  "+prop+":"+referValToPut;	
testRunner.testCase.setPropertyValue(prop,referValToPut);




				
				}//end of for - for(iCountofSetVal=0;iCountofSetVal<NoOfValuesToSet;iCountofSetVal++)
				}//end of if - if(SenarioSheet1.getCell(6,iCounter1).getContents().contains("="))
				}//end of if - if(!(SenarioSheet1.getCell(6,iCounter1).getContents()==""))

				//**********************************
				//END condition for Setting Values
				//*********************************
				














		
				//******************************
				//validating response assertions
				//******************************
				for(iCounter=1;iCounter<ResponseSchemaRowCount;iCounter++)
				{//******************start loop for Response Schema validation
				//flush2
				ParameterDataType = "";
				String requiredParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"';
						
					if(TestDataResponseSchema.getCell(1,iCounter).getContents() == "Y")
					{
						//log.info "          >>   YES  " +iCounter
						requiredParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"';
						log.info "				>>>>>>>>>>>>>>>>>> : requiredParameter :"+requiredParameter;
						if(!(ParsedJSONResponseInString.contains(requiredParameter)))
						{
							log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the mandatory parameter - "+TestDataResponseSchema.getCell(0,iCounter).getContents();
							String MandatoryParameterMissing = "The response does not contain the mandatory parameter - "+requiredParameter;
							//Label label2 = new Label(flagCount, iCountTestCase, MandatoryParameterMissing);
							Label label2 = new Label(flagCount, iCounter1, MandatoryParameterMissing);
							sheet.addCell(label2);
							flagCount = flagCount+1;
							//testRunner.fail
						}
					}
				
					
			//********************
			//validating datatypes
			//********************
			if(!(TestDataResponseSchema.getCell(2,iCounter).getContents().isEmpty()))
				{
					ParameterDataType="";
					//String ResponseParameter = TestDataResponseSchema.getCell(0,iCounter).getContents()
					ResponseParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"';
					ParameterDataType = TestDataResponseSchema.getCell(2,iCounter).getContents();
					////log.info  "				>>>>>>>>>>>>>>>>>> : ResponseParameter :"+ResponseParameter;
					////log.info  "				>>>>>>>>>>>>>>>>>> : ParameterDataType :"+ParameterDataType;
			ResponseParameter = ResponseParameter+'":';

					int IndexOfParam =  ParsedJSONResponseInString.lastIndexOf(ResponseParameter);
					int LengthOfParam = ResponseParameter.size();
			
			  if(IndexOfParam > -1)
			  {
			 	IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf(",", IndexOfParam);
				if(IndexOfSubsequentComma<1)
				{
					IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf("}", IndexOfParam);
					if(IndexOfSubsequentComma<1)
					{
						log.info "				>>>>>>>>>>>>>>>>>> : Could not find the value for the parameter : "+ResponseParameter;
					}
				}
				if(ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))
			 	{
			 		EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"));
					////log.info "				>>>> Enum Data Collection :"+EnumDataCollection;
			 		/*
			 		if(EnumDataCollection.matches("[,a-zA-Z]*"))
			 		{
			 			enumType = "String"
			 			log.info "Enum Value is String"
			 		}
			 		else
			 		{
			 			enumType = "Number"
			 			log.info "Enum Value is NOT String"
			 		}
			 		*/
			 		if(!(EnumDataCollection.matches("[0-9,]*")))
			 		{
			 			enumType = "String";
			 			log.info "Enum Value is String";
			 		}
			 		else
			 		{
			 			enumType = "Number";
			 			log.info "Enum Value is NOT String";
			 		}
			 	}
			
			 //if((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || (ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))) //********** **
			 // if(!((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || enumType=="String")) //********** **
			 	//if(!((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String"))) //********** **
			
			//Thread.sleep(500) 
			if(((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String"))) //********** **
			
			 {
			 	////log.info  "				>>>>>>>>>>>>>>>>>> : In STRING/DATE/ENUMstring BLOCK";
			 	///log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType;
			 	ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
				//ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
				log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText;
			 if(ResposeValueText.contains("}"))
			{
				ResposeValueText = ResposeValueText.replace("}","");
			}
			 if(ResposeValueText.contains("]"))
			{
				ResposeValueText = ResposeValueText.replace("]","");
			}
			 }
			 
			 else
			 {
			 	////log.info  "				>>>>>>>>>>>>>>>>>> : In NON -- STRING/DATE/ENUMstring BLOCK";
			 	////log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType;
			 	
			 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
			 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
				log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText;
			
			 if(ResposeValueText.contains("}"))
			{
				ResposeValueText = ResposeValueText.replace("}","");
			}
			 if(ResposeValueText.contains("]"))
			{
				ResposeValueText = ResposeValueText.replace("]","");
			}
			 }
			 //ResposeValueText = ParsedJSONResponseInString.substring(ParsedJSONResponseInString.indexOf(ResponseParameter)+LengthOfParam, (ParsedJSONResponseInString.indexOf(","))+(IndexOfParam));
			 //ResposeValueText = ParsedJSONResponseInString.substring((IndexOfParam+LengthOfParam+2),(IndexOfParam+LengthOfParam+2)+(ParsedJSONResponseInString.indexOf(",")))
			 //ResposeValueText = ParsedJSONResponseInString.substring((32),ParsedJSONResponseInString.indexOf(","))
			 //s.indexOf(")")
			 //log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :"+ResposeValueText
			// assert ResposeValueText.isNumber()
			
			//try{
			
			log.info "				>>>> The ResponseValueText is :"+ResposeValueText;
				
			if(ParameterDataType.toString().equalsIgnoreCase("String"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to STRING IF block"
				 String returnDataType = String.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : StringValue :"+returnDataType;
			}	
			if(ParameterDataType.toString().equalsIgnoreCase("Long"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to LONG IF block"
				//log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :" +ResposeValueText
				long returnDataType = Long.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : LongValue :"+returnDataType;
			}
			if(ParameterDataType.toString().equalsIgnoreCase("Int"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Int IF block"
				 int returnDataType = Integer.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : IntValue :"+returnDataType;
			}
			if(ParameterDataType.toString().equalsIgnoreCase("Float"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Float IF block"
				//log.info "				>>>>>>>>>>>>>>>>>> : FloatValue text "+ResposeValueText
				 float returnDataType = Float.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : FloatValue :"+returnDataType;
			}
			if(ParameterDataType.toString().equalsIgnoreCase("Boolean"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Boolean IF block"
				 boolean returnDataType = Boolean.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : BooleanValue :"+returnDataType;
				
			}
			if(ParameterDataType.toString().equalsIgnoreCase("Date"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Date IF block"
				 
				 SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
				 Date date = null;
				 date = format.parse(ResposeValueText);
				 //date returnDataType = date.valueOf(ResposeValueText)
				 log.info "				>>>>>>>>>>>>>>>>>> : DateValue  :"+date;
			}
			if(ParameterDataType.toString().toLowerCase().contains(("Enum").toLowerCase()))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
				EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"));
				log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection;
			
				if(!(EnumDataCollection.toString().toLowerCase().contains((ResposeValueText).toLowerCase())))
				{
					log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText";
				String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection;
				//Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
				Label label4 = new Label(flagCount, iCounter1, dataTypeIncorrect);
				sheet.addCell(label4);
				flagCount = flagCount+1;
				}
				/*
				String[] EnumData = EnumDataCollection.split(",")
				int sizeOfEnumData = EnumData.size()
				log.info "			>>>>>>>>>>>>>> sizeOfEnumData :"+sizeOfEnumData
				
				
				for(iCountOfEnumData=0;iCountOfEnumData<sizeOfEnumData;iCountOfEnumData++)
				{
				log.info "			>>>>>>> EnumData :"+EnumData[iCountOfEnumData]
				
				}
				 //date returnDataType = date.valueOf(ResposeValueText)
				 //log.info "        >>>>>>>>>.     EnumValue  "+returnDataType
				*/
			}
			
			
			
			
			/*
			}
			  catch(all)
			{
				log.info "             >>>>>>>>>> Some Exception Occured"
				String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
				Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
				sheet.addCell(label3);
				flagCount = flagCount+1
				
			//workbook.write()
			//workbook.close()
			
			}
			*/
			 //long.info "  >>>>>>>>>>>>>>>   "+bool
			 //ValueDataType = ResposeValueText.getClass()
			 //log.info " >>>>>>>>>>>> ValueDataType ="+ValueDataType
			
			  }
			
				}
			//******NOV-8*****// 
			
			//*****************************************************************8888888
			//*****************************************************************8888888
			//openEscrowopenEscrowParameterDataType = "";
			}//******************END loop for Response Schema validation
			
			
			
			///////////////////////////
			////??????????????/
			
			
			
			log.info "				>>>> ResponseColCount : "+ResponseColCount;
			for(iCountofResponse=1;iCountofResponse<ResponseColCount;iCountofResponse++)
			{
				//if(IsEmpty(TestDataResponse.getCell(iCounter,1).getContents()))
			
				if(!(TestDataResponse.getCell(iCountofResponse,iCountTestCase).getContents().isEmpty()))
				{
					//log.info " >>>>>>>>>>>>   not NULL"
					String ParamValueField = '"'+TestDataResponse.getCell(iCountofResponse,0).getContents()+'":"'+TestDataResponse.getCell(iCountofResponse,iCountTestCase).getContents()+'"';
					String ParamValueFieldForIntType = '"'+TestDataResponse.getCell(iCountofResponse,0).getContents()+'":'+TestDataResponse.getCell(iCountofResponse,iCountTestCase).getContents();
					log.info " >>>>>>>>>>>  ParamValueField is : "+ParamValueField ;
			//1
					
					if(!(ParsedJSONResponseInString.contains(ParamValueField))  && !(ParsedJSONResponseInString.contains(ParamValueFieldForIntType)) )
					{
						log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the value - "+ParamValueField;
						
						
						//log.info "           >>>>>>>> flag Count  "+flagCount
						//label1 = "label"+flagCount
						//Label label1 = new Label(0, 1, "TC_001"); //column=0=A,row=0=1
						//sheet.addCell(label1);
						
						//Label label+""+flagCount = new Label
						//Label label3 = new Label(flagCount, iCountTestCase, "The response does not contain the value - "+ParamValueField+"");
						Label label3 = new Label(flagCount, iCounter1, "The response does not contain the value - "+ParamValueField+"");
						sheet.addCell(label3);
						flagCount = flagCount+1;
					}
				}
			}
			
			
			
			
			
			////////////////////
			
			log.info "				>>>> flagCount is : "+flagCount;
			
			if(flagCount==8)
			{
				
				/*
				//Creating Writable font to be used in the response sheet
				WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
				//creating plain format to write data in excel sheet
			     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
				normalFormat.setBackground(jxl.format.Colour.GREEN);
				*/
				//log.info  "				>>>>>>>>>>>>>>>>>> : if loop - flagCount "+flagCount
				//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1,RequestName ,normalFormat); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label0002 = new Label(4, iCounter1,TestCaseID ,normalFormat); //column=0=A,row=0=1
				sheet.addCell(label0002);
				log.info "				>>>> flagCount If block because flagCount is : "+flagCount;
				// sheet.addCell(new jxl.write.Label(0,0,"User Name",normalFormat));
			}
			else{
				/*
				//Creating Writable font to be used in the response sheet
				WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
				//creating plain format to write data in excel sheet
			     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
				
				normalFormat2.setBackground(jxl.format.Colour.RED);
				*/
				//log.info  "				>>>>>>>>>>>>>>>>>> : else loop - flagCount "+flagCount
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1, RequestName,normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label0002 = new Label(4, iCounter1, TestCaseID,normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label0002);
				log.info "				>>>> flagCount else block because flagCount is : "+flagCount;
				//break ScenarioCountLoop:
			}	
			//?????????????
						
			
						/*
						}////************END loop for No of Test Cases
			
						//workbook.write();
						//workbook.close(); 
						}///Else end
					
			workbook.write();
			workbook.close(); 	
				}//END loop for number of steps in the scenario
			
			
			}//END loop for number of scenario sheets
				
			
			*/
			
			
			
			
			//***********************************Validating Response
			
			
			
			
			
			
			
			/*
			log.info "				>>>> Writing to excel.";
			workbook.write();
			workbook.close();			
			*/
						}//END loop for No of Test Cases
			
							
						 }//ELSE END
			log.info "				END loop for number of steps in the scenario";

			if(flagCount>8)
			{
				if(NegativeTesting=="Y")
				{
					continue;
				}
				else{
				log.info "Coming Out of this Scenario as the Step Failed";
				break stepCountLoop;
				}
			}
			}//END loop for number of steps in the scenario
			
			
			
			
			//log.info	"				>>>> EXIT HERE";
			//Emptying all Global hashmap
			globalMap = [:];
			//return;
			
			
			
				
			}//END loop for number of scenario sheets
			
			
			log.info "				>>>> Writing to excel.";
			workbook.write();
			workbook.close();
			
			}//END of try

			
			catch(FileNotFoundException f) 
			{
			   workbook.write();
			   workbook.close();
			   f.printStackTrace();
			   log.info "				>>>>>>>>>>>>>>>>>> : FILE NOT FOUND";
			   //alert.showInfoMessage("Hello World !","soapUI Warning !")
			   alert.showInfoMessage("Please Check the File Name and Location is Correct","FILE NOT FOUND");
			  
			}
			
			
			catch (NumberFormatException e)
			{
				log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : NumberFormatException";
				String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType;
				Label label3 = new Label(flagCount, iCounter1, dataTypeIncorrect);
				sheet.addCell(label3);
				flagCount = flagCount+1;

				WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
				 WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
				normalFormat2.setBackground(jxl.format.Colour.RED);
				
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1, RequestName, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label002 = new Label(4, iCounter1, TestCaseID, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label002);
				workbook.write();
				workbook.close();
			}
			catch(ParseException parseEx)
			{
				log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : ParseException";
				String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType;
				Label label3 = new Label(flagCount, iCounter1, dataTypeIncorrect);
				sheet.addCell(label3);
				flagCount = flagCount+1;

				WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
				 WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
				normalFormat2.setBackground(jxl.format.Colour.RED);
				
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1, RequestName, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label002 = new Label(4, iCounter1, TestCaseID, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label002);
				workbook.write();
				workbook.close();
			}
			catch(all)
			{
				
				//String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
				String Exception1 = "An Exception Occurred : "+all+"";
				log.info "				>>>>>>>>>>>>>>>>>> : Exception1 : "+Exception1;
				Label label5 = new Label(flagCount, iCounter1, Exception1);
				sheet.addCell(label5);
				flagCount = flagCount+1;

				WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
				WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
				normalFormat2.setBackground(jxl.format.Colour.RED);
				
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1, RequestName, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label002 = new Label(4, iCounter1, TestCaseID, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label002);
				
				workbook.write();
				workbook.close();
			
			}
			
			
			log.info "				>>>>>>>>>>>>>>>>>> : END of AutomationScenario Script";
			
/***********************************
 ***********************************
 * End of Automation Scenario Script
 ***********************************
 ***********************************
***********************************/]]></script></con:config></con:testStep><con:testStep type="groovy" name="RightSignProcessForIssuerCommon" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunRightSignProcess
try{

	String issuerRightSignMail = testRunner.testCase.getPropertyValue('p_issuerRightSignEmail');
	String[] userNameAndPassword = issuerRightSignMail.split('\\|');
	String userName = userNameAndPassword[0].trim();
	String password = userNameAndPassword[1].trim();	
	log.info "    >>>>    "+userName+" | "+password;

	String s_Status = RunRightSignProcess.rightSignTestIssuer(userName,password);
	//String s_Status = RunRightSignProcess.rightSignTestIssuer("raghav9901@gmail.com","Abcd1234+");
	log.info "			Completed : Status is for rightSignTestIssuer: "+s_Status;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RightSignProcessForCfpCommon" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunRightSignProcess
try{
	String cfpRightSignMail = testRunner.testCase.getPropertyValue('p_cfpRightSignEmail');
	String[] userNameAndPassword = cfpRightSignMail.split('\\|');
	String userName = userNameAndPassword[0].trim();
	String password = userNameAndPassword[1].trim();	
	log.info "    >>>>    "+userName+" | "+password;

	String s_Status = RunRightSignProcess.rightSignTestCfp(userName,password);
	//String s_Status = RunRightSignProcess.rightSignTestIssuer("raghav9901@gmail.com","Abcd1234+");
	log.info "			Completed : Status is for rightSignTestCfp: "+s_Status;

}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ClearAllProperties" id="4089902f-9c85-439a-80b3-6a8f9588d71e" disabled="true"><con:settings/><con:config><script>//This Script clear the values for All the properties of the Test Case


jobEnv = testRunner.testCase.getPropertyValue("p_job_env");
log.info "jobEnv = "+jobEnv;
/*
//exit();
String[] props = new String[testRunner.testCase.getPropertyCount()];
props = testRunner.testCase.getPropertyNames();
log.info ">>     Properties Size : "+props.size();
for (int i=0;i&lt;props.size();i++)
{
	log.info ">>     "+props[i];
	testRunner.testCase.setPropertyValue(props[i],"");
}

*/
</script></con:config></con:testStep><con:testStep type="groovy" name="RemoveTCProperties" disabled="true"><con:settings/><con:config><script>String[] props = new String[testRunner.testCase.getPropertyCount()];
props = testRunner.testCase.getPropertyNames();
log.info ">>     Properties Size : "+props.size();
for (int i=0;i&lt;props.size();i++)
{
	log.info ">>     "+props[i];
	//testRunner.testCase.setPropertyValue(props[i],"");
	testRunner.getTestCase().removeProperty(props[i]);
}



</script></con:config></con:testStep><con:testStep type="groovy" name="RightSignProcessForIssuer-PERF" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunRightSignProcess
try{
String s_Status = RunRightSignProcess.rightSignTestForIssuerPerf();
log.info "			Completed : Status is for rightSignTestForIssuer: "+s_Status;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RightSignProcessForCfp-PERF" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunRightSignProcess
try{
String s_Status = RunRightSignProcess.rightSignTestForCfpPerf();
log.info "			Completed : Status rightSignTestForCfp is : "+s_Status;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PERFRealizeDraft" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunJobsURL

try{
RunJobsURL.PERFRealizeDraft();
log.info "			QA Realize Draft Job Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-PERFPushNotification" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunJobsURL

try{
RunJobsURL.PERFPushNotification();
log.info "			QA PushNotificatoin Job Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-PERFOutbound" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunJobsURL

try{
log.info "RUNNING STEP QA OUTBOUND";
RunJobsURL.PERFOutbound();
log.info "			QA Outbound Job Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="breakLoop" disabled="true"><con:settings/><con:config><script>outerLoop:		//creating label
for(i=1;i&lt;10;i++)
{
	log.info "i am into outer for loop";
	for(j=1;j&lt;5;j++)
	{
		log.info "i am into INNER for loop";

		if(j==3)
		{
			break outerLoop; //breaking label. this will come out of not only inner loop but also outer loop
		}
	}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="excelHandling" disabled="true"><con:settings/><con:config><script>import jxl.*
import com.eviware.soapui.*
import java.util.*
//import poi-3.5-beta5.*
//import org.apache.poi-3.5-beta5.*
//import poi.*
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*
import org.apache.poi.hssf.usermodel.*
import org.apache.poi.xssf.usermodel.*
import org.apache.poi.ss.util.*
import org.apache.poi.ss.usermodel.*

//poi-ooxml-3.9.jar

import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import org.apache.poi.ss.usermodel.*; 






WritableWorkbook workbook;
WritableSheet sheet;


Workbook TestDataWB;

/*

//TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
	//workbook = Workbook.createWorkbook(new File(TestResponseFile));
	//sheet = workbook.createSheet("Response",0)

	workbook = Workbook.getWorkbook("C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Dec13\\createInvesgtor.xls");


*/
//////////////////////////

InputStream inp = new FileInputStream("C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Dec13\\createInvestor.xls");

//Workbook wb = WorkbookFactory.create(inp);


//String TestScenarioFile = context.expand('${#Project#ScenarioFileLocation}')
String TestScenarioFile = "C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\TeamTestData\\ScenarioTD\\ScenarioSheet2.xls"

//Get the Test Scenario Excel File
TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
getSenarioSheets = TestScenarioWB.getSheets();
NoOfScenarioSheets = getSenarioSheets.size();

for(sheetCount=0;sheetCount&lt;NoOfScenarioSheets;sheetCount++)
{
	//getSenarioSheets.getSheet(sheetCount);
	a=TestScenarioWB.getSheet(sheetCount).getName();
	log.info "				>>>> a = "+a;
}


</script></con:config></con:testStep><con:testStep type="groovy" name="TestJobQA" disabled="true"><con:settings/><con:config><script>//testRunner.runTestStepByName('RunJob-STGOutbound');
//testRunner.runTestStepByName('RunJob-STGRealizeDraft');
//testRunner.runTestStepByName('RunJob-STGPushNotification');</script></con:config></con:testStep><con:testStep type="groovy" name="StringOps" disabled="true"><con:settings/><con:config><script><![CDATA[HashMap globalMap;
//HashMap map1;
globalMap = [:];
HashMap mapName = ["request_id":440604832795,"api_status":1,"id":565854488603,"bank_name":"Four Oaks Bank & Trust Company","account_number":"540126116117","account_routing_number":"053112505","account_type":"CHECKING","linked_external_bank_account":["id":326783,"linked_bank_account_reference_id":"2/5/14 12:49","bank_account_number":"2352154","bank_account_holder":"John","bank_account_type":"SAVING","bank_account_routing":"322271724"]];
//mapName = [id:565854488603, bank_name:Four Oaks Bank & Trust Company, request_id:440604832795, account_number:540126116117, account_routing_number:053112505, linked_external_bank_account:[id:326783, linked_bank_account_reference_id:2/5/14 12:49, bank_account_number:2352154, bank_account_holder:John, bank_account_type:SAVING, bank_account_routing:322271724], api_status:1, account_type:CHECKING];
//mapName = [request_id:41818206361, api_status:1, id:391364157581, bank_name:Four Oaks Bank & Trust Company, account_number:540126118608, account_routing_number:053112505, account_type:CHECKING, linked_external_bank_account:[id:326781, linked_bank_account_reference_id:2/5/14 12:45, bank_account_number:2352154, bank_account_holder:John, bank_account_type:SAVING, bank_account_routing:322271724]];
log.info " map name is : "+mapName;
String map1;
//map1 = ['id':765728847586, bank_name:'Four Oaks Bank & Trust Company', request_id:659408837027, account_number:540126118693, account_routing_number:053112505, linked_external_bank_account:[id:326778, linked_bank_account_reference_id:'2/5/14 12:29', bank_account_number:2352154, bank_account_holder:'John', bank_account_type:'SAVING', bank_account_routing:322271724], api_status:1, account_type:'CHECKING'];
globalMap.put(map1,mapName);

log.info "			global map looks like : "+globalMap;

ReferValue = (globalMap.get(map1)).get('linked_external_bank_account').get('linked_bank_account_reference_id');
log.info "				>>>>>>>>> ReferValue : "+ReferValue;
//globalMap= [map1:['id':765728847586, bank_name:'Four Oaks Bank & Trust Company', request_id:659408837027, account_number:540126118693, account_routing_number:053112505, linked_external_bank_account:[id:326778, linked_bank_account_reference_id:'2/5/14 12:29', bank_account_number:2352154, bank_account_holder:'John', bank_account_type:'SAVING', bank_account_routing:322271724], api_status:1, account_type:'CHECKING']];

//String ReferringValue1 = (globalMap.get(map1)).get(bank_name);


//String ReferringValue = (globalMap.get("map"+stepToRefer))get(paramValueToFetch1).get(paramValueToFetch2);
log.info "		>...ReferringValue1 = "+ReferringValue1;				

				
HashMap mapRefId = ["id":440858441797, "bank_name":"Four Oaks Bank & Trust Company", request_id:820078252651, account_number:540126121014, account_routing_number:053112505, linked_external_bank_account:[id:326755, linked_bank_account_reference_id:"2/5/14 11:33", bank_account_number:2352154, bank_account_holder:"John", bank_account_type:'SAVING', bank_account_routing:322271724], api_status:1, account_type:'CHECKING'];
String linkedBARefId = mapRefId.get('linked_external_bank_account').get('linked_bank_account_reference_id');
log.info "			>>>>>>> linkedBARefId = "+linkedBARefId;

String RefText = "linked_bank_account_reference_id=mapRefId.linked_external_bank_account.linked_bank_account_reference_id"
//String RefText = "ParamName1=1.a.b"
				
				String[] getReferenceSplittedByDot = RefText.split("\\.");
				int NoOfDotsInReferences = getReferenceSplittedByDot.size();

				if(NoOfDotsInReferences>2)
				{
				log.info "			>>>>>>>>. came to if block";
				int RefTextSize = RefText.size();
				int indexOfEqual =  RefText.lastIndexOf('=');
				int indexOfFirstDot =  RefText.indexOf('.');
				int indexOfFirstLastDot =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				String paramName = RefText.substring(0,indexOfEqual);
				log.info "				>>> paramName="+paramName;
				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(indexOfEqual+1,indexOfFirstDot);
				log.info "				>>> stepToRefer="+stepToRefer;
				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch1 =  RefText.substring(indexOfFirstDot+1,indexOfFirstLastDot);
				log.info "				>>> paramValueToFetch2="+paramValueToFetch1;

				String paramValueToFetch2 =  RefText.substring(indexOfFirstLastDot+1,RefTextSize);
				log.info "				>>> paramValueToFetch2="+paramValueToFetch2;



				//mapToRefer = "map"+stepToRefer;
				mapToRefer = stepToRefer
				//log.info "				>>>>Value from Global Map 1 : "+(globalMap.get("map"+stepToRefer)).get(paramValueToFetch)
				//log.info "				>>>> map "+stepToRefer+" = "+globalMap.get("map"+stepToRefer);
				
				//String ReferringValue = (globalMap.get("map"+stepToRefer)).get(paramValueToFetch);
				String ReferringValue = mapRefId.get(paramValueToFetch1).get(paramValueToFetch2);
				log.info "			>>>>..  ReferringValue : "+ReferringValue;
				
				//String linkedBARefId = mapRefId.get('linked_external_bank_account').get('linked_bank_account_reference_id');

				//ReferringValue =  mapToRefer.get(paramValueToFetch);
			


				}]]></script></con:config></con:testStep><con:testStep type="groovy" name="map.get.get" disabled="true"><con:settings/><con:config><script><![CDATA[/*

HashMap globalMap = [:];
HashMap map1 = [:];

//globalMap.put(map1,["a":"b","c":["d":"e"]]);

map1 = ["request_id":894219254987, "api_status":1, "id":12613312045, "bank_name":"Four Oaks Bank & Trust Company", "account_number":"540126116432", "account_routing_number":"053112505", "account_type":"CHECKING", "linked_external_bank_account":["id":326817, "linked_bank_account_reference_id":"2/5/14 14:59", "bank_account_number":"2352154", "bank_account_holder":"John", "bank_account_type":"SAVING", "bank_account_routing":"322271724"]];
//globalMap.put(map1,["request_id":894219254987, "api_status":1, "id":12613312045, "bank_name":"Four Oaks Bank & Trust Company", "account_number":"540126116432", "account_routing_number":"053112505", "account_type":"CHECKING", "linked_external_bank_account":["id":326817, "linked_bank_account_reference_id":"2/5/14 14:59", "bank_account_number":"2352154", "bank_account_holder":"John", "bank_account_type":"SAVING", "bank_account_routing":"322271724"]]);
//globalMap = [map1:["request_id":894219254987, "api_status":1, "id":12613312045, "bank_name":"Four Oaks Bank & Trust Company", "account_number":"540126116432", "account_routing_number":"053112505", "account_type":"CHECKING", "linked_external_bank_account":["id":326817, "linked_bank_account_reference_id":"2/5/14 14:59", "bank_account_number":"2352154", "bank_account_holder":"John", "bank_account_type":"SAVING", "bank_account_routing":"322271724"]]];

int mapNo = 1;
globalMap.put(map1,map1);
//globalMap.put(map1,map1);

//globalMap = [map1:["request_id":894219254987, "api_status":1, "id":12613312045, "bank_name":"Four Oaks Bank & Trust Company", "account_number":"540126116432", "account_routing_number":"053112505", "account_type":"CHECKING", "linked_external_bank_account":["id":326817, "linked_bank_account_reference_id":"2/5/14 14:59", "bank_account_number":"2352154", "bank_account_holder":"John", "bank_account_type":"SAVING", "bank_account_routing":"322271724"]]];
log.info "				>>>>   globalMap = "+globalMap;

referValue1 = globalMap.get(map1);
log.info "				>>>>   referValue1 = "+referValue1;

referValue = (globalMap.get(map1)).get('linked_external_bank_account').get('bank_account_holder');
log.info "				>>>>   referValue = "+referValue;









/*
HashMap globalMaps = [1:["request_id":274405158614, "api_status":1, "id":998685815925, "bank_name":"Four Oaks Bank & Trust Company", "account_number":"540126119376", "account_routing_number":"053112505", "account_type":"CHECKING", "linked_external_bank_account":["id":326835, "linked_bank_account_reference_id":"2/5/14 15:39", "bank_account_number":"2352154", "bank_account_holder":"John", "bank_account_type":"SAVING", "bank_account_routing":"322271724"]]];
referValues = (globalMaps.get(1)).get('id');
log.info "				>>>>	referValues = "+referValues;



			HashMap globalMaps = [:];
			HashMap mapNames = [:];
			mapNames = ["request_id":712025468166, "api_status":1, "id":863998380341, "bank_name":"Four Oaks Bank & Trust Company", "account_number":"540126115759", "account_routing_number":"053112505", "account_type":"CHECKING", "linked_external_bank_account":["id":326839, "linked_bank_account_reference_id":"2/5/14 15:45", "bank_account_number":"2352154", "bank_account_holder":"John", "bank_account_type":"SAVING", "bank_account_routing":"322271724"]];
			globalMap.put("1",mapNames);
			
			//globalMap.put(mapName,mapName);
			log.info "		GlobalMap Now looks like - "+globalMap;
			referVal = (globalMap.get("1")).get('linked_external_bank_account').get('bank_account_type');;
			log.info "		**********	referVal = "+referVal;


*/



//HashMap gbMap1 = ['myKey':["request_id":152730999947, "api_status":1, "id":787699919208, "bank_name":"Four Oaks Bank & Trust Company", "account_number":"540126120492", "account_routing_number":"053112505", "account_type":"CHECKING", "linked_external_bank_account":["id":326872, "linked_bank_account_reference_id":"2/5/14 17:18", "bank_account_number":"2352154", "bank_account_holder":"John", "bank_account_type":"SAVING", "bank_account_routing":"322271724"]]];
HashMap gbMap1 = [:];
HashMap myMap = [:];
myMap = ["request_id":290626627695, "api_status":1, "id":550575383612, "bank_name":"Four Oaks Bank & Trust Company", "account_number":"540126120766", "account_routing_number":"053112505", "account_type":"CHECKING", "linked_external_bank_account":["id":326878, "bank_account_number":"2352154", "bank_account_holder":"John", "bank_account_type":"SAVING", "bank_account_routing":"322271724"]];
gbMap1.put('myKey',myMap);

refVal1 = (gbMap1.get('myKey')).get('id');
log.info "	***********		refVal1 = "+refVal1;

log.info " Converted Int value is "+Integer.parseInt("1234");
]]></script></con:config></con:testStep><con:testStep type="groovy" name="StringToMap" disabled="true"><con:settings/><con:config><script><![CDATA[// Defines a Hashmap which will be used in this sample. 
//Map<String, String> map = new HashMap<String, String>();
 
/** 
* This String text could vary this could be like "key1=value1,key2=value2,key3=value3" or could be using any
* kind of seperator. The seperator used in this case is ',' This could be any character but you should keep
* in mind as what is it.  */
//String text = "A=B&C=D&E=F";// In this case seperator is '&'  

//String text = "A:B,C:D,E:F"
String yourString = "abc,def,";
niceString = yourString.replaceFirst(",", "");
niceString = niceString.substring(0, niceString.length() - 1);
log.info "				>>>> niceString = "+niceString;

String text ='["request_id":9579334308,"api_status":1,"id":458987375256,"bank_name":"Four Oaks Bank & Trust Company","account_number":"540126112729","account_routing_number":"053112505","account_type":"CHECKING","linked_external_bank_account":["id":326803,"linked_bank_account_reference_id":"2/5/14 14:16","bank_account_number":"2352154","bank_account_holder":"John","bank_account_type":"SAVING","bank_account_routing":"322271724"]';
//text = text.replaceFirst("^[", "");
text = text.substring(1, text.length() - 1);
//text = text.substring(0, text.length() - 1);

HashMap map = [:];

//Map<String, String> map = new HashMap<String, String>();
 
// Seperator is specified here, to split string on this basis
for(String keyValue : text.split(" *, *")) {        
 
// Here the each part is futher splitted taking in account the equal sign '='  which demarcates the key
// and valuefor the hashmap        
String[] pairs = keyValue.split(" *: *", 2);    
 
// Those key and values are then put into hashmap     
map.put(pairs[0], pairs.length == 1 ? "" : pairs[1]);

}// Successfully String to hashmap transformation is completed

log.info "											>>>>>>>>>>. map = "+map;]]></script></con:config></con:testStep><con:testStep type="groovy" name="gUI" disabled="true"><con:settings/><con:config><script>import groovy.swing.SwingBuilder
import java.awt.BorderLayout as BL


count = 0;
while(count&lt;2){
new SwingBuilder().edt {
  frame(title:'Automation Run Window', size:[400,200], show: true) {
    borderLayout()
    textlabel = label(text:"Click the button!", constraints: BL.NORTH)
    button(text:'Click Here Now',actionPerformed: 
    {count++; textlabel.text = "Clicked "count"+ time(s)."; 
    log.info " you clicked me"}
    ,constraints:BL.SOUTH)
  }
}
count = count+1;
}</script></con:config></con:testStep><con:testStep type="groovy" name="gUI3" disabled="true"><con:settings/><con:config><script>import groovy.swing.SwingBuilder
import javax.swing.WindowConstants as WC
import javax.swing.JOptionPane
import javax.swing.BoxLayout as BXL

swing = new SwingBuilder()
frame = swing.frame(title:'test',
    defaultCloseOperation:WC.DISPOSE_ON_CLOSE) {

    panel(id:'mainPanel'){
        def panelID 

        (1..6).each {
            panelID = 'panel no is : ' + it

            panel(alignmentX: 0f, id: panelID , opaque:true ,background : java.awt.Color.RED){
                label('description') 
                textField(id: "description$it", text: panelID, columns: 70 )
                button(id: "button$panelID", text: panelID, actionPerformed : {
                    panelID.background = java.awt.Color.RED
                    panelID.repaint()                       
                })
            }
        }
        boxLayout(axis: BXL.Y_AXIS)

        panel(id:'secondPanel' , alignmentX: 0f){                       
            button('Quit', actionPerformed:{
                dispose()
            })
        }
    }       
}
frame.pack()
frame.show()</script></con:config></con:testStep><con:testStep type="groovy" name="gUI2" disabled="true"><con:settings/><con:config><script>import groovy.swing.SwingBuilder
import java.awt.Insets
import javax.swing.JFrame

log.info 'hello, world'

//new SwingBuilder().frame(title: 'demo using buttons', defaultCloseOperation: JFrame.EXIT_ON_CLOSE, show: true, pack: true) {
new SwingBuilder().frame(title: 'demo using buttons', show: true, pack: true) {
 
      vbox() {
        button(action: action(name: 'basic', closure: {log.info "basic"}))
        button(action: action(name: 'mnemonic', mnemonic: 'P', closure: {log.info 'with mnemonic'}))
        button(action: action(name: 'default', defaultButton: true, closure: {log.info 'this is the default button'}))
        button(borderPainted:false, action: action(name: 'unpainted border', closure: {log.info 'unpainted border'}))
        button(contentAreaFilled:false, action: action(name: 'unfilled content area', closure: {log.info 'unfilled content area'}))
        button(focusPainted:false, action: action(name: 'unpainted focus (select it and you\'ll see)', closure: {log.info 'unpainted focus'}))
        button(margin: new Insets(5, 10, 15, 20), action: action(name: 'margins', closure: {log.info 'margins'}))
      }
    }</script></con:config></con:testStep><con:testStep type="groovy" name="AutomationScenarioOLD" disabled="true"><con:settings/><con:config><script>import jxl.*
import com.eviware.soapui.*
import java.util.*
//import jxl.write.*

import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;

import java.text.DecimalFormat
import java.text.Format
import java.text.NumberFormat
import org.apache.poi.hssf.usermodel.*
import org.apache.poi.ss.usermodel.*

log.info "				>>>>>>>>>>>>>>>>>> : Starting AutomationScenario"

int iCountFlag=0
//Variables for reading Scenario Workbook
Workbook TestScenarioWB;
Sheet SenarioSheet1;

//Variables for creating and writing results
WritableWorkbook workbook;
WritableSheet sheet;

//Variables to count rows and columns in scenario sheet
int ScenarioRowCount;
int ScenarioColCount;

//Variable to store cell contents
String cellContents;

//Array to separate and store cell contents based on |
String[] splitCellContents;

//creating a global HashMaps where all maps will be stored;
HashMap globalMap;
//integer to append mapNo to mapName
int mapNo;
//Creating 20 HashMaps
/**
 * As of now assuming that any scenario will not have more than 20 steps
 * this hard-coding had to be done as accessing of map contents prior to the previous steps was not happening when the Maps are created dynamically
 * for e.g. if reference to step.no.2 is made at step.no.3 - this can be handled with dynamic HashMap
 * But if step.no.2 is referenced from step.no.5. This was not working. So creating 20 separate HashMaps to store the response of 20 steps.
 **/
/**
HashMap map1;
HashMap map2;
HashMap map3;
HashMap map4;
HashMap map5;
HashMap map6;
HashMap map7;
HashMap map8;
HashMap map9;
HashMap map10;
HashMap map11;
HashMap map12;
HashMap map13;
HashMap map14;
HashMap map15;
HashMap map16;
HashMap map17;
HashMap map18;
HashMap map19;
HashMap map20;
**/




try{
//String TestScenarioFile = context.expand('${#Project#ScenarioFileLocation}')
String TestScenarioFile = "C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Dec13\\ScenarioSheet2.xls"

//Get the Test Scenario Excel File
TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));

//*********************************************
//get the number of scenrio sheets in the workbook and start a loop for each scenario
//*********************************************
//Get the Sheet having Test Data Properties
SenarioSheet1 = TestScenarioWB.getSheet(1)

	//Count Rows and Columns in Properties sheet
	ScenarioRowCount = SenarioSheet1.getRows()
	ScenarioColCount = SenarioSheet1.getColumns()

	log.info  "				>>>>>>>>>>>>>>>>>> : ScenarioRowCount:"+ScenarioRowCount
	log.info  "				>>>>>>>>>>>>>>>>>> : ScenarioColCount:"+ScenarioColCount




//Emptying all Global hashmap
globalMap = [:];


//Loop for no of rows present
		//Loop for no of steps in each scenario row
		
                //sourceRow = SenarioSheet1.getRow(0)
               
	for(int iCounter1=1;iCounter1&lt;ScenarioRowCount;iCounter1++)
	{//START loop for number of scenarios in the scenario file

		iCountFlag=0;
		log.info "							>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> : Reading Row :"+iCounter1

		for(int iCounter2=3;iCounter2&lt;ScenarioColCount;iCounter2++)
		{//START loop for number of steps in the scenario
			
			/*
			if(iCounter2>3)
			{
			log.info "				>>>> HERE STEP NO IS :"+iCounter2
			//Hashmap 2;
			HashMap 2 = new HashMap();
			def request_id2 = 2.get('request_id');
				log.info "				>>>> request_id From MAP before RUNNING="+request_id2
			}
			*/
			
			if((SenarioSheet1.getCell(iCounter2,iCounter1).getContents()==""))
			 {
			 	log.info "				>>>> For Scenario "+iCounter1+" Step No " +(iCounter2-2)+" is EMPTY"
			 	continue;
			 }
			 else
			 {
				
				iCountFlag = iCountFlag+1
				mapNo = iCountFlag
				mapName = "map"+mapNo
				//mapName = mapNo
				log.info "				>>>mapName is ="+mapName
			
				HashMap mapName= [:]
				log.info "				>>>> map:"+mapName
				//return;
				


				//Taking value from HashMap n providing to a parameter
				//testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+2,iCountTestCase).getContents())
				//testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue(param, value)
			 }



				
			 
			 
			 if(!(SenarioSheet1.getCell(iCounter2,iCounter1).getContents()==""))
			 {//START - CONDITION TO START THE SCENARIO STEP IF ITS NOT EMPTY
			 	log.info "			>>>>>>>>>>>>. NOT EMPTY"
			 	cellContents = SenarioSheet1.getCell(iCounter2,iCounter1).getContents()
			 	log.info "			>>>>>>>> cellContents: "+cellContents

				

				//validation to check the format of Scenario step - should contain the proper name of the API reqeust and StepNo=
				//this can be enhanced by splitting contents by | and taking only API name and checking exact API name exists using ==
				if(!((cellContents.contains("createInvestor|SetNo=")) || (cellContents.contains("getInvestorDetails|SetNo=")) || (cellContents.contains("getInvestorList|SetNo=")) || (cellContents.contains("submitAgreement|SetNo=")) || (cellContents.contains("verifyIdentity|SetNo=")) || (cellContents.contains("verifyAnswers|SetNo=")) || (cellContents.contains("createIssuer|SetNo=")) || (cellContents.contains("getIssuerDetails|SetNo=")) || (cellContents.contains("getIssuerList|SetNo=")) || (cellContents.contains("openEscrow|SetNo=")) || (cellContents.contains("fundAccount|SetNo=")) || (cellContents.contains("fundEscrow|SetNo=")) || (cellContents.contains("changeInvestorContribution|SetNo=")) || (cellContents.contains("cancelEscrow|SetNo=")) || (cellContents.contains("closeEscrow|SetNo=")) || (cellContents.contains("getEscrowDetails|SetNo=")) || (cellContents.contains("getEscrowList|SetNo=")) || (cellContents.contains("getActivityDetails|SetNo=")) || (cellContents.contains("updateEscrowAccount|SetNo=")) || (cellContents.contains("withdrawFunds|SetNo=")) || (cellContents.contains("transferFunds|SetNo=")) || (cellContents.contains("confirmWireTransfer|SetNo=")) || (cellContents.contains("disburseEscrow|SetNo=")) || (cellContents.contains("updateInvestmentLedger|SetNo=")) || (cellContents.contains("freezeInvestmentLedger|SetNo=")) || (cellContents.contains("createProceedsSchedules|SetNo=")) || (cellContents.contains("viewProceedsSchedules|SetNo=")) || (cellContents.contains("cancelProceedsSchedules|SetNo=")) || (cellContents.contains("getInvestmentLedger|SetNo=")) || (cellContents.contains("linkExternalAccount|SetNo="))))
				{
					log.info "				>>>> In Scenario No:"+iCounter1+" the Step No:"+(iCounter2-2)+" does NOT contain a valid API reqeust name";
					//continue;
					break;
				}


				log.info "				>>>> Starting StepNo-"+(iCounter2-2)+" of ScenarioNo-"+iCounter1
				
			 	splitCellContents = cellContents.split("\\|");
			 	int sizeOfCellContents = splitCellContents.size();

			 	String RequestName = splitCellContents[0]
				String SetNoText = splitCellContents[1]

				int sizeOfSetNoText =  SetNoText.size()
				int lengthOfSetNoText =  SetNoText.lastIndexOf( '=' )
 				String SetNo = SetNoText.substring(lengthOfSetNoText+1,sizeOfSetNoText)

				log.info "			>>>>>>>>>>RequestName: "+RequestName
				log.info "			>>>>>>>>>>SetNo: "+SetNo


					
					
				
					
				
				
				//Condition to check if any reference is made in the step
				if(sizeOfCellContents>2)
				{

				String tempRefText1 = splitCellContents[2]
				//issuer_id=2#id
				
				int tempRefText1Size = tempRefText1.size()
				int tempRefTextLength1 =  tempRefText1.lastIndexOf('=')
				int tempRefTextLength2 =  tempRefText1.lastIndexOf('#')

				//Get the parameter name 
				String paramName = tempRefText1.substring(0,tempRefTextLength1)
				log.info "				>>> paramName="+paramName
				//get the step no to refer
				String stepToRefer =  tempRefText1.substring(tempRefTextLength1+1,tempRefTextLength2)
				log.info "				>>> stepToRefer="+stepToRefer
				//get the parameter value to fetch from response
				String paramValueToFetch =  tempRefText1.substring(tempRefTextLength2+1,tempRefText1Size)
				log.info "				>>> paramValueToFetch="+paramValueToFetch

				log.info "				>>>>Let Us C Global Map here : "+globalMap
				log.info "				>>>>Value from Global Map 2 : "+(globalMap.get('map2')).get('id')
				log.info "				>>>>Value from Global Map 1 : "+(globalMap.get("map"+stepToRefer)).get(paramValueToFetch)

				
				//def request_id1 = HashMap(2).get('request_id');
				//log.info "			seeeee hereeeeeeeeee	>>>> request_id1:"+request_id1
				//mapToRefer = "map"+stepToRefer;
				//HashMap mapToRefer = [:]
				//HashMap mapToRefer;

				//Setting request parameter values dynamically #RefText
				//testRunner.testCase.getTestStepByName(RequestName).setPropertyValue(paramName, mapToRefer.get(paramValueToFetch))
				//ReferringValue =  mapToRefer.get(paramValueToFetch);
				//log.info "				>>>> ReferringValue:"+ReferringValue
				//log.info"					>>>> mapNameValue:"+mapName.get(paramValueToFetch)

				//def request_id1 = mapName.get('request_id');
				//log.info "				>>>> request_id1:"+request_id1

				/*
				log.info "				>>>> mapNameHere is :"+mapName


				for(iCounter3=mapName;iCounter3=stepToRefer;iCounter3--)
				{
					if(iCounter3==stepToRefer)
					{
						mapName = iCounter3;
						break;
					}
				}

				log.info "				>>>> mapNameNow is :"+mapName
				*/
				//assert mapName.getClass() == LinkedHashMap //
				//HashMap mapName;
				//def request_id1 = mapName.get('request_id');
				//log.info "				>>>> request_id1:"+request_id1

				}	

				

				int Length =  TestScenarioFile.lastIndexOf( '\\' )
 				String TestDataFileLocation = TestScenarioFile.substring(0,Length)
 				String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls"
 				
				//String TestResponseFile = ResposeFileLocation + "\\"+RequestAPIName+"-TestResponse-" +currentTime+".xls"
				log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFile

				testRunner.testCase.testSuite.project.setPropertyValue("TestDataFileLocation",TestDataFile)
				testRunner.testCase.testSuite.project.setPropertyValue("RequestName",RequestName)
			 	testRunner.testCase.testSuite.project.setPropertyValue("SetNo",SetNo)

			 	testRunner.runTestStepByName("AutomationDriver")


				






				
				


			 	//for every step get the response and store response parameters in an array
			 	//ParsedJSONResponseInString

			 	//String getResponse  = testRunner.testCase.getTestStepByName("AutomationDriver").getPropertyValue( "ParsedJSONResponseInString" )
			 	//log.info "			>>>>>>>>>>.getResponse= "+getResponse
			 	//log.info "			>>>>>>>>>>>ParsedJSONResponseInString="+AutomationDriver.ParsedJSONResponseInString
				def holder = testRunner.testCase.getTestStepByName(RequestName).getPropertyValue("response")
				//log.info "        JSON response holder            "+holder

			 	def slurper = new JsonSlurper()
				def ParsedJSONResponse = slurper.parseText(holder)

				String ParsedJSONResponseInString = ParsedJSONResponse.toString()
				log.info "				>>>>>>>>>>>>>>>>>> : Parsed JSON in String :" +ParsedJSONResponseInString
				
				mapName = ParsedJSONResponseInString
				//mapName = slurper.parseText(holder)

				log.info "				>>>> mapContents : "+mapName

				//def request_id = mapName.get('request_id');
				//log.info "				>>>> request_id From MAP="+request_id

				log.info "   HARRY1"
				globalMap.put("map"+mapNo,mapName)
				log.info "		GlobalMap Now looks like - "+globalMap
				//String tempResponse1 = ParsedJSONResponseInString.replaceAll("{","");
				///String tempResponse2 = ParsedJSONResponseInString.replaceAll("}","");
				//log.info "				>>>> tempResponse2:"+tempResponse1

			 }//STOP - CONDITION TO START THE SCENARIO STEP IF ITS NOT EMPTY
		}//END loop for number of steps in the scenario
		
		
		//Emptying all Global hashmap
		globalMap = [:];
		
	}//END loop for number of scenarios in the scenario file
	




















}catch(FileNotFoundException f)
{
	log.info  "				>>>>>>>>>>>>>>>>>> : FileNotFound"
	log.info  "				>>>>>>>>>>>>>>>>>> : Exception:"+f
}
catch(all)
{
	log.info  "				>>>>>>>>>>>>>>>>>> : Exception:"+all
}


log.info "				>>>>>>>>>>>>>>>>>> : ENDing AutomationScenario"</script></con:config></con:testStep><con:testStep type="groovy" name="GroovyOnGrails" disabled="true"><con:settings/><con:config><script>//defining endpoint
def base = "https://ec2-23-23-208-161.compute-1.amazonaws.com:9191?"

//assemble the query string from a map
def params = ['api_key':'44a54efd-8407-426c-8ff6-be48a6683d16','secret':'FBHSlsiYj7','phone':'1234567890']

url = base + params.collect { k,v -> "$k=$v" }.join('&amp;')

log.info "				>>>> url:" +url;</script></con:config></con:testStep><con:testStep type="groovy" name="DriverScript" disabled="true"><con:settings/><con:config><script>class DriverScript
{
   def log
   def context
   def testRunner


//***********************************************************************//
//Enter Location of Test Data Excel File e.g. E:\\Test Data\\CreateInvestor.xls
//the excel file should be in xls format
String TestDataFileNames = context.expand('${#Project#ScenarioFileLocation}')
//Enter the name of API Request
String RequestAPINames = context.expand('${#Project#RequestName}')
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//Getting TestCaseNo at Project level
String TestCaseNo = context.expand('${#Project#TestCaseNo}')
//*********************************************************************//

   // Class constructor with same case as Class name
   def DriverScript(logIn,contextIn,testRunnerIn)
   {
      this.log = logIn
      this.context = contextIn
      this.testRunner = testRunnerIn
   }

//method to read excel and put values in the request
 def globalProperties()
   {
log.info "				>>>> TestDataFileNames:"+TestDataFileNames
log.info "				>>>> RequestAPINames:"+RequestAPINames
log.info "				>>>> setNo:"+setNo
log.info "				>>>> TestCaseNo:"+TestCaseNo
   }
   





// get a reference to the Automation_TestSuite TestSuite
Automation_TestSuite = testRunner.testCase.testSuite.project.testSuites["Automation_TestSuite"]

// find the module within the TestSuite
getReqValues = Automation_TestSuite.testCases["Automation_TestCase"].testSteps["getRequestValues"]

// initialise the library; which places an instance of Example in the context
getReqValues.run(testRunner, context)

// get the instance of getRequestValues from the context.
def getRequestValuesInstance= context.getRequestValuesInstance

// run the method, 
log.info "				>>>> : Calling :" +getRequestValuesInstance.loadValuesInReqeust()
int getRequestValuesStatus = getRequestValuesInstance.loadValuesInReqeust()

if(getRequestValuesStatus==1)
{
	log.info "				>>>> : Loading of Values Successfull"
}
else
{
	log.info "				>>>> : Loading of Values Unsuccessfull"
}

}


 context.setProperty( "DriverScriptInstance", new DriverScript( log, context, testRunner))
</script></con:config></con:testStep><con:testStep type="groovy" name="getRequestValues" disabled="true"><con:settings/><con:config><script>import jxl.*
import com.eviware.soapui.*
import java.util.*
//import jxl.write.*

//import jxl.write.Formula;
//import jxl.write.Label;
//import jxl.write.Number;
//import jxl.write.WritableCellFormat;
//import jxl.write.WritableFont;
//import jxl.write.WritableSheet;
//import jxl.write.WritableWorkbook;
//import jxl.write.WriteException;
//import jxl.write.biff.RowsExceededException;

//import com.eviware.soapui.support.XmlHolder
//import net.sf.*;
//import net.sf.json.*;
//import net.sf.json.groovy.*;
//import groovy.json.JsonBuilder  

//import jxl.format.Colour;
//import jxl.format.Pattern;

//import java.util.Date;
//import java.text.DateFormat;
//import java.text.SimpleDateFormat;

//import java.lang.Throwable
//import java.lang.Error
import java.lang.Exception

import java.text.ParseException;


//create class for getRequestValues
class getRequestValues
{
   def log
   def context
   def testRunner
   // Class constructor with same case as Class name
   def getRequestValues(logIn,contextIn,testRunnerIn)
   {
      this.log = logIn
      this.context = contextIn
      this.testRunner = testRunnerIn
   }

//method to read excel and put values in the request
 def loadValuesInReqeust()
   {
         log.info "				>>>> : I will read excel file and load values in the reqeust."
         return 1;
   }
   
}

 context.setProperty( "getRequestValuesInstance", new getRequestValues( log, context, testRunner))
//log.info "Library Context:"+context</script></con:config></con:testStep><con:testStep type="groovy" name="VerifySourceFile" disabled="true"><con:settings/><con:config><script>
//create class 
class VerifySourceFile
{
   def log
   def context
   def testRunner
   // Class constructor with same case as Class name
   def VerifySourceFile(logIn,contextIn,testRunnerIn)
   {
      this.log = logIn
      this.context = contextIn
      this.testRunner = testRunnerIn
   }

//method to read excel and put values in the request
 def checkFileExists()
   {
         log.info "				>>>> : I will read excel file and load values in the reqeust."
         return 1;
   }
   
}

 context.setProperty( "getRequestValuesInstance", new getRequestValues( log, context, testRunner))
</script></con:config></con:testStep><con:testStep type="groovy" name="CopyAutomationDriver" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import com.eviware.soapui.*
import java.util.*
//import jxl.write.*

import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import jxl.write.Label;
//import jxl.write.WritableCellFormat;
//import jxl.write.WritableFont;

log.info "				>>>>>>>>>>>>>>>>>> : Starting Test Groovy 1"


int flagCount;
int iCountTestCase;
WritableWorkbook workbook;
WritableSheet sheet;
String ResponseParameter;
String ParameterDataType;

Workbook TestDataWB;
Sheet TestDataProp1;
Sheet TestDataValues1;
Sheet TestDataResponseSchema;
Sheet TestDataResponse;

String EnumDataCollection;
String enumType;

//defining global hashmap for storing maps of response
HashMap globalResponseMap;
globalResponseMap = [:]

def alert = com.eviware.soapui.support.UISupport;
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);

	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);

int labelCount = 1
	
try{


///log.info ">>>>>>" + testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")


//*************************************************************************//
//Enter Location of Test Data Excel File e.g. E:\\Test Data\\CreateInvestor.xls
//the excel file should be in xls format

//String TestDataFileNames = "C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\openEscrow.xls|C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\getEscrowDetails.xls"
//String TestDataFile = testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")
//String TestDataFile = ${#Project#ScenarioFileLocation}
String TestDataFileNames = context.expand('${#Project#ScenarioFileLocation}')

//Enter the name of API Request
//The name should be same as the API request name in the project
//String RequestAPINames = "openEscrow|getEscrowDetails"map1:{"request_id":4423542238,"id":626484610108,"bank_name":"Four Oaks Bank & Trust Company","account_number":"540126108022","account_routing_number":"053112505","account_type":"CHECKING","type":"CUSTODIAN"}
//String RequestAPIName = testRunner.testCase.testSuite.project.getPropertyValue("RequestName")
//String RequestAPIName = ${#Project#RequestName}
String RequestAPINames = context.expand('${#Project#RequestName}')

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//


String[] TestDataFileArray = TestDataFileNames.split("\\|");
String[] RequestAPINameArray = RequestAPINames.split("\\|");




//log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFileArray
int sizeOfTestDataFiles = TestDataFileArray.size();
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfTestDataFiles"+sizeOfTestDataFiles

//log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPINameArray
int sizeOfRequestAPI = RequestAPINameArray.size()
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfRequestAPI"+sizeOfRequestAPI


if(sizeOfTestDataFiles!=sizeOfRequestAPI)
{
alert.showInfoMessage("Number of Test Data Files and Request API must be the same","ALERT MESSAGE");
//system.exit();
return;
}

for(iNoOfTestRequests=0;iNoOfTestRequests < sizeOfRequestAPI;iNoOfTestRequests++)
{//************START loop for No of Reqeusts
	

  
String TestDataFile = TestDataFileArray[iNoOfTestRequests]
String RequestAPIName = RequestAPINameArray[iNoOfTestRequests]
log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFile
log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPIName














 int Length =  TestDataFile.lastIndexOf( '\\' )
 String ResposeFileLocation = TestDataFile.substring(0,Length)
 	//Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
	 //log.info "				>>>>>>>>>>>>>>>>>> : time :"+currentTime

	//Getting location to create the TestResponseFile
	String TestResponseFile = ResposeFileLocation + "\\"+RequestAPIName+"-TestResponse-" +currentTime+".xls"
	log.info "				>>>>>>>>>>>>>>>>>> : TestResponseFile :"+TestResponseFile
	//Creating Response Excel File
	workbook = Workbook.createWorkbook(new File(TestResponseFile));
	sheet = workbook.createSheet("Response",0)




	
	//Get the Test Data Excel File
	TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

	//Get the Sheet having Test Data Properties
	TestDataProp1 = TestDataWB.getSheet("Request Schema")

	//Get the Sheet having Test Data Values
	TestDataValues1 = TestDataWB.getSheet("Request Values")


	//Get the Sheet having Test Data Response Properties
	TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
	TestDataResponse = TestDataWB.getSheet("Response Values")




	//Count Rows and Columns in Properties sheet
	PropRowCount = TestDataProp1.getRows()
	PropColCount = TestDataProp1.getColumns()


	//Count Rows and Columns in Response Schema sheet
	ResponseSchemaRowCount = TestDataResponseSchema.getRows()
	ResponseSchemaColCount = TestDataResponseSchema.getColumns()

	//log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
	//log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount

	//Count Rows and Columns in Response sheet
	ResponseRowCount = TestDataResponse.getRows()
	ResponseColCount = TestDataResponse.getColumns()

	//log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
	//log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount









	//Count Rows and Columns in Values sheet
	ValuesRowCount = TestDataValues1.getRows()
	ValuesColCount = TestDataValues1.getColumns()
	//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesRowCount " +ValuesRowCount
	//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesColCount " +ValuesColCount
	//This will display an information message
	//def alert = com.eviware.soapui.support.UISupport;
	//alert.showInfoMessage("Hello World !");
	//alert.showInfoMessage("Hello World !","soapUI Warning !")
	//log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
	//log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != (ValuesColCount-2))
{
	workbook.write()
	workbook.close()
	
	alert.showInfoMessage("Mismatch in the count of Properties and Values");
	log.info "				>>>>>>>>>>>>>>>>>>>> : Mismatch in the count of Properties and Values"
	
	return;
}


//********Iterating loop for No of Test Cases in Test Data Sheet*********//



for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
	if(!(TestDataValues1.getCell(2,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}
 flagCount = 2


		Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
		sheet.addCell(label00);

		Label label01 = new Label(1, 0, "RESPONSE"); //column=0=A,row=0=1
		sheet.addCell(label01);

		log.info "				>>>>>>>>>>>>>>>>>> : STARTING TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
		//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
		//sheet.addCell(label02);


for(iCounter=1;iCounter<(ValuesColCount-2);iCounter++)
{
	//log.info "				>>>>>>>>>>>>>>>>>> : IN FOR LOOP "
	testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+2,iCountTestCase).getContents())
}



//Running the API Request with the Test Parameters-Values
testRunner.runTestStepByName(RequestAPIName)



//*******************************************************************************************//

log.info "				>>>>>>>>>>>>>>>>>> : Starting Validate JSON Response Groovy"


//Getting JSON Response
def holder = testRunner.testCase.getTestStepByName(RequestAPIName).getPropertyValue("response")
//log.info "        JSON response holder            "+holder

//Parsing JSON Response
def slurper = new JsonSlurper()
def ParsedJSONResponse = slurper.parseText(holder)
//log.info "        JSON Parsed               "+ParsedJSONResponse

//Stringification of JSON response
String ResponseInString = holder.toString()
//log.info "         JSON String                "+ResponseInString
String ParsedJSONResponseInString = ParsedJSONResponse.toString()
log.info "				>>>>>>>>>>>>>>>>>> : Parsed JSON in String :" +ParsedJSONResponseInString
Label label = new Label(1, iCountTestCase, ResponseInString); //column=0=A,row=0=1
		sheet.addCell(label);
//log.info "				>>>>>>>>>>>>>>>>>> : ResponseSchemaRowCount :"+ResponseSchemaRowCount


for(iCounter=1;iCounter<ResponseSchemaRowCount;iCounter++)
{//******************start loop for Response Schema validation
	if(TestDataResponseSchema.getCell(1,iCounter).getContents() == "Y")
	{
		//log.info "          >>   YES  " +iCounter
		String requiredParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"'
		//log.info "				>>>>>>>>>>>>>>>>>> : requiredParameter :"+requiredParameter
		if(!(ParsedJSONResponseInString.contains(requiredParameter)))
		{
			
			log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the mandatory parameter - "+TestDataResponseSchema.getCell(0,iCounter).getContents() 
			String MandatoryParameterMissing = "The response does not contain the mandatory parameter - "+requiredParameter
			Label label2 = new Label(flagCount, iCountTestCase, MandatoryParameterMissing);
			sheet.addCell(label2);
			flagCount = flagCount+1
			//testRunner.fail
		}
	}



//******NOV-8*****FOR TESTING DATATYPE OF VALUES//
if(!(TestDataResponseSchema.getCell(2,iCounter).getContents().isEmpty()))
	{
		//String ResponseParameter = TestDataResponseSchema.getCell(0,iCounter).getContents()
		ResponseParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"'
		ParameterDataType = TestDataResponseSchema.getCell(2,iCounter).getContents()
		//log.info  "				>>>>>>>>>>>>>>>>>> : ResponseParameter :"+ResponseParameter
		//log.info  "				>>>>>>>>>>>>>>>>>> : ParameterDataType :"+ParameterDataType



// int Length =  TestDataFile.lastIndexOf( '\\' )
// String ResposeFileLocation = TestDataFile.substring(0,Length)
 int IndexOfParam =  ParsedJSONResponseInString.lastIndexOf(ResponseParameter)
 int LengthOfParam = ResponseParameter.size()
 //log.info "     >>>>>>>>>>>>>>>.   IndexOfParam "+IndexOfParam
 //log.info "     >>>>>>>>>>>>>>>.  LengthOfParam "+LengthOfParam

  if(IndexOfParam > -1)
  {
// log.info "       <<>>>>>>>> ParsedJSONResponseInString"+ParsedJSONResponseInString
 //int LastIndexOfValue = ParsedJSONResponseInString.substring(ResponseParameter,indexOf(","))
 //log.info "             >>>>>>>>...   LastIndexOfValue "+LastIndexOfValue

 IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf(",", IndexOfParam)

		//log.info  "     >>>>>>>>>>>>>>>.   IndexOfSubsequentComma "+IndexOfSubsequentComma
 
if(IndexOfSubsequentComma<1)
{
	IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf("}", IndexOfParam)

	if(IndexOfSubsequentComma<1)
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Could not find the value for the parameter : "+ResponseParameter
	}
}



if(ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))
 	{
 		EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))

 		if(EnumDataCollection.matches("[,a-zA-Z]*"))
 		{
 			enumType = "String"
 		}
 		else
 		{
 			enumType = "Number"
 		}
 	}

 //if((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || (ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))) //********** **
  if((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || enumType=="String") //********** **
 {
 	//log.info  "				>>>>>>>>>>>>>>>>>> : I AM HERE IT"
 	ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	//log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText
 
 }
 
 else
 {
 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
 }
 //ResposeValueText = ParsedJSONResponseInString.substring(ParsedJSONResponseInString.indexOf(ResponseParameter)+LengthOfParam, (ParsedJSONResponseInString.indexOf(","))+(IndexOfParam));
 //ResposeValueText = ParsedJSONResponseInString.substring((IndexOfParam+LengthOfParam+2),(IndexOfParam+LengthOfParam+2)+(ParsedJSONResponseInString.indexOf(",")))
 //ResposeValueText = ParsedJSONResponseInString.substring((32),ParsedJSONResponseInString.indexOf(","))
 //s.indexOf(")")
 //log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :"+ResposeValueText
// assert ResposeValueText.isNumber()

//try{
	
if(ParameterDataType.toString().equalsIgnoreCase("String"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to STRING IF block"
	 String returnDataType = String.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : StringValue  "+returnDataType
}	
if(ParameterDataType.toString().equalsIgnoreCase("Long"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to LONG IF block"
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText " +ResposeValueText
	long returnDataType = Long.valueOf(ResposeValueText)
	 //log.info "				>>>>>>>>>>>>>>>>>> : LongValue  "+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Int"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Int IF block"
	 int returnDataType = Integer.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : IntValue  "+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Float"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Float IF block"
	log.info "				>>>>>>>>>>>>>>>>>> : FloatValue text "+ResposeValueText
	 float returnDataType = Float.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : FloatValue  "+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Boolean"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Boolean IF block"
	 boolean returnDataType = Boolean.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : BooleanValue  "+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Date"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Date IF block"
	 
	 SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
	 Date date = null;
	  date = format.parse(ResposeValueText);
	 //date returnDataType = date.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : DateValue  "+date
}
if(ParameterDataType.toString().toLowerCase().contains(("Enum").toLowerCase()))
{

	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
	EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
	log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection

	if(!(EnumDataCollection.toString().toLowerCase().contains((ResposeValueText).toLowerCase())))
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText"
	String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection
	Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label4);
	flagCount = flagCount+1
	}
	/*
	String[] EnumData = EnumDataCollection.split(",")
	int sizeOfEnumData = EnumData.size()
	log.info "			>>>>>>>>>>>>>> sizeOfEnumData :"+sizeOfEnumData
	
	
	for(iCountOfEnumData=0;iCountOfEnumData<sizeOfEnumData;iCountOfEnumData++)
	{
	log.info "			>>>>>>> EnumData :"+EnumData[iCountOfEnumData]
	
	}
	 //date returnDataType = date.valueOf(ResposeValueText)
	 //log.info "        >>>>>>>>>.     EnumValue  "+returnDataType
	*/
}
/*
}
  catch(all)
{
	log.info "             >>>>>>>>>> Some Exception Occured"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	
//workbook.write()
//workbook.close()

}
*/
 //long.info "  >>>>>>>>>>>>>>>   "+bool
 //ValueDataType = ResposeValueText.getClass()
 //log.info " >>>>>>>>>>>> ValueDataType ="+ValueDataType

  }
	}
//******NOV-8*****// 

//*****************************************************************8888888
//*****************************************************************8888888
}//******************END loop for Response Schema validation





for(iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{
	//if(IsEmpty(TestDataResponse.getCell(iCounter,1).getContents()))

	if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
	{
		//log.info " >>>>>>>>>>>>   not NULL"
		String ParamValueField = '"'+TestDataResponse.getCell(iCounter1,0).getContents()+'":"'+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()+'"'
		String ParamValueFieldForIntType = '"'+TestDataResponse.getCell(iCounter1,0).getContents()+'":'+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()
		//log.info " >>>>>>>>>>>  ParamValueField is : "+ParamValueField 
//1
		
		if(!(ParsedJSONResponseInString.contains(ParamValueField))  && !(ParsedJSONResponseInString.contains(ParamValueFieldForIntType)) )
		{
			log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the value - "+ParamValueField
			
			
			//log.info "           >>>>>>>> flag Count  "+flagCount
			//label1 = "label"+flagCount
			//Label label1 = new Label(0, 1, "TC_001"); //column=0=A,row=0=1
			//sheet.addCell(label1);
			
			//Label label+""+flagCount = new Label
			Label label3 = new Label(flagCount, iCountTestCase, "The response does not contain the value - "+ParamValueField+"");
			sheet.addCell(label3);
			flagCount = flagCount+1
		}
	}
}

if(flagCount==2)
{
	/*
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);
	*/
	//log.info  "				>>>>>>>>>>>>>>>>>> : if loop - flagCount "+flagCount
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label02);
	// sheet.addCell(new jxl.write.Label(0,0,"User Name",normalFormat));
}
else{
	/*
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);
	*/
	//log.info  "				>>>>>>>>>>>>>>>>>> : else loop - flagCount "+flagCount
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
}	
log.info "				>>>>>>>>>>>>>>>>>> : END TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
}//************END loop for No of Test Cases

workbook.write()
workbook.close()
}//************END loop for No of Reqeusts


}
catch (NumberFormatException e)
{
	log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : NumberFormatException"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	workbook.write()
	workbook.close()
}
catch(ParseException parseEx)
{
	log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : ParseException"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	workbook.write()
	workbook.close()
}
catch(FileNotFoundException f) 
{
   workbook.write()
   workbook.close()
   f.printStackTrace();
   log.info "				>>>>>>>>>>>>>>>>>> : FILE NOT FOUND"
   //alert.showInfoMessage("Hello World !","soapUI Warning !")
   alert.showInfoMessage("Please Check the File Name and Location is Correct","FILE NOT FOUND");
  
}
catch(all)
{
	
	//String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	String Exception1 = "An Exception Occurred : "+all+""
	log.info "				>>>>>>>>>>>>>>>>>> : Exception1 : "+Exception1
	Label label5 = new Label(flagCount, iCountTestCase, Exception1);
	sheet.addCell(label5);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	
	workbook.write()
	workbook.close()

}

log.info "				>>>>>>>>>>>>>>>>>> : End of Validate JSON Response Groovy"
log.info "				>>>>>>>>>>>>>>>>>> : End of AutomationDriver script"]]></script></con:config></con:testStep><con:testStep type="groovy" name="getCurlReq" disabled="true"><con:settings/><con:config><script>import jxl.*
import com.eviware.soapui.*
import java.util.*
//import jxl.write.*

import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;


//import com.yelllabs.soapy.helpers.CurlGenerator;
//new CurlGenerator(context, messageExchange, log);



def holder1 = testRunner.testCase.getTestStepByName("createInvestor").getPropertyValue("request")
log.info "				>>>> holder1=:"+holder1
init();
log.info getCurlCmd(curlParams);
testRunner.runTestStepByName("createInvestor")
def holder2 = testRunner.testCase.getTestStepByName("createInvestor").getPropertyValue("response")</script></con:config></con:testStep><con:testStep type="groovy" name="HashMap" disabled="true"><con:settings/><con:config><script>HashMap map1 = [:]
HashMap map2 = [:]
HashMap map3 = [:]
//HashMap map3 = ["r":"Rad"]
//HashMap map =["map1":map4]


def refer = "I am From HashMap";

for(i=1;i&lt;4;i++)
{
String name= "[name:Raghav"+i+"]"

HashMap i = [:]
//i = name
log.info "			>>> map"+i
def number1 = i.get('name')
log.info "				>>> number ="+number1
}
map1 = ['id':'FX-11', 'name':'Radish', 'no':1234, 99:'Y']
map1 = ['name':'Raghav','city':'chandigarh']
log.info "				>>>> map1="+map1



int sizeOfmap1 = map1.size()

log.info "			>>>> map1 = "+map1
log.info "			>>>> sizeOfmap1 = "+sizeOfmap1

String idValue = map1.get('id');
String noValue = map1.get('no');

//String response1 = "{"request_id":633061466013,"id":992343366268,"bank_name":"Four Oaks Bank &amp; Trust Company","account_number":"540126110117","account_routing_number":"053112505","account_type":"CHECKING"}"

map2 = ["request_id":578395769023,"id":327566994350,"bank_name":"Four Oaks Bank &amp; Trust Company","account_number":"540126109376","account_routing_number":"053112505","account_type":"CHECKING"]
int sizeOfmap2 = map2.size()
log.info "			>>>> map2 = "+map2
log.info "			>>>> sizeOfmap2 = "+sizeOfmap2

map3 = ["request_id":578395769023,"id":327566994350,"bank_name":"Four Oaks Bank &amp; Trust Company","account_number":"540126109376","account_routing_number":"053112505","account_type":"CHECKING"]
int sizeOfmap3 = map3.size()
log.info "			>>>> map3 = "+map3
log.info "			>>>> sizeOfmap3 = "+sizeOfmap3

def request_id = map3.get('request_id');
def bank_name = map3.get('bank_name');
def issuer_id = map3.get('id');


/////////////////////////////////////////////////
/*
log.info "				>>>> Start"
mapNo = 2
mapName = mapNo
HashMap mapName= [:]
mapName = ['id':'AB001', 'name':'Radish', 'no':1234, 99:'Y']

String abc = "map"+"Name"
log.info " 				abc = "+abc
//HashMap h = new HashMap(mapName);
//HashMap h = new HashMap(2);
//HashMap h = new HashMap(abc);

//log.info "   				>>>>>>. ha aha ha ha ha ha :"+2.get('id')

log.info  " map name = "+mapName
//def abcd = 2.get('id')

s = mapName.toString()
log.info "				>>> s = "+s

//def abc = s.get('id')
//def m2 = evaluate(s)
//log.info "				>>>> m2 = "+m2

//mapName = 2.
//idValue = mapName.get('id');
//log.info "				>>>> idValue = "+idValue 

*/
/////////////////////////////////////////////////////

/*
for(int iCounter5=11;iCounter5&lt;30;iCounter5++)
{
	int mapNo = iCounter5
	mapName = "map"+mapNo
	log.info "				mapName is = "+mapName
	HashMap mapName= [:]
	mapName = ['id':'A001', 'name':'Radish', 'no':1234, 99:'Y']
}
*/
/*
HashMap map10= [:]
map10= ['id':'A001', 'name':'Radish', 'no':1234, 99:'Y']

HashMap map20= [:]
map20= ['id':'B002', 'name':'Radish', 'no':1234, 99:'Y']

HashMap map30= [:]
map30= ['id':'C003', 'name':'Radish', 'no':1234, 99:'Y']
*/
HashMap map10;
HashMap map20;
HashMap map30;


map10= ['id':'B0010', 'name':'Radish', 'no':1234, 99:'Y']
map20= ['id':'B0020', 'name':'Radish', 'no':1234, 99:'Y']
map30= ['id':'B0030', 'name':'Radish', 'no':1234, 99:'Y']

def step=20
if(step==10)
{
	//HashMap map10= [:]
	map10= ['id':'B0010', 'name':'Radish', 'no':1234, 99:'Y']
	log.info "				>>>> map10= "+map10
}
if(step==20)
{
	//HashMap map20= [:]
	map20= ['id':'B0020', 'name':'Radish', 'no':1234, 99:'Y']
	log.info "				>>>> map20= "+map20
}
if(step==30)
{
	//HashMap map30= [:]
	map30= ['id':'B0030', 'name':'Radish', 'no':1234, 99:'Y']
	log.info "				>>>> map30= "+map30
}
def referToStep = 30;
def ids;

if(referToStep==10)
{
	ids = map10.get('id')
}
if(referToStep==20)
{
	ids = map20.get('id')
}
if(referToStep==30)
{
	ids = map30.get('id')
}
log.info "				>>> ids == "+ids</script></con:config></con:testStep><con:testStep type="groovy" name="HashMapTest" disabled="true"><con:settings/><con:config><script><![CDATA[

//HashMap map =["map1":map4]
HashMap map;
map =[:]
HashMap map1 = ["r":"Rad1"]
HashMap map2 = ["r":"Rad2"]
HashMap map3 = ["r":"Rad3"]
HashMap map4 = ["r":"Rad4"]

int mapNo = 3;
String rr = "r";

map.put("map1",map1)
map.put("map2",map2)
map.put("map"+mapNo,map3)
map.put("map4",map4)

log.info "	map="+(map.get('map1')).get("r")
log.info "	map="+(map.get('map2')).get("r")
log.info "	map="+(map.get('map3')).get("r")
log.info "	map="+(map.get('map4')).get("r")

log.info "	map="+(map.get('map'+mapNo)).get(rr)



HashMap map11 = [request_id:842816811947, id:33463297533, "bank_name":"Four Oaks Bank & Trust Company", account_number:540126110526, account_routing_number:053112505, account_type:"CHECKING", type:"CUSTODIAN"];
HashMap map12 = [request_id:659862991451, id:748935386065, bank_name:"Four Oaks Bank & Trust Company", account_number:540126110114, account_routing_number:053112505, account_type:"CHECKING", linked_external_bank_account:[id:316086, bank_account_number:2352153, bank_account_holder:"John", bank_account_type:"SAVING", bank_account_routing:322271724]];
map.put("map11",map11)
map.put("map12",map12)

log.info "		map11 = "+(map.get('map11')).get('id');
log.info "		map12 = "+(map.get('map12')).get('bank_account_holder');


HashMap map13= ["request_id":4423542238,"id":626484610108,"bank_name":"Four Oaks Bank & Trust Company","account_number":"540126108022","account_routing_number":"053112505","account_type":"CHECKING","type":"CUSTODIAN"]
//HashMap map14= {"request_id":15641692591,"id":286612950001,"bank_name":"Four Oaks Bank & Trust Company","account_number":"540126110600","account_routing_number":"053112505","account_type":"CHECKING","linked_external_bank_account":{"id":316090,"bank_account_number":"2352153","bank_account_holder":"John","bank_account_type":"SAVING","bank_account_routing":"322271724"}}
HashMap map14= ["request_id":15641692591,"id":286612950001,"bank_name":"Four Oaks Bank & Trust Company","account_number":"540126110600","account_routing_number":"053112505","account_type":"CHECKING","linked_external_bank_account":["id":316090,"bank_account_number":"2352153","bank_account_holder":"John","bank_account_type":"SAVING","bank_account_routing":"322271724"]]
log.info "		map14 = "+(map14.get('linked_external_bank_account')).get('id')



def refer1 = testRunner.testCase.getTestStepByName("HashMap").getPropertyValue("refer");
log.info " Refer1 = "+refer1

//def a = mockRunner.mockService.project.getPropertyValue('refer')













//*****************************************************

/*
HashMap testmap1 = ["request_id":15641692591,"id":286612950001,"bank_name":"Four Oaks Bank & Trust Company","account_number":"540126110600","account_routing_number":"053112505","account_type":"CHECKING","linked_external_bank_account":["id":316090,"bank_account_number":"2352153","bank_account_holder":"John","bank_account_type":"SAVING","bank_account_routing":"322271724"]];


//["request_id":354305132331, "activity_list":["activity_date":2014-01-07, "description":COLLECT-BOOK-COMPLETED, "debit_amount":0.0, "credit_amount":100.0, "balance":100.0, "investor_id":34560189536]];
String ReferringValue = testmap1.get('linked_external_bank_account').get('id');
//log.info "		map14 = "+(map14.get('activity_list')).get('activity_date')

log.info "				>>>> ReferringValue = "+ReferringValue;
*/

//*********************************************

HashMap testmap1 = ["request_id":759923243014,"activity_list":["activity_date":"2014-01-07","description":"COLLECT-BOOK-COMPLETED","debit_amount":0.00,"credit_amount":100.00,"balance":100.00,"investor_id":34560189536]];
String referringValue = testmap1.get('activity_list').get('activity_date');
//String referringValue1 = testmap1.getPropertyValue('activity_list').get('activity_date');




//HashMap testmap2 = ["request_id":759923243014,"activity_list":[["activity_date":"2014-01-07","description":"COLLECT-BOOK-COMPLETED","debit_amount":0.00,"credit_amount":100.00,"balance":100.00,"investor_id":34560189536]]];
//HashMap testmap3 = {"request_id":759923243014,"activity_list":[{"activity_date":"2014-01-07","description":"COLLECT-BOOK-COMPLETED","debit_amount":0,"credit_amount":100,"balance":100,"investor_id":34560189536}]};
//sString referringValue2 = testmap2.get('activity_list').get('activity_date');

//have to take response in string
//then convert all occurrences of { to [ and } to ]
//then check if there is any occurrence of double [[ change to [ and similarly ]] to ]
//now put this in hashMap

String responseInStringNewFormat;
String ResponseInString = '{"request_id":759923243014,"activity_list":[{"activity_date":"2014-01-07","description":"COLLECT-BOOK-COMPLETED","debit_amount":0.00,"credit_amount":100.00,"balance":100.00,"investor_id":34560189536}]}';
log.info "				>>>> : ResponseInString : "+ResponseInString;
String responseInStringNew = ResponseInString.replace('{','[').replace("}","]");
log.info "				>>>> : responseInStringNew : "+responseInStringNew;

if(responseInStringNew.contains('[['))
{
	responseInStringNewFormat = responseInStringNew.replace('[[','[').replace("]]","]");
}
log.info "				>>>> : responseInStringNewFormat : "+responseInStringNewFormat;

//HashMap testmap3 = responseInStringNewFormat;
//String referringValue3 = testmap3.get('activity_list').get('activity_date');


//HashMap referMap1 = [request_id:759923243014, activity_list:[[activity_date:2014-01-07, description:COLLECT-BOOK-COMPLETED, debit_amount:0.0, credit_amount:100.0, balance:100.0, investor_id:34560189536]]];


//HashMap mapRefId = ["id":440858441797, "bank_name":"Four Oaks Bank & Trust Company", request_id:820078252651, account_number:540126121014, account_routing_number:053112505, linked_external_bank_account:[id:326755, linked_bank_account_reference_id:"2/5/14 11:33", bank_account_number:2352154, bank_account_holder:"John", bank_account_type:'SAVING', bank_account_routing:322271724], api_status:1, account_type:'CHECKING'];
//String linkedBARefId = mapRefId.get('linked_external_bank_account').get('linked_bank_account_reference_id');

String RefText = "linked_bank_account_reference_id=1.2.linked_bank_account_reference_id"

String[] getReferenceValues = RefText.split("\\.");
int NoOfReferences = getReferenceValues.size();
//int countOfDots = RefText.split(".").length;
//log.info "			>>>>>>>>>>> countOfDots = "+countOfDots;

//int countMatches = RefText.countMatches(RefText, '.');

//CharMatcher.is('a').countIn("aaaab");

//int n = StringUtils.countMatches("11112222", "1");]]></script></con:config></con:testStep><con:testStep type="groovy" name="checkStringcontainsnumbers" disabled="true"><con:settings/><con:config><script>//String stringToMatch = "DEBT, EQUITY, REVENUE_SHARING, OTHER";
String stringToMatch = "0,1";

//if(stringToMatch.matches("[a-zA-Z0-9]*"))
//if(stringToMatch.matches("[,a-zA-Z(,)( )]*"))
if(!(stringToMatch.matches("[0-9,]*")))
{
	log.info "		>>>>>>>>>>>>>>>>>> MATCH FOUND MATCH FOUND MATCH FOUND"
}
	
				String tempRefText1 = "issuer_id=2#id"
				
				int tempRefText1Size = tempRefText1.size()
				int tempRefTextLength1 =  tempRefText1.lastIndexOf('=')
				int tempRefTextLength2 =  tempRefText1.lastIndexOf('#')

				//Get the parameter name 
				String paramName = tempRefText1.substring(0,tempRefTextLength1)
				log.info "				>>> paramName="+paramName
				//get the step no to refer
				String stepToRefer =  tempRefText1.substring(tempRefTextLength1+1,tempRefTextLength2)
				log.info "				>>> stepToRefer="+stepToRefer
				//get the parameter value to fetch from response
				String paramValueToFetch =  tempRefText1.substring(tempRefTextLength2+1,tempRefText1Size)
				log.info "				>>> paramValueToFetch="+paramValueToFetch



				mapName = 42;
				stepToRefer = 42;

				for(iCounter3=mapName;iCounter3=stepToRefer;iCounter3--)
				{
					if(iCounter3==stepToRefer)
					{
						mapName = iCounter3;
						break;
					}
				}

				log.info "				>>>> mapName="+mapName





/////************************************88888
				//String tempRefText1 = "issuer_id=2#id"
				String tempRefText2 = "issuer_id=2.response.id";
				int tempRefText2Size = tempRefText2.size()
				int tempRefTextLength3 =  tempRefText2.lastIndexOf('=')
				int tempRefTextLength4 =  tempRefText2.indexOf('.')
				int tempRefTextLength5 =  tempRefText2.lastIndexOf('.')

				//Get the parameter name 
				String paramName2 = tempRefText2.substring(0,tempRefTextLength3);
				log.info "				>>> paramName2="+paramName2;
				//get the step no to refer
				String stepToRefer2 =  tempRefText2.substring(tempRefTextLength3+1,tempRefTextLength4);
				log.info "				>>> stepToRefer2="+stepToRefer2;
				//get the parameter value to fetch from response
				String paramValueToFetch2 =  tempRefText2.substring(tempRefTextLength5+1,tempRefText2Size)
				log.info "				>>> paramValueToFetch2="+paramValueToFetch2;
</script></con:config></con:testStep><con:testStep type="restrequest" name="createInvestor" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/createInvestor" methodName="2.9" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createInvestor" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:originalUri>https://qa-api.bancboxcrowd.com/crowd/v0/cfp/createInvestor</con:originalUri><con:credentials><con:username/><con:password/><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="created_by" value="Raghav"/>
  <con:entry key="phone" value="5555555555"/>
  <con:entry key="verification_required" value="0"/>
  <con:entry key="bank_account_routing" value="322271724"/>
  <con:entry key="ssn" value="112-22-3333"/>
  <con:entry key="cfp_id" value="362704280361"/>
  <con:entry key="address_2" value="PEACHTREE PLACE"/>
  <con:entry key="bank_account_number" value="2352154"/>
  <con:entry key="supress_email" value="true"/>
  <con:entry key="preSharedKey" value="baje5ja6quon"/>
  <con:entry key="company_tax_id" value="123456789"/>
  <con:entry key="email" value="raghav+CrtIntInv@bancbox.com"/>
  <con:entry key="company_name" value="ABC Company"/>
  <con:entry key="bank_account_type" value="SAVING"/>
  <con:entry key="api_key" value="1e4527e2-5fad-4eb0-9400-b1deb77eaf5a"/>
  <con:entry key="bank_account_holder" value="John"/>
  <con:entry key="last_name" value="SMITH"/>
  <con:entry key="reference_id" value=""/>
  <con:entry key="secret" value="NaXD8kfeOQ"/>
  <con:entry key="user_id" value=""/>
  <con:entry key="withdraw_on_availability" value="1"/>
  <con:entry key="internal" value="1"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getInvestorDetailsOLD" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/getInvestorDetails" methodName="??" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getInvestorDetailsOLD" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:assertion type="XPath Match" name="XPath Match" disabled="true"><con:configuration><path>//data[1]/@contentLength</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" disabled="true"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value="63422286420"/>
  <con:entry key="api_key" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
  <con:entry key="secret" value="DD7JOLd4Dw"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getInvestorList" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/getInvestorList" methodName="2.9" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getInvestorList" mediaType="application/x-www-form-urlencoded" accept="" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value=""/>
  <con:entry key="secret" value=""/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="submitAgreement" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/submitAgreement" methodName="2.9" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="submitAgreement" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value="379252830773"/>
  <con:entry key="signed_document_attachment" value="JVBERi0xLjQKJcOkw7zDtsOfCjIgMCBvYmoKPDwvTGVuZ3RoIDMgMCBSL0ZpbHRlci9GbGF0ZURl Y29kZT4 CnN0cmVhbQp4nB2KuwoCQQxF 3zFrYVZk7gzs8KQYkELu4WAhdj56Bbcxt83I4GTe3PC g BLHzASRyyiwXrs3J647rD ZZ/tTbNTLsOEqmM8 AP7s0AU/ro1FtPG2nGwJL0LNx45W25cLIWo cYo12d0vdHJaaMEP/LAbkQplbmRzdHJlYW0KZW5kb2JqCgozIDAgb2JqCjExNgplbmRvYmoKCjUg MCBvYmoKPDwvTGVuZ3RoIDYgMCBSL0ZpbHRlci9GbGF0ZURlY29kZS9MZW5ndGgxIDIzMDAwPj4K c3RyZWFtCnic7Xx5XFvHueg35xxtgJAQYBYBOpIQCMQis9iGECMMeAm2wTa2wTUBIQQoFkiWhAm5 ce3cLE5wEqdpmq1t7CR14tROLSALTtKa5HZ5adrG6Zr2pbHzkrTp4hvf1kmX2Oh9M ewOW5u733v j/f7Pev4m/lm5ptvvvm2OYdjKRIa8kIC7AUeXJ4BdzBDG68GgB8AEINnV0R88mctBsTPAKi 3Rvs G7jrsd1vAWi BqAI9/lHer/c9bubAHTpAAnb r3unr8vO6QFMEaQx5J 7GieHlFh xi2c/sHItcP Kr6ej 1TtO0PeNzP6x6Lx/Z5bKcMuK8P3qIvVgBkURnEQfeA93Pf1/0U23aAkqFgIBzpgdwYwDWH 6Hgw5A3 Jb/3I2xPSTIAwYt EhBV0jbHCwqlSg3/v34UdyOsBRNCFn8fGAFi7yC8h/DB9DWxC4od YJ2 LnaGT0bip2UAsMH9cBBy4RxZDK/AFFwDT0AdtMB9sApeh OQCCPkNRDACg1wBGzEBByshDSi gIfgl7AdQvA nAE7NMHbxIB8GiEIi6Aq9jssm D22AmkioN6 Aa8QPxkE5QivporIg5c UBsCtLA Hvth7E1sfRXeJ7mxMViN2G8gCfJhD3wBDHAdfD92ASXNhW54ktxIfgdm6IL9QoUwGtsBV8Gz8DPS hNg6GFG8qXkW/DjrcZJGpmKnY7 FbwkEvMjpX F2lHgcprgSvl5xCETIg6thPbhx9F/glySZLOZd sfzYithD2Psk/IlzcN/lVSiHA9ZAJ9wFj6I2fg7vwUcknlSSr5KjeL1B/l3xJsrWBENwA8bWV1F7 T8IxOEEWk8VcGpeG2kqDAtiMYwfgMK4/AadIE2knU Rl/rDCOV0bS4mlxn4bi0EhtKGEB FlXOM8 cSINrsBb IiQI0QUZRdvwh32wFfgFLyBcryNev8I/koK8XqH zy3J7Y1diT2PsqiBhMsgw2wDQKw C4bhMbTqK/Bt A/yCadByteF7yhuUJyL3Yu6zYMVKHszUm9C3vvRSuMwidfPcZdJRMRdLCPryUbS Rw6Q 8kk SX5JafkzNxO7vd8lH Nf0tYolDEqpHTIsjBda2wFfrRAp9Hbd L z0C34FXSSrJI8W4 o5/j/I 5q7gGvB7nXufe5m/lDwgXFLdNn5n w/QnsVFQoZetQj0MwddRCx SRShDAbmOhMm7KPk9 3DN8Iq/nrXwlX8e38u387fx9/P/gfySEhKPCrxRrFG7FUZV7enD6jVhT7BagWUKJcuVDEVTAUvSf XvSmHShfEK8Q3Ag3wSjcjf5yLxyCo7jvk/Aq/Ax DX9ECwAxo8w XH0Ave5WcjdeD5Fj5GXyHfIq eYd8TC/OgpedW8LVcvXcSq6PuxWv 7hT3M 5D/gs3sPv4ffi9Qj/HP9LAQRBiCnK8Fqt2K94Uvma yq5arepW/ DC2YuFF9svvj0N05nTn5u f/rl6d/GtsRGUH4bFEMJSroPpXwIffAwXl9HT3wOvou5  xdM1j8RjijQ49OJFb2hCK1WS1aRNXitIxvw2ozXVrINLzfpJv147SF7yb Sm8kt5C7yJXY9iHs7 TJ4iz H1PHkBr5 R0 Q35PfkTxw6McejN9u4fK6Uq8Kd1nOruGZuI159XACvIBfidqGFnuQmuBPc z/lk3sYX825 J/8Q/w3 Ff6n/N8ETigSSoUaYYvQJ9wsvC68IbwpfKIwKRoV/YpHFK8ojcoK5Wbl dcoHlceVHygvqJSqFlW36kbVT1UxtQ2z1fdw388uSHmlytdJWJEiXM dxrhI54OKfWQzakzJtfJ  /m7 x4peco4Xya/IKO/jd8Qe51dyf UDZAt3klh4k6Ka74U7IUaOcu9w57nfCqmklfsdsQtfIM9z Ab6eU7K8 hMhVbhZ8QEA9wuo5naTKe47/M38zbFvQrXiEXJa8Qj3BojCGS4ZTmNU7 MewEk/4nzc fmgTKhSfgA/1/pTietT3cu52Usj/VHgE3uet3J/JOXI/Zo0fkmuEXO5aroocxYx7keTAWbITguRL 4CIvkl TSSDkCP8kWcsloLWinJYsxaPvh7yZ/JSPg3YqI8njUkkLd47bzL kPMVXEoJZ4sdwA GJ E31n5jMNgxgB93H5mNMaMZv8hJRBOjyA f789Es0YyveVOxHP3uUL4KN4IQO7jWoxth4H682uA3K 4AX0wdvByT0IN8b2kh7M  swf3IwSa6DUhKP2TINZduD58UizoK5sBNX/Svm/ 9j1m8i/w7DRMTI mgK7QEfuFBoxM3Vh/t2PVw90YOsrcK/yWcVPoJmkAQji9CPo5W/BtXjmvIvrZ0INyrcNHhWKUGoR M/NOnPGV6dXgwus2eI1wsBtlXo5x3iKsxsx7f w63KEPz6i1eCa Cr7YA1CPttsYuzm2Hzpjj8a2 Qx9sih3B/LsrNg5LYJ induicAgVmGNfJd/G8 h/kv2Yt1fDrzAf2Ug6/B6vb6BEyxUvwqjwC8yd tbE7Yz DVNSHBTXUjafoezAA/456W81PQfn0em4stpIP4gl1GjbEnoyZSBz0x/yYeV CwyoF5p69 kKM47HK5apdfXXNVddWypUsqK8rLFjtLS4qLHIUF9vw8W67VYhZNOdlZxsyM9LRFKcmGJL0uUZsQ H6dRq5QKgecIFDVaV3aJ0byuqJBnXb26mLatbuxwz voiorYtXIhTVTsYmTiQkoXUvZeQumSKF2z lEQv1kBNcZHYaBWjP2ywipNk24Y2xO9qsLaL0bMMX8fwexiuRdxsxgliY3p/gxglXWJjdOWu/tHG rgZkNxYfV2 t98YVF8FYXDyi8YhF06zBMZK2nDCES2usHuNArUWhopnWhsZohrWBShDlbY3unmjL hrbGBqPZ3F5cFCX1Hmt3FKwrojoHI4F6tkxUWR9VsWVEH90N7BfHiqZG75zUQ3eXI6HH2uPe3hbl 3e10jSQHrtsQTbvhvfS5JjI31Lftmz9q5Ecb030ibY6O7hOjhza0zR8107K9HXlEOdvKrtGVuPCd qMKmTSKuxd3a3hYlt KCIt0H3ZO0O6 1kfZ0XSdGNdYV1v7R67rQMJmjUdg4Yh7PzHSdiJ2BzEZx tLXNao7WGq3t7oassRQY3TgykeESMxaOFBeN6ZMktY4l6mQkQTsf8c6OMYyRU6xp46xeCZXIugbd ISp6RJSkzYp7WkYL7zIY9SxDMvy0E5wV7UF7 KKa q5RfTX26 n8qMKmt4qjHwHa33r2jwt73HKP 0qb/CChKvWTW0XB8Bo86HNHCQuogqnq0KMq4nLUri4t2TXJRa1AvYoXqgxbUrbu9uhSVbzZT8 6f dEE3NqJ7N7RJbRG6jePgKnW0R7kuOjI1M5K6mY7snRmZnd5lRT9 hj2NpEbVebP/dPpFyY391VGy 6DOGvdJ40yZr04ZtbWLjaJes26bWBS1pfNnsmIwRaQAVHhVsqKk1VnS9jdvaaAf U9hWWht9Xasx 1FDGaHJ9G2/k2iWMM/KMFfrv9lnOtNGWQHkJNiXz/55JlRodmPUQcWVU37VaKtvjzOZ/ctJk7Byd xaq5afKeotWOhe2rFrQXiJcwyqPAQh7X1LptdDRuwdhKTFajoyut4srRrlH3ZGxvt1XUW0dP8G18 22iwsWvG/JOxF/YboyvvbMdN9JPqYjzWqW0UeOGTsQrWjXHkRe5beN o4k6Og0KY5L71DA9xKoo8 SyBDrVScxHEOeFIAGrKDXAvpDv3HNRdr1uvP16y7WAO1iOsvYLHYaU4yJ9mwIHgiXhD5qQsuBXyC dwtT6BDL8XyL0ic2eNVVjTdn3LbsbTk7yA5uR/aOHHWpudbcbH5Q8YDxiOIJo4oj2TmLTEa92aIx GXVmqyrdCiZOr1ObJ7kpV7IGn6dcaYm1Bh2ya8HbQwEmOfvzao0lbZHJkTMZm3Il0mHI0ed05hzK EXJe4Ox4Rk9NiD0dVPzzHfVtJyAnNjUeX0nJx N1FQ5Hu M9Pe6DDro04IqvRJjp/w3uk 7U4SD6 V/WvLnaSDuggyda8/Lw8qzUpJW1ReXmqubK8DE yJKtFpVSqrMnCo7q8 GRTX tJY15z6cWXnVty Fz3eaa 4RpWnV6ydfqU1t3rpJ d3mwpttgoxJCQkJvu3k X0Pr4QtfUMaqscPnRtdlX2ZQ1nfdn5 VPox54vOM5XqLRlBZVC1R71Hs1e5V3VAfUCjyTUZs80Wm8noMFvV5sREk8aoVpk5zqQ0qrL0Ro5Y E3W67HI47CiBYn0xVzzJ/cS1uqjIwaWmHM42fpCVla3WHFOrlcdqVXtUHKj0qmYVr9pVcqzIYSou xQn zGOi0WU8beSNm1oqg5WHKvlK0FtsuY9UnDlB9s24hb7j446z5zveu/hxR8fZGv1Z1Jv j/qL qDz9dEcNIoaqUiQjSYYq/dk/gv4jIlUOx2K8BSMdJMmMOlxaniSp1pyUsghVW7aE9vGSglHDFfmo 9Uoz6h prPiYUhjJr1DabImJho2bp3 uty/7TbjfubzOPvTJH5xOh5iWmdvqFFJ1 anlZXavgrv4 gbUkMm33ZFnt03Xb8tPE0uW7p4/Z0vQuD7/zphy7bfoXO1pSdWiJvbF3BIViByzjtroyDF8qIjqi 4 J50Al2KFA4mkkzp0mqniQrXaeWLFuSyRuFzvTOjM7MTqNSoVUkQuFUtRCJj2gjibt0wZygKVga dN6hvi1 n3Zf4i26fY4jwpFyvUFbrq3QVmaXZ1dkV5aSUq5YEHNEU0FBcflyvI uFZwZzhynyWm  uuLqytXa1YWt8Vu0W/VbCrY4sk3ExBnLTZXGJa3prRmtme1l28u3V2yv3L5k29JEPj6 IDneWGCN F6uvKnBWhwyh5DtyH1Q9WPqQ80jplP3lwu86pqrPVaesVy8zQoAzHiev4 PVHkLICzDJN7m0lQ8v zjJmB0zGnJwXsmlPRcbDKYUOR01CYkpCQqIjoTBRyNOwSmklFwGU9sW81Z6i4Y4RV46lghBTHsmb JFaXvjTpZBJ3Gh 0k44nnU7ikya5fc bjuU49BqioQSmgyXkZMmHJbESvsS1qtJV8jo2eCgRS5wl UyVCyUtkJVSRlXhLmu7A7NPR4dgZWnc2dP7sxY6doYuhqlIHetvZWup1SYa0KkKLfYkljsTd m n g/6P58 ir50/y7AOot J GJn/YhrSa5TlWzPiy/SlEOBLq c5CZjoXJiM644oRziE4oc frCcqJL LCi0GazloC5VlhNwOPQ1 hqpIA76uekmTAshlj888b3aPr3HIXS0d5CdIQfeunfgyeFKiE/XVQlO XVU5ArJwtJMkawlntShTMYmk5WA8Kq0W6voWTCFJ5TkcOn9lBbp5bl5eZcWS8jJMNRgO/FGboePY 9v7bHct/9639TR  dFWF6d8yM7JVNltm27P 3V9YWp0//bUvrj3ztH9kWVqmOU6xY9qx79C1ezYs L2/a3Ttw34aHT2sUtTml5I17v9B1y7ay3qKcf4vc2XrvTyozTKV4TsDq2DuK69HzE/BJYsy1 AHD EdVTcU/phWEyotpHblcJ9WqtHfhUu1KTXmPiS3k8JPS8yDt5F6/g12TTNJxZWylmu7K57KQavUbU cDqNScNp1mT1eCQTov3W6Xc6PqYIsx0zSBkx6mzxeZl5yXmJCUnFYCTpxSRFhdgiBWL6OG0xyeCw MKhTiyFNwIJqX7IBNQPp6MBHryQ9mGm5dEkaJuQkPVUcPkTk53FniZrcPH3D9B mP5i  a2Tf3lu 8I67ByZO/u2OQdRSYPqn069N95O7SQ2p/8HYmn1Hpl afmYCH2ZJHdl 9HbMz7H3Y79XfB3zcz4Z dTWNGojhACGcq7nyAEcM2RzJ54qTlyVfn/wgd5qLcapki8WgNxnjzBazyWg048O4UWO2ppiMmWar wZBEOM5isKQYDBbLJHnMpcs/RuI0GsIZM9UGDc9Ncq 6Eg2bkpJEvVPv0vP6RwqoavW1la4CIhaQ QwVnCriC5BRGZzY7LWTKQiwZdvdjko531qzDtLtOj0GCikbkN/TUpscZeu7Zs/tKHAoMEDBUkap0 qj2Vvoam4hB6sV1jyDAUkFqoMjTDNYZO2GYIwHWGGwxfJk/h0/qzhtfI34nhQ7ynwMzdDjsdZCf6  AngYkcmcgy1HMo5sUhba5iMffAcBqQrq4qi43JlZNVzGVVEnU7RN106Q5VhkaGK06ciZFQlY994 fBWyOSVVf302pYpzJbG4mW9xbLdDB28mMwdDKj2CU5Os5JKTmR0XRhLkr86ytZSSN mJnHvhX/F4 dk7bS7fmLrrq6quyr1KsvaDiE2fO5U/uEBoufHOmxR9vLErW0DO6AM/o59EHRLjNZdSDHj1OJC7L Vq6PG ZGxYfEp8QTYgJBm97tKk/sWbKZ257D4f0Mb7YsWmpMutoSR 9wrKJJBCc zvPw26wkPZdl 5Xg1HCN tPu3XfGL0iwaTdwjZncHMyYz5fnz9FQ9i/Z7r6OqykFPThJy4NGZxs/sc0YNeUrUAqqA HaFLhPvNkU9 U77FlpqVv66c6/VvFfUJZTd7vvL5fjKsmr7HtkyM8Dv2iEU2Gyl0jVw4tsmUmlIy hHtNxnvGp3CvJeT ZxRADE7qgUfQA53Xpl b0eIUitL JW0kbyR/f9od coMRYaSA2eqKtUuOluc CoVCqVLaUznBjBrKVdnzc 22EqdzJXE5N5A21bacNnuLM6wMq8L2cGHQuZfsVd6iusW t3Cv82Dh 4 Rx7pDz29k/yz7jFG9V7lPts/NExRmJdINoyhONJrCXGEG6VcxJzzbm5Oalp6VhEk3Jz89TqdU0 Mgry7diyp elldpVTrVdlZ XrjDp8W7YZMqht5ZpiywuvAUS8 nWDNpKMd Z78pvyQ/m782/J1 V P8k9OFG6YzTdkYEx5ci8WJOZzu5 WRjVyAdOVRWFfYJ06GCdzhBiqMIDCI fKQcr5 P0VrJj5056 PpAQcbD4UcTOuBIxcIjdEF8LtEinAZNQpZIqlPGDsQQWBoQdIR2EujzedF7q8IR5PAsIesAQQs S PCt/ivwyM7NnY830iay8jUUXp2ggTN 5ovSalDyuIae0 WpiJHE12UuWKNbaSra4L16cPjYTAaSO W9ZTZo2z2YqKcq dbiKPXVuSVZTB/v6M58Ybf/z 5/5a3amr UidIb2feuzd7Fdm/iiHmfMdzJw7 ENXI77TYPJV5uhG2zv7tjsDCj0ZZRbKEd2E5QqEQhr0cfYr5HqxWfC/2PvYVIE7f9FwFPyYP8Cl4 PSZ8TZGpLGacNFAFHOPDgR5KoQ7n/lCXjiFHe1fx24A DUl/MwQZJ5DDWjyblUiyZJyHECmUcQFy yFdkXAHpeMsk4UqwkB/LuAreJOdlXA153A9kXAO3cX S8TjFFv56GY HkPpHMp4AvRqXjGuVz2ie kPFE2K7fNqujPfrnZJyALqlSxvEWPqlBxnmoSmqScQFpbpFxBSQkfVHGlZCUdFDGVeBPisq4GpIN WTKugXpDqYzHcUcNIRmPh6rU7Nk3lOWpW2Rcy29LvUPGE6Ek/V2UhAhU6wkZSQxXUItkZDNcyfqL Ga5i/VUMVzN8DcM11EYZ7TKONsrcKuNoo8whGUcbZd4s42ijzI9kHG1kTJZxtJHRIeNoI M6GUcb ZdlkHG2U1STjaKOsN2QcbWTJl3G0keUhGUcbWWIyjjYqmGB4HN1XoY7h8XQvhUaGJ7B SYZEhi9l uJ7upbCe4cmIGwo3MDyF0XgYnsr4BBi iPXvYXgGm7uf4UZGI8mWzWieYriJ4c8yPJfRv8zwQoa/ zvBihv a4mpJ/j8wXFrrLxRPYP0OnuFsLw62Rx31H3AYoRVGIAhe6AU3eLAW4SmEVuhn DoIwCBC RKYSoR5bIcRp6cZ H6MQsceP80sQa2D97v9DTqWzkomwCUf8MDRLE2Z/ZR U11uMeaMKD diGStj vXU4w4/1RpzThzJE2KyNyC MEIJdWPbgGj4YYH0irMd6mNEEsM N/Cl1H67rx1boUzuo/k9mi5fM r4YtbOXw7E6ppMuwFNk7Cx/uJ4QjYYReXKXgP H/j7jNzZLmzM1oQU2uw/HP5vsNZjVqkx4cG2Cy 78A KtV/354i9lJt HDVCJOc6l/ENqWJyFw3o4Qiyknn07fhdL11WDbj2r3MrlRCOs LXMNM9n6Z W8llZJJ8KIDrUpmCSDvyD6m8zHcp3TCTqm92XZ8cGcXMFyNMBj/2jMh6CLFdUa5F2LOF0UdYvwhr mf6oJgfZnqiPljMr9bNZkl5mtOyGbsZZnJVuLi6pHCGmPZHthY66L9HjDPeZ9oy15ltcsuNaJm P bKNBpskw8nQzviG2k155D8NMVg WlG E9bgZrx7Gk0bYIJODWojGJqXpl2nCGAHdzFY7EZP04Ge6 68aWh/mdl8k1KNe98zximMngR96U1wCLj4jM1cM0E8arl0WZOM mHqYZ97ycIck2oxHJan1MT242 t2eB7cNsbcmzRGafHoYNMa15mV4 2xfyZQ35GA/PvIjoZtSf7SdSBHzafvM1LOloUJZ0cLaPZpEh lvVEORN54XoWdYPMWrsYT58ch5KOpL4gmzujVcmLdrHsu2s2JqiuQ/LaoVkL7Zj1uUvjS9LDPxdj 0u5WMM R/DowK7/kl5IeBuV8vlDjks/1MOtL3j3ENCxxGmJ7l9ZsYbwoxwj2u fllRaWrQeZTqR4 9i3wZilHjjDJ/GxGmO3UL3tdP7OjW143JOc7ursws/zQgvih0tKIm5GReoPIvFKyB923h U6/6yF /XIe7UbwM lG5B0PsVwrcRpmI/2MWwAvKWd6ZNsM4BxJ11uRroetMCLraH4 6WZzd8iyShqiGuhD uIHRUE Znyuor0tnQEQeCSzIoT3Mv4YWWHGGs5vl9MA8bj1Mf0Fmk5EFlD1MQyGm2xm7lrBzPoL0 1Xj/UIo6oFcJyxrzPbJEzjqljH4AuZdiGWGZgMpFW2HoZLylqJPyY2j2jCyZnfl/d8VhZomZnDi3 ynqMklaM pUI9XhvQ/Fm7KXRs5JlD9rfiD2bsKR3P6vwRG9k/6OC9raCFuIYzJ07nz5hZvr75 WC oKzlkdnM/M dsnO28slWlnxrJvuNMH dWdPD/l/Y3F3B/Cw7I48UTwPzzjA3iwbJswZl7m4mhZed qZKHUT9vl1ej0blLzv/dLHv75JNLWucfaWbmnmxYPnFpLPnm5cD5WV6KpF7ZWy6nr4C8L6ox74JM OhOzn16vR84kIRb5Q7MZo1u2zPyz8/IZeKGmpLPk017x6ZV9coyKqDk3uw fu0txs3PCy/LS5dem 2t8sn5HSmTLyKVtIdlp4TyhlQjeTKMg065OzyD9jc1H2xZk83jdvXZo7epimpfNYOv1D854Timap Q/P8du6 5LM15WdZw3dJTp/jN3Nehpn/zd0VzOS8OcoA0kp30ENM45R// x JLnme/eAnCUl/UtR FZT9Yy6bLvShz9rRnH sYXv/tOVmzkLpzi48bzfSSeNhVh28xAahS/Q9x5nuL8Du5Xrks4Ted0hP KDN54J x/gw/KSa98nm68Fyc4fdpO0raknYQkc/yy8XxjMXcl i6978k7ZyWP72CR75/65Zb8yXy yidhBM eGQ70 Yn HzT6pGLHp0H6P0wLEF KTwbLsNeJPU686F9NNkOTTOnE0cU4UiHjS/EZYimb tQQq8YmCAuX Xzvr/vsn48xY6SXamz0PW0eC3l63xys Jbb2e8V1gcFABLvE kAoGAi5I77AoBj0 e0rEBnfE/Z8QlVJm4qaAf4j2hMU1gzhvcVWVsxiLshKxzu8XN/r6 iNhcaM37A3t8va0 ga8YXG9 d1jcGBhwD2709g353aGZBaovGRbl8eot3lCYLlpWsqxMtK/zeUKBcKA3UnAJ/XwyNoQjbKBl07rW S2iPiK0hd493wB3aIQZ6P3OfYsjb5wtHvCFvj gbFCNIunmT2OKOiHli6zqxube3RHQP9ohef9g7 3I9kJbOcUEOBvpA72D8yv8srNoTcw77BPjrXh8YoFjdF3IN 7wjKEPKFA4NF4hafJxIIiWvdoR7v YATVWl7W2u8LoyxUZHe33ytGZmzZ6wuFI6I7GPS6ZRkpOa3ptqSN4x7XBgZ7cEeD3uFw0B30horE XlxhuN/n6Rd9EXHYHRZ7vGFf36C3p0QU10TEfuwJD3WHvTuHUAb/iNjt9QQGvGJg0Ev5UUUMB0L  nrA4EEABwkMejzcc7h3yM9FET8jLdBhGblQQ3Fqfb9DtF3uk3YfFYVSWOIBmEIcGe7yhS7WQjwL5 Ql4PM0T3yKU6QQPM7k8SGCUaRKaDFAsFhvr60S6i9/qIdzDs2 XFTXqpVRELhgJUVFTRroB/F7VE 71AIZ4fohnZQzc3YC2W4jMVwuRXuMOo6QPmjLlGGQfRzWXDUXI/oQXUPeSJINBSmM1u8oaA3MuRm vtLidw9GfGhnn6Rm9MgRMeDvEcORETStp98dcuNc5BbxecJi95BkH3ePO0g5RgJiH92H93qP1  n G/ajj3b7/L7ICC48FPQj0bAv0i/2BQLomShLYGAEpd7q6/GiIYfCkp90BwI7wkygAXef wbfoDcs eUXIixEQwUZA8tCegGdI2iIldvvDAUbW4wsH/e4RqbNnlzcU8dG9lvRHIsHq0tLh4eGSAVmRJeg6 pf2RAX/pQIR Q6h0INwZoaZDfwzRiCyhg//kxGGvn3oim7K uXXNyjX1da1rmteLzSvFtWvqG9dv ahTrVm1sbFzXuL5VG6eNY7EzGzAU72degKZDjaEzXyZk2a58uGXUFnW/kcAQnekJ7GKpQHJZygft NMAizC36UVmDSO7uC3m9VGElYjtO63ejsQLdETdqGK23QBiayYYxcEWvj3mg5PJopF5Uy5xcqO1I oM8rOSm17Ow8NEIk5EMXQdYophyd8xxYFgqjZFYVs5MRd4u73P4hllLc4bA3Mn92ibgZIxIjZWRm F7gnOROiE7rFcNDr8aGLfHrnImqR ngfm vu6fHROMbwD7EzoYh2h5huWS65RCi/b8Anezqjo3EZ jkg5mXoe6wwMY4Ie6vb7wv10HeQlqXsAXRLlR1MFR0TJTWUNLVyI6WNN79zmaBRisguzZTBoPN7Q oLyDkCw3Iw73B4YwWEPeXT48UKgPfHr7lA4t6cU4lWOR0s3uEcXCBSIY5XM2phtzy1L3Xp4tE3l2 ggfzW7d3hhGu445UU4LNm rwULEvq1haIC5dvKzYWeF0ajSbm7DTuXhxRQWWS8uXikuXVFZVVmnj /kHUfWYw0lapLB6LQ3xYDrDHTPpYQB8SR4gWbz2uw1uQ37Ebl5mxmT/ 9Uh/uOMf5sf4b/InEU7w L/DHrrxYufJi5cqLlSsvVuDKi5UrL1auvFi58mLlyouVKy9WrrxYufJi5cqLlSsvVq68WLnyYuX/ yRcrC/76MYe7Gf3lxt65ZI53wd9FpDvvy/P0Mw f1xZyhMVCk7BKuBrLqgUr0Bz8j7isZzFDc4 0  34SJY/ywOKiDqlC7MyjMv1jDpfHZ/ /OcTMyP4ynxOxKf6dicbGMtck1o4SVo/bC8rYwHhmVtk3  Xe4Y3hOmLDj9PgiIxt5e3zFChlZskxCJgqLy07XxfFvw4cIHP82fxr9jM2asJeUnavTYgfhPw86 QsAEh/hfQxSBAxf/q4ncvLKDJ/kf4Pj3 VdRUjrt1XFtUhky/B7/PBjAxD/HPyuPPDuRmFQGdWH  LiAwheUphDMI5xAECPBPwh6EAwjHEQTQYWlCKEVopj38Uf4oynmY/ld2LEsRAggHEARo5b O/Tto yR/hrwMLzr2Tvw9Ssd7Pf5HVX8M6E vHsD8H60exTeuDcvvLWNPxh X h7C9COsH5foB7DdifT/7 USkT/yW5vYsfYvMicn2ID4/nmPR1OTguIjgReMTuQ w VN191MBYEv5m3s9WGsO6DOsBqUZ17R43 W5mNdk kZZQdQpXuRtXvRs3tRs3tBgGHbpyhuVGiKeZvRJobkeZGpLkRteLkw7hemH6VAUs9gojA o97DqHfaH8VyCuEU678Fy3sQDtEWP4x6LECp7uCvG7eb0Mn6JqpcZbUv8r2oahffO5GRXXZgrqWJ o46IdaJc6yitl416JzQJtNc7kZkt1Ui1oy6R98C/IHCQgmUuQgVCA4LAe8ZzS00v8OthQA2uRNMe bg /R9ijEJwNxHCSL4MWNaBLGvhiqEGCAlNnDVnapQlq9mp4 nVCp8aladEoAvwe/gDP068g1vLN fCevoF/pVlWX02/yrFJWl98Tfyg Gj8VfypeEVVOKU8pzyjPKRWi0ql0KVuUXcqgcq/yHuUhpeYe 5T0qris GL83ntfHi/HOeFd8S7zCpCKH6m7lu lXGbDUIwQR7kEQUMed2C/y1yJ0ojU6URXXYj9g CdjSI5xC/AzWCmzpkE6HdDrs1WGvjn0XX8dGWhC6EILyqHJ2ZGYOpT9HRxDycTQRe mXB85geY5i CNdgS4stLba0SHWKu4AS6rEUEVoQeNZ3BgG9BsuZMac83oWgZOPnGM3MmIvO5S643PlTBSRKv3pI 7ikgrpraujKXBQuDwdBp7bR12jsPCwFrwBawBw4LzdZmW7O9 bBQa6211dprDwul1lJbqb30sGCy mmwmu mwcGDt8bUn176 VuhcG1i7Zy2/lH5zcNzhLGO1xUbrZ8czMsuW6uqu5o7jdjqxPIhwGoEH HZYmhFKEWoQAgoI7znqfxt6nsfdpaEboRFDgrKdpisHSJI/R/oNsjGJ0nFswzuPmj41XlzfXrcW0 24lwEIFH3sdw/BijlrDjrD K5RnW3yzTH2L9lMqEMDOPJsFtLN1twzDcBrUInQhBBAW8zm F0wjI HUsTQhDhOILAb8NrK7 VexqvY9wxvsilXZxqgkWL8PgwJKn1dXouAX1BS46w8kFW3sHKWlbmuhKv 0X58jfZb12hvu0abjwhnx4NNS 5jpdkVX6d9pk7bXKctqNMitzQwg5ZLZaWSluQPrFzPyiJXiln7 N7P2z2btf5i1XzVrd5q1V5vpvCyMYS2Xwsp4WpL7WXkNK/Nc8Sbtd03arSbtUpO2TkseIbg6rGBl DiuNtCR/ekbXoAPNi RP0ICcyHhNgWmSA1aR2HhNHVbT4zWrsLo4XvMIVn8fr/mi6SXyN8KONvLx eO57prpUcp6sEWj7z3L9H2QNHMX6HNZ9WD8BNcSG9dfGa26i9I/j/Iex/RhY1JT UWhh8w6SNaz/ q/K8r4wXdeOqXx4vGsFVH4YituoD40XvYe8Xx4vuwOre8SI/VgfGbVTA68ZrCk11SaQPcjlK6wEb RyVZK6 4Gjn7sV4lTW4cL6KzGugCk6R 3LoYq3wq5UvECi1sOdO4lW0yG6yMRRZYmdBGsLE6keiY 8FqwsFo9br0JuSifsb1n kvNi3Tj8BHRjT9ievcl3N8WbP4vsmb8qOmNE1Rd46bXiyaJ7TnTj6wv mr6TO0m2jJumiibVOHCyaJIjz5rGUMlRpOXIc6bjRX2mp61s9LAVR9HUB2uKTV 2bjM9ZMP2uOmm opeoGDCAO96Cw 1Fy01ra46aVtomCQ67anAxV5yp2hoyVWH3skmyZuKoaXHuJBXFiTyOPmcqxBXz rEyUzUtf4CpBRYZcRaqIqlu1RbVBdZWqXFWsElXZqixVitqg1qsT1QnqOLVarVQLak4N6pTJ2BmX g35/LkWpZz jJ9BSYLieoyXHvl4HHFFzGDvRZL6Ja9q0gkQNTdDUuiK61NE0qYptjC5zNEXVLZ9r GyPk7nZsRbnbJwm0tqGD0q5bjfQHlE4AIaW33mWk9Y233tXeTpqiUx5o6hajH2/CfcRt2BZVWFek w6Jdtem1huVJVSsbLlN0yaVj7pPumP9Jz47e37SpLfr17PZoGUVi2e1N0VX0p5dOcDu5QGPDCS5I q/a2E QGbmfjRtpPbmhonyUDCxdEMqihFSWbAAslAwuZYGRrGRm6qaWxYcxikYheIWsoEbrPK4yo T KVi0sgrxZaIRmXA7mMVy6XQ8nQHyRmuvnMEoDoGDNdAjBmWZRozGZDkiIbJRlbakOCMdtSNnx0 bthqk8RpBxtbx0ba2TqEzNHYJRr0ApmGUyON4//mx7viv0BMJtxv9XjoD2B1WRu9CF3R/bv606N7 u0VxrOct Zex8rq6Pf20dnujb1m9DdEea4M45vZcZthDh93WhjHwNLa2jXlc3oZxt8vdaHU3tE88 sae acFad8yuVb/nMsz2UGb1dK0nmi4z3ESHn6BrNdG1muhaT7ieYGs1bVxBmlraxtSwor1 u1RP cPFxGA9dRnP7ikX64HIWHFeZ0z9vfEEAPLbiHe3RBOuKqBaBDhXXFdfRIYxOOpRIf JMHkr//FVm 4wvkiDykx 4k6wpwQHqjr2H2XzgcjlAYGnJgGRlKZ30RDFrzpqboSvqDTDXRmsaoq6uhnf22wJD8 qW9z6U/WvF7DBWr21ByoOVhzvEYxNNSO3YaTltctXKclYNljOWA5aDluUdKB7W3PuWoOWj608EPo TSSCn8YGtuYQ1viPNiNDYfoBXCCMIC3nGHLUt9VZwMPTLy/zWCYjWBHKETYhKODfsPwJwrsIf0YQ 4GYsv4jwOMIE7eGL eLGdF8DXbHdQZNOOl824awsWzaJtbtXqjdtk rG9VJdU1eWjvV4bXlcnQ5v wAm8gOX3EX6F8HuEvyMo DK jDEfkry2PQxhB0Hx6TfSI7QIOyKE/iwDoeqOhB0OCLOfacCOCCWd  7EO6QMkPASoCjQIVkjEesN02hCtZz7/G6AbMg8KZW5kc3RyZWFtCmVuZG9iagoKNiAwIG9iagox MTEzNwplbmRvYmoKCjcgMCBvYmoKPDwvVHlwZS9Gb250RGVzY3JpcHRvci9Gb250TmFtZS9CQUFB QUErVGltZXNOZXdSb21hblBTTVQKL0ZsYWdzIDQKL0ZvbnRCQm94Wy01NjggLTMwNiAyMDI3IDEw MDZdL0l0YWxpY0FuZ2xlIDAKL0FzY2VudCA4OTEKL0Rlc2NlbnQgLTIxNgovQ2FwSGVpZ2h0IDEw MDYKL1N0ZW1WIDgwCi9Gb250RmlsZTIgNSAwIFI PgplbmRvYmoKCjggMCBvYmoKPDwvTGVuZ3Ro IDI2MC9GaWx0ZXIvRmxhdGVEZWNvZGU PgpzdHJlYW0KeJxdkE1PxCAQhu/8Co7rYQPttromDYmp NunBj1j3B1CYVhILhNJD/718rJp4gDzDzMvMO6TtH3utPHlzRgzg8aS0dLCazQnAI8xKo6LEUgl/ jdItFm4RCdphXz0svZ5M0yDyHnKrdzs PEgzwg0ir06CU3rGh0s7hHjYrP2CBbTHFDGGJUzhn2du X/gCJKmOvQxp5fdjkPwVfOwWcJniIo8ijITVcgGO6xlQQynDTdcxBFr y52zYpzEJ3ehsgiVlNYV C1wmrurIp/x ilwlLmnkOtd0kW8zP0W y9xGPmftfep/7RQniav6cYjF5lxwl/aZbEVDSsPvyq2x UZXON0BjfcMKZW5kc3RyZWFtCmVuZG9iagoKOSAwIG9iago8PC9UeXBlL0ZvbnQvU3VidHlwZS9U cnVlVHlwZS9CYXNlRm9udC9CQUFBQUErVGltZXNOZXdSb21hblBTTVQKL0ZpcnN0Q2hhciAwCi9M YXN0Q2hhciA4Ci9XaWR0aHNbNzc3IDYxMCA2MTAgNTU2IDI1MCA3MjIgNzIyIDYxMCA3MjIgXQov Rm9udERlc2NyaXB0b3IgNyAwIFIKL1RvVW5pY29kZSA4IDAgUgo PgplbmRvYmoKCjEwIDAgb2Jq Cjw8L0YxIDkgMCBSCj4 CmVuZG9iagoKMTEgMCBvYmoKPDwvRm9udCAxMCAwIFIKL1Byb2NTZXRb L1BERi9UZXh0XQo PgplbmRvYmoKCjEgMCBvYmoKPDwvVHlwZS9QYWdlL1BhcmVudCA0IDAgUi9S ZXNvdXJjZXMgMTEgMCBSL01lZGlhQm94WzAgMCA2MTIgNzkyXS9Hcm91cDw8L1MvVHJhbnNwYXJl bmN5L0NTL0RldmljZVJHQi9JIHRydWU Pi9Db250ZW50cyAyIDAgUj4 CmVuZG9iagoKNCAwIG9i ago8PC9UeXBlL1BhZ2VzCi9SZXNvdXJjZXMgMTEgMCBSCi9NZWRpYUJveFsgMCAwIDYxMiA3OTIg XQovS2lkc1sgMSAwIFIgXQovQ291bnQgMT4 CmVuZG9iagoKMTIgMCBvYmoKPDwvVHlwZS9DYXRh bG9nL1BhZ2VzIDQgMCBSCi9PcGVuQWN0aW9uWzEgMCBSIC9YWVogbnVsbCBudWxsIDBdCi9MYW5n KGVuLVBIKQo PgplbmRvYmoKCjEzIDAgb2JqCjw8L0F1dGhvcjxGRUZGMDA2RDAwNjQwMDY5MDA2 MTAwN0EwMDZFMDA2NzAwMjA Ci9DcmVhdG9yPEZFRkYwMDU3MDA3MjAwNjkwMDc0MDA2NTAwNzI  Ci9Qcm9kdWNlcjxGRUZGMDA0RjAwNzAwMDY1MDA2RTAwNEYwMDY2MDA2NjAwNjkwMDYzMDA2NTAw MkUwMDZGMDA3MjAwNjcwMDIwMDAzMzAwMkUwMDMyPgovQ3JlYXRpb25EYXRlKEQ6MjAxMzAzMjEx OTAyNTIrMDgnMDAnKT4 CmVuZG9iagoKeHJlZgowIDE0CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAw MDAxMjI3NyAwMDAwMCBuIAowMDAwMDAwMDE5IDAwMDAwIG4gCjAwMDAwMDAyMDYgMDAwMDAgbiAK MDAwMDAxMjQyMCAwMDAwMCBuIAowMDAwMDAwMjI2IDAwMDAwIG4gCjAwMDAwMTE0NDggMDAwMDAg biAKMDAwMDAxMTQ3MCAwMDAwMCBuIAowMDAwMDExNjY4IDAwMDAwIG4gCjAwMDAwMTE5OTcgMDAw MDAgbiAKMDAwMDAxMjE5MCAwMDAwMCBuIAowMDAwMDEyMjIyIDAwMDAwIG4gCjAwMDAwMTI1MTkg MDAwMDAgbiAKMDAwMDAxMjYxNiAwMDAwMCBuIAp0cmFpbGVyCjw8L1NpemUgMTQvUm9vdCAxMiAw IFIKL0luZm8gMTMgMCBSCi9JRCBbIDxCQUE3NjY1RDUzRDU4RTRGODhEQTVDOTNCRDBEMDcyMz4K PEJBQTc2NjVENTNENThFNEY4OERBNUM5M0JEMEQwNzIzPiBdCi9Eb2NDaGVja3N1bSAvRjhCODFD NkFBN0U3RDc3MkRBNEJFNUE2NDYzQkUyNTYKPj4Kc3RhcnR4cmVmCjEyODQ5CiUlRU9GCg=="/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="secret" value="242d5c6c3b"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="verifyIdentityOLD" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/escrow/verifyIdentityManually" methodName="2.6" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="verifyIdentityOLD" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value="91595092138"/>
  <con:entry key="newCipStatus" value="DD7JOLd4Dw"/>
  <con:entry key="generate_questions" value=""/>
  <con:entry key="reference_id" value=""/>
  <con:entry key="Id" value="176606247249"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="verifyAnswers" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/verifyAnswers" methodName="2.9" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="verifyAnswers" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://sandbox-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value="398200051060"/>
  <con:entry key="api_key" value="44a54efd-8407-426c-8ff6-be48a6683d16"/>
  <con:entry key="reference_id" value=""/>
  <con:entry key="secret" value="FBHSlsiYj7"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createIssuer" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/createIssuer" methodName="2.9" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createIssuer" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:originalUri>https://qa-api.bancboxcrowd.com/crowd/v0/cfp/createIssuer</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="created_by" value="Raghav"/>
  <con:entry key="verification_required" value="0"/>
  <con:entry key="bank_account_routing" value="322271724"/>
  <con:entry key="ssn" value="112-22-3334"/>
  <con:entry key="address_1" value="222333 PEACHTREE"/>
  <con:entry key="address_2" value="add2"/>
  <con:entry key="bank_account_number" value="2352154"/>
  <con:entry key="supress_email" value="true"/>
  <con:entry key="preSharedKey" value="baje5ja6quon"/>
  <con:entry key="company_tax_id" value=""/>
  <con:entry key="bank_account_type" value="SAVING"/>
  <con:entry key="email" value="raghav+createIntIssuer@bancbox.com"/>
  <con:entry key="api_key" value="1e4527e2-5fad-4eb0-9400-b1deb77eaf5a"/>
  <con:entry key="bank_account_holder" value="John"/>
  <con:entry key="reference_id" value=""/>
  <con:entry key="secret" value="NaXD8kfeOQ"/>
  <con:entry key="withdraw_on_availability" value="1"/>
  <con:entry key="internal" value="1"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getIssuerDetails" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/getIssuerDetails" methodName="2.5" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getIssuerDetails" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="issuer_id" value="329286168511"/>
  <con:entry key="api_key" value="e2e4aeac-61bb-4018-aa61-ffbd51917647"/>
  <con:entry key="secret" value="DIMBnveTY7"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getIssuerList" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/getIssuerList" methodName="2.5" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getIssuerList" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="e2e4aeac-61bb-4018-aa61-ffbd51917647"/>
  <con:entry key="secret" value=""/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="openEscrow1" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/createEscrowAccount" methodName="2.10" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="openEscrow1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="issuer_id" value="771731573891"/>
  <con:entry key="over_funding_percentage" value="5"/>
  <con:entry key="api_key" value="58c0c842-fb4d-4333-b393-76ef33944b59"/>
  <con:entry key="securities_offered" value=""/>
  <con:entry key="over_funding_amount" value="2000"/>
  <con:entry key="reference_id" value="ES22036715====3wewe"/>
  <con:entry key="secret" value="242d5c6c3b"/>
  <con:entry key="close_date" value="2013-11-25"/>
  <con:entry key="start_date" value="2013-10-28"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="openEscrow2" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/createEscrowAccount" methodName="2.10" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="openEscrow2" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="created_by" value="Jazz"/>
  <con:entry key="maximum_funding_amount" value="100"/>
  <con:entry key="issuer_id" value="643574267810"/>
  <con:entry key="contract_doc_reference_id" value=""/>
  <con:entry key="over_funding_percentage" value="5"/>
  <con:entry key="api_key" value="8e18b40a-2d3e-42fc-988f-5322539927a0"/>
  <con:entry key="contract_term_reference_id" value=""/>
  <con:entry key="securities_offered" value="EQUITY"/>
  <con:entry key="name" value="TestEscrowAutomation10"/>
  <con:entry key="over_funding_amount" value="200"/>
  <con:entry key="reference_id" value=""/>
  <con:entry key="secret" value="tLHkr9Ov0B"/>
  <con:entry key="close_date" value="2013-11-30"/>
  <con:entry key="funding_goal" value="200"/>
  <con:entry key="start_date" value="2013-12-16"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="fundAccount" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/fundAccount" methodName="2.9" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="fundAccount" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:originalUri>https://beta-api.bancboxcrowd.com/crowd/v0/cfp/fundAccount</con:originalUri><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="agreement_type" value=""/>
  <con:entry key="client_ip_address" value="111.216.11.115"/>
  <con:entry key="memo" value="memo1"/>
  <con:entry key="linked_bank_account_id" value=""/>
  <con:entry key="document_name" value="VIBGYuO"/>
  <con:entry key="bank_account_routing" value="322271724"/>
  <con:entry key="link_bank_account" value="Y"/>
  <con:entry key="bank_account_number" value="2352154"/>
  <con:entry key="supresss_email" value="true"/>
  <con:entry key="supress_email" value="true"/>
  <con:entry key="file_type" value="txt"/>
  <con:entry key="amount" value="100"/>
  <con:entry key="submit_timestamp" value="2013-06-06 01:01:10"/>
  <con:entry key="preSharedKey" value="baje5ja6quon"/>
  <con:entry key="document_text" value="sd"/>
  <con:entry key="issuer_id" value="475089357821"/>
  <con:entry key="represented_signature" value="hello"/>
  <con:entry key="bank_account_type" value="SAVING"/>
  <con:entry key="api_key" value="1e4527e2-5fad-4eb0-9400-b1deb77eaf5a"/>
  <con:entry key="bank_account_holder" value="James"/>
  <con:entry key="memo " value="memo1"/>
  <con:entry key="reference_id" value=""/>
  <con:entry key="investor_id" value=""/>
  <con:entry key="secret" value="NaXD8kfeOQ"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="fundEscrow" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/fundEscrow" methodName="2.7" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="fundEscrow" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:originalUri>https://beta-api.bancboxcrowd.com/crowd/v0/cfp/fundEscrow</con:originalUri><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="text" value="test data case 01"/>
  <con:entry key="client_ip_address" value="111.216.11.115"/>
  <con:entry key="bank_account_routing" value="322271724"/>
  <con:entry key="escrow_id" value="997361049493"/>
  <con:entry key="bank_account_number" value="777777"/>
  <con:entry key="supress_email" value="true"/>
  <con:entry key="amount" value="100"/>
  <con:entry key="preSharedKey" value="baje5ja6quon"/>
  <con:entry key="submit_timestamp" value="2014-01-03 11:02:01"/>
  <con:entry key="bank_account_type" value="SAVING"/>
  <con:entry key="bank_account_holder" value="John"/>
  <con:entry key="api_key" value="1e4527e2-5fad-4eb0-9400-b1deb77eaf5a"/>
  <con:entry key="investor_id" value="195448909197"/>
  <con:entry key="reference_id" value=""/>
  <con:entry key="escrow_reference_id" value=""/>
  <con:entry key="secret" value="NaXD8kfeOQ"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="changeInvestorContribution" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/changeInvestorContribution" methodName="2.3" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="changeInvestorContribution" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="api_key" value="e2e4aeac-61bb-4018-aa61-ffbd51917647"/>
  <con:entry key="escrow_id" value="780589198220"/>
  <con:entry key="secret" value="DIMBnveTY7"/>
  <con:entry key="supress_email" value="true"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="cancelEscrow" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/cancelEscrow" methodName="2.9" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="cancelEscrow" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:originalUri>https://qa-api.bancboxcrowd.com/crowd/v0/cfp/cancelEscrow</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="reason" value="ok"/>
  <con:entry key="api_key" value="e2e4aeac-61bb-4018-aa61-ffbd51917647"/>
  <con:entry key="reason_other" value=""/>
  <con:entry key="escrow_id" value="228447352917"/>
  <con:entry key="secret" value="DIMBnveTY7"/>
  <con:entry key="supress_email" value="true"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="closeEscrow" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/closeEscrow" methodName="2.9" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="closeEscrow" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="reason" value=""/>
  <con:entry key="api_key" value="e2e4aeac-61bb-4018-aa61-ffbd51917647"/>
  <con:entry key="escrow_id" value="410104215929"/>
  <con:entry key="secret" value="DIMBnveTY7"/>
  <con:entry key="supress_email" value="true"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getEscrowDetails1" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/getEscrowDetails" methodName="2.9" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getEscrowDetails1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="oMD64RviJf"/>
  <con:entry key="escrow_id" value="42525"/>
  <con:entry key="reference_id" value=""/>
  <con:entry key="secret" value="42c0dbeb-f6f0-44f2-82b1-77e4c3e5eced"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getEscrowDetails2" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/getEscrowDetails" methodName="2.9" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getEscrowDetails2" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request>/crowd/v0/cfp/getEscrowDetails\ -d api_key=58c0c842-fb4d-4333-b393-76ef33944b59 \ -d escrow_id=71132663554 \ -d secret=242d5c6c3b \ -d reference_id=</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="oMD64RviJf"/>
  <con:entry key="escrow_id" value=""/>
  <con:entry key="reference_id" value="Esekhjhc_auto"/>
  <con:entry key="secret" value="42c0dbeb-f6f0-44f2-82b1-77e4c3e5eced"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getEscrowList" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/getEscrowList" methodName="2.10" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getEscrowList" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="cfpId" value=""/>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="api_key" value=""/>
  <con:entry key="secret" value=""/>
  <con:entry key="supress_email" value="true"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getActivityDetails" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/getActivityDetails" methodName="2.10" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getActivityDetails" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="discardResponse">false</con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request>957889sdsa


https://npninc.jira.com/browse/BBAPI-1023</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value=""/>
  <con:entry key="escrow_id" value="988439056543"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateEscrowAccount" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/updateEscrowAccount" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateEscrowAccount" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value=""/>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="api_key" value="e2e4aeac-61bb-4018-aa61-ffbd51917647"/>
  <con:entry key="reference_id" value=""/>
  <con:entry key="over_funding_amount" value=""/>
  <con:entry key="secret" value="DIMBnveTY7"/>
  <con:entry key="close_date" value="2014-12-30"/>
  <con:entry key="funding_goal" value=""/>
  <con:entry key="supress_email" value="true"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="withdrawFunds" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/withdrawFunds" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="withdrawFunds" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://regression-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="text" value="test data"/>
  <con:entry key="client_ip_address" value="111.216.11.115"/>
  <con:entry key="bank_account_routing" value="111100789"/>
  <con:entry key="bank_account_number" value="123456"/>
  <con:entry key="supress_email" value="true"/>
  <con:entry key="amount" value="100"/>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="submit_timestamp" value="2013-06-06 01:01:01"/>
  <con:entry key="issuer_id" value="666187559611"/>
  <con:entry key="bank_account_type" value="SAVING"/>
  <con:entry key="bank_account_holder" value="Raghav"/>
  <con:entry key="api_key" value="8751d5a5-db44-4a82-a831-fc678ee73ecd"/>
  <con:entry key="secret" value="jbPzGv28CS"/>
  <con:entry key="method" value="ACH"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="transferFunds" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/transferFunds" methodName="2.5" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="transferFunds" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://sandbox-api.bancboxcrowd.com</con:endpoint><con:request><![CDATA[392145737253
405012216349
805141795533


956585986893
<Response xmlns="https://ec2-23-23-208-161.compute-1.amazonaws.com/crowd/v0/cfp/transferFunds">
   <id>400517</id>
   <memo>memo field</memo>
   <reference_id>Jusdsds</reference_id>
   <request_id>566163182584</request_id>
   <trans_status>1</trans_status>
   <transaction_status>COMPLETED</transaction_status>
</Response>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="amount" value="100"/>
  <con:entry key="submit_timestamp" value="2013-06-06 01:01:01"/>
  <con:entry key="preSharedKey" value="DZzXwvNbW6z2sQ"/>
  <con:entry key="text" value="text"/>
  <con:entry key="client_ip_address" value="111.216.11.115"/>
  <con:entry key="memo" value="memo1"/>
  <con:entry key="api_key" value="48529547-d623-4e49-8f66-51a335f55b54"/>
  <con:entry key="source_id" value="970185912999"/>
  <con:entry key="destination_id" value="568206429180"/>
  <con:entry key="reference_id" value=""/>
  <con:entry key="secret" value="FH6wfkfZEq"/>
  <con:entry key="fund_on_availability" value="1"/>
  <con:entry key="supress_email" value="true"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confirmWireTransfer" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/confirmWireTransfer" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confirmWireTransfer" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="first_name" value="JOHN"/>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="api_key" value="e2e4aeac-61bb-4018-aa61-ffbd51917647"/>
  <con:entry key="investor_id" value="896977614955"/>
  <con:entry key="reference_id" value="12"/>
  <con:entry key="last_name" value="SMITH"/>
  <con:entry key="secret" value="DIMBnveTY7"/>
  <con:entry key="supress_email" value="true"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="disburseEscrow" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/disburseEscrow" methodName="2.3" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="disburseEscrow" mediaType="application/x-www-form-urlencoded" accept="" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="party_account_type_ach[1]" value=""/>
  <con:entry key="party_address_state[3]" value=""/>
  <con:entry key="escrow_id" value=""/>
  <con:entry key="party_chk_type[3]" value=""/>
  <con:entry key="party_name[3]" value=""/>
  <con:entry key="party_address_line1_check[3]" value=""/>
  <con:entry key="party_payment_method[2]" value=""/>
  <con:entry key="party_address_line2_check[0]" value=""/>
  <con:entry key="party_name[1]" value=""/>
  <con:entry key="party_payment_method[0]" value=""/>
  <con:entry key="party_count" value=""/>
  <con:entry key="supress_email" value="true"/>
  <con:entry key="party_routing_number_ach[1]" value=""/>
  <con:entry key="party_reference_id[2]" value=""/>
  <con:entry key="party_account_number[2]" value=""/>
  <con:entry key="party_account_number[0]" value=""/>
  <con:entry key="reference_id" value=""/>
  <con:entry key="party_disbursal_amount[3]" value=""/>
  <con:entry key="party_address_zipcode[3]" value=""/>
  <con:entry key="party_disbursal_amount[1]" value=""/>
  <con:entry key="party_address_state[0]" value=""/>
  <con:entry key="party_chk_type[0]" value=""/>
  <con:entry key="party_account_type_ach[2]" value=""/>
  <con:entry key="party_payment_method[3]" value=""/>
  <con:entry key="party_address_line1_check[0]" value=""/>
  <con:entry key="party_address_line2_check[3]" value=""/>
  <con:entry key="party_disbursal_amount[0]" value=""/>
  <con:entry key="party_name[0]" value=""/>
  <con:entry key="party_payment_method[1]" value=""/>
  <con:entry key="party_name[2]" value=""/>
  <con:entry key="party_reference_id[0]" value=""/>
  <con:entry key="party_address_city[0]" value=""/>
  <con:entry key="issuer_disbursal_amount" value=""/>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="party_reference_id[1]" value=""/>
  <con:entry key="party_routing_number_ach[2]" value=""/>
  <con:entry key="party_reference_id[3]" value=""/>
  <con:entry key="api_key" value="e2e4aeac-61bb-4018-aa61-ffbd51917647"/>
  <con:entry key="party_account_number[1]" value=""/>
  <con:entry key="party_address_zipcode[0]" value=""/>
  <con:entry key="secret" value="DIMBnveTY7"/>
  <con:entry key="party_account_number[3]" value=""/>
  <con:entry key="close_escrow_disbursal" value=""/>
  <con:entry key="party_address_city[3]" value=""/>
  <con:entry key="party_disbursal_amount[2]" value=""/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateInvestmentLedger" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/updateInvestmentLedger" methodName="2.2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateInvestmentLedger" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="00338afc-a4cb-4ff9-be69-1bb82db09fd2"/>
  <con:entry key="residence_code" value="NY"/>
  <con:entry key="escrow_id" value="589962026188"/>
  <con:entry key="investor_id" value="384757328930"/>
  <con:entry key="class_code" value="INV"/>
  <con:entry key="secret" value="d629011fab"/>
  <con:entry key="percent_invested" value="86"/>
  <con:entry key="tax_certification_code" value="N"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="freezeInvestmentLedger" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/freezeInvestmentLedger" methodName="2.2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="freezeInvestmentLedger" mediaType="application/x-www-form-urlencoded" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://ec2-23-23-208-161.compute-1.amazonaws.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="escrow_id" value="513522448211" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createProceedsSchedules" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/createProceedsSchedules" methodName="2.2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createProceedsSchedules" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request>sprint2.4@yopmail.com cfpid=	585811360795 issuer id=996317375237</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="escrow_id" value="668586690174"/>
  <con:entry key="amount[0]" value="5"/>
  <con:entry key="supress_email" value="true"/>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="issuer_id" value=""/>
  <con:entry key="investor_id[0]" value="616963584896"/>
  <con:entry key="api_key" value=""/>
  <con:entry key="amount[1]" value=""/>
  <con:entry key="secret" value=""/>
  <con:entry key="schedule_date[1]" value=""/>
  <con:entry key="investor_id[1]" value=""/>
  <con:entry key="memo[0]" value=""/>
  <con:entry key="memo[1]" value=""/>
  <con:entry key="schedule_count" value="1"/>
  <con:entry key="cfp_reference_id[0]" value=""/>
  <con:entry key="cfp_reference_id[1]" value=""/>
  <con:entry key="schedule_date[0]" value="2014-03-26"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getProceedsSchedulesOLD" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/getProceedsSchedules" methodName="2.2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getProceedsSchedulesOLD" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="schedule_id" value=""/>
  <con:entry key="proceeds_batch_id" value=""/>
  <con:entry key="issuer_id" value=""/>
  <con:entry key="api_key" value=""/>
  <con:entry key="schedule_start" value=""/>
  <con:entry key="investor_id" value="616963584896"/>
  <con:entry key="escrow_id" value="668586690174"/>
  <con:entry key="secret" value=""/>
  <con:entry key="schedule_status" value=""/>
  <con:entry key="supress_email" value="true"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="openEscrow" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/createEscrowAccount" methodName="2.10" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="openEscrow" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:originalUri>https://qa-api.bancboxcrowd.com/crowd/v0/cfp/createEscrowAccount</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="created_by" value="Raghav"/>
  <con:entry key="platform_signatory_email" value="betatestBBX@gmail.com"/>
  <con:entry key="maximum_funding_amount" value="100"/>
  <con:entry key="over_funding_percentage" value="5"/>
  <con:entry key="contract_term_reference_id" value=""/>
  <con:entry key="securities_offered" value="EQUITY"/>
  <con:entry key="over_funding_amount" value="200"/>
  <con:entry key="close_date" value="2014-05-02"/>
  <con:entry key="funding_goal" value="200"/>
  <con:entry key="issuer_signatory_name" value="RAGHAV"/>
  <con:entry key="supress_email" value="true"/>
  <con:entry key="issuer_signatory_email" value="betatestBBX@gmail.com"/>
  <con:entry key="preSharedKey" value="baje5ja6quon"/>
  <con:entry key="issuer_id" value="475089357821"/>
  <con:entry key="deal" value="0"/>
  <con:entry key="issuer_signatory_title" value="AUTOMATION"/>
  <con:entry key="contract_doc_reference_id" value=""/>
  <con:entry key="api_key" value="1e4527e2-5fad-4eb0-9400-b1deb77eaf5a"/>
  <con:entry key="name" value="TestEscrowAutomation6"/>
  <con:entry key="platform_signatory_title" value="AUTOMATION"/>
  <con:entry key="reference_id" value=""/>
  <con:entry key="secret" value="NaXD8kfeOQ"/>
  <con:entry key="platform_signatory_name" value="RAGHAV"/>
  <con:entry key="start_date" value="2014-04-22"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="cancelProceedsSchedules" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/cancelProceedsSchedules" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="cancelProceedsSchedules" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="schedule_id" value=""/>
  <con:entry key="issuer_id" value="991305527436"/>
  <con:entry key="api_key" value="e2e4aeac-61bb-4018-aa61-ffbd51917647"/>
  <con:entry key="escrow_id" value="180022705766"/>
  <con:entry key="secret" value="DIMBnveTY7"/>
  <con:entry key="supress_email" value="true"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getEscrowDetails" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/getEscrowDetails" methodName="2.9" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getEscrowDetails" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request>/crowd/v0/cfp/getEscrowDetails\
-d api_key=58c0c842-fb4d-4333-b393-76ef33944b59 \
-d escrow_id=71132663554 \
-d secret=242d5c6c3b \
-d reference_id=</con:request><con:originalUri>https://qa-api.bancboxcrowd.com/crowd/v0/cfp/getEscrowDetails</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="1e4527e2-5fad-4eb0-9400-b1deb77eaf5a"/>
  <con:entry key="escrow_id" value="997361049493"/>
  <con:entry key="reference_id" value=""/>
  <con:entry key="secret" value="NaXD8kfeOQ"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getInvestmentLedger" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/getInvestmentLedger" methodName="2.2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getInvestmentLedger" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value=""/>
  <con:entry key="escrow_id" value="988439056543"/>
  <con:entry key="secret" value=""/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="linkExternalAccount" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/linkExternalAccount" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="linkExternalAccount" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:originalUri>https://qa-api.bancboxcrowd.com/crowd/v0/cfp/linkExternalAccount</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="bank_account_type" value="SAVING"/>
  <con:entry key="bank_account_routing" value="322271724"/>
  <con:entry key="bank_account_holder" value="John"/>
  <con:entry key="api_key" value="df304645-60b6-447e-999b-a2b7edea06b1"/>
  <con:entry key="investor_id" value="814419552387"/>
  <con:entry key="secret" value="DSiskES93W"/>
  <con:entry key="bank_account_number" value="2352154"/>
  <con:entry key="supress_email" value="true"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getInvestorDetails" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/getInvestorDetails" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getInvestorDetails" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:originalUri>https://qa-api.bancboxcrowd.com/crowd/v0/cfp/getInvestorDetails</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="df304645-60b6-447e-999b-a2b7edea06b1"/>
  <con:entry key="investor_id" value="814419552387"/>
  <con:entry key="secret" value="DSiskES93W"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="verifyIdentity" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/verifyIdentity" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="verifyIdentity" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value="176606247249"/>
  <con:entry key="api_key" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
  <con:entry key="secret" value="DD7JOLd4Dw"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay" disabled="true"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="setGlobalProperty" disabled="true"><con:settings/><con:config><script>log.info "			>>>>>>>>>>>>>> start"
testRunner.testCase.testSuite.project.setPropertyValue("TestDataFileLocation","abc")
log.info "			>>>>>>>>>>>>>> end"</script></con:config></con:testStep><con:testStep type="groovy" name="getRequestParams" disabled="true"><con:settings/><con:config><script>
def ReqHolder = testRunner.testCase.getTestStepByName("getEscrowDetails").getProperty("request").value

log.info "				>>>> ReqHolder =:"+ReqHolder

//def abcd = messageExchange.getRequestContentAsXml.toString()</script></con:config></con:testStep><con:testStep type="groovy" name="SendMail" disabled="true"><con:settings/><con:config><script>import javax.mail.internet.*;
import javax.mail.*
import javax.activation.*
 
 
def message = "test groovy mail"
def subject = "groovy sent this"
//def toAddress = "chburmeister@googlemail.com;webmaster@christoph-burmeister.eu"
def toAddress = "raghav@bancbox.com"
def fromAddress = "go2raghav@gmail.com"
def host = "my.mail.host"
def port = "25"
 
//sendmail(message , subject, toAddress, fromAddress, host, port);

 def sendmail(String message ,String subject, String toAddress, String fromAddress, String host, String port){
   Properties mprops = new Properties();
   mprops.setProperty("mail.transport.protocol","smtp");
   mprops.setProperty("mail.host",host);
   mprops.setProperty("mail.smtp.port",port);
 
   Session lSession = Session.getDefaultInstance(mprops,null);
   MimeMessage msg = new MimeMessage(lSession);
 
   StringTokenizer tok = new StringTokenizer(toAddress,";");
   ArrayList emailTos = new ArrayList();
   while(tok.hasMoreElements()){
      emailTos.add(new InternetAddress(tok.nextElement().toString()));
   }
   InternetAddress[] to = new InternetAddress[emailTos.size()];
   to = (InternetAddress[]) emailTos.toArray(to);
   msg.setRecipients(MimeMessage.RecipientType.TO,to);
   msg.setFrom(new InternetAddress(fromAddress));
   msg.setSubject(subject);
   msg.setText(message)
 
   Transport transporter = lSession.getTransport("smtp");
   transporter.connect();
   transporter.send(msg);
}</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of SendMail" disabled="true"><con:settings/><con:config><script><![CDATA[import javax.mail.internet.*;
import javax.mail.*
import javax.activation.*
import javax.mail.Multipart;
import javax.mail.internet.MimeMultipart;
//import com.atlassian.jira.issue.Issue;
//import com.atlassian.jira.ComponentManager;
//import com.atlassian.jira.issue.CustomFieldManager;
//import com.atlassian.jira.issue.fields.CustomField;
//import com.atlassian.jira.issue.comments.CommentManager;
//import com.atlassian.jira.issue.attachment.Attachment;
//import com.atlassian.jira.issue.history.ChangeItemBean;
//import com.atlassian.jira.util.AttachmentUtils;
import groovy.text.GStringTemplateEngine;
 
 
//Get Comment Manager
CommentManager commentManager = componentManager.getCommentManager();
 
//Get custom field manager
CustomFieldManager customFieldManager = ComponentManager.getInstance().getCustomFieldManager();
 
 
//Get custom field email by id
CustomField customField_email = customFieldManager.getCustomFieldObject( 10205 );
 
 
//get value of customField_email
to = issue.getCustomFieldValue( customField_email )
 
 
//Email Headers
sender="test@gmail.com"
sendername="Test Test"
 
 
//Email acccount credentials
username="test@gmail.com"
password="password"
 
//Gmail Default port
port = 25
 
//Email Body
content = """\
<html>
<body>
<div>
test
</div>
</body>
</html>
"""
 
//Creat first part of email, Email Body
 
 
Multipart mp = new MimeMultipart("mixed");
 
MimeBodyPart htmlPart = new MimeBodyPart();
htmlPart.setContent(content.toString(), "text/html");
mp.addBodyPart(htmlPart);
 
 
 
 
//Create attachment list
 
List attachmentIds = []
 
 
//Get change items during transition
List changeItems = transientVars["changeItems"]
 
 
 
//Get attachements
changeItems.each {ChangeItemBean cib ->
                        if (cib.getField() == "Attachment" && cib.getTo()) {
                            attachmentIds.add(cib.getTo())
                        }
}
 
 
//Create attachments email part
attachmentIds.each {attachmentId ->
                Attachment attachment = issue.attachments.find {Attachment attachment ->
                    attachment.id == new Long(attachmentId)
                     
                }
                 
                //File attFile = AttachmentUtils.getAttachmentFile(attachment)
                File attFile = AttachmentUtils.getAttachmentFile(attachment)
                 
                 
                 
                //Create Second Part of Email, Attachments
                MimeBodyPart attPart = new MimeBodyPart()
                FileDataSource attFds = new FileDataSource(attFile)
                attPart.setDataHandler(new DataHandler(attFds))
                attPart.setFileName(attachment.filename)
                 
                //log.debug("Attaching ${attachment.filename} to mail")
                mp.addBodyPart(attPart)
                log.warn ("Attaching ${attachment.filename} to mail")
}
 
 
//Email Properties
 
props = new Properties()
props.put("mail.smtp.port", port);
props.put("mail.smtp.socketFactory.fallback", "false");
props.put("mail.smtp.quitwait", "false");
props.put("mail.smtp.host", "smtp.gmail.com");
props.put("mail.smtp.auth", "true");
 
 
//New session





Session session = Session.getInstance(props,
          new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
          });

          MimeMessage message = new MimeMessage(session);
message.setFrom(new InternetAddress(sender,sendername));
message.setSubject("${issue.getKey()}");
//message.setContent(content.toString(), "text/html");
message.setRecipient(Message.RecipientType.TO, new InternetAddress(to));
message.setContent(mp)
 
try{
        Transport transport = session.getTransport("smtp");
        transport.connect( "smtp.gmail.com",port,username,password );
        transport.sendMessage(message,message.getAllRecipients());
        transport.close();
        log.warn ("mail sent sucesfully to : "+ issue.getCustomFieldValue( customField_email).toString())
 
}catch (MessagingException mex) {
         mex.printStackTrace();
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="dataType handling" disabled="true"><con:settings/><con:config><script>
import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
Long returnDataType3 = Long.valueOf(316216)
log.info "              >>>>>>>>>>>. returnDataType3 : "+returnDataType3

def ResposeValueText = "1"
 boolean returnDataType = Boolean.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : BooleanValue :"+returnDataType



def ResposeValueText1 = "316218}"
 if(ResposeValueText1.contains("}"))
{
	ResposeValueText1 = ResposeValueText1.replace("}","")
}
log.info "				>>>> : ResposeValueText1 :"+ResposeValueText1



 float returnDataType2 = Float.valueOf("20")
	 log.info "				>>>>>>>>>>>>>>>>>> : FloatValue :"+returnDataType2

 String ParsedJSONResponseInString = '{"request_id":582085758745,"investor_ledgers":[{"investor_id":384757328930,"account_number":540126107440,"percent_invested":90,"name":"JOHN SMITH","address1":"222333","city":"ATLANTA","state":"GA"}]}'
 String ResponseParameter = "percent_invested"
 int IndexOfParam =  ParsedJSONResponseInString.lastIndexOf(ResponseParameter)
 int LengthOfParam = ResponseParameter.size()
 int IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf(",", IndexOfParam)

	 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
 	//ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
 
	 log.info "				>>>> ResposeValueText:"+ResposeValueText



	if(false||false||false)
	{
		log.info "				>>>> : If BLOCK"
	}
	else
	{
		log.info "				>>>> : Else BLOCK"
	}
try{
	 			 ResposeValueText = "2014-01-07";
	 			 SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
				 Date date = null;
				 date = format.parse(ResposeValueText);
				 //date returnDataType = date.valueOf(ResposeValueText)
				 log.info "				>>>>>>>>>>>>>>>>>> : DateValue  :"+date;
}
catch(all)
{
	log.info "catchall";
}

</script></con:config></con:testStep><con:testStep type="groovy" name="DataType Test" disabled="true"><con:settings/><con:config><script>import java.util.Scanner;
 //float returnDataType2 = Float.valueOf("asdf");
 //double returnDTType1 = double.valueOf(1);
     

 	int returnDataType = Integer.valueOf(1);
      
    //  Double c = Double.valueOf("3.435");

     

//Integer abc = 3.14;
//abc.getClass().getName();

      
/*
      Scanner sc = new Scanner("");
    
      
      if(sc.hasNextString()){
								log.info "    >>>>>  ok ";	
							}
							*/</script></con:config></con:testStep><con:testStep type="groovy" name="CallAnotherGroovy" disabled="true"><con:settings/><con:config><script>//run( new File("checkStringcontainsnumbers") 

log.info "				>>>>>>>>>>>>>>>>>> : Starting CallAnotherGroovy"
testRunner.runTestStepByName("checkStringcontainsnumbers")
testRunner.runTestStepByName("AutomationDriver")
log.info "				>>>>>>>>>>>>>>>>>> : ENDing CallAnotherGroovy"

/*
try{
long returnDataType = Long.valueOf("398200051060")
log.info " returnDataType " +returnDataType
}
catch (all)
{
log.info "	number format exception"
}
*/</script></con:config></con:testStep><con:testStep type="restrequest" name="acceptEscrow" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/escrow/acceptEscrow" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="acceptEscrow" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:originalUri>https://qa-api.bancboxcrowd.com/crowd/v0/escrow/acceptEscrow</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="preSharedKey" value="baje5ja6quon"/>
  <con:entry key="Id" value="997361049493"/>
  <con:entry key="supress_email" value="true"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="httprequest" name="CallBetaJobServer" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="CallBetaJobServer" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://test.cftpay.com:8080/scheduler/stat.go;jsessionid=BAB2FA89A919ECD272AA8C46719F49CB?opt1=1&amp;opt2=jobDetail-fourOaksICLProcessorEnhanced&amp;opt3=0</con:endpoint><con:request/><con:credentials><con:username>cftadmin</con:username><con:password>CFTis#1</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="runLoopfor5Mins" disabled="true"><con:settings/><con:config><script>/*
long startTime = System.currentTimeMillis();
log.info "	>>>>	startTime = "+startTime;
while ((System.currentTimeMillis()-startTime)&lt; 1*60*1000){
 
  log.info System.currentTimeMillis();
  Thread.sleep(10 * 1000)
  
}
*/

log.info "Before Sleeping";
Thread.sleep(60000);
log.info "After Sleeping";</script></con:config></con:testStep><con:testStep type="httprequest" name="job-Outbound-QA" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="job-Outbound-QA" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://qajs2.cftpay.com:8080/scheduler/stat.go?opt1=1&amp;opt2=jobDetail-foakdOutboundProcessor&amp;opt3=0</con:endpoint><con:request/><con:credentials><con:username>cftadmin</con:username><con:password>CFTis#1</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="job-Outbound-Beta" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="job-Outbound-Beta" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://betajs.cftpay.com:8080/scheduler/stat.go?opt1=1&amp;opt2=jobDetail-foakdOutboundProcessor&amp;opt3=0</con:endpoint><con:request/><con:credentials><con:username>cftadmin</con:username><con:password>CFTis#1</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="job-DraftRealization-Beta" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="job-DraftRealization-Beta" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://betajs.cftpay.com:8080/scheduler/stat.go?opt1=1&amp;opt2=jobDetail-realizeDraftInboundProcessorEnhanced&amp;opt3=0</con:endpoint><con:request/><con:credentials><con:username>cftadmin</con:username><con:password>CFTis#1</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="job-DraftRealization-QA" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="job-DraftRealization-QA" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://qajs2.cftpay.com:8080/scheduler/stat.go?opt1=1&amp;opt2=jobDetail-realizeDraftInboundProcessorEnhanced&amp;opt3=0</con:endpoint><con:request/><con:credentials><con:username>cftadmin</con:username><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="job-PushNotification-QA" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="job-PushNotification-QA" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://qajs2.cftpay.com:8080/scheduler/stat.go?opt1=1&amp;opt2=jobDetail-pushNotificationSynchronizationProcessor&amp;opt3=0</con:endpoint><con:request/><con:credentials><con:username>cftadmin</con:username><con:password>CFTis#1</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="job-PushNotification-Beta" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="job-PushNotification-Beta" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://betajs.cftpay.com:8080/scheduler/stat.go?opt1=1&amp;opt2=jobDetail-pushNotificationSynchronizationProcessor&amp;opt3=0</con:endpoint><con:request/><con:credentials><con:username>cftadmin</con:username><con:password>CFTis@1</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="HTTP Test Request1" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="HTTP Test Request1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://www.google.co.in</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="HTTP Test Request2" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="HTTP Test Request2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mail.google.com/mail/#inbox</con:endpoint><con:request/><con:credentials><con:username>raghav@bancbox.com</con:username><con:password>Zse45rdx001</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="DBQuery" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.sql.Sql;

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )

sql = Sql.newInstance( 'jdbc:mysql://qadb.cwcu7htstnnx.us-east-1.rds.amazonaws.com/cp20', 'cp20_stag_user',
                       'h4yA9eSw', 'com.mysql.jdbc.Driver' )

sqlBETA = Sql.newInstance('jdbc:mysql://beta.cwcu7htstnnx.us-east-1.rds.amazonaws.com/cp20','cp20_stag_user','h4yA9eSw','com.mysql.jdbc.Driver')

//query = "Call sp_getTransactionListAPI_temp(200001,NULL,NULL,0,'0000-00-00','0000-00-00','2013-05-01 14:11:48','2013-05-01 15:11:49',NULL,'0','',1,2,2,"+lastTxnId+",@out_value);"

query1 = "select username from users limit 10;"

query = "select clients_id from cp20.bb_accounts limit 10;"
int count=0;
sql.eachRow( query) {
	count= count + 1 
	//log.info "\t username =  $it.username | count=$count" 
	log.info "\t username =  $it.clients_id | count=$count" 
}

sql.eachRow("Select @out_value a"){
	log.info "$it.a"
	totalCount = it.a	
	
}


//checking same query in Beta
int count1=0;
sqlBETA.eachRow( query1) {
	count1= count1 + 1 
	//log.info "\t username =  $it.username | count=$count" 
	log.info "\t username =  $it.clients_id | count=$count1" 
}

sqlBETA.eachRow("Select @out_value a"){
	log.info "$it.a"
	totalCount = it.a	
	
}</script></con:config></con:testStep><con:testStep type="httprequest" name="GmailLogin" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" name="GmailLogin" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://mail.google.com/mail/?shva=1#inbox</con:endpoint><con:request/><con:credentials><con:username>raghav9901@gmail.com</con:username><con:password>Abcd1234+</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="SeleniumRSJan29-2" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RightSignTestJan29
//import java.util.regex.Pattern;

//import java.util.concurrent.TimeUnit;
//import org.junit.*;
//import static org.junit.Assert.*;
//import static org.hamcrest.CoreMatchers.*;
//import org.openqa.selenium.*;
//import org.openqa.selenium.firefox.FirefoxDriver;
//import org.openqa.selenium.support.ui.Select;
//import selenium2.org.json.JSONException;
//import org.json.JSONException;
//import selenium-java-2.39.0.org.json.*;


try{
//RightSignTest rightSignTest = new RightSignTest();
//rightSignTest.openMail();

String s_Status = RightSignTestJan29.rightSignTest();
//SeleniumTC2 seleniumTC2 = new SeleniumTC2();
//seleniumTC2.testSeleniumTC1();
log.info "			Completed : Status is : "+s_Status;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="JobTestJan30" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.QAJobOutbound
//import java.util.regex.Pattern;

//import java.util.concurrent.TimeUnit;
//import org.junit.*;
//import static org.junit.Assert.*;
//import static org.hamcrest.CoreMatchers.*;
//import org.openqa.selenium.*;
//import org.openqa.selenium.firefox.FirefoxDriver;
//import org.openqa.selenium.support.ui.Select;
//import selenium2.org.json.JSONException;
//import org.json.JSONException;
//import selenium-java-2.39.0.org.json.*;


try{
//RightSignTest rightSignTest = new RightSignTest();
//rightSignTest.openMail();

QAJobOutbound.testQAJobOutbound();
//SeleniumTC2 seleniumTC2 = new SeleniumTC2();
//seleniumTC2.testSeleniumTC1();
log.info "			Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="JobTestJan31" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunJobsURL
//import java.util.regex.Pattern;

//import java.util.concurrent.TimeUnit;
//import org.junit.*;
//import static org.junit.Assert.*;
//import static org.hamcrest.CoreMatchers.*;
//import org.openqa.selenium.*;
//import org.openqa.selenium.firefox.FirefoxDriver;
//import org.openqa.selenium.support.ui.Select;
//import selenium2.org.json.JSONException;
//import org.json.JSONException;
//import selenium-java-2.39.0.org.json.*;


try{
//RightSignTest rightSignTest = new RightSignTest();
//rightSignTest.openMail();

RunJobsURL.QAbatchInboundProcessor();
//SeleniumTC2 seleniumTC2 = new SeleniumTC2();
//seleniumTC2.testSeleniumTC1();
log.info "			Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-QAOutbound" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunJobsURL

try{
log.info "RUNNING STEP QA OUTBOUND";
RunJobsURL.QAOutbound();
log.info "			QA Outbound Job Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-BETAOutbound" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunJobsURL

try{
RunJobsURL.BETAOutbound();
log.info "			BETA Outbound Job Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-QARealizeDraft" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunJobsURL

try{
RunJobsURL.QARealizeDraft();
log.info "			QA Realize Draft Job Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-BETARealizeDraft" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunJobsURL

try{
RunJobsURL.BETARealizeDraft();
log.info "			BETA Realize Draft Job Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-QAPushNotification" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunJobsURL

try{
RunJobsURL.QAPushNotification();
log.info "			QA PushNotificatoin Job Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-BETAPushNotification" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunJobsURL

try{
RunJobsURL.BETAPushNotification();
log.info "			BETA Push Notification Job Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RightSignProcessForIssuer" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunRightSignProcess
try{
String s_Status = RunRightSignProcess.rightSignTestForIssuer();
log.info "			Completed : Status is for rightSignTestForIssuer: "+s_Status;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RightSignProcessForCfp" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunRightSignProcess
try{
String s_Status = RunRightSignProcess.rightSignTestForCfp();
log.info "			Completed : Status rightSignTestForCfp is : "+s_Status;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJobs" disabled="true"><con:settings/><con:config><script>

//QA jobs
testRunner.runTestStepByName('RunJob-QAOutbound');
testRunner.runTestStepByName('RunJob-QARealizeDraft');
testRunner.runTestStepByName('RunJob-QAPushNotification');

/*
//BETA jobs
testRunner.runTestStepByName('RunJob-BETARealizeDraft');
testRunner.runTestStepByName('RunJob-BETAOutbound');
testRunner.runTestStepByName('RunJob-BETAPushNotification');
*/</script></con:config></con:testStep><con:testStep type="groovy" name="AutomationScenarioOLD 1" disabled="true"><con:settings/><con:config><script><![CDATA[
/***********************************************************************************************************************
 * *********************************************************************************************************************
 * AutomationScenario script - This script reads the scenario file and run the steps in the scenario.
 * The scenario file is an excel workbook where each scenario is placed in a sheet of the workbook.
 * The script reads the workbook and executes through all the scenarios present in the workbook.
 * 
 * The user is provided with the flexibility of choosing the scenarios to run during execution from the scenario excel.
 * Scenarios having RunSwitch=1 will be considered for execution and those having RunSwitch=0 will be ignored.
 * 
 * The steps in the scenario are the test cases created in the individual test data files for that request.
 * Both the scenario file and the testData files for individual api requests should be present at the same location.
 * After performing basic validations, each step in the scenario is executed (executing the mentioned Test Case from the mentioned Test Data sheet)
 * 
 * After successful execution of the scenarios a result file (excel) will get created in the same loccation where your scenario file is located. 
 * *********************************************************************************************************************
 * *********************************************************************************************************************
 */

 
import jxl.*;
import com.eviware.soapui.*;
import java.util.*;

import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder;

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;

import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;

//importing jars for DB connection
import com.eviware.soapui.support.XmlHolder
import groovy.sql.Sql;


log.info "				>>>>>>>>>>>>>>>>>> : Starting AutomationScenario Script";
//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet TestDataProp1;
Sheet TestDataValues1;
Sheet TestDataResponseSchema;
Sheet TestDataResponse;
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//****************************************************
//Array to separate and store cell contents based on |
//****************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//**********************************************************
//Couner for looping through number of steps in the scenario
//**********************************************************
int iCounter1;
//************************
//starting try catch block
//************************
try{

	//***************************************************
	//Get the scenario file location. 
	//This can be passed as a parameter from commandline.
	//***************************************************
	//String TestScenarioFile = "C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\TeamTestData\\ScenarioTD\\ScenarioSheet2.xls"
	String TestScenarioFile = context.expand('${#Project#ScenarioFileLocation}');
	//***************************************************
	//Get the set No
	//This can be passed as a parameter from commandline.
	//***************************************************
	//String TestScenarioFile = 1;
	String SetNo = context.expand('${#Project#SetNo}');
	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	NoOfScenarioSheets = getSenarioSheets.size();
	log.info "				>>>> NoOfScenarioSheets : "+NoOfScenarioSheets;

		//************************************
		//Create workbook for writing response
		//************************************
		//log.info "				>>>> TestScenarioFile = "+TestScenarioFile;
 		int Length =  TestScenarioFile.lastIndexOf( '\\' );
 		int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
 		//log.info "				Length : "+Length;
 		//log.info "				Length2 : "+Length2;
 		String excelName = TestScenarioFile.substring(Length+1,Length2);
 		//log.info "				>>>> excelName - "+excelName;
 		String ResposeFileLocation = TestScenarioFile.substring(0,Length);
 		//Getting Current Time
     	 currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
	 	//log.info "				>>>>>>>>>>>>>>>>>> : time :"+currentTime
		//Getting location to create the TestResponseFile
		String workingDir = System.getProperty("user.dir");
		String ScenarioResponseFile = ResposeFileLocation + "\\"+excelName+"-Response-" +currentTime+".xls";
		log.info "				>>>>>>>>>>>>>>>>>> : ScenarioResponseFile :"+ScenarioResponseFile;
		//Creating Response Excel File
		workbook = Workbook.createWorkbook(new File(ScenarioResponseFile));

		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(sheetCount=1;sheetCount<NoOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();			
		log.info "				>>>> Reading Sheet : "+sheetName;
		
		/*
		//condition to check sheet name contains 'scenario'
		if(!(sheetName.toLowerCase().contains('scenario')))
		{
			alert.showInfoMessage("Sheet:"+(sheetCount+1)+"does not have name -Scenario"+(sheetCount+1));
			log.info "				>>>>: Sheet:"+(sheetCount+1)+"does not have name -Scenario"+(sheetCount+1);
			continue;
		}
		*/

		//*************************************************
		//condition to check RunSwitch. 
		//Only scenarios with RunSwitch 1 will be executed.
		//Changing RunSwitch to Set No
		//*************************************************
		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info "Scenario in sheet "+sheetName+" not set for execution";
			continue;
		}
		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);
	


					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "CURL"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);





	
		//****************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();
		log.info  "				>>>>>>>>>>>>>>>>>> : ScenarioRowCount:"+ScenarioRowCount;
		log.info  "				>>>>>>>>>>>>>>>>>> : ScenarioColCount:"+ScenarioColCount;
	
		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];

			//******************************************************
			//Starting loop for number of steps in the scenario
			//******************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);

			iCountFlag=0;
			log.info "				>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> : Reading Row No :"+(iCounter1+1);
			log.info "				>>>> ********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents();
			//************************************************
			//condition to check if the scenario step is empty
			//************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}
			////log.info "				>>>> Step Name is :"+SenarioSheet1.getCell(1,iCounter1).getContents();


			//************************************
			//Checking if step refers to complete RightSignProcess
			//************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('rightsign')))
			{
			 	
			 	//******************************
			 	//Running Right Sign
			 	//****************************** 
			 	//String emailCredentials = SenarioSheet1.getCell(3,iCounter1).getContents().toString();
				//Calling func for Right Sign

				
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('issuer')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for ISSUER";
			 	testRunner.runTestStepByName('RightSignProcessForIssuer');
				Thread.sleep(5000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for ISSUER" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Completing Right Sign Process for CFP";
			 	testRunner.runTestStepByName('RightSignProcessForCfp');
				Thread.sleep(5000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	//Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(3, iCounter1,"Right Signature Process Completed for CFP" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			//continue;
			}
/*
//************************************
			//Checking if step refers to complete RightSignProcess
			//************************************
			if((SenarioSheet1.getCell(1,iCounter1).getContents().toLowerCase().contains('rightsign')))
			{
			 	
			 	//******************************
			 	//Running Right Sign
			 	//****************************** 
			 	//String emailCredentials = SenarioSheet1.getCell(3,iCounter1).getContents().toString();
				//Calling func for Right Sign

				
			 	if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('cfp')))
				{
					
				log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-2)+" is Completing Right Sign Process for CFP";
			 	testRunner.runTestStepByName('RightSignProcessForCfp');
				Thread.sleep(10000);	
				//testRunner.runTestStepByName('RightSignProcess');
			 	Thread.sleep(5000);	
			 	Label labelRightSignProcess = new Label(0, iCounter1,"Right Signature Process Completed" ,normalFormat); 
				sheet.addCell(labelRightSignProcess);
			 	continue;			
			}
			continue;
			}
*/			
			//************************************
			//Checking if step refers to Run a Job
			//************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('outbound')))
			{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Running Outbound job";
			 	//******************************
			 	//Running Four Oaks Outbound job
			 	//****************************** 
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta')))
				{
			 	testRunner.runTestStepByName('RunJob-BETAOutbound');
			 	Thread.sleep(5000);
			 	log.info "				>>>> FourOaksOutBoundJob Executed in BETA";
			 	Label labeljobBetaOutbound = new Label(3, iCounter1,"job-FourOaksOutBound-Beta EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobBetaOutbound);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa')))
				{
			 	testRunner.runTestStepByName('RunJob-QAOutbound');
			 	Thread.sleep(5000);
			 	log.info "				>>>> FourOaksOutBoundJob Executed in QA";
			 	Label labeljobQAOutbound = new Label(3, iCounter1,"job-FourOaksOutBound-QA EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAOutbound);
			 	continue;
				}
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('draft')))
			{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Running Draft Realization job";
			 	//******************************
			 	//Running Four Oaks Outbound job
			 	//****************************** 
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta')))
				{
			 	testRunner.runTestStepByName('RunJob-BETARealizeDraft');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Draft Realization job Executed in BETA";
			 	Label labeljobBetaDraftRealization = new Label(3, iCounter1,"job-DraftRealization-Beta EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobBetaDraftRealization);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa')))
				{
			 	testRunner.runTestStepByName('RunJob-QARealizeDraft');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Draft Realization job Executed in QA";
			 	Label labeljobQADraftRealization = new Label(3, iCounter1,"job-DraftRealization-QA EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQADraftRealization);
			 	continue;
				}
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('push')))
			{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is Running Push Notification job";
			 	//******************************
			 	//Running Four Oaks Outbound job
			 	//****************************** 
			 	if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('beta')))
				{
			 	testRunner.runTestStepByName('RunJob-BETAPushNotification');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Push Notification job Executed in BETA";
			 	Label labeljobBetaPushNotification = new Label(3, iCounter1,"job-PushNotification-Beta EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobBetaPushNotification);
			 	continue;
				}
				if((SenarioSheet1.getCell(5,iCounter1).getContents().toLowerCase().contains('qa')))
				{
			 	testRunner.runTestStepByName('RunJob-QAPushNotification');
			 	Thread.sleep(5000);
			 	log.info "				>>>> Push Notification job Executed in QA";
			 	Label labeljobQAPushNotification = new Label(3, iCounter1,"job-PushNotification-QA EXECUTED" ,normalFormat); 
				sheet.addCell(labeljobQAPushNotification);
			 	continue;
				}
			}


			
			else 
			{
			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;
			mapName = "map"+mapNo;
			//mapName = mapNo
			log.info "				>>>mapName is ="+mapName;
			//***************************
			//creating a dynamic hash map
			//***************************
			HashMap mapName= [:];
			////////////log.info "				>>>> map:"+mapName;
			//***********************************************************
			//get the contents from the cell containing the scenario step
			//***********************************************************
			//cellContents = SenarioSheet1.getCell(1,iCounter1).getContents();
		 	//log.info "			>>>>>>>> cellContents: "+cellContents;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents();

				//***************************************************************
				//Condition to check the stepName has correct API name and format
				//***************************************************************
				if(!((RequestName.contains('createInvestor')) || (RequestName.contains('getInvestorDetails')) || (RequestName.contains('getInvestorList')) || (RequestName.contains('submitAgreement')) || (RequestName.contains('verifyIdentity')) || (RequestName.contains('verifyAnswers')) || (RequestName.contains('createIssuer')) || (RequestName.contains('getIssuerDetail')) || (RequestName.contains('getIssuerList')) || (RequestName.contains('openEscrow')) || (RequestName.contains('fundAccount')) || (RequestName.contains('fundEscrow')) || (RequestName.contains('changeInvestorContribution')) || (RequestName.contains('cancelEscrow')) || (RequestName.contains('closeEscrow')) || (RequestName.contains('getEscrowDetails')) || (RequestName.contains('getEscrowList')) || (RequestName.contains('getActivityDetails')) || (RequestName.contains('updateEscrowAccount')) || (RequestName.contains('withdrawFunds')) || (RequestName.contains('transferFunds')) || (RequestName.contains('confirmWireTransfer')) || (RequestName.contains('disburseEscrow')) || (RequestName.contains('updateInvestmentLedger')) || (RequestName.contains('freezeInvestmentLedger')) || (RequestName.contains('createProceedsSchedules')) || (RequestName.contains('viewProceedsSchedules')) || (RequestName.contains('cancelProceedsSchedules')) || (RequestName.contains('getInvestmentLedger')) || (RequestName.contains('linkExternalAccount')) || (RequestName.contains('acceptEscrow'))))
				{
					alert.showInfoMessage("For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" does NOT contain a valid API reqeust name");
					log.info "				>>>> For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" does NOT contain a valid API reqeust name";
					//continue;
					break;
				}



				
				
				/*
				 * COMMENTING THIS PART BECAUSE CHANGING THE SCENARIO SHEET FORMAT
				 * instead of having api name and TCID in same cell, will have it in separate cells(separate columns) 
				  
				if(!((cellContents.contains("createInvestor|")) || (cellContents.contains("getInvestorDetails|")) || (cellContents.contains("getInvestorList|")) || (cellContents.contains("submitAgreement|")) || (cellContents.contains("verifyIdentity|")) || (cellContents.contains("verifyAnswers|")) || (cellContents.contains("createIssuer|")) || (cellContents.contains("getIssuerDetails|")) || (cellContents.contains("getIssuerList|")) || (cellContents.contains("openEscrow|")) || (cellContents.contains("fundAccount|")) || (cellContents.contains("fundEscrow|")) || (cellContents.contains("changeInvestorContribution|")) || (cellContents.contains("cancelEscrow|")) || (cellContents.contains("closeEscrow|")) || (cellContents.contains("getEscrowDetails|")) || (cellContents.contains("getEscrowList|")) || (cellContents.contains("getActivityDetails|")) || (cellContents.contains("updateEscrowAccount|")) || (cellContents.contains("withdrawFunds|")) || (cellContents.contains("transferFunds|")) || (cellContents.contains("confirmWireTransfer|")) || (cellContents.contains("disburseEscrow|")) || (cellContents.contains("updateInvestmentLedger|")) || (cellContents.contains("freezeInvestmentLedger|")) || (cellContents.contains("createProceedsSchedules|")) || (cellContents.contains("viewProceedsSchedules|")) || (cellContents.contains("cancelProceedsSchedules|")) || (cellContents.contains("getInvestmentLedger|")) || (cellContents.contains("linkExternalAccount|")) || (cellContents.contains("acceptEscrow|"))))
				{
					alert.showInfoMessage("For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-2)+" does NOT contain a valid API reqeust name");
					log.info "				>>>> For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-2)+" does NOT contain a valid API reqeust name";
					//continue;
					break;
				}
				//************************************
				//taking the cell contents in an array
				//************************************
			 	String[] TestDataRequestArray = cellContents.split("\\|");
				int TestDataRequestArraySize = TestDataRequestArray.size();
				if(TestDataRequestArraySize<2)
				{
			 	log.info "				>>>> For Scenario "+sheetName+" Step No " +(iCounter1-2)+" is not in proper format";
			 	continue;
			 	}
			 	//********************************
			 	//extracting request name and TCID
			 	//********************************
				String RequestName = TestDataRequestArray[0].trim();
				String TestCaseID = TestDataRequestArray[1].trim();
				log.info "				>>>> Request Name is :"+RequestName;
				log.info "				>>>> TCID is :"+TestCaseID;
				*/

				
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				log.info "				>>>> TestDataFile is :"+TestDataFile;

				//****************************
				//Get the Test Data Excel File
				//****************************
				TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
				//*****************************************
				//Get the Sheet having Test Data Properties
				//*****************************************
				TestDataProp1 = TestDataWB.getSheet("Request Schema");
				//*************************************
				//Get the Sheet having Test Data Values
				//*************************************
				TestDataValues1 = TestDataWB.getSheet("Request Values");
				//Get the Sheet having Test Data Response Properties
				TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
				TestDataResponse = TestDataWB.getSheet("Response Values");
				//******************************************
				//Count Rows and Columns in Properties sheet
				//******************************************
				PropRowCount = TestDataProp1.getRows();
				PropColCount = TestDataProp1.getColumns();
				log.info "				>>>>>>>>>>>>>>>>>>>> : PropRowCount " +PropRowCount;
				//***********************************************
				//Count Rows and Columns in Response Schema sheet
				//***********************************************
				ResponseSchemaRowCount = TestDataResponseSchema.getRows();
				ResponseSchemaColCount = TestDataResponseSchema.getColumns();
				//log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount;
				//log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount;
				//****************************************
				//Count Rows and Columns in Response sheet
				//****************************************
				ResponseRowCount = TestDataResponse.getRows();
				ResponseColCount = TestDataResponse.getColumns();
				//log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount;
				//log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount;
				//Count Rows and Columns in Values sheet
				ValuesRowCount = TestDataValues1.getRows();
				ValuesColCount = TestDataValues1.getColumns();
				//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesRowCount " +ValuesRowCount;
				log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesColCount " +ValuesColCount;
				//log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount;
				//log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount;
	
				//****************************************************************************************
				//Condition to check the parameters present in RequestSchema = parameters in RequestValues
				//****************************************************************************************
				if(PropRowCount != (ValuesColCount-3))
				{
				workbook.write();
				workbook.close();
				alert.showInfoMessage("Mismatch in the count of Properties and Values for Scenario "+sheetName+" Step No " +(iCounter1-2)+"\n");
				log.info "				>>>>>>>>>>>>>>>>>>>> : Mismatch in the count of Properties and Values. "+sheetName+" Step No " +(iCounter1-2)+"\n";
				//return;
				break stepCountLoop;
				//break ScenarioCountLoop;
				}
				//***********************************************************************
				//********Iterating loop for No of Test Cases in Test Data Sheet*********
				//***********************************************************************
				for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
				{//************START loop for No of Test Cases
				
				//flush();
				ResponseParameter = "";
				ParameterDataType = "";
				EnumDataCollection = "";
				enumType="";
			
			
				
				if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
					//log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Test Case :"+TestCaseID;
					//iCountTestCase = iCountTestCase-1
					continue;
				}
			 	flagCount = 8;
			
					SenarioSheet1.getCell(1,iCounter1).getContents();

					/*
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "CURL"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);
					*/
					/*
					Label label00 = new Label(0, 2, "SenarioStep"); //column=0=A,row=0=1
					sheet.addCell(label00);
					Label label01 = new Label(1, 2, "TCID"); //column=0=A,row=0=1
					sheet.addCell(label01);

					Label labelDescriptionHeader = new Label(2, 2, "Description"); //column=0=A,row=0=1
					sheet.addCell(labelDescriptionHeader);
					Label labelExpectedHeader = new Label(3, 2, "Expected Result"); //column=0=A,row=0=1
					sheet.addCell(labelExpectedHeader);

					
					Label labelCurlHeader = new Label(4, 2, "Curl"); //column=0=A,row=0=1
					sheet.addCell(labelCurlHeader);
					
					Label labelTCID = new Label(5, 2, "Response"); //column=0=A,row=0=1
					sheet.addCell(labelTCID);
					*/

					Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
					sheet.addCell(stepNoValue);

					Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
					sheet.addCell(descriptionValue);

					Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
					sheet.addCell(expectedValue);

					Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
					sheet.addCell(referencesValue);
					
					/*
					Label labelTCDescription = new Label(2, iCounter1, TestDataValues1.getCell(1,iCountTestCase).getContents()); //column=0=A,row=0=1
					sheet.addCell(labelTCDescription);

					Label labelTCExpected = new Label(3, iCounter1, TestDataValues1.getCell(2,iCountTestCase).getContents()); //column=0=A,row=0=1
					sheet.addCell(labelTCExpected);
					*/

					
					log.info "				>>>>>>>>>>>>>>>>>> : STARTING TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
					//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
					//sheet.addCell(label02);
			
					//***************************************
					//Setting parameter values in the request
					//***************************************
					String key = "";
					String value = "";
					String requestData = "";
					for(iCounter=1;iCounter<(ValuesColCount-3);iCounter++)
					{
						//*****************************************************************
						//Taking values of parameter and its value from the Test Data sheet
						//*****************************************************************
						key = TestDataProp1.getCell(0,iCounter).getContents();
						value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents();
						//testRunner.testCase.getTestStepByName(RequestName).setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+2,iCountTestCase).getContents());
						testRunner.testCase.getTestStepByName(RequestName).setPropertyValue( key, value);
	
						if(value.contains(" "))
						{
							value = '"'+value+'"';
						}
						//**********************************************
						//Generating the curl request from key and value
						//**********************************************
						if(key=="email")
						{
							requestData = requestData+"--data-urlencode "+key+"="+value+" \\\n";
						}
						else{
						requestData = requestData+"-d "+key+"="+value+" \\\n";
						}
					
					}
					
					
				//******************************
				//Start condition for References
				//******************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				///////log.info "				>>>> This scenario step has References";
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has References";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];
				
				
				
				//Checking if child references are made in the References
				String[] getReferenceSplittedByDot = RefText.split("\\.");
				int NoOfDotsInReferences = getReferenceSplittedByDot.size();

				if(NoOfDotsInReferences>2)
				{
				log.info "			>>>>>>>>. came to if block NoOfDotsInReferences>2 ";
				int RefTextSize = RefText.size();
				int indexOfEqual =  RefText.lastIndexOf('=');
				int indexOfFirstDot =  RefText.indexOf('.');
				int indexOfFirstLastDot =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				String paramName = RefText.substring(0,indexOfEqual);
				log.info "				>>> paramName="+paramName;
				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(indexOfEqual+1,indexOfFirstDot);
				log.info "				>>> stepToRefer="+stepToRefer;
				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch1 =  RefText.substring(indexOfFirstDot+1,indexOfFirstLastDot);
				log.info "				>>> paramValueToFetch1="+paramValueToFetch1;

				String paramValueToFetch2 =  RefText.substring(indexOfFirstLastDot+1,RefTextSize);
				log.info "				>>> paramValueToFetch2="+paramValueToFetch2;


				mapToRefer = "map"+stepToRefer;
				//log.info "				>>>>Value from Global Map 1 : "+(globalMap.get("map"+stepToRefer)).get(paramValueToFetch)
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get("map"+stepToRefer);
				String ReferringValue = (globalMap.get("map"+stepToRefer))get(paramValueToFetch1).get(paramValueToFetch2);
				//String ReferringValue = (globalMap.get("map"+stepToRefer)).get(paramValueToFetch);
				//ReferringValue =  mapToRefer.get(paramValueToFetch);
				}
				
				
				
				
				else{
				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				String paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;
				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;
				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				mapToRefer = "map"+stepToRefer;
				//log.info "				>>>>Value from Global Map 1 : "+(globalMap.get("map"+stepToRefer)).get(paramValueToFetch)
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get("map"+stepToRefer);
				String ReferringValue = (globalMap.get("map"+stepToRefer)).get(paramValueToFetch);
				//ReferringValue =  mapToRefer.get(paramValueToFetch);
				}//end of Else
				
				log.info "				>>>> ReferringValue:"+ReferringValue;
				//log.info"					>>>> mapNameValue:"+mapToRefer.get(paramValueToFetch);
				//*****************************************
				//setting the referred value in the request
				//*****************************************
				testRunner.testCase.getTestStepByName(RequestName).setPropertyValue(paramName, ReferringValue);
				}
			}
			}//End condition for References

			
			//Start condition to check for overwriting values
			/**
			 * Commenting this out as is not required.[overwrite values]
			 * This takes value from the 4th column of the scenario sheet
			 * The values are given like - reference_id=123,maximum_funding_amount=1001
			 * this will overwrite the value of reference_id to 123 and maximum_funding_amount to 1001 before running the request.
			 */
			 /*
			//change row number to variable
			if(!(SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			if(SenarioSheet1.getCell(3,iCounter1).getContents().contains("="))
			{
				log.info "				>>>> This scenario step has Overwrite values";

				//for loop for no of overwirtes and updating overwritten value in request
				getOverwriteArray = SenarioSheet1.getCell(3,iCounter1).getContents();
				log.info "				>>>> getOverwriteArray: "+getOverwriteArray;


				String[] getOverwriteValues = getOverwriteArray.split("\\,");
				int NoOfOverwrites = getOverwriteValues.size();

				for(iCountOverwrite=0;iCountOverwrite<NoOfOverwrites;iCountOverwrite++)
				{
					//*********************
				String OverwriteText = getOverwriteValues[iCountOverwrite].trim();
				log.info "				>>>> OverwriteText+"+iCountOverwrite+" = "+getOverwriteValues[iCountOverwrite];
				//reference_id=123

				String[] overwriteTextArray = OverwriteText.split("\\=");

				//Get the parameter name 
				String overwriteParamName = overwriteTextArray[0];
				log.info "				>>> overwriteParamName="+overwriteParamName;
				
				String overwriteValue = overwriteTextArray[1];
				log.info "				>>> overwriteValue="+overwriteValue;
				testRunner.testCase.getTestStepByName(RequestName).setPropertyValue(overwriteParamName, overwriteValue);
				}	
			}
			}	*/
			//*******************************************************
			//Run the test request***********************************
			//Running the API Request with the Test Parameters-Values
			//*******************************************************
			log.info "				>>>> Executing Request.";
			testRunner.runTestStepByName(RequestName);
			//******************************************************************
			//creating the curl request with endpoint and logging to result file
			//******************************************************************
			String requestURL = context.httpMethod.getURI();
			//log.info "				>>>> requestURL : "+requestURL;
			requestData = "curl -k -v "+requestURL+" \\\n"+requestData;
			//log.info "				>>>> New requestData : "+requestData;
			//
			//Logging the curl in result file
			Label labelCurl = new Label(6, iCounter1, requestData); //column=0=A,row=0=1
			sheet.addCell(labelCurl);
			//*********************************
			//get the response from the request
			//*********************************
			def holder = testRunner.testCase.getTestStepByName(RequestName).getPropertyValue("response");
			def slurper = new JsonSlurper();
			def ParsedJSONResponse = slurper.parseText(holder);
			log.info "				>>>>>>>>>>>>>>>>>> : ParsedJSONResponse :"+ParsedJSONResponse;
			String ResponseInString = holder.toString();
			//log.info "				>>>> ResponseInString : "+ResponseInString;
			String ParsedJSONResponseInString = ParsedJSONResponse.toString();
			log.info "				>>>>>>>>>>>>>>>>>> : Parsed JSON in String :" +ParsedJSONResponseInString;
			//***********************************************
			//condition to check if null response is recieved
			//***********************************************
			if(holder==null || holder=='')
			{
				alert.showInfoMessage("For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" got a null Response");
				log.info "				>>>> : For scenario in sheet "+sheetName+" the Step No:"+(iCounter1-3)+" got a null Response";
				break stepCountLoop;
				//break;
			}


			//preparing input to be put in map
 			String mapInputText = "";
 			mapInputText = ParsedJSONResponseInString;
 			mapInputText = mapInputText.substring(1, mapInputText.length() - 1);
 			if(mapInputText.contains("{"))
			{
				//mapInputText = mapInputText.replaceFirst("{", "");
				mapInputText = mapInputText.replace("{","[");
			}
			if(mapInputText.contains("}"))
			{
				//mapInputText = mapInputText.substring(0, mapInputText.length() - 1);
				mapInputText = mapInputText.replace("}","]");
			}

			log.info "				>>>>>>>>>>>>>>> mapInputText = "+mapInputText;
			//ParsedJSONResponseInString


			//converting string to map

			// Seperator ',' is specified here, to split string on this basis
			for(String keyValue : mapInputText.split(" *, *")) {        
			 
			// Here the each part is futher splitted taking in account the equal sign ':'  which demarcates the key
			// and valuefor the hashmap        
			String[] pairs = keyValue.split(" *: *", 2);    
			 
			// Those key and values are then put into hashmap     
			mapName.put(pairs[0], pairs.length == 1 ? "" : pairs[1]);
			
			}

			
			
			/////mapName = mapInputText;
			
			/////mapName = ParsedJSONResponse;
			
			
			
			//mapName = ParsedJSONResponseInString;
			log.info "				>>>> mapContents : "+mapName;
			//globalMap.put("map"+mapNo,mapName);
			globalMap.put(1,mapName);
			//globalMap.put(mapName,mapName);
			log.info "		GlobalMap Now looks like - "+globalMap;
			referVal = (globalMap.get(1)).get('id');
			//referVal = (globalMap.get(1)).get('linked_external_bank_account').get('bank_account_holder');
			log.info	"				>>>			>>>. 			>> referVal = "+referVal;
			//********************************************
			//Validating Response and creating result file
			//********************************************
			//Label label = new Label(1, iCountTestCase, ResponseInString); //column=0=A,row=0=1
			Label responseValue = new Label(7, iCounter1, ResponseInString);
			sheet.addCell(responseValue);
		
				//******************************
				//validating response assertions
				//******************************
				for(iCounter=1;iCounter<ResponseSchemaRowCount;iCounter++)
				{//******************start loop for Response Schema validation
				//flush2
				ParameterDataType = "";
					
					if(TestDataResponseSchema.getCell(1,iCounter).getContents() == "Y")
					{
						//log.info "          >>   YES  " +iCounter
						String requiredParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"';
						//////log.info "				>>>>>>>>>>>>>>>>>> : requiredParameter :"+requiredParameter;
						if(!(ParsedJSONResponseInString.contains(requiredParameter)))
						{
							log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the mandatory parameter - "+TestDataResponseSchema.getCell(0,iCounter).getContents();
							String MandatoryParameterMissing = "The response does not contain the mandatory parameter - "+requiredParameter;
							//Label label2 = new Label(flagCount, iCountTestCase, MandatoryParameterMissing);
							Label label2 = new Label(flagCount, iCounter1, MandatoryParameterMissing);
							sheet.addCell(label2);
							flagCount = flagCount+1;
							//testRunner.fail
						}
					}
				
					
			//********************
			//validating datatypes
			//********************
			if(!(TestDataResponseSchema.getCell(2,iCounter).getContents().isEmpty()))
				{
					ParameterDataType="";
					//String ResponseParameter = TestDataResponseSchema.getCell(0,iCounter).getContents()
					ResponseParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"';
					ParameterDataType = TestDataResponseSchema.getCell(2,iCounter).getContents();
					////log.info  "				>>>>>>>>>>>>>>>>>> : ResponseParameter :"+ResponseParameter;
					////log.info  "				>>>>>>>>>>>>>>>>>> : ParameterDataType :"+ParameterDataType;
			
					int IndexOfParam =  ParsedJSONResponseInString.lastIndexOf(ResponseParameter);
					int LengthOfParam = ResponseParameter.size();
			
			  if(IndexOfParam > -1)
			  {
			 	IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf(",", IndexOfParam);
				if(IndexOfSubsequentComma<1)
				{
					IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf("}", IndexOfParam);
					if(IndexOfSubsequentComma<1)
					{
						log.info "				>>>>>>>>>>>>>>>>>> : Could not find the value for the parameter : "+ResponseParameter;
					}
				}
				if(ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))
			 	{
			 		EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"));
					////log.info "				>>>> Enum Data Collection :"+EnumDataCollection;
			 		/*
			 		if(EnumDataCollection.matches("[,a-zA-Z]*"))
			 		{
			 			enumType = "String"
			 			log.info "Enum Value is String"
			 		}
			 		else
			 		{
			 			enumType = "Number"
			 			log.info "Enum Value is NOT String"
			 		}
			 		*/
			 		if(!(EnumDataCollection.matches("[0-9,]*")))
			 		{
			 			enumType = "String";
			 			log.info "Enum Value is String";
			 		}
			 		else
			 		{
			 			enumType = "Number";
			 			log.info "Enum Value is NOT String";
			 		}
			 	}
			
			 //if((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || (ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))) //********** **
			 // if(!((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || enumType=="String")) //********** **
			 	//if(!((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String"))) //********** **
			
			//Thread.sleep(500) 
			if(((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String"))) //********** **
			
			 {
			 	////log.info  "				>>>>>>>>>>>>>>>>>> : In STRING/DATE/ENUMstring BLOCK";
			 	///log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType;
			 	ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
				//ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
				log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText;
			 if(ResposeValueText.contains("}"))
			{
				ResposeValueText = ResposeValueText.replace("}","");
			}
			 if(ResposeValueText.contains("]"))
			{
				ResposeValueText = ResposeValueText.replace("]","");
			}
			 }
			 
			 else
			 {
			 	////log.info  "				>>>>>>>>>>>>>>>>>> : In NON -- STRING/DATE/ENUMstring BLOCK";
			 	////log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType;
			 	
			 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
			 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
				log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText;
			
			 if(ResposeValueText.contains("}"))
			{
				ResposeValueText = ResposeValueText.replace("}","");
			}
			 if(ResposeValueText.contains("]"))
			{
				ResposeValueText = ResposeValueText.replace("]","");
			}
			 }
			 //ResposeValueText = ParsedJSONResponseInString.substring(ParsedJSONResponseInString.indexOf(ResponseParameter)+LengthOfParam, (ParsedJSONResponseInString.indexOf(","))+(IndexOfParam));
			 //ResposeValueText = ParsedJSONResponseInString.substring((IndexOfParam+LengthOfParam+2),(IndexOfParam+LengthOfParam+2)+(ParsedJSONResponseInString.indexOf(",")))
			 //ResposeValueText = ParsedJSONResponseInString.substring((32),ParsedJSONResponseInString.indexOf(","))
			 //s.indexOf(")")
			 //log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :"+ResposeValueText
			// assert ResposeValueText.isNumber()
			
			//try{
			
			log.info "				>>>> The ResponseValueText is :"+ResposeValueText;
				
			if(ParameterDataType.toString().equalsIgnoreCase("String"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to STRING IF block"
				 String returnDataType = String.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : StringValue :"+returnDataType;
			}	
			if(ParameterDataType.toString().equalsIgnoreCase("Long"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to LONG IF block"
				//log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :" +ResposeValueText
				long returnDataType = Long.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : LongValue :"+returnDataType;
			}
			if(ParameterDataType.toString().equalsIgnoreCase("Int"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Int IF block"
				 int returnDataType = Integer.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : IntValue :"+returnDataType;
			}
			if(ParameterDataType.toString().equalsIgnoreCase("Float"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Float IF block"
				//log.info "				>>>>>>>>>>>>>>>>>> : FloatValue text "+ResposeValueText
				 float returnDataType = Float.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : FloatValue :"+returnDataType;
			}
			if(ParameterDataType.toString().equalsIgnoreCase("Boolean"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Boolean IF block"
				 boolean returnDataType = Boolean.valueOf(ResposeValueText);
				 log.info "				>>>>>>>>>>>>>>>>>> : BooleanValue :"+returnDataType;
				
			}
			if(ParameterDataType.toString().equalsIgnoreCase("Date"))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Date IF block"
				 
				 SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
				 Date date = null;
				 date = format.parse(ResposeValueText);
				 //date returnDataType = date.valueOf(ResposeValueText)
				 log.info "				>>>>>>>>>>>>>>>>>> : DateValue  :"+date;
			}
			if(ParameterDataType.toString().toLowerCase().contains(("Enum").toLowerCase()))
			{
				//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
				EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"));
				log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection;
			
				if(!(EnumDataCollection.toString().toLowerCase().contains((ResposeValueText).toLowerCase())))
				{
					log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText";
				String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection;
				//Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
				Label label4 = new Label(flagCount, iCounter1, dataTypeIncorrect);
				sheet.addCell(label4);
				flagCount = flagCount+1;
				}
				/*
				String[] EnumData = EnumDataCollection.split(",")
				int sizeOfEnumData = EnumData.size()
				log.info "			>>>>>>>>>>>>>> sizeOfEnumData :"+sizeOfEnumData
				
				
				for(iCountOfEnumData=0;iCountOfEnumData<sizeOfEnumData;iCountOfEnumData++)
				{
				log.info "			>>>>>>> EnumData :"+EnumData[iCountOfEnumData]
				
				}
				 //date returnDataType = date.valueOf(ResposeValueText)
				 //log.info "        >>>>>>>>>.     EnumValue  "+returnDataType
				*/
			}
			
			
			
			
			/*
			}
			  catch(all)
			{
				log.info "             >>>>>>>>>> Some Exception Occured"
				String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
				Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
				sheet.addCell(label3);
				flagCount = flagCount+1
				
			//workbook.write()
			//workbook.close()
			
			}
			*/
			 //long.info "  >>>>>>>>>>>>>>>   "+bool
			 //ValueDataType = ResposeValueText.getClass()
			 //log.info " >>>>>>>>>>>> ValueDataType ="+ValueDataType
			
			  }
			
				}
			//******NOV-8*****// 
			
			//*****************************************************************8888888
			//*****************************************************************8888888
			//openEscrowopenEscrowParameterDataType = "";
			}//******************END loop for Response Schema validation
			
			
			
			///////////////////////////
			////??????????????/
			
			
			
			log.info "				>>>> ResponseColCount : "+ResponseColCount;
			for(iCountofResponse=1;iCountofResponse<ResponseColCount;iCountofResponse++)
			{
				//if(IsEmpty(TestDataResponse.getCell(iCounter,1).getContents()))
			
				if(!(TestDataResponse.getCell(iCountofResponse,iCountTestCase).getContents().isEmpty()))
				{
					//log.info " >>>>>>>>>>>>   not NULL"
					String ParamValueField = '"'+TestDataResponse.getCell(iCountofResponse,0).getContents()+'":"'+TestDataResponse.getCell(iCountofResponse,iCountTestCase).getContents()+'"';
					String ParamValueFieldForIntType = '"'+TestDataResponse.getCell(iCountofResponse,0).getContents()+'":'+TestDataResponse.getCell(iCountofResponse,iCountTestCase).getContents();
					log.info " >>>>>>>>>>>  ParamValueField is : "+ParamValueField ;
			//1
					
					if(!(ParsedJSONResponseInString.contains(ParamValueField))  && !(ParsedJSONResponseInString.contains(ParamValueFieldForIntType)) )
					{
						log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the value - "+ParamValueField;
						
						
						//log.info "           >>>>>>>> flag Count  "+flagCount
						//label1 = "label"+flagCount
						//Label label1 = new Label(0, 1, "TC_001"); //column=0=A,row=0=1
						//sheet.addCell(label1);
						
						//Label label+""+flagCount = new Label
						//Label label3 = new Label(flagCount, iCountTestCase, "The response does not contain the value - "+ParamValueField+"");
						Label label3 = new Label(flagCount, iCounter1, "The response does not contain the value - "+ParamValueField+"");
						sheet.addCell(label3);
						flagCount = flagCount+1;
					}
				}
			}
			
			
			
			
			
			////////////////////
			
			log.info "				>>>> flagCount is : "+flagCount;
			
			if(flagCount==8)
			{
				
				/*
				//Creating Writable font to be used in the response sheet
				WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
				//creating plain format to write data in excel sheet
			     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
				normalFormat.setBackground(jxl.format.Colour.GREEN);
				*/
				//log.info  "				>>>>>>>>>>>>>>>>>> : if loop - flagCount "+flagCount
				//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1,RequestName ,normalFormat); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label0002 = new Label(4, iCounter1,TestCaseID ,normalFormat); //column=0=A,row=0=1
				sheet.addCell(label0002);
				log.info "				>>>> flagCount If block because flagCount is : "+flagCount;
				// sheet.addCell(new jxl.write.Label(0,0,"User Name",normalFormat));
			}
			else{
				/*
				//Creating Writable font to be used in the response sheet
				WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
				//creating plain format to write data in excel sheet
			     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
				
				normalFormat2.setBackground(jxl.format.Colour.RED);
				*/
				//log.info  "				>>>>>>>>>>>>>>>>>> : else loop - flagCount "+flagCount
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1, RequestName,normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label0002 = new Label(4, iCounter1, TestCaseID,normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label0002);
				log.info "				>>>> flagCount else block because flagCount is : "+flagCount;
			}	
			//?????????????
						
			
						/*
						}////************END loop for No of Test Cases
			
						//workbook.write();
						//workbook.close(); 
						}///Else end
					
			workbook.write();
			workbook.close(); 	
				}//END loop for number of steps in the scenario
			
			
			}//END loop for number of scenario sheets
				
			
			*/
			
			
			
			
			//***********************************Validating Response
			
			
			
			
			
			
			
			/*
			log.info "				>>>> Writing to excel.";
			workbook.write();
			workbook.close();			
			*/
						}//END loop for No of Test Cases
			
							
						 }//ELSE END
			log.info "				END loop for number of steps in the scenario";
			}//END loop for number of steps in the scenario
			
			
			
			
			//log.info	"				>>>> EXIT HERE";
			//Emptying all Global hashmap
			globalMap = [:];
			//return;
			
			
			
				
			}//END loop for number of scenario sheets
			
			
			log.info "				>>>> Writing to excel.";
			workbook.write();
			workbook.close();
			
			}//END of try

			
			catch(FileNotFoundException f) 
			{
			   workbook.write();
			   workbook.close();
			   f.printStackTrace();
			   log.info "				>>>>>>>>>>>>>>>>>> : FILE NOT FOUND";
			   //alert.showInfoMessage("Hello World !","soapUI Warning !")
			   alert.showInfoMessage("Please Check the File Name and Location is Correct","FILE NOT FOUND");
			  
			}
			/*
			
			catch (NumberFormatException e)
			{
				log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : NumberFormatException";
				String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType;
				Label label3 = new Label(flagCount, iCounter1, dataTypeIncorrect);
				sheet.addCell(label3);
				flagCount = flagCount+1;
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1, RequestName, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label002 = new Label(4, iCounter1, TestCaseID, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label002);
				workbook.write();
				workbook.close();
			}
			catch(ParseException parseEx)
			{
				log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : ParseException";
				String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType;
				Label label3 = new Label(flagCount, iCounter1, dataTypeIncorrect);
				sheet.addCell(label3);
				flagCount = flagCount+1;
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1, RequestName, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label002 = new Label(4, iCounter1, TestCaseID, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label002);
				workbook.write();
				workbook.close();
			}
			catch(all)
			{
				
				//String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
				String Exception1 = "An Exception Occurred : "+all+"";
				log.info "				>>>>>>>>>>>>>>>>>> : Exception1 : "+Exception1;
				Label label5 = new Label(flagCount, iCounter1, Exception1);
				sheet.addCell(label5);
				flagCount = flagCount+1;
				//Label label02 = new Label(0, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
				Label label02 = new Label(3, iCounter1, RequestName, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label02);
				Label label002 = new Label(4, iCounter1, TestCaseID, normalFormat2); //column=0=A,row=0=1
				sheet.addCell(label002);
				
				workbook.write();
				workbook.close();
			
			}
			
			*/
			log.info "				>>>>>>>>>>>>>>>>>> : END of AutomationScenario Script";
			
/***********************************
 ***********************************
 * End of Automation Scenario Script
 ***********************************
 ***********************************
***********************************/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="completeCancelEscrow" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/escrow/completeCancelEscrow" methodName="Req1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="completeCancelEscrow" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:originalUri>https://qa-api.bancboxcrowd.com/crowd/v0/escrow/completeCancelEscrow</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="reason" value="Fail"/>
  <con:entry key="Id" value="228447352917"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="completeEscrow" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/escrow/completeEscrow" methodName="Req1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="completeEscrow" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Id" value="84599870709" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="confirmDisburseEscrow" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/escrow/confirmDisburseEscrow" methodName="Req1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="confirmDisburseEscrow" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="preSharedKey" value="baje5ja6quon"/>
  <con:entry key="confirm_cancel" value="CONFIRM"/>
  <con:entry key="escrow_id" value="404465129738"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="verifyIdentityManually" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/escrow/verifyIdentityManually" methodName="2.6" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="verifyIdentityManually" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://regression-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="newCipStatus" value="VERIFIED"/>
  <con:entry key="Id" value="666187559611"/>
  <con:entry key="supress_email" value="true"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="completeModifyEscrow" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/escrow/completeModifyEscrow" methodName="??" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="completeModifyEscrow" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="escrow_id" value="463231083774"/>
  <con:entry key="supress_email" value="true"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="RunJob-REGOutbound" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunJobsURL

try{
RunJobsURL.REGOutbound();
log.info "			REG Outbound Job Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-REGPushNotification" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunJobsURL

try{
RunJobsURL.REGPushNotification();
log.info "			QA PushNotificatoin Job Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-REGRealizeDraft" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunJobsURL

try{
RunJobsURL.REGRealizeDraft();
log.info "			REG Realize Draft Job Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RightSignProcessForIssuer-AL-QA" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunRightSignProcess
try{
String s_Status = RunRightSignProcess.rightSignTestForIssuerAngelListQA();
log.info "			Completed : Status is for rightSignTestForIssuer: "+s_Status;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RightSignProcessForIssuer-AL-BETA" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunRightSignProcess
try{
String s_Status = RunRightSignProcess.rightSignTestForIssuerAngelListBETA();
log.info "			Completed : Status is for rightSignTestForIssuer: "+s_Status;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RightSignProcessForCfp-AL-QA" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunRightSignProcess
try{
String s_Status = RunRightSignProcess.rightSignTestForCfpAngelListQA();
log.info "			Completed : Status rightSignTestForCfp is : "+s_Status;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RightSignProcessForCfp-AL-BETA" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunRightSignProcess
try{
String s_Status = RunRightSignProcess.rightSignTestForCfpAngelListBETA();
log.info "			Completed : Status rightSignTestForCfp is : "+s_Status;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RightSignProcessForIssuer-LS-QA" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunRightSignProcess
try{
String s_Status = RunRightSignProcess.rightSignTestForIssuerLocalStakeQA();
log.info "			Completed : Status is for rightSignTestForIssuer: "+s_Status;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RightSignProcessForIssuer-LS-BETA" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunRightSignProcess
try{
String s_Status = RunRightSignProcess.rightSignTestForIssuerLocalStakeBETA();
log.info "			Completed : Status is for rightSignTestForIssuer: "+s_Status;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RightSignProcessForCfp-LS-BETA" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunRightSignProcess
try{
String s_Status = RunRightSignProcess.rightSignTestForCfpLocalStakeBETA();
log.info "			Completed : Status rightSignTestForCfp is : "+s_Status;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RightSignProcessForCfp-LS-QA" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunRightSignProcess
try{
String s_Status = RunRightSignProcess.rightSignTestForCfpLocalStakeQA();
log.info "			Completed : Status rightSignTestForCfp is : "+s_Status;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-STGOutbound" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunJobsURL

try{
RunJobsURL.STGOutbound();
log.info "			STG Outbound Job Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-STGRealizeDraft" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunJobsURL

try{
RunJobsURL.STGRealizeDraft();
log.info "			STG Realize Draft Job Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-STGPushNotification" disabled="true"><con:settings/><con:config><script>import rightSignWithSelenium.RunJobsURL

try{
RunJobsURL.STGPushNotification();
log.info "			STG PushNotificatoin Job Completed ";
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="CalleeAndCallerTest" disabled="true"><con:settings/><con:config><script>import CallTest.Callee

try{

	Callee callee = new Callee();
	String abc = callee.printName(" BBX Invest Test");
	log.info "			>>>  : "+abc
	//String catchNames = Callee.printName(" Catching Name");
	//log.info "			>>>>>  RETURN IS : "+catchNames;
}
catch(all)
{
	log.info (all);
}</script></con:config></con:testStep><con:testStep type="restrequest" name="getProceedsSchedules" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/getProceedsSchedules" methodName="2.2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getProceedsSchedules" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="schedule_id" value=""/>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="proceeds_batch_id" value=""/>
  <con:entry key="issuer_id" value=""/>
  <con:entry key="schedule_start" value=""/>
  <con:entry key="api_key" value=""/>
  <con:entry key="investor_id" value="616963584896"/>
  <con:entry key="escrow_id" value="668586690174"/>
  <con:entry key="secret" value=""/>
  <con:entry key="schedule_status" value=""/>
  <con:entry key="supress_email" value="true"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getActivity" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/getActivity" methodName="??" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getActivity" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
  <con:entry key="secret" value="DD7JOLd4Dw"/>
  <con:entry key="entity_type" value="INVESTOR"/>
  <con:entry key="entity_id" value="162670841647"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLedger" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/cfp/getLedger" methodName="??" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLedger" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://beta-api.bancboxcrowd.com</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="api_key" value="2fffa8d3-6b10-4366-9c63-2c3bb5b38a91"/>
  <con:entry key="secret" value="DD7JOLd4Dw"/>
  <con:entry key="entity_type" value="INVESTOR"/>
  <con:entry key="entity_id" value="162670841647"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createCfp" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/escrow/createCfp" methodName="??" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createCfp" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:originalUri>https://qa-api.bancboxcrowd.com/crowd/v0/escrow/createCfp</con:originalUri><con:credentials><con:password>Abcd1234</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="created_by" value="Raghav"/>
  <con:entry key="echeck_method" value="ACH"/>
  <con:entry key="phone" value="1234567890"/>
  <con:entry key="a_c" value="Chd"/>
  <con:entry key="Password" value="INVESTOR"/>
  <con:entry key="refId" value="notif_1"/>
  <con:entry key="WebSiteUrl" value="www.noticomp.com"/>
  <con:entry key="UserName" value="RaghavApr23QA1"/>
  <con:entry key="lName" value="PalPerfCFPMar"/>
  <con:entry key="CompanyName" value="NotificationComp"/>
  <con:entry key="fName" value="Raghav"/>
  <con:entry key="BusDescription" value="medical"/>
  <con:entry key="a_t" value="Tpba"/>
  <con:entry key="preSharedKey" value="123qwe"/>
  <con:entry key="a_s" value="NY"/>
  <con:entry key="WebhookUrl" value="http://www.google.com"/>
  <con:entry key="email" value="raghav@bancbox.com"/>
  <con:entry key="a_1" value="Chd"/>
  <con:entry key="name" value="RaghavPerfCF27PMar27-2"/>
  <con:entry key="RedirectUrl" value="www.google.com"/>
  <con:entry key="a_z" value="12345"/>
</con:parameters><con:parameterOrder><con:entry>preSharedKey</con:entry><con:entry>name</con:entry><con:entry>UserName</con:entry><con:entry>Password</con:entry><con:entry>RedirectUrl</con:entry><con:entry>WebhookUrl</con:entry><con:entry>CompanyName</con:entry><con:entry>WebSiteUrl</con:entry><con:entry>BusDescription</con:entry><con:entry>fName</con:entry><con:entry>lName</con:entry><con:entry>email</con:entry><con:entry>phone</con:entry><con:entry>a_1</con:entry><con:entry>a_t</con:entry><con:entry>a_c</con:entry><con:entry>a_s</con:entry><con:entry>a_z</con:entry><con:entry>created_by</con:entry><con:entry>refId</con:entry><con:entry>echeck_method</con:entry><con:entry>supress_email</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getCfpDetails" disabled="true"><con:settings/><con:config service="BBCFP" resourcePath="/crowd/v0/escrow/getCfpDetails" methodName="??" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCfpDetails" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://qa-api.bancboxcrowd.com:9191</con:endpoint><con:request/><con:originalUri>https://qa-api.bancboxcrowd.com/crowd/v0/escrow/getCfpDetails</con:originalUri><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="cfpId" value="470340816506"/>
  <con:entry key="preSharedKey" value="123qwe"/>
</con:parameters><con:parameterOrder><con:entry>preSharedKey</con:entry><con:entry>cfpId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="Properties1" disabled="true"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Name</con:name><con:value>Raghav</con:value></con:property><con:property><con:name>Place</con:name><con:value>Zirakpur</con:value></con:property><con:property><con:name>City</con:name><con:value>Chandigarh</con:value></con:property><con:property><con:name>city1</con:name><con:value>kheee</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="WriteToPropertyStep" disabled="true"><con:settings/><con:config><script>a = testRunner.testCase.getTestStepByName("Properties1");
a.setPropertyValue("Name", "Raghav");
a.setPropertyValue("Place", "Zirakpur");
a.setPropertyValue("city1", "kheee");
a.getPropertyValue("City1");
</script></con:config></con:testStep><con:setupScript/><con:properties><con:property><con:name>p_Endpoint</con:name><con:value>https://qa-api.bancboxcrowd.com:9191</con:value></con:property><con:property><con:name>p_preSharedKey</con:name><con:value>123qwe</con:value></con:property><con:property><con:name>p_job_env</con:name><con:value>QA</con:value></con:property><con:property><con:name>p_issuerRightSignEmail</con:name><con:value>raghav9901@gmail.com|Abcd1234+</con:value></con:property><con:property><con:name>p_cfpRightSignEmail</con:name><con:value>raghav9901@gmail.com|Abcd1234+</con:value></con:property><con:property><con:name>p_CfpUserName</con:name><con:value>RaghavApr23QA1</con:value></con:property><con:property><con:name>p_cfpId</con:name><con:value>470340816506</con:value></con:property><con:property><con:name>p_api_key</con:name><con:value>f5e1b316-faed-48b4-a9bf-a6e4414cee1d</con:value></con:property><con:property><con:name>p_secret</con:name><con:value>AhlBmb9IAf</con:value></con:property><con:property><con:name>p_openEscrowIssuerMail</con:name><con:value>raghav9901@gmail.com</con:value></con:property><con:property><con:name>p_openEscrowCfpMail</con:name><con:value>raghav9901@gmail.com</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties/><con:setupScript>log.info "             >>>>>>>>. SetUp Script" </con:setupScript><con:reportParameters/></con:testSuite><con:testSuite name="Library"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="module-name" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Example"><con:settings/><con:config><script>

class Example
{
   def log
   def context
   def testRunner
   // Class constructor with same case as Class name
WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
  WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);
   
   def Example(logIn,contextIn,testRunnerIn)
   {
      this.log = logIn
      this.context = contextIn
      this.testRunner = testRunnerIn
   }


 def execute(message)
   {
          // do some stuff to prove I've run with right context, etc.
          log.info testRunner
          log.info context
          log.info "return "+message
          return message
   }
   
}

 context.setProperty( "example", new Example( log, context, testRunner) )
log.info "Library Context:"+context</script></con:config></con:testStep><con:testStep type="groovy" name="classPrint"><con:settings/><con:config><script>class classPrint
{
   def log
   def context
   def testRunner
   String myName = "Raghav";
   
   // Class constructor with same case as Class name
   def classPrint(logIn,contextIn,testRunnerIn)
   {
      this.log = logIn
      this.context = contextIn
      this.testRunner = testRunnerIn
   }


 def printInfo(message)
   {
          // do some stuff to prove I've run with right context, etc.
          log.info "				>>>> Look i am from method printInfo OK!"
          //log.info context
          log.info "return "+message
          return message
   }

}

context.setProperty( "classprint", new classPrint( log, context, testRunner)) 
//context.setProperty( "example", new Example( log, context, testRunner))
log.info "Library Context:"+context
</script></con:config></con:testStep><con:testStep type="groovy" name="CallingMethods"><con:settings/><con:config><script>// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["Library"]

// find the module within the library 
module = library.testCases["module-name"].testSteps["Example"]

// initialise the library; which places an instance of Example in the context
module.run(testRunner, context)

// get the instance of example from the context.
def example = context.example

// run the method, with parameter
log.info "example.execute() = " + example.execute("My Name is Raghav")

//***********************************************************//

// find the module within the library 
module = library.testCases["module-name"].testSteps["classPrint"]

// initialise the library; which places an instance of Example in the context
module.run(testRunner, context)

// get the instance of example from the context.
def classprint = context.classprint

// run the method, with parameter
log.info "				>>>> Calling method here = " + classprint.printInfo("THis is age")

log.info "				>>>> Calling variable = "+ classprint.myName</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>ScenarioFileLocation</con:name><con:value>C:\Users\RaghavPal\Documents\Test_Data\QATestData\TeamTestData\ScenarioTD\Common\AngelListFlows1AllEnv.xls</con:value></con:property><con:property><con:name>SetNo</con:name><con:value>101</con:value></con:property><con:property><con:name>NegativeTesting</con:name><con:value>N</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>PropertyValue</con:value></con:property></con:properties><con:afterLoadScript/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="TestSuiteRunListener.beforeTestCase" name="TestSuiteRunListener.beforeTestCase"><con:script disabled="true">//Test Script

log.info "Run this before every Test Case"</con:script></con:eventHandlers><con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest" target=""><con:script disabled="true"/></con:eventHandlers><con:eventHandlers type="ProjectRunListener.beforeRun" name="ProjectRunListener.beforeRun" target=""><con:script disabled="true">log.info "Running in Project Level"
def ProjName = testRunner.testCase.testSuite.project.name
log.info ProjName</con:script></con:eventHandlers><con:eventHandlers type="TestSuiteRunListener.beforeTestCase" name="TestSuiteRunListener.beforeTestCase" target="TestSuite 1"><con:script disabled="true">log.info "Event Handler for Test Suite"</con:script></con:eventHandlers><con:eventHandlers type="SubmitListener.afterSubmit" name="SubmitListener.afterSubmit"><con:script disabled="false">log.info "Running Event Handler After Request..."</con:script></con:eventHandlers><con:eventHandlers type="SubmitListener.beforeSubmit" name="SubmitListener.beforeSubmit "><con:script disabled="false">log.info "Running Event Handler Before Reqeust..."
log.info " Proj Name is :- "+testRunner.testCase.testSuite.project.name
log.info "                 The Name of Proj is : " +testRunner.testCase.testSuite.project.name
log.info " 	            The step name is    : " +context.getCurrentStep().getLabel()</con:script></con:eventHandlers><con:eventHandlers type="TestSuiteRunListener.beforeTestCase" name="TestSuiteRunListener.beforeTestCase"><con:script>log.info " Proj Name is :- "+testRunner.testCase.testSuite.project.name
log.info "                 The Name of Proj is : " +testRunner.testCase.testSuite.project.name
log.info " 	            The step name is    : " +context.getCurrentStep().getLabel()</con:script></con:eventHandlers><con:sensitiveInformation/></con:soapui-project>