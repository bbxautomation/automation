<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="Core_ScenarioProj-July31" soapui-version="5.1.0" resourceRoot="${projectDir}" abortOnError="false" runType="SEQUENTIAL" id="fa947c7b-7dc8-4c7e-9352-c7e16c1f719c" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="createClientAPITestSuite"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value="C:\Program Files\SmartBear\soapUI-Pro-4.6.0\bin"/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="true"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value="APIName=createClient  TestDataFile=C:\\Users\\richa\\Desktop\\automationFinal\\DataFiles\\createClient\\createClient.xls"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="COREAPITestCase"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value="TestSuite Report"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="createClientAPITestSuite"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value="APIName=searchBancboxPayees
TestDataFile=E:\Core_QA\Regression\searchBancboxPayees.xls
global_username=AUTOMATION
global_password=abcd1234
SetNo=2"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="COREAPITestCase"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="BBXServiceSoapBinding" type="wsdl" bindingName="{schema.bancbox.com}BBXServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="https://regression-api.bancbox.com/v3/BBXPort?wsdl" id="98b95f9d-bbef-4bc7-8bce-840ac3464b5b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="https://regression-api.bancbox.com/v3/BBXPort?wsdl"><con:part><con:url>https://regression-api.bancbox.com/v3/BBXPort?wsdl</con:url><con:content><![CDATA[<wsdl:definitions jaxb:version="2.0" name="BBXService" targetNamespace="schema.bancbox.com" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="schema.bancbox.com" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xs:schema targetNamespace="schema.bancbox.com" version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:complexType name="collectFundsRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element minOccurs="0" name="sessionId" type="xs:string"/>
          <xs:element minOccurs="0" name="merchantId" type="xs:string"/>
          <xs:element name="method">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1">
                  <xs:element name="book" type="tns:book"/>
                  <xs:element name="ach" type="tns:ach"/>
                  <xs:element name="creditcard" type="tns:creditcard"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="source">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1">
                  <xs:element name="account" type="tns:id"/>
                  <xs:element name="linkedExternalAccountId" type="tns:id"/>
                  <xs:element name="newExternalAccount" type="tns:collectExternalAccount"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <!--<xs:element name="destinationAccount" type="tns:id" />-->
          <xs:element name="destinationAccount">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1">
                  <xs:element name="account" type="tns:id"/>
                  <xs:element name="subscriberNamedAccount" type="tns:subscriberNamedAccount"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element maxOccurs="unbounded" name="items" type="tns:collectFundsItem"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="book">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="ach">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="creditcard">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="paypal">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="id">
        <xs:sequence>
          <xs:element minOccurs="0" name="bancBoxId" type="xs:long"/>
          <xs:element minOccurs="0" name="subscriberReferenceId" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="subscriberNamedAccount">
        <xs:restriction base="xs:string">
          <xs:enumeration value="SUB_RESERVE"/>
        </xs:restriction>
      </xs:simpleType>
      <!--<xs:complexType name="subscriberNamedAccount"> <xs:sequence> <xs:element 
				name="accountName" type="xs:string" /> </xs:sequence> </xs:complexType>-->
      <xs:complexType name="collectExternalAccount">
        <xs:sequence>
          <xs:element name="account">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1">
                  <xs:element name="bankAccount" type="tns:bankAccount"/>
                  <xs:element name="creditCardAccount" type="tns:creditCardData"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="bankAccountUpdatable">
        <xs:sequence>
          <xs:element name="routingNumber" type="xs:string"/>
          <xs:element name="accountNumber" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="bankAccount">
        <xs:sequence>
          <xs:element name="routingNumber" type="xs:string"/>
          <xs:element name="accountNumber" type="xs:string"/>
          <xs:element name="holderName" type="xs:string"/>
          <xs:element name="bankAccountType" type="tns:bankAccountType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getSchedulesBankAccount">
        <xs:sequence>
          <xs:element minOccurs="0" name="routingNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="accountNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="holderName" type="xs:string"/>
          <xs:element minOccurs="0" name="bankAccountType" type="tns:bankAccountType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="creditCardData">
        <xs:sequence>
          <xs:choice minOccurs="1">
            <xs:element name="cardPresent" type="tns:cardPresent"/>
            <xs:element name="cardNotPresent" type="tns:cardNotPresent"/>
          </xs:choice>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="cardPresent">
        <xs:sequence>
          <xs:element name="trackdata" type="xs:string"/>
          <xs:element minOccurs="0" name="pos" type="tns:posDetails"/>
          <xs:element minOccurs="0" name="orderSource" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="posDetails">
        <xs:sequence>
          <xs:element name="capability" type="tns:capabilityDetails"/>
          <xs:element name="entryMode" type="tns:entryModeDetails"/>
          <xs:element name="cardholderId" type="tns:cardholderIdDetails"/>
          <xs:element minOccurs="0" name="terminalId" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="capabilityDetails">
        <xs:restriction base="xs:string">
          <xs:enumeration value="NOTUSED"/>
          <xs:enumeration value="MAGSTRIPE"/>
          <xs:enumeration value="KEYEDONLY"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="entryModeDetails">
        <xs:restriction base="xs:string">
          <xs:enumeration value="NOTUSED"/>
          <xs:enumeration value="KEYED"/>
          <xs:enumeration value="TRACK1"/>
          <xs:enumeration value="TRACK2"/>
          <xs:enumeration value="COMPLETEREAD"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="cardholderIdDetails">
        <xs:restriction base="xs:string">
          <xs:enumeration value="SIGNATURE"/>
          <xs:enumeration value="PIN"/>
          <xs:enumeration value="NOPIN"/>
          <xs:enumeration value="DIRECTMARKET"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="cardNotPresent">
        <xs:sequence>
          <xs:choice>
            <xs:element name="tokenizedId" type="xs:string"/>
            <xs:element name="creditCardDetails" type="tns:creditCardAccount"/>
          </xs:choice>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="creditCardAccount">
        <xs:sequence>
          <xs:element name="number" type="xs:string"/>
          <xs:element name="expiryDate" type="xs:string"/>
          <xs:element name="type" type="tns:creditCardType"/>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="cvv" type="xs:string"/>
          <xs:element name="address" type="tns:collectFundAddress"/>
          <xs:element minOccurs="0" name="orderSource" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="collectFundAddress">
        <xs:sequence>
          <xs:element name="line1" type="xs:string"/>
          <xs:element minOccurs="0" name="line2" type="xs:string"/>
          <xs:element name="city" type="xs:string"/>
          <xs:element name="state" type="xs:string"/>
          <xs:element name="zipcode" type="xs:string"/>
          <xs:element minOccurs="0" name="country" type="tns:countryCode"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="address">
        <xs:sequence>
          <xs:element name="line1" type="xs:string"/>
          <xs:element minOccurs="0" name="line2" type="xs:string"/>
          <xs:element name="city" type="xs:string"/>
          <xs:element name="state" type="xs:string"/>
          <xs:element name="zipcode" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="paypalAccount">
        <xs:sequence>
          <xs:element name="id" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="collectFundsItem">
        <xs:sequence>
          <xs:element minOccurs="0" name="referenceId" type="xs:string"/>
          <xs:element name="amount" type="xs:double"/>
          <xs:element minOccurs="0" name="memo" type="xs:string"/>
          <xs:element minOccurs="0" name="scheduled" type="tns:scheduled"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="scheduled">
        <xs:sequence>
          <xs:element name="scheduleDate" type="xs:date"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="response">
        <xs:sequence>
          <xs:element minOccurs="0" name="requestId" type="xs:long"/>
          <xs:element name="status" type="xs:int"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="warnings" nillable="true" type="tns:warning"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="errors" nillable="true" type="tns:error"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="warning">
        <xs:sequence>
          <xs:element minOccurs="0" name="code" type="xs:string"/>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="error">
        <xs:sequence>
          <xs:element minOccurs="0" name="code" type="xs:string"/>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="collectFundsResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="itemStatuses" nillable="true" type="tns:itemStatus"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="itemStatus">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="tns:id"/>
          <xs:element minOccurs="0" name="status" type="tns:fundsRequestStatus"/>
          <xs:element minOccurs="0" name="messageCode" type="xs:string"/>
          <xs:element minOccurs="0" name="messageDesc" type="xs:string"/>
          <xs:element minOccurs="0" name="code" type="xs:string"/>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
          <xs:element minOccurs="0" name="itemStatus" type="xs:int"/>
          <xs:element minOccurs="0" name="externalReferenceId" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="createClientRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element minOccurs="0" name="referenceId" type="xs:string"/>
          <xs:element minOccurs="0" name="firstName" type="xs:string"/>
          <xs:element minOccurs="0" name="lastName" type="xs:string"/>
          <xs:element minOccurs="0" name="middleInitial" type="xs:string"/>
          <xs:element minOccurs="0" name="ssn" type="xs:string"/>
          <xs:element minOccurs="0" name="dob" type="xs:date"/>
          <xs:element minOccurs="0" name="address" type="tns:createClientAddress"/>
          <xs:element minOccurs="0" name="homePhone" type="xs:string"/>
          <xs:element minOccurs="0" name="mobilePhone" type="xs:string"/>
          <xs:element minOccurs="0" name="workPhone" type="xs:string"/>
          <xs:element minOccurs="0" name="email" type="xs:string"/>
          <xs:element minOccurs="0" name="username" type="xs:string"/>
          <xs:element minOccurs="0" name="merchantId" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="createClientAddress">
        <xs:sequence>
          <xs:element minOccurs="0" name="line1" type="xs:string"/>
          <xs:element minOccurs="0" name="line2" type="xs:string"/>
          <xs:element minOccurs="0" name="city" type="xs:string"/>
          <xs:element minOccurs="0" name="state" type="xs:string"/>
          <xs:element minOccurs="0" name="zipcode" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="createClientResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="clientId" type="tns:id"/>
              <xs:element minOccurs="0" name="clientStatus" type="tns:clientStatus"/>
              <xs:element minOccurs="0" name="cipStatus" type="tns:cipStatus"/>
              <xs:element minOccurs="0" name="username" type="xs:string"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="statusTypes">
        <xs:sequence>
          <xs:element minOccurs="0" name="client" type="tns:clientStatus"/>
          <xs:element minOccurs="0" name="cip" type="tns:cipStatus"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="merchantDetailsUpdatable">
        <xs:sequence>
          <xs:element minOccurs="0" name="maxTransactionAmount" type="xs:long"/>
          <xs:element minOccurs="0" name="customerServiceNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="amexId" type="xs:string"/>
          <xs:element minOccurs="0" name="discoverId" type="xs:string"/>
          <xs:element minOccurs="0" name="softDescriptor" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="merchantDetails">
        <xs:sequence>
          <xs:element name="merchantCategoryCode" type="xs:string"/>
          <xs:element name="maxTransactionAmount" type="xs:long"/>
          <xs:element name="customerServiceNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="amexId" type="xs:string"/>
          <xs:element minOccurs="0" name="discoverId" type="xs:string"/>
          <xs:element name="softDescriptor" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="primaryContact">
        <xs:sequence>
          <xs:element name="firstName" type="xs:string"/>
          <xs:element name="lastName" type="xs:string"/>
          <xs:element name="phone" type="xs:string"/>
          <xs:element name="emailAddress" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="createMerchantRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="firstName" type="xs:string"/>
          <xs:element name="lastName" type="xs:string"/>
          <xs:element minOccurs="0" name="ssn" type="xs:string"/>
          <xs:element minOccurs="0" name="dob" type="xs:date"/>
          <xs:element minOccurs="0" name="email" type="xs:string"/>
          <xs:element name="address" type="tns:merchantAddress"/>
          <xs:element name="bankBusinessAccount" type="tns:bankAccount"/>
          <xs:element name="merchantDetails" type="tns:merchantDetails"/>
          <xs:element name="primaryContact" type="tns:primaryContact"/>
          <xs:element name="hasAcceptedCreditCards" type="xs:boolean"/>
          <xs:element name="visaAnnualSalesVolume" type="xs:int"/>
          <xs:element name="organizationType" type="tns:organizationType"/>
          <xs:element minOccurs="0" name="taxId" type="xs:string"/>
          <xs:element minOccurs="0" name="setAsDefaultMerchantId" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <!--updatemerchant-->
      <xs:complexType name="updateMerchantRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="merchantId" type="xs:long"/>
          <xs:element minOccurs="0" name="address" type="tns:merchantAddress"/>
          <xs:element minOccurs="0" name="primaryContact" type="tns:primaryContact"/>
          <xs:element minOccurs="0" name="bankBusinessAccount" type="tns:bankAccountUpdatable"/>
          <xs:element minOccurs="0" name="merchantDetails" type="tns:merchantDetailsUpdatable"/>
          <xs:element minOccurs="0" name="setAsDefaultMerchantId" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updateMerchantResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="merchantId" type="xs:long"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <!--getmerchant-->
      <xs:complexType name="getMerchantRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="merchantId" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getMerchantResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="merchant" type="tns:merchant"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="merchant">
        <xs:sequence>
          <xs:element minOccurs="0" name="merchantId" type="xs:long"/>
          <xs:element minOccurs="0" name="firstName" type="xs:string"/>
          <xs:element minOccurs="0" name="lastName" type="xs:string"/>
          <xs:element minOccurs="0" name="middleInitial" type="xs:string"/>
          <xs:element minOccurs="0" name="ssn" type="xs:string"/>
          <xs:element minOccurs="0" name="dob" type="xs:date"/>
          <xs:element minOccurs="0" name="address" type="tns:merchantAddress"/>
          <!--<xs:element minOccurs="0" name="homePhone" type="xs:string" /> 
						<xs:element minOccurs="0" name="mobilePhone" type="xs:string" /> <xs:element 
						minOccurs="0" name="workPhone" type="xs:string" />-->
          <xs:element minOccurs="0" name="email" type="xs:string"/>
          <!--<xs:element minOccurs="0" name="username" type="xs:string" />-->
          <xs:element minOccurs="0" name="merchantStatus" type="xs:string"/>
          <!--<xs:element minOccurs="0" name="cipStatus" type="tns:cipStatus" 
						/>-->
          <xs:element minOccurs="0" name="bankBusinessAccount" type="tns:bankAccount"/>
          <xs:element minOccurs="0" name="modifiedOn" type="xs:date"/>
          <xs:element minOccurs="0" name="modifiedBy" type="xs:string"/>
          <xs:element minOccurs="0" name="createdOn" type="xs:date"/>
          <xs:element minOccurs="0" name="createdBy" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <!--getClient new node linkedMerchant-->
      <xs:complexType name="linkedMerchantDetails">
        <xs:sequence>
          <xs:element minOccurs="0" name="merchantId" type="xs:long"/>
          <xs:element minOccurs="0" name="firstName" type="xs:string"/>
          <xs:element minOccurs="0" name="lastName" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <!--getSubscriber-->
      <xs:complexType name="getSubscriberAccountsRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getSubscriberAccountsResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="SubscriberAccounts" nillable="true" type="tns:SubscriberAccounts"/>
              <xs:element minOccurs="0" name="subscriberConfigurations" type="tns:subscriberConfigurations"/>
              <xs:element minOccurs="0" name="draftRealizationInterval" type="tns:draftRealizationInterval"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="SubscriberAccounts">
        <xs:sequence>
          <xs:element minOccurs="0" name="type" type="xs:string"/>
          <xs:element minOccurs="0" name="routingNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="accountNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="holderName" type="xs:string"/>
          <xs:element minOccurs="0" name="bankAccountType" type="xs:string"/>
          <xs:element minOccurs="0" name="pendingBalance" type="xs:double"/>
          <xs:element minOccurs="0" name="currentBalance" type="xs:double"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="subscriberConfigurations">
        <xs:sequence>
          <xs:element minOccurs="0" name="cipVerification" type="xs:string"/>
          <xs:element minOccurs="0" name="ofacVerification" type="xs:string"/>
          <xs:element minOccurs="0" name="subscriberDefinedAccountNumber" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="prefix" nillable="true" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="draftRealizationInterval">
        <xs:sequence>
          <xs:element minOccurs="0" name="draft" type="xs:string"/>
          <xs:element minOccurs="0" name="draftCC" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="merchantAddress">
        <xs:sequence>
          <xs:element name="address1" type="xs:string"/>
          <xs:element minOccurs="0" name="address2" type="xs:string"/>
          <xs:element name="city" type="xs:string"/>
          <xs:element name="state" type="xs:string"/>
          <xs:element name="zipcode" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="createMerchantResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="merchantId" type="xs:long"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="submitVerificationAnswersResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="cipStatus" type="tns:cipStatus"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="submitVerificationAnswersRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="clientId" type="tns:id"/>
          <xs:element name="idNumber" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="answers" nillable="true" type="tns:verifyAnswer"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="verifyAnswer">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="xs:string"/>
          <xs:element minOccurs="1" name="answer" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="deleteLinkedExternalAccountRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="linkedExternalAccountId" type="tns:id"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="deleteLinkedExternalAccountResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="searchClientRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element minOccurs="0" name="clientId" type="tns:id"/>
          <xs:element minOccurs="0" name="createdOnFromDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="createdOnToDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="modifiedOnFromDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="modifiedOnToDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="clientStatus" type="tns:clientStatus"/>
          <xs:element minOccurs="0" name="cipStatus" type="tns:cipStatus"/>
          <xs:element default="false" minOccurs="0" name="ascending" type="xs:boolean"/>
          <xs:element minOccurs="0" name="pageNo" type="xs:int"/>
          <xs:element minOccurs="0" name="resultsPerPage" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="searchClientResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="currentPage" type="xs:int"/>
              <xs:element minOccurs="0" name="totalPages" type="xs:int"/>
              <xs:element minOccurs="0" name="totalRecords" type="xs:int"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="clients" nillable="true" type="tns:client"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="client">
        <xs:sequence>
          <xs:element minOccurs="0" name="clientId" type="tns:id"/>
          <xs:element minOccurs="0" name="firstName" type="xs:string"/>
          <xs:element minOccurs="0" name="lastName" type="xs:string"/>
          <xs:element minOccurs="0" name="middleInitial" type="xs:string"/>
          <xs:element minOccurs="0" name="ssn" type="xs:string"/>
          <xs:element minOccurs="0" name="dob" type="xs:date"/>
          <xs:element minOccurs="0" name="address" type="tns:createClientAddress"/>
          <xs:element minOccurs="0" name="homePhone" type="xs:string"/>
          <xs:element minOccurs="0" name="mobilePhone" type="xs:string"/>
          <xs:element minOccurs="0" name="workPhone" type="xs:string"/>
          <xs:element minOccurs="0" name="email" type="xs:string"/>
          <xs:element minOccurs="0" name="username" type="xs:string"/>
          <xs:element minOccurs="0" name="clientStatus" type="tns:clientStatus"/>
          <xs:element minOccurs="0" name="cipStatus" type="tns:cipStatus"/>
          <xs:element minOccurs="0" name="modifiedOn" type="xs:date"/>
          <xs:element minOccurs="0" name="modifiedBy" type="xs:long"/>
          <xs:element minOccurs="0" name="createdOn" type="xs:date"/>
          <xs:element minOccurs="0" name="createdBy" type="xs:long"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="linkedMerchants" nillable="true" type="tns:linkedMerchantDetails"/>
        </xs:sequence>
      </xs:complexType>
      <!--BBAPI-1966 searchMerchant API-->
      <xs:complexType name="searchMerchantsRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element minOccurs="0" name="linkedClientId" type="tns:id"/>
          <xs:element minOccurs="0" name="merchantFirstName" type="xs:string"/>
          <xs:element minOccurs="0" name="merchantLastName" type="xs:string"/>
          <xs:element minOccurs="0" name="merchantTaxId" type="xs:string"/>
          <xs:element minOccurs="0" name="createdOnFromDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="createdOnToDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="modifiedOnFromDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="modifiedOnToDate" type="xs:dateTime"/>
          <xs:element default="false" minOccurs="0" name="ascending" type="xs:boolean"/>
          <xs:element minOccurs="0" name="pageNo" type="xs:int"/>
          <xs:element minOccurs="0" name="resultsPerPage" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
      <!--BBAPI-1966 searchMerchant API-->
      <xs:complexType name="searchMerchantsResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="currentPage" type="xs:int"/>
              <xs:element minOccurs="0" name="totalPages" type="xs:int"/>
              <xs:element minOccurs="0" name="totalRecords" type="xs:int"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="merchants" nillable="true" type="tns:merchant"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="deleteLinkedPayeeRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="linkedPayeeId" type="tns:id"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="deleteLinkedPayeeResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="closeAccountRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="accountId" type="tns:id"/>
          <xs:element minOccurs="0" name="withdrawalMethod" type="tns:withdrawalMethod"/>
          <xs:element minOccurs="0" name="checkMethodType" type="tns:checkMethodType"/>
          <xs:element minOccurs="0" name="withdrawalAccount">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1">
                  <xs:element name="linkedAccountId" type="xs:long"/>
                  <xs:element name="bankAccount" type="tns:bankAccount"/>
                  <xs:element name="checkAddress" type="tns:checkDestination"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="checkDestination">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="address" type="tns:address"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="closeAccountResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="deletedSchedules" nillable="true" type="tns:schedule"/>
              <xs:element minOccurs="0" name="balance" type="xs:double"/>
              <xs:element minOccurs="0" name="withdrawalAmount" type="xs:double"/>
              <xs:element minOccurs="0" name="expectedDate" type="xs:date"/>
              <xs:element minOccurs="0" name="withdrawalMethod" type="tns:withdrawalMethod"/>
              <xs:element minOccurs="0" name="checkMethodType" type="tns:checkMethodType"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="schedule">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="tns:id"/>
          <xs:element minOccurs="0" name="type" type="tns:activityType"/>
          <xs:element minOccurs="0" name="method" type="tns:transactionClass"/>
          <xs:element minOccurs="0" name="amount" type="xs:double"/>
          <xs:element minOccurs="0" name="scheduleDate" type="xs:date"/>
          <xs:element minOccurs="0" name="modifiedOn" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="createdOn" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="status" type="tns:fundsRequestStatus"/>
          <xs:element minOccurs="0" name="messageCode" type="xs:string"/>
          <xs:element minOccurs="0" name="messageDesc" type="xs:string"/>
          <xs:element minOccurs="0" name="externalReferenceId" type="xs:string"/>
          <xs:element minOccurs="0" name="merchantId" type="xs:string"/>
          <xs:element minOccurs="0" name="parentScheduleId" type="xs:long"/>
          <xs:element minOccurs="0" name="source">
            <xs:complexType>
              <xs:sequence>
                <xs:element minOccurs="0" name="account" type="tns:id"/>
                <xs:element minOccurs="0" name="accountNumber" type="xs:string"/>
                <xs:element minOccurs="0" name="sourceType" type="tns:scheduleSrcType"/>
                <xs:element minOccurs="0" name="linkedExternalAccountId" type="tns:id"/>
                <xs:element minOccurs="0" name="newExternalAccount" type="tns:scheduleResponseExternalAccount"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="destination">
            <xs:complexType>
              <xs:sequence>
                <xs:element minOccurs="0" name="account" type="tns:id"/>
                <xs:element minOccurs="0" name="accountNumber" type="xs:string"/>
                <xs:element minOccurs="0" name="destinationType" type="tns:scheduleSrcType"/>
                <xs:element minOccurs="0" name="linkedExternalAccountId" type="tns:id"/>
                <xs:element minOccurs="0" name="linkedPayeeId" type="tns:id"/>
                <xs:element minOccurs="0" name="bancBoxPayeeId" type="xs:long"/>
                <xs:element minOccurs="0" name="payeeAccountNumber" type="xs:string"/>
                <xs:element minOccurs="0" name="newExternalAccount" type="tns:scheduleResponseExternalAccount"/>
                <xs:element minOccurs="0" name="newPayee" type="tns:getScheduleNewPayee"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="isCancellationAllowed" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="scheduleSrcType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="BANCBOX_ACCOUNT"/>
          <xs:enumeration value="LINKED_EXT_ACCOUNT"/>
          <xs:enumeration value="BANCBOX_PAYEE"/>
          <xs:enumeration value="LINKED_PAYEE"/>
          <xs:enumeration value="EXT_BANK_ACCOUNT"/>
          <xs:enumeration value="EXT_CREDITCARD"/>
          <xs:enumeration value="EXT_PAYPAL"/>
          <xs:enumeration value="EXT_WIRE_ACCOUNT"/>
          <xs:enumeration value="NEW_PAYEE_PAYPAL"/>
          <xs:enumeration value="NEW_PAYEE_CHECK"/>
          <xs:enumeration value="NEW_PAYEE_ACH"/>
          <xs:enumeration value="NEW_PAYEE_WIRE"/>
        </xs:restriction>
      </xs:simpleType>
      <!--BBAPI-117 changes for send fund-->
      <xs:complexType name="getScheduleNewPayee">
        <xs:sequence>
          <xs:element name="payeeAccountNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="memo" type="xs:string"/>
          <xs:element name="payee">
            <xs:complexType>
              <xs:sequence>
                <xs:element minOccurs="0" name="ach" type="tns:bankAccount"/>
                <xs:element minOccurs="0" name="paypal" type="tns:paypalAccount"/>
                <xs:element minOccurs="0" name="check" type="tns:checkDestination"/>
                <xs:element minOccurs="0" name="wire" type="tns:getSchedulesWirePayee"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <!--BBAPI-117 changes end-->
      <xs:complexType name="scheduleResponseExternalAccount">
        <xs:sequence>
          <xs:element name="account">
            <xs:complexType>
              <xs:sequence>
                <xs:element minOccurs="0" name="bankAccount" type="tns:bankAccount"/>
                <xs:element minOccurs="0" name="paypalAccount" type="tns:paypalAccount"/>
                <xs:element minOccurs="0" name="creditCardAccount" type="tns:showCreditCardAccount"/>
                <xs:element minOccurs="0" name="wireAccount" type="tns:getSchedulesWireAccount"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="showCreditCardAccount">
        <xs:sequence>
          <xs:element name="number" type="xs:string"/>
          <xs:element name="type" type="tns:creditCardType"/>
          <xs:element minOccurs="0" name="name" type="xs:string"/>
          <xs:element minOccurs="0" name="address" type="tns:address"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updateLinkedPayeeRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="linkedPayeeId" type="tns:id"/>
          <xs:element minOccurs="0" name="payeeAccountNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="memo" type="xs:string"/>
          <xs:element name="payee">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1">
                  <xs:element name="ach" type="tns:bankAccount"/>
                  <xs:element name="paypal" type="tns:paypalAccount"/>
                  <xs:element name="check" type="tns:checkDestination"/>
                  <xs:element name="bancbox" type="tns:bancBox"/>
                  <xs:element name="wire" type="tns:wirePayee"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updateLinkedPayeeResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="linkedPayeeId" type="tns:id"/>
              <xs:element minOccurs="0" name="payeeAccountNumber" type="xs:string"/>
              <xs:element minOccurs="0" name="memo" type="xs:string"/>
              <xs:element minOccurs="0" name="payee">
                <xs:complexType>
                  <xs:sequence>
                    <xs:choice minOccurs="1">
                      <xs:element name="ach" type="tns:bankAccount"/>
                      <xs:element name="paypal" type="tns:paypalAccount"/>
                      <xs:element name="check" type="tns:checkDestination"/>
                      <xs:element name="bancbox" type="tns:bancBox"/>
                      <xs:element name="wire" type="tns:wirePayee"/>
                    </xs:choice>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="transferFundsRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="sourceAccount" type="tns:id"/>
          <xs:element name="destinationAccount" type="tns:id"/>
          <xs:element minOccurs="0" name="memo" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="1" name="items" type="tns:transferFundsItem"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="transferFundsItem">
        <xs:sequence>
          <xs:element minOccurs="0" name="referenceId" type="xs:string"/>
          <xs:element minOccurs="0" name="memo" type="xs:string"/>
          <xs:element name="amount" type="xs:double"/>
          <xs:element minOccurs="0" name="scheduled" type="tns:scheduled"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="transferFundsResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="itemStatuses" nillable="true" type="tns:itemStatus"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="linkExternalAccountRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="clientId" type="tns:id"/>
          <xs:element minOccurs="0" name="referenceId" type="xs:string"/>
          <xs:element name="account">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1">
                  <xs:element name="bankAccount" type="tns:bankAccount"/>
                  <xs:element name="cardAccount" type="tns:linkCardAccount"/>
                  <xs:element name="paypalAccount" type="tns:paypalAccount"/>
                  <xs:element name="wireAccount" type="tns:wireAccount"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="linkCardAccount">
        <xs:sequence>
          <xs:choice minOccurs="1">
            <xs:element name="creditCardAccount" type="tns:linkCreditCard"/>
            <xs:element name="debitCardAccount" type="tns:debitCardAccount"/>
            <xs:element name="giftCardAccount" type="tns:giftCardAccount"/>
          </xs:choice>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="linkCreditCard">
        <xs:sequence>
          <xs:choice minOccurs="1">
            <xs:element name="tokenizedId" type="xs:string"/>
            <xs:element name="creditCardDetails" type="tns:creditCardAccount"/>
          </xs:choice>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="cardAccount">
        <xs:sequence>
          <xs:choice minOccurs="1">
            <xs:element name="creditCardAccount" type="tns:creditCardAccount"/>
            <xs:element name="debitCardAccount" type="tns:debitCardAccount"/>
            <xs:element name="giftCardAccount" type="tns:giftCardAccount"/>
          </xs:choice>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="debitCardAccount">
        <xs:sequence>
          <xs:element name="number" type="xs:string"/>
          <xs:element name="type" type="tns:debitCardType"/>
          <xs:element name="pin" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="giftCardAccount">
        <xs:sequence>
          <xs:element name="number" type="xs:string"/>
          <xs:element name="pin" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="linkExternalAccountResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="id" type="tns:id"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="openAccountRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="clientId" type="tns:id"/>
          <xs:element minOccurs="0" name="referenceId" type="xs:string"/>
          <xs:element minOccurs="0" name="title" type="xs:string"/>
          <xs:element minOccurs="0" name="accountType" type="tns:accountType"/>
          <xs:element minOccurs="0" name="routable" type="tns:routable"/>
          <xs:element minOccurs="0" name="subscriberAccountNumber" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="openAccountResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="account" type="tns:account"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="account">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="tns:id"/>
          <xs:element minOccurs="0" name="accountType" type="tns:accountType"/>
          <xs:element minOccurs="0" name="routable" type="tns:routable"/>
          <xs:element minOccurs="0" name="routingNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="current_balance" type="xs:double"/>
          <xs:element minOccurs="0" name="pending_balance" type="xs:double"/>
          <xs:element minOccurs="0" name="status" type="tns:accountStatus"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="routable">
        <xs:sequence>
          <xs:element minOccurs="0" name="credits" type="tns:routableStatus"/>
          <xs:element minOccurs="0" name="debits" type="tns:routableStatus"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="sendFundsRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="method">
            <xs:complexType>
              <xs:choice minOccurs="1">
                <xs:element name="book" type="tns:book"/>
                <xs:element name="ach" type="tns:ach"/>
                <xs:element name="check" type="tns:check"/>
                <xs:element name="wire" type="tns:wire"/>
                <xs:element name="billpay" type="tns:billpay"/>
                <xs:element name="paypal" type="tns:paypal"/>
                <xs:element name="creditcard" type="tns:creditcard"/>
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="sourceAccount" type="tns:id"/>
          <xs:element name="destination">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1">
                  <xs:element name="account" type="tns:id"/>
                  <xs:element name="linkedPayeeId" type="tns:id"/>
                  <xs:element name="linkedExternalAccountId" type="tns:id"/>
                  <xs:element name="bancBoxPayeeId" type="xs:long"/>
                  <xs:element name="newPayee" type="tns:newPayee"/>
                  <xs:element name="newExternalAccount" type="tns:sendExternalAccount"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element minOccurs="0" name="payeeAccountNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="memo" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="1" name="items" type="tns:sendFundsItem"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="check">
        <xs:sequence>
          <xs:element name="type" type="tns:checkMethodType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="wire">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="billpay">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="newPayee">
        <xs:sequence>
          <xs:element name="payeeAccountNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="memo" type="xs:string"/>
          <xs:element name="payee">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1">
                  <xs:element name="ach" type="tns:bankAccount"/>
                  <xs:element name="paypal" type="tns:paypalAccount"/>
                  <xs:element name="check" type="tns:checkDestination"/>
                  <xs:element name="wire" type="tns:wirePayee"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="payeeDetail">
        <xs:sequence>
          <xs:element name="payeeAccountNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="memo" type="xs:string"/>
          <xs:element name="payee">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1">
                  <xs:element name="ach" type="tns:bankAccount"/>
                  <xs:element name="paypal" type="tns:paypalAccount"/>
                  <xs:element name="check" type="tns:checkDestination"/>
                  <xs:element name="bancbox" type="tns:bancBox"/>
                  <xs:element name="wire" type="tns:wirePayee"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <!--wire Payee node-->
      <xs:complexType name="wirePayee">
        <xs:sequence>
          <xs:element name="bankAccountDetails" type="tns:bankAccount"/>
          <xs:element name="address" type="tns:address"/>
        </xs:sequence>
      </xs:complexType>
      <!--get schedules wire Payee node-->
      <xs:complexType name="getSchedulesWirePayee">
        <xs:sequence>
          <xs:element minOccurs="0" name="bankAccountDetails" type="tns:getSchedulesBankAccount"/>
          <xs:element minOccurs="0" name="address" type="tns:address"/>
        </xs:sequence>
      </xs:complexType>
      <!--wire account  node-->
      <xs:complexType name="wireAccount">
        <xs:sequence>
          <xs:element name="bankAccountDetails" type="tns:bankAccount"/>
          <xs:element name="address" type="tns:address"/>
        </xs:sequence>
      </xs:complexType>
      <!--getSchedules wire account  node-->
      <xs:complexType name="getSchedulesWireAccount">
        <xs:sequence>
          <xs:element minOccurs="0" name="bankAccountDetails" type="tns:getSchedulesBankAccount"/>
          <xs:element minOccurs="0" name="address" type="tns:address"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="bancBox">
        <xs:sequence>
          <xs:element name="bancboxPayeeId" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="sendExternalAccount">
        <xs:sequence>
          <xs:element name="account">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1">
                  <xs:element name="bankAccount" type="tns:bankAccount"/>
                  <xs:element name="paypalAccount" type="tns:paypalAccount"/>
                  <xs:element name="creditCardAccount" type="tns:creditCardAccount"/>
                  <xs:element name="wireAccount" type="tns:wireAccount"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="sendFundsItem">
        <xs:sequence>
          <xs:element minOccurs="0" name="referenceId" type="xs:string"/>
          <xs:element minOccurs="0" name="memo" type="xs:string"/>
          <xs:element name="amount" type="xs:double"/>
          <xs:element minOccurs="0" name="scheduled" type="tns:scheduled"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="sendFundsResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="itemStatuses" nillable="true" type="tns:itemStatus"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="getAccountActivityRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="accountId" type="tns:id"/>
          <xs:element minOccurs="0" name="fromDate" type="xs:date"/>
          <xs:element minOccurs="0" name="toDate" type="xs:date"/>
          <xs:element minOccurs="0" name="type" type="tns:transactionType"/>
          <xs:element minOccurs="0" name="method" type="tns:transactionClass"/>
          <xs:element minOccurs="0" name="fromAmount" type="xs:double"/>
          <xs:element minOccurs="0" name="toAmount" type="xs:double"/>
          <xs:element minOccurs="0" name="status" type="tns:accountActivityStatus"/>
          <xs:element default="false" minOccurs="0" name="ascending" type="xs:boolean"/>
          <xs:element minOccurs="0" name="pageNo" type="xs:int"/>
          <xs:element minOccurs="0" name="resultsPerPage" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getAccountActivityResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="currentPage" type="xs:int"/>
              <xs:element minOccurs="0" name="totalPages" type="xs:int"/>
              <xs:element minOccurs="0" name="totalRecords" type="xs:int"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="activities" nillable="true" type="tns:activity"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="activity">
        <xs:sequence>
          <xs:element minOccurs="0" name="traceId" type="xs:string"/>
          <xs:element minOccurs="0" name="type" type="tns:activityType"/>
          <xs:element minOccurs="0" name="activityDate" type="xs:date"/>
          <xs:element minOccurs="0" name="description" type="xs:string"/>
          <xs:element minOccurs="0" name="debitAmount" type="xs:double"/>
          <xs:element minOccurs="0" name="creditAmount" type="xs:double"/>
          <xs:element minOccurs="0" name="balance" type="xs:double"/>
          <xs:element minOccurs="0" name="modifiedBy" type="xs:string"/>
          <xs:element minOccurs="0" name="transactionLedgerId" type="xs:long"/>
          <xs:element minOccurs="0" name="activityId" type="xs:long"/>
          <xs:element minOccurs="0" name="subTransactionReferenceId" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updateAccountRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="accountId" type="tns:id"/>
          <xs:element minOccurs="0" name="title" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updateAccountResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="newAccountStatus" type="tns:accountStatus"/>
              <xs:element minOccurs="0" name="accountType" type="tns:accountType"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="updateLinkedExternalAccountRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element minOccurs="0" name="linkedExternalAccountId" type="tns:id"/>
          <xs:element name="account">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1">
                  <xs:element name="bankAccount" type="tns:updatableBankAccount"/>
                  <xs:element name="cardAccount" type="tns:updatableCardAccount"/>
                  <xs:element name="paypalAccount" type="tns:paypalAccount"/>
                  <xs:element name="wireAccount" type="tns:wireAccount"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updateLinkedExternalAccountResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="linkedExternalAccountId" type="tns:id"/>
              <xs:element minOccurs="0" name="account">
                <xs:complexType>
                  <xs:sequence>
                    <xs:choice minOccurs="1">
                      <xs:element name="bankAccount" type="tns:updatableBankAccount"/>
                      <xs:element name="cardAccount" type="tns:updatableCardAccount"/>
                      <xs:element name="paypalAccount" type="tns:paypalAccount"/>
                      <xs:element name="wireAccount" type="tns:wireAccount"/>
                    </xs:choice>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="updatableBankAccount">
        <xs:sequence>
          <xs:element minOccurs="0" name="routingNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="accountNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="holderName" type="xs:string"/>
          <xs:element minOccurs="0" name="bankAccountType" type="tns:bankAccountType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updatableCardAccount">
        <xs:sequence>
          <xs:choice minOccurs="1">
            <xs:element name="creditCardAccount" type="tns:updatableCreditCardAccount"/>
            <xs:element name="debitCardAccount" type="tns:updatableDebitCardAccount"/>
            <xs:element name="giftCardAccount" type="tns:updatableGiftCardAccount"/>
          </xs:choice>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updatableCreditCardAccount">
        <xs:sequence>
          <xs:element minOccurs="0" name="number" type="xs:string"/>
          <xs:element minOccurs="0" name="expiryDate" type="xs:string"/>
          <xs:element minOccurs="0" name="type" type="tns:creditCardType"/>
          <xs:element minOccurs="0" name="name" type="xs:string"/>
          <xs:element minOccurs="0" name="cvv" type="xs:string"/>
          <xs:element minOccurs="0" name="address" type="tns:collectFundAddress"/>
          <xs:element minOccurs="0" name="orderSource" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updatableDebitCardAccount">
        <xs:sequence>
          <xs:element minOccurs="0" name="number" type="xs:string"/>
          <xs:element minOccurs="0" name="type" type="tns:debitCardType"/>
          <xs:element minOccurs="0" name="pin" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updatableGiftCardAccount">
        <xs:sequence>
          <xs:element minOccurs="0" name="number" type="xs:string"/>
          <xs:element minOccurs="0" name="pin" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="linkPayeeRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="clientId" type="tns:id"/>
          <xs:element minOccurs="0" name="referenceId" type="xs:string"/>
          <xs:element name="payee" type="tns:payeeDetail"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="linkPayeeResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="id" type="tns:id"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="getClientLinkedPayeesRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="clientId" type="tns:id"/>
          <xs:element default="false" minOccurs="0" name="ascending" type="xs:boolean"/>
          <xs:element minOccurs="0" name="pageNo" type="xs:int"/>
          <xs:element minOccurs="0" name="resultsPerPage" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getClientLinkedPayeesResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="currentPage" type="xs:int"/>
              <xs:element minOccurs="0" name="totalPages" type="xs:int"/>
              <xs:element minOccurs="0" name="totalRecords" type="xs:int"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="linkedPayees" nillable="true" type="tns:payeeDetails"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="payeeDetails">
        <xs:sequence>
          <xs:element name="id" type="tns:id"/>
          <xs:element name="payeeAccountNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="payeeName" type="xs:string"/>
          <xs:element minOccurs="0" name="memo" type="xs:string"/>
          <xs:element name="payeeStatus" type="tns:payeeStatus"/>
          <xs:element name="payee">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1">
                  <xs:element name="ach" type="tns:bankAccount"/>
                  <xs:element name="paypal" type="tns:paypalAccount"/>
                  <xs:element name="check" type="tns:checkDestination"/>
                  <xs:element name="bancbox" type="tns:bancBox"/>
                  <xs:element name="wire" type="tns:wirePayee"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updateClientRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="clientId" type="tns:id"/>
          <xs:element minOccurs="0" name="merchantId" type="xs:long"/>
          <xs:element minOccurs="0" name="firstName" type="xs:string"/>
          <xs:element minOccurs="0" name="lastName" type="xs:string"/>
          <xs:element minOccurs="0" name="middleInitial" type="xs:string"/>
          <xs:element minOccurs="0" name="ssn" type="xs:string"/>
          <xs:element minOccurs="0" name="dob" type="xs:date"/>
          <xs:element minOccurs="0" name="address" type="tns:address"/>
          <xs:element minOccurs="0" name="homePhone" type="xs:string"/>
          <xs:element minOccurs="0" name="mobilePhone" type="xs:string"/>
          <xs:element minOccurs="0" name="workPhone" type="xs:string"/>
          <xs:element minOccurs="0" name="email" type="xs:string"/>
          <xs:element minOccurs="0" name="username" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updateClientResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="clientStatus" type="tns:clientStatus"/>
              <xs:element minOccurs="0" name="cipStatus" type="tns:cipStatus"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="collectFeesRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="account" type="tns:id"/>
          <xs:element maxOccurs="unbounded" name="items" type="tns:collectFeesItem"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="collectFeesItem">
        <xs:sequence>
          <xs:element minOccurs="0" name="referenceId" type="xs:string"/>
          <xs:element name="amount" type="xs:double"/>
          <xs:element minOccurs="0" name="memo" type="xs:string"/>
          <xs:element minOccurs="0" name="scheduled" type="tns:scheduled"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="collectFeesResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="itemStatuses" nillable="true" type="tns:itemStatus"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="getSchedulesRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element minOccurs="0" name="clientId" type="tns:id"/>
          <xs:element minOccurs="0" name="accountId" type="tns:id"/>
          <xs:element minOccurs="0" name="type" type="tns:activityType"/>
          <xs:element minOccurs="0" name="scheduleId" type="tns:id"/>
          <xs:element minOccurs="0" name="scheduleStartDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="scheduleEndDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="modifiedOnStartDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="modifiedOnEndDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="fromAmount" type="xs:double"/>
          <xs:element minOccurs="0" name="toAmount" type="xs:double"/>
          <xs:element minOccurs="0" name="method" type="tns:transactionClass"/>
          <xs:element minOccurs="0" name="status" type="tns:fundsRequestStatus"/>
          <xs:element minOccurs="0" name="order" type="tns:schedulesOrder"/>
          <xs:element default="true" minOccurs="0" name="ascending" type="xs:boolean"/>
          <xs:element minOccurs="0" name="pageNo" type="xs:int"/>
          <xs:element minOccurs="0" name="resultsPerPage" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getSchedulesResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="currentPage" type="xs:int"/>
              <xs:element minOccurs="0" name="totalPages" type="xs:int"/>
              <xs:element minOccurs="0" name="totalRecords" type="xs:int"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="schedules" nillable="true" type="tns:schedule"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="verifyClientRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element minOccurs="0" name="clientId" type="tns:id"/>
          <xs:element minOccurs="0" name="generateQuestions" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="verifyClientResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="idNumber" type="xs:string"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="questions" nillable="true" type="tns:question"/>
              <xs:element minOccurs="0" name="cipStatus" type="tns:cipStatus"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="question">
        <xs:sequence>
          <xs:element minOccurs="1" name="prompt" type="xs:string"/>
          <xs:element minOccurs="1" name="type" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="1" name="answers" nillable="true" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="searchBancBoxPayeesRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="payeeName" type="xs:string"/>
          <xs:element minOccurs="0" name="accountNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="billerClass" type="xs:string"/>
          <xs:element minOccurs="0" name="billerType" type="xs:string"/>
          <xs:element default="false" minOccurs="0" name="ascending" type="xs:boolean"/>
          <xs:element minOccurs="0" name="pageNo" type="xs:int"/>
          <xs:element minOccurs="0" name="resultsPerPage" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="searchBancBoxPayeesResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="currentPage" type="xs:int"/>
              <xs:element minOccurs="0" name="totalPages" type="xs:int"/>
              <xs:element minOccurs="0" name="totalRecords" type="xs:int"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="bancBoxPayees" nillable="true" type="tns:bancBoxPayee"/>
              <xs:element minOccurs="0" name="request" type="tns:searchBancBoxPayeesRequest"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="bancBoxPayee">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:long"/>
          <xs:element minOccurs="0" name="payeeName" type="xs:string"/>
          <xs:element minOccurs="0" name="payeePrevName" type="xs:string"/>
          <xs:element minOccurs="0" name="payeeAKA" type="xs:string"/>
          <xs:element minOccurs="0" name="payeeAddress" type="tns:address"/>
          <xs:element minOccurs="0" name="mask" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updateClientStatusRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="clientId" type="tns:id"/>
          <xs:element name="clientStatus" type="tns:clientStatus"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updateClientStatusResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="newStatus" type="tns:clientStatus"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="cancelSchedulesRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element maxOccurs="unbounded" name="scheduleIds" type="tns:id"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="cancelSchedulesResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="schedules" nillable="true" type="tns:ccsirItem"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="ccsirItem">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="tns:id"/>
          <xs:element minOccurs="0" name="status" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="warnings" nillable="true" type="tns:warning"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="errors" nillable="true" type="tns:error"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getClientLinkedExternalAccountsRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="clientId" type="tns:id"/>
          <xs:element default="false" minOccurs="0" name="ascending" type="xs:boolean"/>
          <xs:element minOccurs="0" name="pageNo" type="xs:int"/>
          <xs:element minOccurs="0" name="resultsPerPage" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getClientLinkedExternalAccountsResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="currentPage" type="xs:int"/>
              <xs:element minOccurs="0" name="totalPages" type="xs:int"/>
              <xs:element minOccurs="0" name="totalRecords" type="xs:int"/>
              <xs:element minOccurs="0" name="clientId" type="tns:id"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="linkedExternalAccounts" nillable="true" type="tns:externalAccount"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="externalAccount">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="tns:id"/>
          <xs:element name="externalAccountStatus" type="tns:externalAccountStatus"/>
          <xs:element minOccurs="0" name="account">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1">
                  <xs:element name="bankAccount" type="tns:bankAccount"/>
                  <xs:element name="cardAccount" type="tns:cardAccount"/>
                  <xs:element name="paypalAccount" type="tns:paypalAccount"/>
                  <xs:element name="wireAccount" type="tns:wireAccount"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="linkFileRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="clientId" type="tns:id"/>
          <xs:element minOccurs="0" name="referenceId" type="xs:string"/>
          <xs:element name="file" type="tns:file"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="file">
        <xs:sequence>
          <xs:element name="name" type="xs:string"/>
          <xs:element name="fileClass" type="tns:fileClass"/>
          <xs:element minOccurs="0" name="url" type="xs:string"/>
          <xs:element name="content" type="xs:base64Binary"/>
          <xs:element minOccurs="0" name="comment" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="linkFileResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="id" type="tns:id"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="getClientAccountsRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="clientId" type="tns:id"/>
          <xs:element default="false" minOccurs="0" name="ascending" type="xs:boolean"/>
          <xs:element minOccurs="0" name="pageNo" type="xs:int"/>
          <xs:element minOccurs="0" name="resultsPerPage" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getClientAccountsResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="currentPage" type="xs:int"/>
              <xs:element minOccurs="0" name="totalPages" type="xs:int"/>
              <xs:element minOccurs="0" name="totalRecords" type="xs:int"/>
              <xs:element minOccurs="0" name="clientId" type="tns:id"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="accounts" nillable="true" type="tns:account"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="cancelClientRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="clientId" type="tns:id"/>
          <xs:element minOccurs="0" name="comment" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="cancelClientResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="openAccounts" nillable="true" type="tns:account"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="getClientRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="clientId" type="tns:id"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getClientResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="client" type="tns:client"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <!--added for return fund-->
      <xs:complexType name="returnFundRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="scheduleId" type="tns:id"/>
          <xs:element minOccurs="0" name="reasonForRefund" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="returnFundResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="externalReferenceId" type="xs:string"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="updateMerchantStatusRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="merchantId" type="xs:string"/>
          <xs:element name="merchantStatus" type="tns:merchantStatus"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updateMerchantStatusResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="merchantId" type="xs:long"/>
              <xs:element minOccurs="0" name="merchantStatus" type="xs:string"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="updateScheduleRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="activity" type="tns:id"/>
          <xs:element name="rescheduleDate" type="xs:date"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updateScheduleResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="rescheduleDate" type="xs:date"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <!--Credit Card Verification Internal API-->
      <!--<xs:complexType name="verifyCreditCardRequest"> <xs:sequence> <xs:element 
				name="orderId" type="xs:string" /> <xs:element name="ccDetails"> <xs:complexType> 
				<xs:sequence> <xs:choice minOccurs="1"> <xs:element name="tokenId" type="xs:string" 
				/> <xs:element name="cardDetails" type="tns:creditCardAccount" /> </xs:choice> 
				</xs:sequence> </xs:complexType> </xs:element> </xs:sequence> </xs:complexType>-->
      <xs:complexType name="billToAddress">
        <xs:sequence>
          <xs:element minOccurs="0" name="name" type="xs:string"/>
          <xs:element minOccurs="0" name="firstName" type="xs:string"/>
          <xs:element minOccurs="0" name="middleInitial" type="xs:string"/>
          <xs:element minOccurs="0" name="lastName" type="xs:string"/>
          <xs:element minOccurs="0" name="companyName" type="xs:string"/>
          <xs:element name="addressLine1" type="xs:string"/>
          <xs:element minOccurs="0" name="addressLine2" type="xs:string"/>
          <xs:element minOccurs="0" name="addressLine3" type="xs:string"/>
          <xs:element name="city" type="xs:string"/>
          <xs:element name="state" type="xs:string"/>
          <xs:element name="zipcode" type="xs:string"/>
          <xs:element name="country" type="tns:countryCode"/>
          <xs:element minOccurs="0" name="email" type="xs:string"/>
          <xs:element minOccurs="0" name="phone" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="cardDetails">
        <xs:sequence>
          <xs:element name="cardType" type="xs:string"/>
          <xs:element name="cardNumber" type="xs:string"/>
          <xs:element name="expDate" type="xs:string"/>
          <xs:element minOccurs="0" name="cardValidationNum" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <!--<xs:complexType name="verifyCreditCardResponse"> <xs:complexContent> 
				<xs:extension base="tns:response"> <xs:sequence> <xs:element minOccurs="0" 
				name="apiResponse" type="xs:string" /> <xs:element minOccurs="0" name="avsResult" 
				type="xs:string" /> <xs:element minOccurs="0" name="cardValidationResult" 
				type="xs:string" /> </xs:sequence> </xs:extension> </xs:complexContent> </xs:complexType>-->
      <!--Verify Client Manually API-->
      <xs:complexType name="verifyClientManuallyRequest">
        <xs:sequence>
          <xs:element name="subscriberId" type="xs:long"/>
          <xs:element name="clientId" type="tns:id"/>
          <xs:element name="status">
            <xs:complexType>
              <xs:sequence>
                <xs:element minOccurs="0" name="newCipStatus" type="tns:cipStatus"/>
                <xs:element minOccurs="0" name="newOfacStatus" type="tns:ofacStatus"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="verifyClientManuallyResponse">
        <xs:complexContent>
          <xs:extension base="tns:response">
            <xs:sequence>
              <xs:element minOccurs="0" name="cipStatus" type="tns:cipStatus"/>
              <xs:element minOccurs="0" name="ofacStatus" type="tns:ofacStatus"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:simpleType name="transactionType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="DEBIT"/>
          <xs:enumeration value="CREDIT"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="transactionClass">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ACH"/>
          <xs:enumeration value="WIRE"/>
          <xs:enumeration value="CHECK"/>
          <xs:enumeration value="CREDITCARD"/>
          <xs:enumeration value="EBP"/>
          <xs:enumeration value="BOOK"/>
          <xs:enumeration value="PAYPAL"/>
          <xs:enumeration value="ELOCKBOX"/>
          <xs:enumeration value="ECHECK"/>
          <xs:enumeration value="PHONE"/>
          <xs:enumeration value="CARD"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="organizationType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="INDIVIDUAL_SOLE_PROPRIETORSHIP"/>
          <xs:enumeration value="CORPORATION"/>
          <xs:enumeration value="LIMITED_LIABILITY_COMPANY"/>
          <xs:enumeration value="PARTNERSHIP"/>
          <xs:enumeration value="ASSOCIATION_ESTATE_TRUST"/>
          <xs:enumeration value="TAX_EXEMPT_ORGANIZATION"/>
          <xs:enumeration value="INTERNATIONAL_ORGANIZATION"/>
          <xs:enumeration value="GOVERNMENT_AGENCY"/>
        </xs:restriction>
      </xs:simpleType>
      <!--<xs:simpleType name="date"> <xs:restriction base="xs:string" /> </xs:simpleType>-->
      <xs:simpleType name="payeeStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="INACTIVE"/>
          <xs:enumeration value="ACTIVE"/>
          <xs:enumeration value="DELETED"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="externalAccountStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="INACTIVE"/>
          <xs:enumeration value="ACTIVE"/>
          <xs:enumeration value="DELETED"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="bankAccountType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="SAVING"/>
          <xs:enumeration value="CHECKING"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="creditCardType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="VISA"/>
          <xs:enumeration value="MASTERCARD"/>
          <xs:enumeration value="AMERICANEXPRESS"/>
          <xs:enumeration value="DISCOVER"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="clientStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ACTIVE"/>
          <xs:enumeration value="INACTIVE"/>
          <xs:enumeration value="CANCELLED"/>
          <xs:enumeration value="SUSPENDED"/>
          <xs:enumeration value="DELETED"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ofacStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="UNVERIFIED"/>
          <xs:enumeration value="VERIFIED"/>
          <xs:enumeration value="IGNORED"/>
          <xs:enumeration value="REJECTED"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="cipStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="UNVERIFIED"/>
          <xs:enumeration value="VERIFIED"/>
          <xs:enumeration value="IGNORED"/>
          <xs:enumeration value="REJECTED"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="withdrawalMethod">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ACH"/>
          <xs:enumeration value="CHECK"/>
          <xs:enumeration value="PAYPAL"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="checkMethodType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="STD"/>
          <xs:enumeration value="TWODAY"/>
          <xs:enumeration value="OVERNIGHT"/>
          <xs:enumeration value="PLUS"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="activityType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="COLLECT"/>
          <xs:enumeration value="SEND"/>
          <xs:enumeration value="TRANSFER"/>
          <xs:enumeration value="FEE"/>
          <xs:enumeration value="CHARGEBACK"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="fundsRequestStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="SCHEDULED"/>
          <xs:enumeration value="COMPLETED"/>
          <xs:enumeration value="FAILED"/>
          <xs:enumeration value="PENDING"/>
          <xs:enumeration value="IN_PROCESS"/>
          <xs:enumeration value="CANCELLED"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="accountActivityStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="COMPLETED"/>
          <xs:enumeration value="FAILED"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="schedulesOrder">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ID"/>
          <xs:enumeration value="SCHEDULED_DATE"/>
          <xs:enumeration value="MODIFIED_ON"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="debitCardType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="MASTERCARD"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="accountStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="OPEN"/>
          <xs:enumeration value="CLOSED"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="fileClass">
        <xs:restriction base="xs:string">
          <xs:enumeration value="AUTHORIZED"/>
          <xs:enumeration value="IDENTIFICATION"/>
          <xs:enumeration value="OTHER"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="routableStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="YES"/>
          <xs:enumeration value="NO"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="accountType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="GENERAL"/>
          <xs:enumeration value="SPECIAL"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="merchantStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ACTIVE"/>
          <xs:enumeration value="INACTIVE"/>
          <xs:enumeration value="CLOSED"/>
          <!--<xs:enumeration value="PENDING" />-->
        </xs:restriction>
      </xs:simpleType>
      <!--<xs:simpleType name="orderSourceDetails"> <xs:restriction base="xs:string"> 
				<xs:enumeration value="ECOMMERCE" /> <xs:enumeration value="INSTALLMENT" 
				/> <xs:enumeration value="MAILORDER" /> <xs:enumeration value="RECURRING" 
				/> <xs:enumeration value="RETAIL" /> <xs:enumeration value="TELEPHONE" /> 
				<xs:enumeration value="3DSAUTHENTICATED" /> <xs:enumeration value="3DSATTEMPTED" 
				/> <xs:enumeration value="RECURRINGTEL" /> </xs:restriction> </xs:simpleType>-->
      <xs:simpleType name="countryCode">
        <xs:restriction base="xs:string">
          <xs:enumeration value="AD"/>
          <xs:enumeration value="AE"/>
          <xs:enumeration value="AF"/>
          <xs:enumeration value="AG"/>
          <xs:enumeration value="AI"/>
          <xs:enumeration value="AL"/>
          <xs:enumeration value="AM"/>
          <xs:enumeration value="AN"/>
          <xs:enumeration value="AO"/>
          <xs:enumeration value="AQ"/>
          <xs:enumeration value="AR"/>
          <xs:enumeration value="AS"/>
          <xs:enumeration value="AT"/>
          <xs:enumeration value="AU"/>
          <xs:enumeration value="AW"/>
          <xs:enumeration value="AX"/>
          <xs:enumeration value="AZ"/>
          <xs:enumeration value="BA"/>
          <xs:enumeration value="BB"/>
          <xs:enumeration value="BD"/>
          <xs:enumeration value="BE"/>
          <xs:enumeration value="BF"/>
          <xs:enumeration value="BG"/>
          <xs:enumeration value="BH"/>
          <xs:enumeration value="BI"/>
          <xs:enumeration value="BJ"/>
          <xs:enumeration value="BL"/>
          <xs:enumeration value="BM"/>
          <xs:enumeration value="BN"/>
          <xs:enumeration value="BO"/>
          <xs:enumeration value="BQ"/>
          <xs:enumeration value="BR"/>
          <xs:enumeration value="BS"/>
          <xs:enumeration value="BT"/>
          <xs:enumeration value="BV"/>
          <xs:enumeration value="BW"/>
          <xs:enumeration value="BY"/>
          <xs:enumeration value="BZ"/>
          <xs:enumeration value="CA"/>
          <xs:enumeration value="CC"/>
          <xs:enumeration value="CD"/>
          <xs:enumeration value="CF"/>
          <xs:enumeration value="CG"/>
          <xs:enumeration value="CH"/>
          <xs:enumeration value="CI"/>
          <xs:enumeration value="CK"/>
          <xs:enumeration value="CL"/>
          <xs:enumeration value="CM"/>
          <xs:enumeration value="CN"/>
          <xs:enumeration value="CO"/>
          <xs:enumeration value="CR"/>
          <xs:enumeration value="CU"/>
          <xs:enumeration value="CV"/>
          <xs:enumeration value="CW"/>
          <xs:enumeration value="CX"/>
          <xs:enumeration value="CY"/>
          <xs:enumeration value="CZ"/>
          <xs:enumeration value="DE"/>
          <xs:enumeration value="DJ"/>
          <xs:enumeration value="DK"/>
          <xs:enumeration value="DM"/>
          <xs:enumeration value="DO"/>
          <xs:enumeration value="DZ"/>
          <xs:enumeration value="EC"/>
          <xs:enumeration value="EE"/>
          <xs:enumeration value="EG"/>
          <xs:enumeration value="EH"/>
          <xs:enumeration value="ER"/>
          <xs:enumeration value="ES"/>
          <xs:enumeration value="ET"/>
          <xs:enumeration value="FI"/>
          <xs:enumeration value="FJ"/>
          <xs:enumeration value="FK"/>
          <xs:enumeration value="FM"/>
          <xs:enumeration value="FO"/>
          <xs:enumeration value="FR"/>
          <xs:enumeration value="GA"/>
          <xs:enumeration value="GB"/>
          <xs:enumeration value="GD"/>
          <xs:enumeration value="GE"/>
          <xs:enumeration value="GF"/>
          <xs:enumeration value="GG"/>
          <xs:enumeration value="GH"/>
          <xs:enumeration value="GI"/>
          <xs:enumeration value="GL"/>
          <xs:enumeration value="GM"/>
          <xs:enumeration value="GN"/>
          <xs:enumeration value="GP"/>
          <xs:enumeration value="GQ"/>
          <xs:enumeration value="GR"/>
          <xs:enumeration value="GS"/>
          <xs:enumeration value="GT"/>
          <xs:enumeration value="GU"/>
          <xs:enumeration value="GW"/>
          <xs:enumeration value="GY"/>
          <xs:enumeration value="HK"/>
          <xs:enumeration value="HM"/>
          <xs:enumeration value="HN"/>
          <xs:enumeration value="HR"/>
          <xs:enumeration value="HT"/>
          <xs:enumeration value="HU"/>
          <xs:enumeration value="ID"/>
          <xs:enumeration value="IE"/>
          <xs:enumeration value="IL"/>
          <xs:enumeration value="IM"/>
          <xs:enumeration value="IN"/>
          <xs:enumeration value="IO"/>
          <xs:enumeration value="IQ"/>
          <xs:enumeration value="IR"/>
          <xs:enumeration value="IS"/>
          <xs:enumeration value="IT"/>
          <xs:enumeration value="JE"/>
          <xs:enumeration value="JM"/>
          <xs:enumeration value="JO"/>
          <xs:enumeration value="JP"/>
          <xs:enumeration value="KE"/>
          <xs:enumeration value="KG"/>
          <xs:enumeration value="KH"/>
          <xs:enumeration value="KI"/>
          <xs:enumeration value="KM"/>
          <xs:enumeration value="KN"/>
          <xs:enumeration value="KP"/>
          <xs:enumeration value="KR"/>
          <xs:enumeration value="KW"/>
          <xs:enumeration value="KY"/>
          <xs:enumeration value="KZ"/>
          <xs:enumeration value="LA"/>
          <xs:enumeration value="LB"/>
          <xs:enumeration value="LC"/>
          <xs:enumeration value="LI"/>
          <xs:enumeration value="LK"/>
          <xs:enumeration value="LR"/>
          <xs:enumeration value="LS"/>
          <xs:enumeration value="LT"/>
          <xs:enumeration value="LU"/>
          <xs:enumeration value="LV"/>
          <xs:enumeration value="LY"/>
          <xs:enumeration value="MA"/>
          <xs:enumeration value="MC"/>
          <xs:enumeration value="MD"/>
          <xs:enumeration value="ME"/>
          <xs:enumeration value="MF"/>
          <xs:enumeration value="MG"/>
          <xs:enumeration value="MH"/>
          <xs:enumeration value="MK"/>
          <xs:enumeration value="ML"/>
          <xs:enumeration value="MM"/>
          <xs:enumeration value="MN"/>
          <xs:enumeration value="MO"/>
          <xs:enumeration value="MP"/>
          <xs:enumeration value="MQ"/>
          <xs:enumeration value="MR"/>
          <xs:enumeration value="MS"/>
          <xs:enumeration value="MT"/>
          <xs:enumeration value="MU"/>
          <xs:enumeration value="MV"/>
          <xs:enumeration value="MW"/>
          <xs:enumeration value="MX"/>
          <xs:enumeration value="MY"/>
          <xs:enumeration value="MZ"/>
          <xs:enumeration value="NA"/>
          <xs:enumeration value="NC"/>
          <xs:enumeration value="NE"/>
          <xs:enumeration value="NF"/>
          <xs:enumeration value="NG"/>
          <xs:enumeration value="NI"/>
          <xs:enumeration value="NL"/>
          <xs:enumeration value="NO"/>
          <xs:enumeration value="NP"/>
          <xs:enumeration value="NR"/>
          <xs:enumeration value="NU"/>
          <xs:enumeration value="NZ"/>
          <xs:enumeration value="OM"/>
          <xs:enumeration value="PA"/>
          <xs:enumeration value="PE"/>
          <xs:enumeration value="PF"/>
          <xs:enumeration value="PG"/>
          <xs:enumeration value="PH"/>
          <xs:enumeration value="PK"/>
          <xs:enumeration value="PL"/>
          <xs:enumeration value="PM"/>
          <xs:enumeration value="PN"/>
          <xs:enumeration value="PR"/>
          <xs:enumeration value="PS"/>
          <xs:enumeration value="PT"/>
          <xs:enumeration value="PW"/>
          <xs:enumeration value="PY"/>
          <xs:enumeration value="QA"/>
          <xs:enumeration value="RE"/>
          <xs:enumeration value="RO"/>
          <xs:enumeration value="RS"/>
          <xs:enumeration value="RU"/>
          <xs:enumeration value="RW"/>
          <xs:enumeration value="SA"/>
          <xs:enumeration value="SB"/>
          <xs:enumeration value="SC"/>
          <xs:enumeration value="SD"/>
          <xs:enumeration value="SE"/>
          <xs:enumeration value="SG"/>
          <xs:enumeration value="SH"/>
          <xs:enumeration value="SI"/>
          <xs:enumeration value="SJ"/>
          <xs:enumeration value="SK"/>
          <xs:enumeration value="SL"/>
          <xs:enumeration value="SM"/>
          <xs:enumeration value="SN"/>
          <xs:enumeration value="SO"/>
          <xs:enumeration value="SR"/>
          <xs:enumeration value="SS"/>
          <xs:enumeration value="ST"/>
          <xs:enumeration value="SV"/>
          <xs:enumeration value="SX"/>
          <xs:enumeration value="SY"/>
          <xs:enumeration value="SZ"/>
          <xs:enumeration value="TC"/>
          <xs:enumeration value="TD"/>
          <xs:enumeration value="TF"/>
          <xs:enumeration value="TG"/>
          <xs:enumeration value="TH"/>
          <xs:enumeration value="TJ"/>
          <xs:enumeration value="TK"/>
          <xs:enumeration value="TL"/>
          <xs:enumeration value="TM"/>
          <xs:enumeration value="TN"/>
          <xs:enumeration value="TO"/>
          <xs:enumeration value="TR"/>
          <xs:enumeration value="TT"/>
          <xs:enumeration value="TV"/>
          <xs:enumeration value="TW"/>
          <xs:enumeration value="TZ"/>
          <xs:enumeration value="UA"/>
          <xs:enumeration value="UG"/>
          <xs:enumeration value="UM"/>
          <xs:enumeration value="US"/>
          <xs:enumeration value="USA"/>
          <xs:enumeration value="UY"/>
          <xs:enumeration value="UZ"/>
          <xs:enumeration value="VA"/>
          <xs:enumeration value="VC"/>
          <xs:enumeration value="VE"/>
          <xs:enumeration value="VG"/>
          <xs:enumeration value="VI"/>
          <xs:enumeration value="VN"/>
          <xs:enumeration value="VU"/>
          <xs:enumeration value="WF"/>
          <xs:enumeration value="WS"/>
          <xs:enumeration value="YE"/>
          <xs:enumeration value="YT"/>
          <xs:enumeration value="ZA"/>
          <xs:enumeration value="ZM"/>
          <xs:enumeration value="ZW"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="verifyClientResponse">
    <wsdl:part name="return" type="tns:verifyClientResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="linkExternalAccountResponse">
    <wsdl:part name="return" type="tns:linkExternalAccountResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteLinkedExternalAccount">
    <wsdl:part name="deleteLinkedExternalAccountRequest" type="tns:deleteLinkedExternalAccountRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="linkPayeeResponse">
    <wsdl:part name="return" type="tns:linkPayeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="closeAccount">
    <wsdl:part name="closeAccountRequest" type="tns:closeAccountRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="verifyClient">
    <wsdl:part name="verifyClient" type="tns:verifyClientRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createMerchantResponse">
    <wsdl:part name="createMerchantResponse" type="tns:createMerchantResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createClient">
    <wsdl:part name="createClientRequest" type="tns:createClientRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateClientResponse">
    <wsdl:part name="return" type="tns:updateClientResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateMerchantRequest">
    <wsdl:part name="updateMerchantRequest" type="tns:updateMerchantRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateClient">
    <wsdl:part name="updateClientRequest" type="tns:updateClientRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteLinkedExternalAccountResponse">
    <wsdl:part name="return" type="tns:deleteLinkedExternalAccountResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getClientLinkedExternalAccounts">
    <wsdl:part name="getClientLinkedExternalAccountsRequest" type="tns:getClientLinkedExternalAccountsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateAccount">
    <wsdl:part name="updateAccountRequest" type="tns:updateAccountRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="collectFunds">
    <wsdl:part name="collectFundsRequest" type="tns:collectFundsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateScheduleResponse">
    <wsdl:part name="return" type="tns:updateScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberAccountsResponse">
    <wsdl:part name="getSubscriberAccountsResponse" type="tns:getSubscriberAccountsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchClientsResponse">
    <wsdl:part name="return" type="tns:searchClientResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="verifyClientManuallyResponse">
    <wsdl:part name="return" type="tns:verifyClientManuallyResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateClientStatusResponse">
    <wsdl:part name="return" type="tns:updateClientStatusResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="linkFile">
    <wsdl:part name="linkFileRequest" type="tns:linkFileRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteLinkedPayee">
    <wsdl:part name="deleteLinkedPayeeRequest" type="tns:deleteLinkedPayeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="transferFunds">
    <wsdl:part name="transferFundsRequest" type="tns:transferFundsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="collectFeesResponse">
    <wsdl:part name="return" type="tns:collectFeesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchBancBoxPayeesResponse">
    <wsdl:part name="return" type="tns:searchBancBoxPayeesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="linkFileResponse">
    <wsdl:part name="return" type="tns:linkFileResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getClientAccountsResponse">
    <wsdl:part name="return" type="tns:getClientAccountsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getClient">
    <wsdl:part name="getClientRequest" type="tns:getClientRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="verifyClientManually">
    <wsdl:part name="verifyClientManually" type="tns:verifyClientManuallyRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getClientAccounts">
    <wsdl:part name="getClientAccountsRequest" type="tns:getClientAccountsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateMerchantStatusResponse">
    <wsdl:part name="merchantStatusResponse" type="tns:updateMerchantStatusResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchMerchantsRequest">
    <wsdl:part name="searchMerchantsRequest" type="tns:searchMerchantsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteLinkedPayeeResponse">
    <wsdl:part name="return" type="tns:deleteLinkedPayeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateAccountResponse">
    <wsdl:part name="return" type="tns:updateAccountResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSchedulesResponse">
    <wsdl:part name="return" type="tns:getSchedulesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateScheduleRequest">
    <wsdl:part name="updateScheduleRequest" type="tns:updateScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchClients">
    <wsdl:part name="searchClientRequest" type="tns:searchClientRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateLinkedPayee">
    <wsdl:part name="updateLinkedPayeeRequest" type="tns:updateLinkedPayeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="cancelSchedulesResponse">
    <wsdl:part name="return" type="tns:cancelSchedulesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateLinkedExternalAccount">
    <wsdl:part name="updateLinkedExternalAccountRequest" type="tns:updateLinkedExternalAccountRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMerchantResponse">
    <wsdl:part name="getMerchantResponse" type="tns:getMerchantResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="submitVerificationAnswers">
    <wsdl:part name="submitVerificationAnswers" type="tns:submitVerificationAnswersRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountActivity">
    <wsdl:part name="getAccountActivityRequest" type="tns:getAccountActivityRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="openAccount">
    <wsdl:part name="openAccountRequest" type="tns:openAccountRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="linkPayee">
    <wsdl:part name="linkPayeeRequest" type="tns:linkPayeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="submitVerificationAnswersResponse">
    <wsdl:part name="return" type="tns:submitVerificationAnswersResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getClientLinkedExternalAccountsResponse">
    <wsdl:part name="return" type="tns:getClientLinkedExternalAccountsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getClientResponse">
    <wsdl:part name="return" type="tns:getClientResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="returnFundResponse">
    <wsdl:part name="return" type="tns:returnFundResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="collectFees">
    <wsdl:part name="collectFeesRequest" type="tns:collectFeesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateLinkedPayeeResponse">
    <wsdl:part name="return" type="tns:updateLinkedPayeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchBancBoxPayees">
    <wsdl:part name="searchBancBoxPayeesRequest" type="tns:searchBancBoxPayeesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateMerchantResponse">
    <wsdl:part name="updateMerchantResponse" type="tns:updateMerchantResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateMerchantStatusRequest">
    <wsdl:part name="updateMerchantStatusRequest" type="tns:updateMerchantStatusRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberAccountsRequest">
    <wsdl:part name="getSubscriberAccountsRequest" type="tns:getSubscriberAccountsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMerchantRequest">
    <wsdl:part name="getMerchantRequest" type="tns:getMerchantRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="transferFundsResponse">
    <wsdl:part name="return" type="tns:transferFundsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="collectFundsResponse">
    <wsdl:part name="return" type="tns:collectFundsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createMerchantRequest">
    <wsdl:part name="createMerchantRequest" type="tns:createMerchantRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateLinkedExternalAccountResponse">
    <wsdl:part name="return" type="tns:updateLinkedExternalAccountResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendFundsResponse">
    <wsdl:part name="return" type="tns:sendFundsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountActivityResponse">
    <wsdl:part name="return" type="tns:getAccountActivityResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="linkExternalAccount">
    <wsdl:part name="linkExternalAccountRequest" type="tns:linkExternalAccountRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="closeAccountResponse">
    <wsdl:part name="return" type="tns:closeAccountResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="searchMerchantsResponse">
    <wsdl:part name="searchMerchantsResponse" type="tns:searchMerchantsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendFunds">
    <wsdl:part name="sendFundsRequest" type="tns:sendFundsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSchedules">
    <wsdl:part name="getSchedulesRequest" type="tns:getSchedulesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="cancelSchedules">
    <wsdl:part name="cancelSchedulesRequest" type="tns:cancelSchedulesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getClientLinkedPayees">
    <wsdl:part name="getClientLinkedPayeesRequest" type="tns:getClientLinkedPayeesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="cancelClientResponse">
    <wsdl:part name="return" type="tns:cancelClientResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getClientLinkedPayeesResponse">
    <wsdl:part name="return" type="tns:getClientLinkedPayeesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateClientStatus">
    <wsdl:part name="updateClientStatusRequest" type="tns:updateClientStatusRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="returnFund">
    <wsdl:part name="returnFund" type="tns:returnFundRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="openAccountResponse">
    <wsdl:part name="return" type="tns:openAccountResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="cancelClient">
    <wsdl:part name="cancelClientRequest" type="tns:cancelClientRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createClientResponse">
    <wsdl:part name="return" type="tns:createClientResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="BBX">
    <wsdl:operation name="collectFunds">
      <wsdl:input message="tns:collectFunds" name="collectFunds"></wsdl:input>
      <wsdl:output message="tns:collectFundsResponse" name="collectFundsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createClient">
      <wsdl:input message="tns:createClient" name="createClient"></wsdl:input>
      <wsdl:output message="tns:createClientResponse" name="createClientResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteLinkedExternalAccount">
      <wsdl:input message="tns:deleteLinkedExternalAccount" name="deleteLinkedExternalAccount"></wsdl:input>
      <wsdl:output message="tns:deleteLinkedExternalAccountResponse" name="deleteLinkedExternalAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="searchClients">
      <wsdl:input message="tns:searchClients" name="searchClients"></wsdl:input>
      <wsdl:output message="tns:searchClientsResponse" name="searchClientsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteLinkedPayee">
      <wsdl:input message="tns:deleteLinkedPayee" name="deleteLinkedPayee"></wsdl:input>
      <wsdl:output message="tns:deleteLinkedPayeeResponse" name="deleteLinkedPayeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="closeAccount">
      <wsdl:input message="tns:closeAccount" name="closeAccount"></wsdl:input>
      <wsdl:output message="tns:closeAccountResponse" name="closeAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateLinkedPayee">
      <wsdl:input message="tns:updateLinkedPayee" name="updateLinkedPayee"></wsdl:input>
      <wsdl:output message="tns:updateLinkedPayeeResponse" name="updateLinkedPayeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="transferFunds">
      <wsdl:input message="tns:transferFunds" name="transferFunds"></wsdl:input>
      <wsdl:output message="tns:transferFundsResponse" name="transferFundsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="linkExternalAccount">
      <wsdl:input message="tns:linkExternalAccount" name="linkExternalAccount"></wsdl:input>
      <wsdl:output message="tns:linkExternalAccountResponse" name="linkExternalAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="openAccount">
      <wsdl:input message="tns:openAccount" name="openAccount"></wsdl:input>
      <wsdl:output message="tns:openAccountResponse" name="openAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendFunds">
      <wsdl:input message="tns:sendFunds" name="sendFunds"></wsdl:input>
      <wsdl:output message="tns:sendFundsResponse" name="sendFundsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountActivity">
      <wsdl:input message="tns:getAccountActivity" name="getAccountActivity"></wsdl:input>
      <wsdl:output message="tns:getAccountActivityResponse" name="getAccountActivityResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateAccount">
      <wsdl:input message="tns:updateAccount" name="updateAccount"></wsdl:input>
      <wsdl:output message="tns:updateAccountResponse" name="updateAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateLinkedExternalAccount">
      <wsdl:input message="tns:updateLinkedExternalAccount" name="updateLinkedExternalAccount"></wsdl:input>
      <wsdl:output message="tns:updateLinkedExternalAccountResponse" name="updateLinkedExternalAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="linkPayee">
      <wsdl:input message="tns:linkPayee" name="linkPayee"></wsdl:input>
      <wsdl:output message="tns:linkPayeeResponse" name="linkPayeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getClientLinkedPayees">
      <wsdl:input message="tns:getClientLinkedPayees" name="getClientLinkedPayees"></wsdl:input>
      <wsdl:output message="tns:getClientLinkedPayeesResponse" name="getClientLinkedPayeesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateClient">
      <wsdl:input message="tns:updateClient" name="updateClient"></wsdl:input>
      <wsdl:output message="tns:updateClientResponse" name="updateClientResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="collectFees">
      <wsdl:input message="tns:collectFees" name="collectFees"></wsdl:input>
      <wsdl:output message="tns:collectFeesResponse" name="collectFeesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSchedules">
      <wsdl:input message="tns:getSchedules" name="getSchedules"></wsdl:input>
      <wsdl:output message="tns:getSchedulesResponse" name="getSchedulesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="searchBancBoxPayees">
      <wsdl:input message="tns:searchBancBoxPayees" name="searchBancBoxPayees"></wsdl:input>
      <wsdl:output message="tns:searchBancBoxPayeesResponse" name="searchBancBoxPayeesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateClientStatus">
      <wsdl:input message="tns:updateClientStatus" name="updateClientStatus"></wsdl:input>
      <wsdl:output message="tns:updateClientStatusResponse" name="updateClientStatusResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="cancelSchedules">
      <wsdl:input message="tns:cancelSchedules" name="cancelSchedules"></wsdl:input>
      <wsdl:output message="tns:cancelSchedulesResponse" name="cancelSchedulesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getClientLinkedExternalAccounts">
      <wsdl:input message="tns:getClientLinkedExternalAccounts" name="getClientLinkedExternalAccounts"></wsdl:input>
      <wsdl:output message="tns:getClientLinkedExternalAccountsResponse" name="getClientLinkedExternalAccountsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="linkFile">
      <wsdl:input message="tns:linkFile" name="linkFile"></wsdl:input>
      <wsdl:output message="tns:linkFileResponse" name="linkFileResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getClientAccounts">
      <wsdl:input message="tns:getClientAccounts" name="getClientAccounts"></wsdl:input>
      <wsdl:output message="tns:getClientAccountsResponse" name="getClientAccountsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="cancelClient">
      <wsdl:input message="tns:cancelClient" name="cancelClient"></wsdl:input>
      <wsdl:output message="tns:cancelClientResponse" name="cancelClientResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getClient">
      <wsdl:input message="tns:getClient" name="getClient"></wsdl:input>
      <wsdl:output message="tns:getClientResponse" name="getClientResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="verifyClient">
      <wsdl:input message="tns:verifyClient" name="verifyClient"></wsdl:input>
      <wsdl:output message="tns:verifyClientResponse" name="verifyClientResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="submitVerificationAnswers">
      <wsdl:input message="tns:submitVerificationAnswers" name="submitVerificationAnswers"></wsdl:input>
      <wsdl:output message="tns:submitVerificationAnswersResponse" name="submitVerificationAnswersResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createMerchant">
      <wsdl:input message="tns:createMerchantRequest" name="createMerchantRequest"></wsdl:input>
      <wsdl:output message="tns:createMerchantResponse" name="createMerchantResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getMerchant">
      <wsdl:input message="tns:getMerchantRequest" name="getMerchantRequest"></wsdl:input>
      <wsdl:output message="tns:getMerchantResponse" name="getMerchantResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberAccounts">
      <wsdl:input message="tns:getSubscriberAccountsRequest" name="getSubscriberAccountsRequest"></wsdl:input>
      <wsdl:output message="tns:getSubscriberAccountsResponse" name="getSubscriberAccountsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateMerchant">
      <wsdl:input message="tns:updateMerchantRequest" name="updateMerchantRequest"></wsdl:input>
      <wsdl:output message="tns:updateMerchantResponse" name="updateMerchantResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="returnFund">
      <wsdl:input message="tns:returnFund" name="returnFund"></wsdl:input>
      <wsdl:output message="tns:returnFundResponse" name="returnFundResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateMerchantStatus">
      <wsdl:input message="tns:updateMerchantStatusRequest" name="updateMerchantStatusRequest"></wsdl:input>
      <wsdl:output message="tns:updateMerchantStatusResponse" name="updateMerchantStatusResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateSchedule">
      <wsdl:input message="tns:updateScheduleRequest" name="updateScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:updateScheduleResponse" name="updateScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="verifyClientManually">
      <wsdl:input message="tns:verifyClientManually" name="verifyClientManually"></wsdl:input>
      <wsdl:output message="tns:verifyClientManuallyResponse" name="verifyClientManuallyResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="searchMerchants">
      <wsdl:input message="tns:searchMerchantsRequest" name="searchMerchantsRequest"></wsdl:input>
      <wsdl:output message="tns:searchMerchantsResponse" name="searchMerchantsResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="BBXServiceSoapBinding" type="tns:BBX">
    <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="collectFunds">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="collectFunds">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="collectFundsResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createClient">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="createClient">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="createClientResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteLinkedExternalAccount">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="deleteLinkedExternalAccount">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="deleteLinkedExternalAccountResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="searchClients">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="searchClients">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="searchClientsResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteLinkedPayee">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="deleteLinkedPayee">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="deleteLinkedPayeeResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="closeAccount">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="closeAccount">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="closeAccountResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateLinkedPayee">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="updateLinkedPayee">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="updateLinkedPayeeResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="transferFunds">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="transferFunds">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="transferFundsResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="linkExternalAccount">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="linkExternalAccount">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="linkExternalAccountResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="openAccount">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="openAccount">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="openAccountResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendFunds">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="sendFunds">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="sendFundsResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountActivity">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="getAccountActivity">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAccountActivityResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateAccount">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="updateAccount">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="updateAccountResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateLinkedExternalAccount">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="updateLinkedExternalAccount">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="updateLinkedExternalAccountResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getClientLinkedPayees">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="getClientLinkedPayees">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="getClientLinkedPayeesResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="linkPayee">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="linkPayee">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="linkPayeeResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateClient">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="updateClient">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="updateClientResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="collectFees">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="collectFees">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="collectFeesResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSchedules">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="getSchedules">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSchedulesResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="searchBancBoxPayees">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="searchBancBoxPayees">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="searchBancBoxPayeesResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateClientStatus">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="updateClientStatus">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="updateClientStatusResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="cancelSchedules">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="cancelSchedules">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="cancelSchedulesResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getClientLinkedExternalAccounts">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="getClientLinkedExternalAccounts">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="getClientLinkedExternalAccountsResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="linkFile">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="linkFile">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="linkFileResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getClientAccounts">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="getClientAccounts">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="getClientAccountsResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="cancelClient">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="cancelClient">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="cancelClientResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getClient">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="getClient">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="getClientResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="verifyClient">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="verifyClient">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="verifyClientResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="submitVerificationAnswers">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="submitVerificationAnswers">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="submitVerificationAnswersResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="returnFund">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="returnFund">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="returnFundResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateMerchantStatus">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="updateMerchantStatusRequest">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="updateMerchantStatusResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createMerchant">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="createMerchantRequest">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="createMerchantResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getMerchant">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="getMerchantRequest">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="getMerchantResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberAccounts">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="getSubscriberAccountsRequest">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSubscriberAccountsResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateMerchant">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="updateMerchantRequest">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="updateMerchantResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateSchedule">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="updateScheduleRequest">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="updateScheduleResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="verifyClientManually">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="verifyClientManually">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="verifyClientManuallyResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="searchMerchants">
      <soap:operation soapAction="" style="rpc"/>
      <wsdl:input name="searchMerchantsRequest">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:input>
      <wsdl:output name="searchMerchantsResponse">
        <soap:body namespace="schema.bancbox.com" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="BBXService">
    <wsdl:port binding="tns:BBXServiceSoapBinding" name="BBXPort">
      <soap:address location="https://regression-api.bancbox.com/v3/BBXPort"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="cancelClient" bindingOperationName="cancelClient" type="Request-Response" outputName="cancelClientResponse" inputName="cancelClient" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="fbef374c-a2c8-42cf-a211-7bc0108d976e"><con:settings/><con:call name="Request 1" id="2f57d807-b05f-4fc0-a266-6d70491e9ad1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:cancelClient>
         <cancelClientRequest>
           
            <subscriberId>200300</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>164534</bancBoxId>
               <!--Optional:-->
               
            </clientId>
            <!--Optional:-->
            <comment>cancel</comment>
         </cancelClientRequest>
      </sch:cancelClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/cancelClient"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 2" id="4962aba5-cf54-40c4-b361-6700e59e2fc9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:cancelClient>
         <cancelClientRequest>
            <subscriberId>200300</subscriberId>
            <clientId>
          
               <!--Optional:-->
               <bancBoxId>165976</bancBoxId>
               <!--Optional:-->
                 </clientId>
            <!--Optional:-->

         </cancelClientRequest>
      </sch:cancelClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/cancelClient"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="cancelSchedules" bindingOperationName="cancelSchedules" type="Request-Response" outputName="cancelSchedulesResponse" inputName="cancelSchedules" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="14f7a5cb-0e32-48fe-aafd-cae5f35bc787"><con:settings/><con:call name="Request 1" id="56155afe-352e-4093-92fa-ff5ead844a72"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:cancelSchedules>
         <cancelSchedulesRequest>
            <subscriberId>?</subscriberId>
            <!--1 or more repetitions:-->
            <scheduleIds>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </scheduleIds>
         </cancelSchedulesRequest>
      </sch:cancelSchedules>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/cancelSchedules"/><con:wsrmConfig version="1.2"/></con:call><con:call name="copyForAutomation" id="28a0be02-7b99-4423-92bb-7875bab1d96b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:cancelSchedules>
         <cancelSchedulesRequest>
            <subscriberId>?</subscriberId>
            <!--1 or more repetitions:-->
            <scheduleIds>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </scheduleIds>
         </cancelSchedulesRequest>
      </sch:cancelSchedules>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/cancelSchedules"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="closeAccount" bindingOperationName="closeAccount" type="Request-Response" outputName="closeAccountResponse" inputName="closeAccount" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="d2efdf9f-0533-4016-9a04-9fc80c863eea"><con:settings/><con:call name="Request 1" id="9ed4ad02-d468-4afd-af30-9f3347fb1a09"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:closeAccount>
         <closeAccountRequest>
            <subscriberId>200300</subscriberId>
            <accountId>
               <!--Optional:-->
               <!--Optional:-->
               <subscriberReferenceId>ref01</subscriberReferenceId>
            </accountId>
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            </closeAccountRequest>
      </sch:closeAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/closeAccount"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="collectFees" bindingOperationName="collectFees" type="Request-Response" outputName="collectFeesResponse" inputName="collectFees" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="ca65180e-b757-48ed-815a-b2e734bcb528"><con:settings/><con:call name="Request 1" id="6c849238-1ffb-464a-b9b4-9dfa4cc9bc2f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>RICHA</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:collectFees>
         <collectFeesRequest>
            <subscriberId>200255</subscriberId>
            <account>
               <!--Optional:-->
               <bancBoxId>530255100001</bancBoxId>
               <!--Optional:-->
          <!--     <subscriberReferenceId>?</subscriberReferenceId> -->
            </account>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
             <!--  <referenceId>?</referenceId>    -->
               <amount>200</amount>
               <!--Optional:-->
             <!--      <memo>?</memo> -->
               <!--Optional:-->
               <!--     <scheduled>
                  <scheduleDate>?</scheduleDate>
               </scheduled>  -->    
            </items>
         </collectFeesRequest>
      </sch:collectFees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFees"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 2" id="177adc31-4e04-4d04-825d-90388f854529"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:collectFees>
         <collectFeesRequest>
            <subscriberId>?</subscriberId>
            <account>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </account>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <referenceId>?</referenceId>
               <amount>?</amount>
               <!--Optional:-->
               <memo>?</memo>
               <!--Optional:-->
               <scheduled>
                  <scheduleDate>?</scheduleDate>
               </scheduled>
            </items>
         </collectFeesRequest>
      </sch:collectFees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFees"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="collectFunds" bindingOperationName="collectFunds" type="Request-Response" outputName="collectFundsResponse" inputName="collectFunds" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="9c539b3b-306f-4510-b2c1-c44b9e929e64"><con:settings/><con:call name="ACH" id="56587ee2-3cde-41e5-b040-94d28679a0df"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
  <soapenv:Header>
     <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
           <wsse:Username>PSP@bancbox.com</wsse:Username>
           <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>200134</subscriberId>
           
            <method>
               <!--You have a CHOICE of the next 3 items at this level-->
               <ach/>
            </method>
            <source>
               <!--You have a CHOICE of the next 3 items at this level-->
               <newExternalAccount>
                  <account>
                     <!--You have a CHOICE of the next 2 items at this level-->
                     <bankAccount>
                        <routingNumber>051000017</routingNumber>
               <accountNumber>8878787879897789</accountNumber>
               <holderName>ANSHUL</holderName>
               <bankAccountType>SAVING</bankAccountType>
                     </bankAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
            <account>
               <bancBoxId>530134100007</bancBoxId>
               </account>
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <amount>11.12</amount>
               <!--Optional:-->
               <memo>ACH123</memo>
            </items>
         
            
          
            
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="cc" id="fe9b3afb-b3f1-44b4-8c70-53ef0edf4ce8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>RICHA</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>200255</subscriberId>
             <merchantId>899</merchantId>
            <method>
               <!--You have a CHOICE of the next 3 items at this level-->
              
               <creditcard/>
            </method>
            <source>
               <!--You have a CHOICE of the next 3 items at this level-->
              
               <newExternalAccount>
                  <account>
                     <!--You have a CHOICE of the next 2 items at this level-->
                    <creditCardAccount>
                        <cardNotPresent>
                           <!--You have a CHOICE of the next 2 items at this level-->
                          
                           <creditCardDetails>
                              <number>4556863984700451</number>
                              <expiryDate>12/14</expiryDate>
                              <type>VISA</type>
                              <name>deepika</name>
                              <cvv>777</cvv>
                              <address>
                                 <line1>567 crli</line1>
                                 
                                 <city>ATLANTA</city>
                                 <state>GA</state>
                                 <zipcode>97865</zipcode>
                                 <!--Optional:-->
                                 <country>US</country>
                              </address>
                              
                           </creditCardDetails>
                        </cardNotPresent>
                     </creditCardAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account>
                  <!--Optional:-->
                  <bancBoxId>530255100001</bancBoxId>
                
               </account>
               
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
              
               <amount>66</amount>
              <scheduled>
                  <scheduleDate>2013-12-12</scheduleDate>
               </scheduled>
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 3" id="5a29e6f6-7fcb-488c-bc85-350a69daaaa1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            <!--Optional:-->
            <merchantId>856</merchantId>
            <method>
               <!--You have a CHOICE of the next 3 items at this level-->
               <creditcard/>
            </method>
            <source>
               <!--You have a CHOICE of the next 3 items at this level-->
               <linkedExternalAccountId>
                  <!--Optional:-->
                  
                  <!--Optional:-->
                  <subscriberReferenceId>1112</subscriberReferenceId>
               </linkedExternalAccountId>
               </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account>
                  <!--Optional:-->
                  <bancBoxId>540300100001</bancBoxId>
                  <!--Optional:-->
                  </account>
               </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <amount>1</amount>
               <!--Optional:-->
               <memo>testUser</memo>
               <!--Optional:-->
               </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 4" id="91885ab6-3f69-4d60-adc5-6e95b2007dd9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>${openAccount#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:openAccount[1]/openAccountRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <merchantId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/merchantId[1]}</merchantId>
              <method>
               <!--You have a CHOICE of the next 3 items at this level-->
               <creditcard/>
            </method>
            <source>
               <!--You have a CHOICE of the next 3 items at this level-->
              
               <newExternalAccount><account><!--You have a CHOICE of the next 2 items at this level-->
                    
                     <creditCardAccount><!--You have a CHOICE of the next 2 items at this level-->
                        
                        <cardNotPresent><!--You have a CHOICE of the next 2 items at this level-->
                           
                           <creditCardDetails>
                              <number>5205277388152676</number>
                              <expiryDate>01/19</expiryDate>
                              <type>VISA</type>
                              <name>John Smith</name>
                              <cvv>349</cvv>
                              <address>
                                 <line1>2234</line1>
                                 <!--Optional:-->
                                 <line2>Peach Tree</line2>
                                 <city>ATLANTA</city>
                                 <state>GA</state>
                                 <zipcode>54321</zipcode>
                                 <!--Optional:-->
                                 
                              </address>
                              <!--Optional:-->
                            
                           </creditCardDetails>
                        </cardNotPresent>
                     </creditCardAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account><!--Optional:-->
                  <bancBoxId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/bancBoxId[1]}</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/subscriberReferenceId[1]}</subscriberReferenceId>
               </account>
              
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               
               <amount>1</amount>
               <!--Optional:-->
               <memo>memo</memo>
               <!--Optional:-->
              
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 5" id="d8505913-9bb5-4b3b-8f5e-4130c32af9c0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>${openAccount#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:openAccount[1]/openAccountRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <merchantId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/merchantId[1]}</merchantId>
              <method>
               <!--You have a CHOICE of the next 3 items at this level-->
               <creditcard/>
            </method>
            <source>
               <!--You have a CHOICE of the next 3 items at this level-->
              
               <newExternalAccount><account><!--You have a CHOICE of the next 2 items at this level-->
                    
                     <creditCardAccount><!--You have a CHOICE of the next 2 items at this level-->
                        
                        <cardNotPresent><!--You have a CHOICE of the next 2 items at this level-->
                           
                           <creditCardDetails><number/>
                              <expiryDate>01/19</expiryDate>
                              <type>VISA</type>
                              <name>John Smith</name>
                              <cvv>349</cvv>
                              <address>
                                 <line1>2234</line1>
                                 <!--Optional:-->
                                 <line2>Peach Tree</line2>
                                 <city>ATLANTA</city>
                                 <state>GA</state>
                                 <zipcode>54321</zipcode>
                                 <!--Optional:-->
                                 
                              </address>
                              <!--Optional:-->
                            
                           </creditCardDetails>
                        </cardNotPresent>
                     </creditCardAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account><!--Optional:-->
                  <bancBoxId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/bancBoxId[1]}</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/subscriberReferenceId[1]}</subscriberReferenceId>
               </account>
              
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               
               <amount>1</amount>
               <!--Optional:-->
               <memo>memo</memo>
               <!--Optional:-->
               <scheduled>
                  <scheduleDate/>
               </scheduled>
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 6" id="a9e4b69c-6f1c-423b-a828-c0cf8896bd05"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            
              <merchantId>905</merchantId>
              <method>
               <!--You have a CHOICE of the next 3 items at this level-->
               <creditcard/>
            </method>
            <source>
               <!--You have a CHOICE of the next 3 items at this level-->
              
               <newExternalAccount><account><!--You have a CHOICE of the next 2 items at this level-->
                    
                     <creditCardAccount><!--You have a CHOICE of the next 2 items at this level-->
                        
                        <cardNotPresent><!--You have a CHOICE of the next 2 items at this level-->
                           
                           <creditCardDetails>
                              <number>5205277388152676</number>
                              <expiryDate>01/19</expiryDate>
                              <type>MASTERCARD</type>
                              <name>John Smith</name>
                              <cvv>349</cvv>
                              <address>
                                 <line1>2234</line1>
                                 <!--Optional:-->
                                 <line2>Peach Tree</line2>
                                 <city>ATLANTA</city>
                                 <state>GA</state>
                                 <zipcode>54321</zipcode>
                                 <!--Optional:-->
                                 
                              </address>
                              <!--Optional:-->
                            
                           </creditCardDetails>
                        </cardNotPresent>
                     </creditCardAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account><!--Optional:-->
                  <bancBoxId>540300100100</bancBoxId>
                  <!--Optional:-->
                    </account>
              
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               
               <amount>1</amount>
               <!--Optional:-->
               <memo>memo</memo>
               <!--Optional:-->
              
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFunds"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="createClient" bindingOperationName="createClient" type="Request-Response" outputName="createClientResponse" inputName="createClient" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="02b4e07a-288c-4dcf-804e-57df3bcc62b0"><con:settings/><con:call name="Request 1" id="c32b8ee9-e33d-4b07-b1c8-65f479f27c3c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:createClient>
         <createClientRequest>
            <subscriberId/>
            <!--Optional:-->
            <referenceId>?</referenceId>
            <!--Optional:-->
            
            <!--Optional:-->
            
            <!--Optional:-->
            <middleInitial>?</middleInitial>
            <!--Optional:-->
            <ssn>?</ssn>
            <!--Optional:-->
            <dob>?</dob>
            <!--Optional:-->
            <address>
               <!--Optional:-->
               <line1>?</line1>
               <!--Optional:-->
               <line2>?</line2>
               <!--Optional:-->
               <city>?</city>
               <!--Optional:-->
               <state>?</state>
               <!--Optional:-->
               <zipcode>?</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>?</homePhone>
            <!--Optional:-->
            <mobilePhone>?</mobilePhone>
            <!--Optional:-->
            <workPhone>?</workPhone>
            <!--Optional:-->
            <email>?</email>
            <!--Optional:-->
            <username>?</username>
            <!--Optional:-->
            <merchantId>?</merchantId>
         </createClientRequest>
      </sch:createClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createClient"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 2" id="42ead156-56d0-480f-9a33-49cd53371afa"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createClient>
         <createClientRequest>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            <!--Optional:-->
            <firstName>JOHN h</firstName>
            <!--Optional:-->
            <lastName>SMITH</lastName>
            <!--Optional:-->
            <!--Optional:-->
            <ssn>112-22-3333</ssn>
            <!--Optional:-->
            <dob>1975-02-28</dob>
            <!--Optional:-->
            <address>
               <!--Optional:-->
               <line1>222333</line1>
               <!--Optional:-->
               <line2>Peach Place Tree</line2>
               <!--Optional:-->
               <city>Atla n1ta</city>
               <!--Optional:-->
               <state>GA</state>
               <!--Optional:-->
               <zipcode>30318</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>1234567890</homePhone>
            <!--Optional:-->
            <mobilePhone>1234567890</mobilePhone>
            <!--Optional:-->
            <workPhone>3606997616</workPhone>
            <!--Optional:-->
            <email>mehak+8899@bancbox.com</email>
            <!--Optional:-->
            <!--Optional:-->
            </createClientRequest>
      </sch:createClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createClient"/><con:wsrmConfig version="1.2"/></con:call><con:call name="date" id="b5bf6032-1f71-443c-922e-832beb6d0752"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createClient>
         <createClientRequest>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <firstName>john</firstName>
            <!--Optional:-->
            <lastName>smith</lastName>
            <middleInitial>m</middleInitial>
            <!--Optional:-->
            <!--Optional:-->
            <ssn>112-22-3333</ssn>
            <!--Optional:-->
            <dob>2015-02-14</dob>
            <!--Optional:-->
            <address>
               <!--Optional:-->
               <line1>222333</line1>
               <!--Optional:-->
               <line2>Peach Place Tree</line2>
               <!--Optional:-->
               <city>Atlanta</city>
               <!--Optional:-->
               <state>GA</state>
               <!--Optional:-->
               <zipcode>30318</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>1234567890</homePhone>
            <!--Optional:-->
            <mobilePhone>1234567890</mobilePhone>
            <!--Optional:-->
            <workPhone>3606997616</workPhone>
            <!--Optional:-->
            <email>mehak+8899@bancbox.com</email>
            <!--Optional:-->
            
            <!--Optional:-->
            
         </createClientRequest>
      </sch:createClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createClient"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="createMerchant" bindingOperationName="createMerchant" type="Request-Response" outputName="createMerchantResponse" inputName="createMerchantRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="5e48a255-d288-4443-b4f1-241d797b0836"><con:settings/><con:call name="QA createmerchant SOAP" id="598410be-7f24-4651-a9b4-9935d3b16c12"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>Mehak</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>200222</subscriberId>
            <firstName>Testingabc</firstName>
            <lastName>ab</lastName>
            <!--Optional:-->
            <ssn>112-22-1197</ssn>
            <!--Optional:-->
            <dob>1986-03-29</dob>
            <!--Optional:-->
            <email>mehak+003@bancbox.com</email>
            <address>
               <address1>add 222334</address1>
               <!--Optional:-->
               <address2>?</address2>
               <city>Atlanta</city>
               <state>GA</state>
               <zipcode>30318</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber/>
               <accountNumber>5302551000011110</accountNumber>
               <holderName>MEHAK</holderName>
               <bankAccountType>SAVING</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>7399</merchantCategoryCode>
               <maxTransactionAmount>100000</maxTransactionAmount>
               <customerServiceNumber>6787678911</customerServiceNumber>
               <!--Optional:-->
              <amexId>2042730143</amexId>
               <!--Optional:-->
               <discoverId>123456789012345</discoverId>
               <softDescriptor>create</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>mhk</firstName>
               <lastName>verma</lastName>
               <phone>9987654390</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>400</visaAnnualSalesVolume>
            <organizationType>INDIVIDUAL_SOLE_PROPRIETORSHIP</organizationType>
            <!--Optional:-->
            <taxId>123abc4</taxId>
            <!--Optional:-->
          </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createMerchantRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Regr createmerchant SOAP" id="a4f49ee1-54a4-4be4-bc2a-b316581d92c4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>200300</subscriberId>
            <firstName>Testingabc</firstName>
            <lastName>ab</lastName>
            <!--Optional:-->
            <ssn>112-22-1197</ssn>
            <!--Optional:-->
            <dob>1986-03-29</dob>
            <!--Optional:-->
            <email>mehak+003@bancbox.com</email>
            <address>
               <address1>add 222334</address1>
               <!--Optional:-->
              
               <city>Atlanta</city>
               <state>GA</state>
               <zipcode>30318</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber></routingNumber>
               <accountNumber>5302551000011110</accountNumber>
               <holderName>MEHAK</holderName>
               <bankAccountType>SAVING</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>7399</merchantCategoryCode>
               <maxTransactionAmount>100000</maxTransactionAmount>
               <customerServiceNumber>6787678911</customerServiceNumber>
               <!--Optional:-->
             <amexId>2042730143</amexId>
               <!--Optional:-->
               <discoverId>123456789012345</discoverId>
               <!--Optional:-->
             
               <softDescriptor>create</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>mhk</firstName>
               <lastName>verma</lastName>
               <phone>9987654390</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>400</visaAnnualSalesVolume>
            <organizationType>INDIVIDUAL_SOLE_PROPRIETORSHIP</organizationType>
            <!--Optional:-->
            <taxId>123abc4</taxId>
            <!--Optional:-->
           </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createMerchantRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Reg createM 29May" id="38e99639-f19b-4d6c-bdbc-16e39ed51601"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>200300</subscriberId>
            <firstName>Testingabcd</firstName>
            <lastName>ab</lastName>
            <ssn>121-22-9221</ssn>
            <dob>1982-12-28</dob>
            <!--Optional:-->
            <email>mehak+003@bancbox.com</email>
            <address>
               <address1>add 222334</address1>
               <!--Optional:-->
               
               <city>Atlanta</city>
               <state>GA</state>
               <zipcode>30318</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber>051000017</routingNumber>
               <accountNumber>5302551000011110</accountNumber>
               <holderName>MEHAK</holderName>
               <bankAccountType>SAVING</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>7399</merchantCategoryCode>
               <maxTransactionAmount>100000</maxTransactionAmount>
               <customerServiceNumber>6787678911</customerServiceNumber>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <softDescriptor>create</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>mhk</firstName>
               <lastName>verma</lastName>
               <phone>9987654390</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>400</visaAnnualSalesVolume>
            <organizationType>INDIVIDUAL_SOLE_PROPRIETORSHIP</organizationType>
            <!--Optional:-->
            <taxId>taxId4634</taxId>
            <!--Optional:-->
            
         </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createMerchantRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Copy of createMerchant" id="9d714fbb-df59-4031-b67e-a35bbae73c1c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>200300</subscriberId>
            <firstName>Testingabc</firstName>
            <lastName>ab</lastName>
            <!--Optional:-->
            <ssn>112-21-1158</ssn>
            <!--Optional:-->
            <dob>1988-03-29</dob>
            <!--Optional:-->
            <email>mehak+003@bancbox.com</email>
            <address>
               <address1/>
               <!--Optional:-->
               
               <city>Atlanta</city>
               <state>GA</state>
               <zipcode>30318</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber>051000017</routingNumber>
               <accountNumber>5302551000011110</accountNumber>
               <holderName>MEHAK</holderName>
               <bankAccountType>SAVING</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>7399</merchantCategoryCode>
               <maxTransactionAmount>100000</maxTransactionAmount>
               <customerServiceNumber>6787678911</customerServiceNumber>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <softDescriptor>create</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>mhk</firstName>
               <lastName>verma</lastName>
               <phone>9987654390</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>400</visaAnnualSalesVolume>
            <organizationType>INDIVIDUAL_SOLE_PROPRIETORSHIP</organizationType>
            <!--Optional:-->
            <taxId>123abc4</taxId>
            <!--Optional:-->
            
         </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createMerchantRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="create29may" id="d00b6cc0-2ded-41d4-8750-cea40f29f2d4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>200300</subscriberId>
            <firstName>Testingabc</firstName>
            <lastName>ab</lastName>
            <!--Optional:-->
            <ssn>112-21-1198</ssn>
            <!--Optional:-->
            <dob>1988-03-19</dob>
            <!--Optional:-->
            <email>mehak+003@bancbox.com</email>
            <address>
               <address1>add 222336</address1>
               <!--Optional:-->
               <city>Atlanta</city>
               <state>GA</state>
               <zipcode>30318</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber>051000017</routingNumber>
               <accountNumber>5302551000011110</accountNumber>
               <holderName>MEHAK</holderName>
               <bankAccountType>SAVING</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode/>
               <maxTransactionAmount>100000</maxTransactionAmount>
               <customerServiceNumber>6787678911</customerServiceNumber>
               <!--Optional:-->
               <!--Optional:-->
               <softDescriptor>create</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>mhk</firstName>
               <lastName>verma</lastName>
               <phone>9987654390</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>400</visaAnnualSalesVolume>
            <organizationType>INDIVIDUAL_SOLE_PROPRIETORSHIP</organizationType>
            <!--Optional:-->
            <!--Optional:-->
            </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createMerchantRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="deleteLinkedExternalAccount" bindingOperationName="deleteLinkedExternalAccount" type="Request-Response" outputName="deleteLinkedExternalAccountResponse" inputName="deleteLinkedExternalAccount" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="eb0f5716-23ac-4aeb-b6c2-4c94f31a28db"><con:settings/><con:call name="Request 1" id="65662fd0-b6ae-4f6d-adfc-f1073f2c05dc"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:deleteLinkedExternalAccount>
         <deleteLinkedExternalAccountRequest>
            <subscriberId>?</subscriberId>
            <linkedExternalAccountId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </linkedExternalAccountId>
         </deleteLinkedExternalAccountRequest>
      </sch:deleteLinkedExternalAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/deleteLinkedExternalAccount"/></con:call></con:operation><con:operation isOneWay="false" action="" name="deleteLinkedPayee" bindingOperationName="deleteLinkedPayee" type="Request-Response" outputName="deleteLinkedPayeeResponse" inputName="deleteLinkedPayee" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="b41d5e78-d9b7-4d88-9d75-e224f7413109"><con:settings/><con:call name="Request 1" id="73c0610f-4f5c-43a1-9740-4a18a5f0355c"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:deleteLinkedPayee>
         <deleteLinkedPayeeRequest>
            <subscriberId>?</subscriberId>
            <linkedPayeeId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </linkedPayeeId>
         </deleteLinkedPayeeRequest>
      </sch:deleteLinkedPayee>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/deleteLinkedPayee"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAccountActivity" bindingOperationName="getAccountActivity" type="Request-Response" outputName="getAccountActivityResponse" inputName="getAccountActivity" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="f405e9e5-e405-4a81-9c5d-ee20d74f6d73"><con:settings/><con:call name="Request 1" id="e4827532-8b93-499a-8335-e1f5b17ec9c2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:getAccountActivity>
         <getAccountActivityRequest>
            <subscriberId>200300</subscriberId>
            <accountId>
               <!--Optional:-->
               <bancBoxId>540300100343</bancBoxId>
              </accountId>
            <!--Optional:-->
          
            <!--Optional:-->
            <!--method>CREDITCARD</method-->
            <!--Optional:-->
           
            <ascending>false</ascending>
            <!--Optional:-->
            <pageNo>1</pageNo>
            <!--Optional:-->
            <resultsPerPage>10</resultsPerPage>
         </getAccountActivityRequest>
      </sch:getAccountActivity>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getAccountActivity"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Copy of Request 1" id="6164d04a-a799-4afa-b3b5-1630ad977fff"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:getAccountActivity>
         <getAccountActivityRequest>
            <subscriberId>200300</subscriberId>
            <accountId>
               <!--Optional:-->
               <bancBoxId>540300100001</bancBoxId>
               <!--Optional:-->
                 </accountId>
            <!--Optional:-->
           
            <!--Optional:-->
            <method>CREDITCARD</method>
            <!--Optional:-->
            
            <ascending>false</ascending>
            <!--Optional:-->
             <!--Optional:-->
           
         </getAccountActivityRequest>
      </sch:getAccountActivity>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getAccountActivity"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getClient" bindingOperationName="getClient" type="Request-Response" outputName="getClientResponse" inputName="getClient" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="ae5d09fa-61b6-4e37-b851-636c46cd09d0"><con:settings/><con:call name="Request 1" id="ff738789-238c-427e-ad78-a7dc7e3cb99b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:getClient>
         <getClientRequest>
            <subscriberId>200300</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId></bancBoxId>
               <!--Optional:-->
              </clientId>
         </getClientRequest>
      </sch:getClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClient"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getClientAccounts" bindingOperationName="getClientAccounts" type="Request-Response" outputName="getClientAccountsResponse" inputName="getClientAccounts" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="b487d5aa-cd7f-46cc-ad5c-fc80679a782d"><con:settings/><con:call name="Request 1" id="a539c433-7551-4fc5-b09f-6d6f4f19c38e"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:getClientAccounts>
         <getClientAccountsRequest>
            <subscriberId>?</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <ascending>false</ascending>
            <!--Optional:-->
            <pageNo>?</pageNo>
            <!--Optional:-->
            <resultsPerPage>?</resultsPerPage>
         </getClientAccountsRequest>
      </sch:getClientAccounts>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClientAccounts"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getClientLinkedExternalAccounts" bindingOperationName="getClientLinkedExternalAccounts" type="Request-Response" outputName="getClientLinkedExternalAccountsResponse" inputName="getClientLinkedExternalAccounts" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="b90fee9f-c75d-4ffa-b549-45789b3859ca"><con:settings/><con:call name="Request 1" id="fcfd9303-432f-48a5-8453-7174b743ce02"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:getClientLinkedExternalAccounts>
         <getClientLinkedExternalAccountsRequest>
            <subscriberId>?</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <ascending>false</ascending>
            <!--Optional:-->
            <pageNo>?</pageNo>
            <!--Optional:-->
            <resultsPerPage>?</resultsPerPage>
         </getClientLinkedExternalAccountsRequest>
      </sch:getClientLinkedExternalAccounts>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClientLinkedExternalAccounts"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getClientLinkedPayees" bindingOperationName="getClientLinkedPayees" type="Request-Response" outputName="getClientLinkedPayeesResponse" inputName="getClientLinkedPayees" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="d81dd043-6235-4485-98ba-8ea9c2131a56"><con:settings/><con:call name="Request 1" id="ba7154a1-4ac6-4970-a266-cd301d127cb3"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:getClientLinkedPayees>
         <getClientLinkedPayeesRequest>
            <subscriberId>?</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <ascending>false</ascending>
            <!--Optional:-->
            <pageNo>?</pageNo>
            <!--Optional:-->
            <resultsPerPage>?</resultsPerPage>
         </getClientLinkedPayeesRequest>
      </sch:getClientLinkedPayees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClientLinkedPayees"/><con:wsrmConfig version="1.2"/></con:call><con:call id="0770bfa6-ca47-42d3-803d-e9d6817ddf15" name="Copy of Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:sch="schema.bancbox.com">
    <soapenv:Header>
        <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
            <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
                <wsse:Username>bwilson@bancbox.com</wsse:Username>
                <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">PPPPPP</wsse:Password>
            </wsse:UsernameToken>
        </wsse:Security>
    </soapenv:Header>
   <soapenv:Body>
      <sch:getClientLinkedPayees>
         <getClientLinkedPayeesRequest>
            <subscriberId>200070</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>158991</bancBoxId>
            </clientId>
            <!--Optional:-->
            <ascending>false</ascending>
            <!--Optional:-->
            <pageNo>1</pageNo>
            <!--Optional:-->
            <resultsPerPage>100</resultsPerPage>
         </getClientLinkedPayeesRequest>
      </sch:getClientLinkedPayees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClientLinkedPayees"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getMerchant" bindingOperationName="getMerchant" type="Request-Response" outputName="getMerchantResponse" inputName="getMerchantRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="ab754a75-9677-4ac2-8e7c-0fadd958404f"><con:settings/><con:call name="Request 1" id="92a1bdc5-777e-4f19-91bb-5d69875ae746"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getMerchant>
         <getMerchantRequest>
            <subscriberId>200300</subscriberId>
            <merchantId/>
         </getMerchantRequest>
      </sch:getMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getMerchantRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSchedules" bindingOperationName="getSchedules" type="Request-Response" outputName="getSchedulesResponse" inputName="getSchedules" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="4d405c07-3014-4d7e-b159-99152bba26a5"><con:settings/><con:call name="Request 1" id="dbe96584-9045-4e9e-aae5-931f575a17a4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:getSchedules>
         <getSchedulesRequest>
            <subscriberId/>
            <!--Optional:-->
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <accountId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </accountId>
            <!--Optional:-->
            <type>?</type>
            <!--Optional:-->
            <scheduleId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </scheduleId>
            <!--Optional:-->
            <scheduleStartDate>?</scheduleStartDate>
            <!--Optional:-->
            <scheduleEndDate>?</scheduleEndDate>
            <!--Optional:-->
            <modifiedOnStartDate>?</modifiedOnStartDate>
            <!--Optional:-->
            <modifiedOnEndDate>?</modifiedOnEndDate>
            <!--Optional:-->
            <fromAmount>?</fromAmount>
            <!--Optional:-->
            <toAmount>?</toAmount>
            <!--Optional:-->
            <method>?</method>
            <!--Optional:-->
            <status>FAILED</status>
            <!--Optional:-->
            <order>?</order>
            <!--Optional:-->
            <ascending>true</ascending>
            <!--Optional:-->
            <pageNo>?</pageNo>
            <!--Optional:-->
            <resultsPerPage>?</resultsPerPage>
         </getSchedulesRequest>
      </sch:getSchedules>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getSchedules"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSubscriberAccounts" bindingOperationName="getSubscriberAccounts" type="Request-Response" outputName="getSubscriberAccountsResponse" inputName="getSubscriberAccountsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="194f5d86-e0aa-4075-89a1-5a201a829c44"><con:settings/><con:call name="Request 1" id="d6d5865e-806a-4a1d-bbbd-4f676578dfde"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:getSubscriberAccounts>
         <getSubscriberAccountsRequest>
            <subscriberId>?</subscriberId>
         </getSubscriberAccountsRequest>
      </sch:getSubscriberAccounts>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getSubscriberAccountsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="linkExternalAccount" bindingOperationName="linkExternalAccount" type="Request-Response" outputName="linkExternalAccountResponse" inputName="linkExternalAccount" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="fb36ddef-2791-47c8-b65d-259306425247"><con:settings/><con:call name="Request 1" id="353917de-d11b-4cc4-b3a0-5004be97add4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:linkExternalAccount>
         <linkExternalAccountRequest>
            <subscriberId>?</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>?</referenceId>
            <account>
               <!--You have a CHOICE of the next 4 items at this level-->
               <bankAccount>
                  <routingNumber>?</routingNumber>
                  <accountNumber>?</accountNumber>
                  <holderName>?</holderName>
                  <bankAccountType>?</bankAccountType>
               </bankAccount>
               <cardAccount>
                  <!--You have a CHOICE of the next 3 items at this level-->
                  <creditCardAccount>
                     <!--You have a CHOICE of the next 2 items at this level-->
                     <tokenizedId>?</tokenizedId>
                     <creditCardDetails>
                        <number>?</number>
                        <expiryDate>?</expiryDate>
                        <type>?</type>
                        <name>?</name>
                        <cvv>?</cvv>
                        <address>
                           <line1>?</line1>
                           <!--Optional:-->
                           <line2>?</line2>
                           <city>?</city>
                           <state>?</state>
                           <zipcode>?</zipcode>
                           <!--Optional:-->
                           <country>?</country>
                        </address>
                        <!--Optional:-->
                        <orderSource>?</orderSource>
                     </creditCardDetails>
                  </creditCardAccount>
                  <debitCardAccount>
                     <number>?</number>
                     <type>?</type>
                     <pin>?</pin>
                  </debitCardAccount>
                  <giftCardAccount>
                     <number>?</number>
                     <pin>?</pin>
                  </giftCardAccount>
               </cardAccount>
               <paypalAccount>
                  <id>?</id>
               </paypalAccount>
               <wireAccount>
                  <bankAccountDetails>
                     <routingNumber>?</routingNumber>
                     <accountNumber>?</accountNumber>
                     <holderName>?</holderName>
                     <bankAccountType>?</bankAccountType>
                  </bankAccountDetails>
                  <address>
                     <line1>?</line1>
                     <!--Optional:-->
                     <line2>?</line2>
                     <city>?</city>
                     <state>?</state>
                     <zipcode>?</zipcode>
                  </address>
               </wireAccount>
            </account>
         </linkExternalAccountRequest>
      </sch:linkExternalAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/linkExternalAccount"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="linkFile" bindingOperationName="linkFile" type="Request-Response" outputName="linkFileResponse" inputName="linkFile" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="bbdafacc-4ec4-43d6-af1d-feb06257b77d"><con:settings/><con:call name="Request 1" id="8343e767-25a7-47f5-bb08-aa50ce4ed9fd"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:linkFile>
         <linkFileRequest>
            <subscriberId>?</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>?</referenceId>
            <file>
               <name>?</name>
               <fileClass>?</fileClass>
               <!--Optional:-->
               <url>?</url>
               <content>cid:1194993723919</content>
               <!--Optional:-->
               <comment>?</comment>
            </file>
         </linkFileRequest>
      </sch:linkFile>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/linkFile"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="linkPayee" bindingOperationName="linkPayee" type="Request-Response" outputName="linkPayeeResponse" inputName="linkPayee" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="1e065f2e-b9c5-44a6-89b9-307326f9ee69"><con:settings/><con:call name="Request 1" id="a672ac6c-8d11-472d-968c-206834a7cb3c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:linkPayee>
         <linkPayeeRequest>
            <subscriberId>?</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>?</referenceId>
            <payee>
               <payeeAccountNumber>?</payeeAccountNumber>
               <!--Optional:-->
               <memo>?</memo>
               <payee>
                  <!--You have a CHOICE of the next 5 items at this level-->
                  <ach>
                     <routingNumber>?</routingNumber>
                     <accountNumber>?</accountNumber>
                     <holderName>?</holderName>
                     <bankAccountType>?</bankAccountType>
                  </ach>
                  <paypal>
                     <id>?</id>
                  </paypal>
                  <check>
                     <name>?</name>
                     <address>
                        <line1>?</line1>
                        <!--Optional:-->
                        <line2>?</line2>
                        <city>?</city>
                        <state>?</state>
                        <zipcode>?</zipcode>
                     </address>
                  </check>
                  <bancbox>
                     <bancboxPayeeId>?</bancboxPayeeId>
                  </bancbox>
                  <wire>
                     <bankAccountDetails>
                        <routingNumber>?</routingNumber>
                        <accountNumber>?</accountNumber>
                        <holderName>?</holderName>
                        <bankAccountType>?</bankAccountType>
                     </bankAccountDetails>
                     <address>
                        <line1>?</line1>
                        <!--Optional:-->
                        <line2>?</line2>
                        <city>?</city>
                        <state>?</state>
                        <zipcode>?</zipcode>
                     </address>
                  </wire>
               </payee>
            </payee>
         </linkPayeeRequest>
      </sch:linkPayee>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/linkPayee"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="openAccount" bindingOperationName="openAccount" type="Request-Response" outputName="openAccountResponse" inputName="openAccount" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="ad68dc07-66b1-440b-9c4c-a3d43b887c0a"><con:settings/><con:call name="Request 1" id="a75a8dc1-532f-45de-8f22-9608f15804bf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:openAccount>
         <openAccountRequest>
            <subscriberId>200300</subscriberId>
            <clientId><!--Optional:-->
               <subscriberReferenceId>ref101</subscriberReferenceId>
               <!--Optional:-->
                 </clientId>
            <!--Optional:-->
            
            <!--Optional:-->
            <title>My Budget</title>
            <!--Optional:-->
            <accountType>GENERAL</accountType>
            <!--Optional:-->
            <routable>
               <!--Optional:-->
               <credits>YES</credits>
               <!--Optional:-->
               <debits>YES</debits>
            </routable>
            <!--Optional:-->
            </openAccountRequest>
      </sch:openAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/openAccount"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="returnFund" bindingOperationName="returnFund" type="Request-Response" outputName="returnFundResponse" inputName="returnFund" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="33dcfd24-3de2-4771-9650-cf533d1b241a"><con:settings/><con:call name="Request 1" id="24dd175e-fb70-4dc5-b5a2-d1c18f894a3b"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:returnFund>
         <returnFund>
            <subscriberId>?</subscriberId>
            <scheduleId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </scheduleId>
            <!--Optional:-->
            <reasonForRefund>?</reasonForRefund>
         </returnFund>
      </sch:returnFund>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/returnFund"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Copy of Request 1" id="ffcd5e54-10a7-4f5f-b4ec-04948fd42f60"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>RICHA</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:returnFund>
         <returnFund>
            <subscriberId>200255</subscriberId>
            <scheduleId>
               <!--Optional:-->
             <bancBoxId></bancBoxId> 
               <!--Optional:-->
            
            </scheduleId>
            <!--Optional:-->
       
         </returnFund>
      </sch:returnFund>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/returnFund"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="searchBancBoxPayees" bindingOperationName="searchBancBoxPayees" type="Request-Response" outputName="searchBancBoxPayeesResponse" inputName="searchBancBoxPayees" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="ddd3041c-bb8a-4ea2-9d33-92c2ae49a194"><con:settings/><con:call name="Request 1" id="2ac31a79-4a5f-4db4-a501-ac307bacd259"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:searchBancBoxPayees>
         <searchBancBoxPayeesRequest>
            <!--Optional:-->
           
            <!--Optional:-->
            <accountNumber>1234</accountNumber>
            <!--Optional:-->
          
         </searchBancBoxPayeesRequest>
      </sch:searchBancBoxPayees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/searchBancBoxPayees"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="searchClients" bindingOperationName="searchClients" type="Request-Response" outputName="searchClientsResponse" inputName="searchClients" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="38e05f5f-c094-4838-962e-ca47ed6396f6"><con:settings/><con:call name="Request 1" id="3ec2eaab-8a7b-4bff-9414-eda81cd27f1a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:searchClients>
         <searchClientRequest>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            <clientId>
               <!--Optional:-->
               <bancBoxId>165401</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>ref001</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            </searchClientRequest>
      </sch:searchClients>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/searchClients"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="sendFunds" bindingOperationName="sendFunds" type="Request-Response" outputName="sendFundsResponse" inputName="sendFunds" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="f0363b18-94d2-4d72-bac2-14031c4fe43a"><con:settings/><con:call name="Request 1" id="a47e3f6d-0ab1-4bef-b2ef-297f9fbf3d4d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:sendFunds>
         <sendFundsRequest>
            <subscriberId>200300</subscriberId>
            <method>
               <!--You have a CHOICE of the next 7 items at this level-->
               <wire/>
               </method>
            <sourceAccount>
               <!--Optional:-->
              
               <!--Optional:-->
               
            </sourceAccount>
            <destination>
               <!--You have a CHOICE of the next 6 items at this level-->
               <newExternalAccount>
                  <account>
                     <!--You have a CHOICE of the next 4 items at this level-->
                     <wireAccount>
                        <bankAccountDetails>
                           <routingNumber>051000017</routingNumber>
                           <accountNumber>0123456789</accountNumber>
                           <holderName>mikky</holderName>
                           <bankAccountType>SAVING</bankAccountType>
                        </bankAccountDetails>
                        <address>
                           <line1>123 WALL STREET</line1>
                           <!--Optional:-->
                            <city>ATLANTA</city>
                           <state>GA</state>
                           <zipcode>13411</zipcode>
                        </address>
                     </wireAccount>
                  </account>
               </newExternalAccount>
            </destination>
            <!--Optional:-->
            <!--Optional:-->
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <!--Optional:-->
               <memo>testUser</memo>
               <amount>1</amount>
               <!--Optional:-->
               </items>
         </sendFundsRequest>
      </sch:sendFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/sendFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Copy of Request 1" id="c19a0f9f-b2fd-4100-bc4a-9299be036d31"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:sendFunds>
         <sendFundsRequest>
            <subscriberId>200300</subscriberId>
            <method>
               <!--You have a CHOICE of the next 7 items at this level-->
               <check>
                  <type>STD</type>
               </check>
               </method>
            <sourceAccount>
               <!--Optional:-->
               <bancBoxId>540300100007</bancBoxId>
               <!--Optional:-->
               </sourceAccount>
            <destination>
               <!--You have a CHOICE of the next 6 items at this level-->
               <account>
                  <!--Optional:-->
                  </account>
               <linkedPayeeId>
                  <!--Optional:-->
                  <bancBoxId>?</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>?</subscriberReferenceId>
               </linkedPayeeId>
               <linkedExternalAccountId>
                  <!--Optional:-->
                  <bancBoxId>?</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>?</subscriberReferenceId>
               </linkedExternalAccountId>
               <bancBoxPayeeId>?</bancBoxPayeeId>
               <newPayee>
                  <payeeAccountNumber>2309123789</payeeAccountNumber>
                  <!--Optional:-->
                  <payee>
                     <!--You have a CHOICE of the next 4 items at this level-->
                     <ach>
                        <routingNumber>?</routingNumber>
                        <accountNumber>?</accountNumber>
                        <holderName>?</holderName>
                        <bankAccountType>?</bankAccountType>
                     </ach>
                     <paypal>
                        <id>?</id>
                     </paypal>
                     <check>
                        <name>Deepika</name>
                        <address>
                           <line1>14 ST</line1>
                           <!--Optional:-->
                           <city>ATLANTA</city>
                           <state>GA</state>
                           <zipcode>23091</zipcode>
                        </address>
                     </check>
                     <wire>
                        <bankAccountDetails>
                           <routingNumber>?</routingNumber>
                           <accountNumber>?</accountNumber>
                           <holderName>?</holderName>
                           <bankAccountType>?</bankAccountType>
                        </bankAccountDetails>
                        <address>
                           <line1>?</line1>
                           <!--Optional:-->
                           <line2>?</line2>
                           <city>?</city>
                           <state>?</state>
                           <zipcode>?</zipcode>
                        </address>
                     </wire>
                  </payee>
               </newPayee>
               <newExternalAccount>
                  <account>
                     <!--You have a CHOICE of the next 4 items at this level-->
                     <bankAccount>
                        <routingNumber>?</routingNumber>
                        <accountNumber>?</accountNumber>
                        <holderName>?</holderName>
                        <bankAccountType>?</bankAccountType>
                     </bankAccount>
                     <paypalAccount>
                        <id>?</id>
                     </paypalAccount>
                     <creditCardAccount>
                        <number>?</number>
                        <expiryDate>?</expiryDate>
                        <type>?</type>
                        <name>?</name>
                        <cvv>?</cvv>
                        <address>
                           <line1>?</line1>
                           <!--Optional:-->
                           <line2>?</line2>
                           <city>?</city>
                           <state>?</state>
                           <zipcode>?</zipcode>
                           <!--Optional:-->
                           <country>?</country>
                        </address>
                        <!--Optional:-->
                        <orderSource>?</orderSource>
                     </creditCardAccount>
                     <wireAccount>
                        <bankAccountDetails>
                           <routingNumber>?</routingNumber>
                           <accountNumber>?</accountNumber>
                           <holderName>?</holderName>
                           <bankAccountType>?</bankAccountType>
                        </bankAccountDetails>
                        <address>
                           <line1>?</line1>
                           <!--Optional:-->
                           <line2>?</line2>
                           <city>?</city>
                           <state>?</state>
                           <zipcode>?</zipcode>
                        </address>
                     </wireAccount>
                  </account>
               </newExternalAccount>
            </destination>
            <!--Optional:-->
            <!--Optional:-->
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <!--Optional:-->
               <amount>1</amount>
               <!--Optional:-->
               </items>
         </sendFundsRequest>
      </sch:sendFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/sendFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 3" id="1aafcf64-be62-4dd6-bcda-ceb531626701"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:sendFunds>
         <sendFundsRequest>
            <subscriberId>200300</subscriberId>
            <method>
               <!--You have a CHOICE of the next 7 items at this level-->
               <billpay/>
               </method>
            <sourceAccount>
               <!--Optional:-->
               </sourceAccount>
            <destination>
               <!--You have a CHOICE of the next 6 items at this level-->
               <bancBoxPayeeId>14809</bancBoxPayeeId>
               </destination>
            <!--Optional:-->
            <payeeAccountNumber>1234</payeeAccountNumber>
            <!--Optional:-->
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <!--Optional:-->
               <amount>1</amount>
               <!--Optional:-->
               </items>
         </sendFundsRequest>
      </sch:sendFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/sendFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 4" id="6b675cac-3cf5-4e6b-bb5c-7c10b8eac1c3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>Mikkyjb</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:sendFunds>
         <sendFundsRequest>
            <subscriberId>200241</subscriberId>
            <method>
               <!--You have a CHOICE of the next 7 items at this level-->
               <book/>
               </method>
            <sourceAccount>
               <!--Optional:-->
               <bancBoxId>540241100002</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId/>
            </sourceAccount>
            <destination>
               <!--You have a CHOICE of the next 6 items at this level-->
               <account>
                  <!--Optional:-->
                  <!--Optional:-->
                  <subscriberReferenceId>BLANK</subscriberReferenceId>
               </account>
               </destination>
            <!--Optional:-->
            <!--Optional:-->
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <!--Optional:-->
               <memo>testUser</memo>
               <amount>1</amount>
               <!--Optional:-->
               </items>
         </sendFundsRequest>
      </sch:sendFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/sendFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 5" id="3eb30966-6da4-4e9d-933d-523a74fe72be"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:sendFunds>
         <sendFundsRequest>
            <subscriberId>?</subscriberId>
            <method>
               <!--You have a CHOICE of the next 7 items at this level-->
               
               
               <check>
                  <type>?</type>
               </check>
               
               
               
               
            </method>
            <sourceAccount>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </sourceAccount>
            <destination>
               <!--You have a CHOICE of the next 6 items at this level-->
               
               
               
               
               <newPayee>
                  <payeeAccountNumber>?</payeeAccountNumber>
                  <!--Optional:-->
                  <memo>?</memo>
                  <payee>
                     <!--You have a CHOICE of the next 4 items at this level-->
                     
                     
                     <check>
                        <name>?</name>
                        <address>
                           <line1>?</line1>
                           <!--Optional:-->
                           <line2>?</line2>
                           <city>?</city>
                           <state>?</state>
                           <zipcode>?</zipcode>
                        </address>
                     </check>
                     
                  </payee>
               </newPayee>
               
            </destination>
            <!--Optional:-->
            <payeeAccountNumber>?</payeeAccountNumber>
            <!--Optional:-->
            <memo>?</memo>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <referenceId>?</referenceId>
               <!--Optional:-->
               <memo>?</memo>
               <amount>?</amount>
               <!--Optional:-->
               <scheduled>
                  <scheduleDate>?</scheduleDate>
               </scheduled>
            </items>
         </sendFundsRequest>
      </sch:sendFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/sendFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 6" id="70d488ef-3837-46e8-bd00-5c517d8367b3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:sendFunds>
         <sendFundsRequest>
            <subscriberId>?</subscriberId>
            <method><!--You have a CHOICE of the next 7 items at this level-->
               
               
               <check>
                  <type>?</type>
               </check>
               
               
               
               
            </method>
            <sourceAccount>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </sourceAccount>
            <destination>
               <!--You have a CHOICE of the next 6 items at this level-->
               
               
               
               
               <newPayee>
                  <payeeAccountNumber>?</payeeAccountNumber>
                  <!--Optional:-->
                  <memo>?</memo>
                  <payee>
                     <!--You have a CHOICE of the next 4 items at this level-->
                     
                     
                     <check>
                        <name>?</name>
                        <address>
                           <line1>?</line1>
                           <!--Optional:-->
                           <line2>?</line2>
                           <city>?</city>
                           <state>?</state>
                           <zipcode>?</zipcode>
                        </address>
                     </check>
                     
                  </payee>
               </newPayee>
               
            </destination>
            <!--Optional:-->
            <payeeAccountNumber>?</payeeAccountNumber>
            <!--Optional:-->
            <memo>?</memo>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <referenceId>?</referenceId>
               <!--Optional:-->
               <memo>?</memo>
               <amount>?</amount>
               <!--Optional:-->
               <scheduled>
                  <scheduleDate>?</scheduleDate>
               </scheduled>
            </items>
         </sendFundsRequest>
      </sch:sendFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/sendFunds"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="submitVerificationAnswers" bindingOperationName="submitVerificationAnswers" type="Request-Response" outputName="submitVerificationAnswersResponse" inputName="submitVerificationAnswers" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="27d4c138-399d-4fcb-9ba7-0839d2b99511"><con:settings/><con:call name="Request 1" id="eb908483-9590-49df-827b-adcdb4b0cb36"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:submitVerificationAnswers>
         <submitVerificationAnswers>
            <subscriberId>?</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <idNumber>?</idNumber>
            <!--Zero or more repetitions:-->
            <answers>
               <type>?</type>
               <answer>?</answer>
            </answers>
         </submitVerificationAnswers>
      </sch:submitVerificationAnswers>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/submitVerificationAnswers"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="transferFunds" bindingOperationName="transferFunds" type="Request-Response" outputName="transferFundsResponse" inputName="transferFunds" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="6c0c9150-02fc-4a3f-829a-7ec7fca19915"><con:settings/><con:call name="Request 1" id="904456cc-24c3-4401-90b7-bd7781ade6df"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:transferFunds>
         <transferFundsRequest>
            <subscriberId>200300</subscriberId>
            <sourceAccount>
               <!--Optional:-->
               <bancBoxId></bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </sourceAccount>
            <destinationAccount>
               <!--Optional:-->
               <bancBoxId>540300100035</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </destinationAccount>
            <!--Optional:-->
            <memo>?</memo>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <referenceId>?</referenceId>
               <!--Optional:-->
               <memo>?</memo>
               <amount>1</amount>
               <!--Optional:-->
               <scheduled>
                  <scheduleDate>?</scheduleDate>
               </scheduled>
            </items>
         </transferFundsRequest>
      </sch:transferFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/transferFunds"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 2" id="1eeda60e-ea6b-4cfb-addf-e5cd169bc10b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:transferFunds>
         <transferFundsRequest>
            <subscriberId>200300</subscriberId>
            <sourceAccount>
               <!--Optional:-->
                 </sourceAccount>
            <destinationAccount>
               <!--Optional:-->
               <bancBoxId>540300100035</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>account_open03</subscriberReferenceId>
            </destinationAccount>
            <!--Optional:-->
            <memo>?</memo>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->

               <amount>1</amount>
               <!--Optional:-->
              
            </items>
         </transferFundsRequest>
      </sch:transferFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/transferFunds"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateAccount" bindingOperationName="updateAccount" type="Request-Response" outputName="updateAccountResponse" inputName="updateAccount" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="f71f2df9-cb0c-4563-b82d-20efe439aaf4"><con:settings/><con:call name="Request 1" id="b6923475-4635-4df7-a5b5-b7e19dd00137"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateAccount>
         <updateAccountRequest>
            <subscriberId>200300</subscriberId>
            <accountId>
               <!--Optional:-->
               <bancBoxId>540300100064</bancBoxId>
               <!--Optional:-->
               </accountId>
            <!--Optional:-->
            <title>updated</title>
         </updateAccountRequest>
      </sch:updateAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateAccount"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateClient" bindingOperationName="updateClient" type="Request-Response" outputName="updateClientResponse" inputName="updateClient" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="411abbaa-aa4e-4438-8a92-484c20b4110b"><con:settings/><con:call name="Request 1" id="90490fec-4438-4a98-83bc-adfcc41a13c1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateClientStatus>
         <updateClientStatusRequest>
            <subscriberId>200300</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>161967</bancBoxId>
               <!--Optional:-->
               
            </clientId>
            <clientStatus/>
         </updateClientStatusRequest>
      </sch:updateClientStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateClient"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateClientStatus" bindingOperationName="updateClientStatus" type="Request-Response" outputName="updateClientStatusResponse" inputName="updateClientStatus" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="5e3cc312-f827-4cc7-8a53-76d305d5e3ca"><con:settings/><con:call name="Request 1" id="914407e6-b969-4213-bce3-a64134dddfd8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateClientStatus>
         <updateClientStatusRequest>
            <subscriberId>200300</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>164534</bancBoxId>
               <!--Optional:-->
               
            </clientId>
          
         </updateClientStatusRequest>
      </sch:updateClientStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateClientStatus"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateLinkedExternalAccount" bindingOperationName="updateLinkedExternalAccount" type="Request-Response" outputName="updateLinkedExternalAccountResponse" inputName="updateLinkedExternalAccount" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="12273fb8-038f-42bf-a9be-2eb05166561e"><con:settings/><con:call name="Request 1" id="2bc40355-56a5-4ae5-959d-5d08c57ec604"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateLinkedExternalAccount>
         <updateLinkedExternalAccountRequest>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            <linkedExternalAccountId>
               <!--Optional:-->
               <bancBoxId>377439</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>1112</subscriberReferenceId>
            </linkedExternalAccountId>
            <account>
               <!--You have a CHOICE of the next 4 items at this level-->
               <cardAccount>
                  <!--You have a CHOICE of the next 3 items at this level-->
                  <creditCardAccount>
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                     <address>
                        <line1>123 WALL STREET ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss</line1>
                        <!--Optional:-->
                        <!--Optional:-->
                        </address>
                     <!--Optional:-->
                     </creditCardAccount>
                  </cardAccount>
               </account>
         </updateLinkedExternalAccountRequest>
      </sch:updateLinkedExternalAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateLinkedExternalAccount"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateLinkedPayee" bindingOperationName="updateLinkedPayee" type="Request-Response" outputName="updateLinkedPayeeResponse" inputName="updateLinkedPayee" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="6b34ee2d-17d6-40c9-8e78-50cd860dcc95"><con:settings/><con:call name="Request 1" id="9b3e18e5-6159-4552-842d-5cd653560650"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:updateLinkedPayee>
         <updateLinkedPayeeRequest>
            <subscriberId>?</subscriberId>
            <linkedPayeeId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </linkedPayeeId>
            <!--Optional:-->
            <payeeAccountNumber>?</payeeAccountNumber>
            <!--Optional:-->
            <memo>?</memo>
            <payee>
               <!--You have a CHOICE of the next 5 items at this level-->
               <ach>
                  <routingNumber>?</routingNumber>
                  <accountNumber>?</accountNumber>
                  <holderName>?</holderName>
                  <bankAccountType>?</bankAccountType>
               </ach>
               <paypal>
                  <id>?</id>
               </paypal>
               <check>
                  <name>?</name>
                  <address>
                     <line1>?</line1>
                     <!--Optional:-->
                     <line2>?</line2>
                     <city>?</city>
                     <state>?</state>
                     <zipcode>?</zipcode>
                  </address>
               </check>
               <bancbox>
                  <bancboxPayeeId>?</bancboxPayeeId>
               </bancbox>
               <wire>
                  <bankAccountDetails>
                     <routingNumber>?</routingNumber>
                     <accountNumber>?</accountNumber>
                     <holderName>?</holderName>
                     <bankAccountType>?</bankAccountType>
                  </bankAccountDetails>
                  <address>
                     <line1>?</line1>
                     <!--Optional:-->
                     <line2>?</line2>
                     <city>?</city>
                     <state>?</state>
                     <zipcode>?</zipcode>
                  </address>
               </wire>
            </payee>
         </updateLinkedPayeeRequest>
      </sch:updateLinkedPayee>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateLinkedPayee"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateMerchant" bindingOperationName="updateMerchant" type="Request-Response" outputName="updateMerchantResponse" inputName="updateMerchantRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="c330194d-9548-4ea5-b338-900024f5dac6"><con:settings/><con:call name="Request 1" id="6c6651c1-478c-4372-a63d-269744e75caf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateMerchant>
         <updateMerchantRequest>
            <subscriberId>200300</subscriberId>
            <merchantId>871</merchantId>
            <!--Optional:-->
            <address>
               <address1>22337 PeachTree</address1>
               <!--Optional:-->
               <city>ATLANTA</city>
               <state>GA</state>
               <zipcode>16772</zipcode>
            </address>
            <!--Optional:-->
            <primaryContact>
               <firstName>John</firstName>
               <lastName>Smith</lastName>
               <phone>9876543212</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <!--Optional:-->
            <bankBusinessAccount>
               <routingNumber>051000017</routingNumber>
               <accountNumber>9876543212</accountNumber>
            </bankBusinessAccount>
            <!--Optional:-->
            <merchantDetails>
               <!--Optional:-->
               <maxTransactionAmount>2</maxTransactionAmount>
               <!--Optional:-->
               <customerServiceNumber>4141414141</customerServiceNumber>
               <!--Optional:-->
               <!--Optional:-->
               <discoverId>123456789876543</discoverId>
               <!--Optional:-->
               <softDescriptor>bbx</softDescriptor>
            </merchantDetails>
            <!--Optional:-->
            </updateMerchantRequest>
      </sch:updateMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateMerchantRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="updateWithoutState" id="889dbd4b-91d8-454d-b652-5d3eb08e9476"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateMerchant>
         <updateMerchantRequest>
            <subscriberId>200300</subscriberId>
            <merchantId>571</merchantId>
            <!--Optional:-->
            <address>
               <address1>22335 PeachTree</address1>
               <!--Optional:-->
               
               <city>ATLANTA</city>
               <state/>
               <zipcode>16772</zipcode>
            </address>
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            
         </updateMerchantRequest>
      </sch:updateMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateMerchantRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateMerchantStatus" bindingOperationName="updateMerchantStatus" type="Request-Response" outputName="updateMerchantStatusResponse" inputName="updateMerchantStatusRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="50d39ddc-396c-4aa3-acab-50d79b7ccedd"><con:settings/><con:call name="Request 1" id="5385bc8a-0337-4827-956c-75bb3a7dcde7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:updateMerchantStatus>
         <updateMerchantStatusRequest>
            <subscriberId>20030000</subscriberId>
            <merchantId>890</merchantId>
            <merchantStatus>INACTIVE</merchantStatus>
         </updateMerchantStatusRequest>
      </sch:updateMerchantStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateMerchantStatusRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateSchedule" bindingOperationName="updateSchedule" type="Request-Response" outputName="updateScheduleResponse" inputName="updateScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="54cc0ad9-fffb-4362-bb73-fc39956c45ed"><con:settings/><con:call name="Request 1" id="7470a44c-ab14-44e0-8db9-d422fd0c54d9"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:updateSchedule>
         <updateScheduleRequest>
            <subscriberId>?</subscriberId>
            <activity>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </activity>
            <rescheduleDate>?</rescheduleDate>
         </updateScheduleRequest>
      </sch:updateSchedule>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="verifyClient" bindingOperationName="verifyClient" type="Request-Response" outputName="verifyClientResponse" inputName="verifyClient" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="87bffbde-22d1-4a5c-9fc7-dd698a6f5cff"><con:settings/><con:call name="Request 1" id="751d9fa6-66f3-4d4c-9e38-9e8904857eed"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:verifyClient>
         <verifyClient>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
           
            <!--Optional:-->
            <generateQuestions>true</generateQuestions>
         </verifyClient>
      </sch:verifyClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/verifyClient"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Copy of Request 1" id="4b71320d-fa71-40ee-8eca-1fcea218ad2d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:verifyClient>
         <verifyClient>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            <clientId>
               <!--Optional:-->
               <bancBoxId>?</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>?</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <generateQuestions>true</generateQuestions>
         </verifyClient>
      </sch:verifyClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/verifyClient"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="verifyClientManually" bindingOperationName="verifyClientManually" type="Request-Response" outputName="verifyClientManuallyResponse" inputName="verifyClientManually" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="d51d8bca-f039-4aa5-9498-21b1515a3bfe"><con:settings/><con:call name="Request 1" id="47e2ee97-7ea5-4bb3-b2c2-0bb2b04c8678"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:verifyClientManually>
         <verifyClientManually>
            <subscriberId>200300</subscriberId>
            <clientId>
               <!--Optional:-->
              
               <!--Optional:-->
               <subscriberReferenceId></subscriberReferenceId>
            </clientId>
            <status>
               <!--Optional:-->
               <newCipStatus>REJECTED</newCipStatus>
               <!--Optional:-->
               </status>
         </verifyClientManually>
      </sch:verifyClientManually>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/verifyClientManually"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="searchMerchants" bindingOperationName="searchMerchants" type="Request-Response" outputName="searchMerchantsResponse" inputName="searchMerchantsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="21ca214e-c8a5-4982-bde7-6edef6e514b0"><con:settings/><con:call name="Request 1" id="2c15bdfb-f51b-4627-9f71-b7701b4127d0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:searchMerchants>
         <searchMerchantsRequest>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
            <ascending>false</ascending>
            <!--Optional:-->
            <pageNo>1</pageNo>
            <!--Optional:-->
            <resultsPerPage>1</resultsPerPage>
         </searchMerchantsRequest>
      </sch:searchMerchants>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/searchMerchantsRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite name="createClientAPITestSuite" id="90a05dde-19da-4aab-ac6a-59b8386e9f37"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="COREAPITestCase" searchProperties="true" id="e0fa3ebb-3c80-4ac8-abc1-211674165e4a" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="AutomationDriver-AUG-1" id="9946f9a7-7646-43a3-901b-972a0778ff86"><con:settings/><con:config><script>C</script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver-July30-1" id="d4f70509-40b6-4bfc-bb3f-76ddae4c9f37"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


log.info "******************************************************************************************************************";
log.info "***************************STARTING AUTOMATION DRIVER***********************************";
log.info "====================================================================";
log.info " ";
log.info " ";

//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet requestSchemaSheet1;
Sheet requestValuesSheet1;
Sheet responseSchemaSheet1;
Sheet responseValuesSheet1;

String APIName="";
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//***************************************************
//Variable to store TCID for the Test Case to execute
//***************************************************
String TestCaseID 
//******************************************************
//Array to separate and store cell contents based on '|'
//******************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//***********************************************************
//Counter for looping through number of steps in the scenario
//***********************************************************
int iCounter1;
def holder1;

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
String SetNo = context.expand('${#Project#SetNo}');
String TestScenarioFile=context.expand('${#Project#ScenarioFileLocation}');
String UnitTestingFlag=context.expand('${#Project#UnitTesting}');
String endPoint = context.expand('${#Project#Endpoint}');
String envSet=context.expand('${#Project#Env}');

log.info "===================== Env                                 :  "+envSet;
log.info "===================== ScenarioFileLocation   :  "+TestScenarioFile;
log.info "===================== SetNo                             :  "+SetNo;
log.info "===================== Endpoint                        :  "+endPoint;
log.info "===================== UnitTestingFlag            :  "+UnitTestingFlag;


aSet = testRunner.testCase.testSuite;
aSet.setPropertyValue('ENV',envSet);
log.info ' ';
log.info "===================== Environment SET in TestSuite Properties  : "+aSet.getPropertyValue('ENV');

String MandatoryFieldTestingFlag = "N";


	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	int noOfScenarioSheets = getSenarioSheets.size();
	log.info ' ';
	log.info "    >>>>    No of Sheets in SCENARIO FILE  :  "+noOfScenarioSheets;


int Length =  TestScenarioFile.lastIndexOf('\\');
int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
String excelName = TestScenarioFile.substring(Length+1,Length2);
String ResultFileLocation = TestScenarioFile.substring(0,Length);
log.info "	===	ResultFileLocation : "+ResultFileLocation;
log.info "	===	excelName : "+excelName;
//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "    >>>>    TIME NOW IS : "+currentTime;

//Getting location to create the TestResponseFile
String TestResultFile =  ResultFileLocation + "\\RESULTS\\"+envSet+"-"+excelName+"-RESULT-" +currentTime+".xls";
		
log.info "    >>>>    NOTE: Following Result File is getting created : ------  :  "+TestResultFile;
log.info "============================================================================================================";
log.info " ";

//Creating Response Excel File
workbook = Workbook.createWorkbook(new File(TestResultFile));


		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(int sheetCount=1;sheetCount<noOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();
		log.info " ";	
		log.info "    >>>>    Reading Sheet   : "+sheetName;
		String sheetSetNo=SenarioSheet1.getCell(1,2).getContents();
		log.info '    >>>>    Script Set No     :  '+SetNo;
		log.info '    >>>>    Sheet Set No     :  '+sheetSetNo
		if(!(sheetSetNo==SetNo))
		{
			log.info "    >>>>    NOT SET FOR EXECUTION";
			log.info "=========================================================================";
			continue;
		}
		log.info ' ';
		log.info '    >>>>    ---------------------------------START OF SCENARIO---------------------------------';
		log.info ' ';
		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);
		sheet.setColumnView(0, 14);
		sheet.setColumnView(1, 20);
		sheet.setColumnView(2, 20);
		sheet.setColumnView(3, 40);
		sheet.setColumnView(8, 15);
		sheet.setColumnView(4, 15);
		sheet.setColumnView(5, 18);
		sheet.setColumnView(6, 15);
		sheet.setColumnView(7, 15);

		sheet.mergeCells(1, 0, 8, 0);
		sheet.mergeCells(1, 1, 8, 1);
		sheet.mergeCells(1, 2, 8, 2);
			//****************************************************************
			//Creating Writable font to be used in the response sheet
			//****************************************************************
			//WritableFont normalFontforHEADER1= new WritableFont(WritableFont.CALIBRI, 11);
			WritableFont normalFontforHEADER1 = new WritableFont(WritableFont.createFont("Calibri"), 11);
			WritableFont normalFontforHEADER2= new WritableFont(WritableFont.ARIAL, 11);
			//*******************************************************
			//creating plain format to write data in excel sheet
			//*******************************************************
		     WritableCellFormat normalFormatHEADER1 = new WritableCellFormat(normalFontforHEADER1);
			normalFormatHEADER1.setBackground(jxl.format.Colour.GREY_50_PERCENT);
			normalFormatHEADER1.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.BLACK);  

			//****************************************************************
			//Creating Writable font to be used in the response sheet
			//****************************************************************
			//WritableFont normalFontforHEADER1= new WritableFont(WritableFont.TIMES, 14);
			//*******************************************************
			//creating plain format to write data in excel sheet
			//*******************************************************
		     WritableCellFormat normalFormatHEADER2 = new WritableCellFormat(normalFontforHEADER2);
			normalFormatHEADER2.setBackground(jxl.format.Colour.GREY_25_PERCENT);
			normalFormatHEADER2.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.BLACK);  

			//*******************************************************
			//creating plain format to write data in excel sheet
			//*******************************************************
		     WritableCellFormat normalFormatHEADER3 = new WritableCellFormat(normalFontforHEADER1);
			normalFormatHEADER3.setBackground(jxl.format.Colour.ICE_BLUE);
			normalFormatHEADER3.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.GREY_25_PERCENT);  
			//normalFormatHEADER3.setWrap(true);
		//ICE_BLUE
		//OCEAN_BLUE 
		//PALE_BLUE 
		//PINK 
		//PERIWINKLE 
		//SKY_BLUE 
		//TAN 
		//VERY_LIGHT_YELLOW 
		//LIGHT_BLUE
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents(),normalFormatHEADER2);
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents(),normalFormatHEADER3); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents(),normalFormatHEADER2); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents(),normalFormatHEADER3); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents(),normalFormatHEADER2); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents(),normalFormatHEADER3); 
					sheet.addCell(setNoValue);
					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents(),normalFormatHEADER2); 
					sheet.addCell(stepNoLabel);
					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents(),normalFormatHEADER2); 
					sheet.addCell(descriptionLabel);
					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents(),normalFormatHEADER2); 
					sheet.addCell(expectedLabel);
					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents(),normalFormatHEADER2); 
					sheet.addCell(apiNameLabel);
					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents(),normalFormatHEADER2); 
					sheet.addCell(tcidLabel);
					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents(),normalFormatHEADER2); 
					sheet.addCell(referencesLabel);
					Label curlLabel = new Label(6, 3, "REQUEST",normalFormatHEADER2); 
					sheet.addCell(curlLabel);
					Label responseLabel = new Label(7, 3, "RESPONSE",normalFormatHEADER2); 
					sheet.addCell(responseLabel);
					Label timeTakenLabel = new Label(8, 3, "TIME [ms]",normalFormatHEADER2); 
					sheet.addCell(timeTakenLabel);

		//****************************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();


		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];

			//********************************************************
			//Starting loop for number of steps in the scenario
			//********************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{

		/*************** Clearing TC Properties by running script ***************/
		log.info "    >>>>    Removing Properties at Test Case level";
		testRunner.runTestStepByName("ClearTCProperties");
		/************************************************************************/

				
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatGREEN = new WritableCellFormat(normalFont);
			normalFormatGREEN.setBackground(jxl.format.Colour.BRIGHT_GREEN);
			normalFormatGREEN.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.WHITE);  
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatRED = new WritableCellFormat(normalFont2);
			normalFormatRED.setBackground(jxl.format.Colour.RED);
			normalFormatRED.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.WHITE);  
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont3 = new WritableFont(WritableFont.ARIAL, 12);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatYELLOW = new WritableCellFormat(normalFont3);
			normalFormatYELLOW.setBackground(jxl.format.Colour.YELLOW);
			normalFormatYELLOW.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.GREEN);  
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontOrange = new WritableFont(WritableFont.ARIAL, 14);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatORANGE = new WritableCellFormat(normalFontOrange);
			normalFormatORANGE.setBackground(jxl.format.Colour.GOLD);
			normalFormatORANGE.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.WHITE);  
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontTurquoise = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatTurquoise = new WritableCellFormat(normalFontTurquoise);
			normalFormatTurquoise.setBackground(jxl.format.Colour.TURQUOISE);

			//****************************************************************
			//Creating Writable font to be used in the response sheet
			//****************************************************************
			WritableFont normalFontforJOBS= new WritableFont(WritableFont.ARIAL);
			//*******************************************************
			//creating plain format to write data in excel sheet
			//*******************************************************
		     WritableCellFormat normalFormatCORAL = new WritableCellFormat(normalFontforJOBS);
			normalFormatCORAL.setBackground(jxl.format.Colour.CORAL);

			//****************************************************************
			//Creating Writable font to be used in the response sheet
			//****************************************************************
			WritableFont normalFontforDESCRIPTIONTEXT= new WritableFont(WritableFont.ARIAL);
			//normalFontforDESCRIPTIONTEXT.setBoldStyle(WritableFont.BOLD);
			//*******************************************************
			//creating plain format to write data in excel sheet
			//*******************************************************
		     WritableCellFormat normalFormatDESCRIPTION = new WritableCellFormat(normalFontforDESCRIPTIONTEXT);
			normalFormatDESCRIPTION.setBackground(jxl.format.Colour.IVORY);
			normalFormatDESCRIPTION.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.BLACK);  
			//*******************************************************
			//creating plain format to write data in excel sheet
			//*******************************************************
		     WritableCellFormat normalFormatReqResponse = new WritableCellFormat(normalFontforDESCRIPTIONTEXT);
			normalFormatReqResponse.setBackground(jxl.format.Colour.ICE_BLUE);
			normalFormatReqResponse.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.BLACK);  

			//****************************************************************
			//Creating Writable font to be used in the response sheet
			//****************************************************************
			WritableFont normalFontforFailedAssertions= new WritableFont(WritableFont.ARIAL);
			normalFontforFailedAssertions.setBoldStyle(WritableFont.BOLD);
			//*******************************************************
			//creating plain format to write data in excel sheet
			//*******************************************************
		     WritableCellFormat normalFormatFailedAssertions = new WritableCellFormat(normalFontforFailedAssertions);
			normalFormatFailedAssertions.setBackground(jxl.format.Colour.CORAL);


			iCountFlag=0;
			//log.info "		>>>>		: Reading Row No :"+(iCounter1+1);
			log.info " ";
			log.info "==========================================================================";
			log.info "    >>>>    ************************************************************* Starting Step "+(iCounter1-3)+"  :  [ "+SenarioSheet1.getCell(3,iCounter1).getContents()+" - "+SenarioSheet1.getCell(4,iCounter1).getContents()+" ] ";
			
			//*******************************************************
			//condition to check if the scenario step is empty
			//*******************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}

			//Adding Description and ExpectedResult to result file
			Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents(),normalFormatDESCRIPTION); 
			sheet.addCell(stepNoValue);
			Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents(),normalFormatDESCRIPTION); 
			sheet.addCell(descriptionValue);
			Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents(),normalFormatDESCRIPTION); 
			sheet.addCell(expectedValue);
			Label stepNameValue = new Label(3, iCounter1, SenarioSheet1.getCell(3, iCounter1).getContents(),normalFormatORANGE); 
			sheet.addCell(stepNameValue);
			Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents(),normalFormatDESCRIPTION); 
			sheet.addCell(referencesValue);


			//******************************************
			//Checking if step refers to Run a Job
			//******************************************
			//Checking if the cell where env for runnning job is provided is empty. Script will then take up the job env from TC prop
			//START Condition to check if the step refers to Run a JOB
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('job')))
			{
				log.info " ";
				log.info " ";
			def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			
			 if(SenarioSheet1.getCell(5,iCounter1).getContents().isEmpty())
				{
				jobEnv =  testRunner.testCase.testSuite.getPropertyValue("ENV");
				log.info "    >>>>    ======================JOBS ARE SCHEDULED FOR -"+jobEnv+"- Environment=================";
				}
			
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('outbound')))
			{
			 log.info "		>>>>	 ====	For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running OUTBOUND job";
			 //******************************
			 //Running Four Oaks Outbound job
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-FourOakdOutbound"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			//String jobTimeTaken=tStep.getTimeTaken();
			//String jobTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		FourOaksOutBoundJob Executed";
			Label labeljobOutbound = new Label(3, iCounter1,"job-FourOaksOutBound" ,normalFormatCORAL); 
			sheet.addCell(labeljobOutbound);
			Label labeljobOutboundResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobOutboundResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('draft')))
			{
			 log.info "		>>>>		For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running REALIZE DRAFT job";
			 //******************************
			 //Running Four Oaks Outbound job
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-RealizeDraft"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		RealizeDraft Executed";
			Label labeljobRealizeDraft = new Label(3, iCounter1,"job-RealizeDraft" ,normalFormatCORAL); 
			sheet.addCell(labeljobRealizeDraft);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			 if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('fundsrealization')))
			{
			 log.info "		>>>>		For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running FUNDS REALIZATION  job";
			 //******************************
			 //Running Funds Realization
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-FundsRealization"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Funds Realization Job Executed";
			Label labeljobRealizeDraft = new Label(3, iCounter1,"job-Funds Realization" ,normalFormatCORAL); 
			sheet.addCell(labeljobRealizeDraft);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('push')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running Push Notification job";
			 //************************************
			 //Running Push Notification job
			 //***********************************
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-PushNotification"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		PushNotification Executed";
			Label labeljobPushNoti = new Label(3, iCounter1,"job PushNotification" ,normalFormatCORAL); 
			sheet.addCell(labeljobPushNoti);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('evergreenob')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running  EvergreenOBProcessor job";
			 //****************************************
			 //Running Evergreen OB Processor
			 //****************************************
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-EvergreenOBProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-EvergreenOBProcessor Executed";
			Label labeljobEvergreenOB = new Label(3, iCounter1,"job EvergreenOBProcessor" ,normalFormatCORAL); 
			sheet.addCell(labeljobEvergreenOB);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('evergreenib')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running EvergreenIBProcessor  job";
			 //******************************
			 //Running EvergreenIBProcessor
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-EvergreenIBProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-EvergreenIBProcessor Executed";
			Label labeljobEvergreenIB = new Label(3, iCounter1,"job EvergreenIBProcessor" ,normalFormatCORAL); 
			sheet.addCell(labeljobEvergreenIB);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('wiretrans')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running WireTransProcessor job";
			 //******************************
			 //Running WireTransProcessor
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-WireTransProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-WireTransProcessor Executed";
			Label labeljobWireTrans = new Label(3, iCounter1,"job WireTransProcessor" ,normalFormatCORAL); 
			sheet.addCell(labeljobWireTrans);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('orccoutbound')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running ORCCOutboundProcessor job";
			 //******************************
			 //Running ORCCOutboundProcessor
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-ORCCOutboundProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-ORCCOutboundProcessor Executed";
			Label labeljobOrccOutbound = new Label(3, iCounter1,"job ORCCOutboundProcessor" ,normalFormatCORAL); 
			sheet.addCell(labeljobOrccOutbound);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('rppsoutbound')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running RPPSOutboundProcessor job";
			 //******************************
			 //Running RPPSOutboundProcessor
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-RPPSOutboundProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-RPPSOutboundProcessor Executed";
			Label labeljobRppsOutbound = new Label(3, iCounter1,"job RPPSOutboundProcessor" ,normalFormatCORAL); 
			sheet.addCell(labeljobRppsOutbound);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			}
			//******************************************
			//END Checking if step refers to Run a Job
			//******************************************
			


			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;
			//mapName = "map"+mapNo;
			HashMap mapName= [:];
			//log.info "	mapName : "+mapName;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	APIName=RequestName;
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents().toString();
		 	log.info " ";
		 	log.info " ";
		 	log.info "		>>>>		"+RequestName+" | "+TestCaseID;
			


				//Getting the location of TestData file for the API Request
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				//String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				//Test Data files for the API Request must be available in a folder named 'TestDataFiles' in the same location where scenario file is placed.
				String TestDataFile = TestDataFileLocation + "\\TestData\\"+RequestName+".xls";
				log.info " ";
				log.info "		>>>>		Referrring TestDataFile  :"+TestDataFile;



 TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();


def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {


		if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					log.info "------======---- Not set for EXECUTION : "+TestDataValues1.getCell(0,iCountTestCase).getContents();
					continue;
				}

flagCount=9;

List<String> xmlTagToSetBlank = new ArrayList<String>();
xmlTagToSetBlank.clear();

List<String> xmlTagToRemove = new ArrayList<String>();
xmlTagToRemove.clear();

	 //int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 	          if(!(testCaseID==TestCaseID))
				{
					log.info ' ';
					log.info "    >>>>    NOT SET for EXECUTION  :  "+testCaseID;
					continue;
				}

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);
	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
    /*****************************************************************************/

	log.info "    >>>>    SETTING VALUES IN TEST CASE PROPERTIES";
	log.info "    >>>>    ======================================";
	 //testRunner.runTestStepByName(APIName);
		 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();
			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 testRunner.testCase.setPropertyValue(key,value);
		}



/////////////////////////////////////////////////////////-ADDING REFERENCES-//////////////////////////////////////////////////////



//***********************************
				//Start condition for References
				//***********************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				log.info "    >>>>    The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has REFERENCES";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];

				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;

				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;

				//******************************************************
				//get the parameter value to fetch from response
				//******************************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				mapToRefer = Integer.parseInt(stepToRefer);

				if(mapToRefer==null)
				{
					log.info "		>>>>		============ Map for Step No - "+stepToRefer+" cotains "+mapToRefer;
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
			
				if(!((globalMap.get(mapToRefer)).toString().contains(paramValueToFetch)))
				{
					log.info "		>>>>	================= MAP DOES NOT CONTAIN THE PARAM ====================";
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
					break;
				}
			
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch);
				log.info "				*********  ReferringValue = "+ReferringValue

				
				/*****commenting out this section where the referred value is put in the node directly
					putting the same value in test case property from where it will be fetched while running request***************************************/
				/*
				def groovyUtilsForUpdatingReferences = new com.eviware.soapui.support.GroovyUtils( context ) 
				// get XmlHolder for request message def
				
				String req2Name=APIName+"#Request";
				def holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				//holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder(req2Name);
				// change parameter value using XPath
			//	log.info "		++++++  holderForRef  : "+holderForRef;
				log.info "		++++++  holderForRef.getXml() : "+holderForRef.getXml();
				paramNameToSet = "//"+paramName;
				//paramNameToSet = paramName;
				log.info "		>>>> ++ Parameter to set : "+paramNameToSet;
				holderForRef[paramNameToSet] = ReferringValue;
				//holder1[paramNameToSet] = ReferringValue;
				// write updated request back to teststep
				holderForRef.updateProperty();
				//holder1.updateProperty();
				context.requestContent = holderForRef.xml;
				//context.requestContent = holder1.xml;
				log.info "	REQUEST AFTER SETTING REF 1 = :"+context.requestContent;
				requestAfterRef=holderForRef.getXml();
				log.info "	REQUEST AFTER SETTING REF 1 = :"+requestAfterRef;
				
				log.info "		++++++  holderForRef.getXml() 2: "+holderForRef.getXml();
				/*******holder1 removed*******/
				//log.info "		++++++ REQUEST holder1.getXml() 2 9901 : "+holder1.getXml();
				
				
				
				/*
				//def holderForRef2 = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				rawReq=holderForRef.getXml();
				testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq);
				*/
				/*****END - commenting out this section where the referred value is put in the node directly
					putting the same value in test case property from where it will be fetched while running request***************************************/

				//[paramNameToSet] = ReferringValue;
				testRunner.testCase.setPropertyValue(paramName,ReferringValue);
				
				}
				}
				}

			/************END OF REFERENCES SCRIPT********************/
/////////////////////////////////////////////////////////-END ADDING REFERENCES-////////////////////////////////////////////////////


///////////////////////////////////////////////////////-FETCHING TEST CASE PROPERTIES AND POPULATING ARRAY LISTS-//////////////////////////////////////////
/****************************************************** TEST CASE PROPERTIES LOOP **********************************************************/

String[] props = new String[testRunner.testCase.getPropertyCount()];
props = testRunner.testCase.getPropertyNames();
log.info "    >>>>    TEST CASE Properties Size  :  "+props.size();
log.info ' ';

a=testRunner.testCase;

for (int iCountOfTCProp=0;iCountOfTCProp<props.size();iCountOfTCProp++)
{
String propName=props[iCountOfTCProp];
String propValue=a.getPropertyValue(props[iCountOfTCProp]);
log.info '    >>>>    '+propName+' - '+propValue;

 if(propValue.trim()=='BLANK')
 {
 	log.info '    >>>>    THIS IS BLANK PROPERTY';
 	def xmlTagToSetBlank1 = propName.replace(".","/");
	def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
	xmlTagToSetBlank.add(xmlTagToSetBlank2);
	log.info "				>>>>		xmlTagToSetBlank : "+xmlTagToSetBlank2;
 }
  if(propValue.trim()=='')
 {
 	log.info '    >>>>    THIS IS EMPTY PROPERTY';
 	def xmlTagToRemove1 = propName.replace(".","/");
	def xmlTagToRemove2 = "//"+xmlTagToRemove1;
	xmlTagToRemove.add(xmlTagToRemove2);
	log.info "				>>>>		xmlTagToRemove : "+xmlTagToRemove2;
 }
 log.info '==========================================================';
}

/*
//Condition to set xmlPath of node that is BLANK. So that it will be set to blank
				if(value=='BLANK')
				{
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToSetBlank : "+xmlTagToSetBlank2;
				}

				//Condition to set xmlPath of node that is null. So that it will get removed
				if(value=='')
				{
					def xmlTagToRemove1 = key.replace(".","/");
					def xmlTagToRemove2 = "//"+xmlTagToRemove1;
					xmlTagToRemove.add(xmlTagToRemove2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToRemove2;
				}
*/

///////////////////////////////////////////////////////-END FETCHING TEST CASE PROPERTIES AND POPULATING ARRAY LISTS-//////////////////////////////////////////
/****************************************************** END TEST CASE PROPERTIES LOOP **********************************************************/




/******************SETTING TEXT 'BLANK' TO XML NODES THAT SHOULD BE EMPTY BUT PRESENT IN THE REQUEST***********/

int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

def groovyUtilsSetBlankTags = new com.eviware.soapui.support.GroovyUtils(context)
def holderSetBlankTags = groovyUtilsSetBlankTags.getXmlHolder(inputHolder);

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holderSetBlankTags.setNodeValue(element,'BLANK');
	holderSetBlankTags.updateProperty();
	log.info "		>>>>		SET TO BLANK";
}
log.info " ";
//holderRawReq["//method/ach"] = "test" ;
// write updated request back to teststep
holderSetBlankTags.updateProperty()
context.requestContent = holderSetBlankTags.xml;
log.info " ";
log.info "    >>>>    NEW : holderSetBlankTags.getXml()     :     "+holderSetBlankTags.getXml();
testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holderSetBlankTags.getPrettyXml());
context.requestContent = holderSetBlankTags.xml;
log.info '    >>>>    After Setting BLANK  :  '+ holderSetBlankTags.xml;
 /********************************************************************************************************/
 
/*******************************REMOVING EMPTY NODES*************************************/
int sizeOfxmlTagsToRemove=xmlTagToRemove.size();
log.info "		>>>>		sizeOfxmlTagsToRemove : "+sizeOfxmlTagsToRemove;

def groovyUtilsRemoveTags = new com.eviware.soapui.support.GroovyUtils(context)
def holderRemoveTags= groovyUtilsRemoveTags.getXmlHolder( inputHolder );

for(int iCountForRemovingTags=0;iCountForRemovingTags<sizeOfxmlTagsToRemove;iCountForRemovingTags++)
{
	element = xmlTagToRemove.get(iCountForRemovingTags);
	log.info ">>>>		element:"+iCountForRemovingTags+" = "+element;
	holderRemoveTags.remove(element)
	holderRemoveTags.updateProperty();
	log.info "		>>>>		REMOVED";
}
log.info " ";
holderRemoveTags.updateProperty()
context.requestContent = holderRemoveTags.xml;
log.info " ";
log.info "    >>>>    NEW : holderRemoveTags.getXml()     :     "+holderRemoveTags.getXml();
testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holderRemoveTags.getPrettyXml());
context.requestContent = holderRemoveTags.xml;
log.info '    >>>>    After REMOVING empty Nodes :  '+ holderRemoveTags.xml;
log.info '    >>>>    END - Removing empty Nodes';
 /********************************************************************************************************/
///////Making text BLANK to null
def groovyUtilsMakeBlank = new com.eviware.soapui.support.GroovyUtils( context )
def holderMakeBlank = groovyUtilsMakeBlank.getXmlHolder( context.requestContent )
		
for( item in holderMakeBlank.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" )){
	log.info '     >>>>>    GOT  BLANK  here '+item.nodeName;			
	holderMakeBlank.setNodeValue("//"+item.nodeName,"");
	log.info "          >> After setting blank : "+item.nodeName+"   :  "+holderMakeBlank.getNodeValue(item.nodeName);
	holderMakeBlank.updateProperty()
}
// update request and write updated request back to teststep
holderMakeBlank.updateProperty()
context.requestContent = holderMakeBlank.xml

log.info ' ';
log.info '    >>>>    holderMakeBlank.getXml()    :    '+holderMakeBlank.getXml();

testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holderMakeBlank.getPrettyXml());
context.requestContent = holderMakeBlank.xml;
/****************************************************************************************************/

//String reqName = APIName+"#Request";
//Fetching the request
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );



//////////////////////////////////////// - EARLIER REFERECES WERE HERE-//////////////////////////////////////////
			


	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";



def groovyUtilsFinalReqResponse = new com.eviware.soapui.support.GroovyUtils(context);

if(!(groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.responseContent)))
{
	log.info '    >>>>    RESPONSE NOT FETCHED';
	Label labelNoResponse = new Label(7,iCounter1,'RESPONSE COULD NOT BE FETCHED. CHECK YOUR NETWORK',normalFormatRED);
	sheet.addCell(labelNoResponse);
	break stepCountLoop;
}

def requestHolder = groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent );
def responseHolder = groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.responseContent );
def finalRequest = requestHolder.getXml();
def finalResponse = responseHolder.getXml();
log.info ' ';
log.info ' ';
log.info '    >>>>    ==== finalRequest : '+finalRequest;
log.info '    >>>>    ==== finalResponse : '+finalResponse;
log.info ' ';
log.info ' ';


			//Fetch the time taken to run the request
			
			if(!(testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken))
			{
				log.info '    >>>>    COULD NOT FETCH TIME TAKEN';
				Label labelTimeNotFetched = new Label(7,iCounter1,'COULD NOT FETCH TIME TAKEN',normalFormatRED);
				sheet.addCell(labelTimeNotFetched);
				break stepCountLoop;
			}
			
			String requestTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		====TIME TAKEN - "+requestTimeTaken;
			Label timeTakenByReq = new Label(8, iCounter1, requestTimeTaken, normalFormatYELLOW);
			sheet.addCell(timeTakenByReq);


Label labelFinalRequest = new Label(6,iCounter1,finalRequest,normalFormatReqResponse);
sheet.addCell(labelFinalRequest);
/*  //////////////// - Will Write Response to Result file after verifying the response is ExtraLarge or Not. ////////////
Label labelFinalResponse = new Label(7,iCounter1,finalResponse,normalFormatReqResponse);
sheet.addCell(labelFinalResponse);
*/
	  		
	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/********************************************************************************/

//Clearing ArrayLists
xmlTagToSetBlank.clear();
xmlTagToRemove.clear();



	//def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);
	//Getting the Response
	// holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 //log.info '		------------- holder = '+holder.getXml();
	 //def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 
	 def response=finalResponse;
	 holder=responseHolder;
	 
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    


	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	log.info '    >>>>    RESPONSE IS GREATER THATN 10000 CHARACTERS. This will be broken to write in Result Files';
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;
	
	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "     >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCounter1,responseName,normalFormatReqResponse);
		sheet.addCell(labelResponse);
	}
	//response = response.substring(0,32768);
	}
	/*
else{
	Label lableResponse = new Label(7,iCounter1,response,normalFormatReqResponse);
	sheet.addCell(lableResponse);
}
*/
	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}
	//Label labelRequest = new Label(6,iCounter1,rawReq);
	//   sheet.addCell(labelRequest);
	else if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(7,iCounter1,response,normalFormatReqResponse);
	sheet.addCell(label5);
	}

	//end of breaking response 




 
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";

	if (response.contains("soap:Fault"))
	{
	log.info "Unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName = TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for [ "+xpath2+" ]  : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);




		//condition to put response values in map
		if(!((xpath2=="")&&(ActualResponseValue=="")))
		{
			String responseParam=TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
			String responseValue=ActualResponseValue;
			mapName.put(responseParam,responseValue);
			log.info "		>>>>  +++++++ NOW MAPNAME LOOKS LIKE : "+mapName;
		}
		else{
			log.info "		>>>>	+++++++ NOT PUTTING VALUE FOR " +xpath2+ " INTO MAP BECAUSE VALUE FETCHED IS : "+ActualResponseValue;
		}


		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents().trim()=="Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase("") || ActualResponseValue==null)
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCounter1, "Mandatory Param Missing : [ "+xpath2+" ]",normalFormatFailedAssertions);
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0. "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data Type mismatch for  : [ "+xpath2+"] - "+all+" | Expected - "+TYPE;

				Label label6 = new Label(flagCount,iCounter1,typeErrorMsg,normalFormatFailedAssertions);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }

	    log.info "		>>>>		++++++++++++++ map to put in Global map now looks like : "+mapName;
		
	}
	globalMap.put(mapNo,mapName);
	log.info "		>>>>		+++++++++++++++++++++++++  Global Map looks like this NOW : "+globalMap; 
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(iCounterForResponseValues=1;iCounterForResponseValues<ResponseColCount;iCounterForResponseValues++)
	{

	  if(!(TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounterForResponseValues;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounterForResponseValues).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCounter1, "response mismatch for ["+xpath1+"] - Actual - "+ActualResponseValue+" | Expected - "+ResponseFromTestData,normalFormatFailedAssertions);
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(9+iDivisionCount))
		{
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatGREEN); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else if(flagCount<1001)
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			*/
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatRED); //column=0=A,row=0=1
			sheet.addCell(label03);
			if(!(UnitTestingFlag=="Y"))
			{
			break stepCountLoop;
			}
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;


/*************** Clearing TC Properties by running script ***************/
/*
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
*/
/************************************************************************/
break;
//continue;
 	
 }/********END Iterating loop for No of Test Cases in Test Data Sheet *********/
		


			
			}
			//******************************************************
			//END loop for number of steps in the scenario
			//******************************************************
			


			



		
		}//*******************************************************
		//END loop for number of scenarios in the scenario file
		//*******************************************************


workbook.write();
workbook.close();
log.info "	>>>>		------------- WORKBOOK UPDATED AND CLOSED -------------- ";

log.info " ";
log.info " ";
log.info "******************************************************************************************************************";
log.info "***************************END AUTOMATION DRIVER***********************************";
log.info "====================================================================";

]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver-July27-1" id="48ec0714-4465-4c8c-b65f-373db05081ef" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


log.info "******************************************************************************************************************";
log.info "***************************STARTING AUTOMATION DRIVER***********************************";
log.info "====================================================================";
log.info " ";
log.info " ";

//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet requestSchemaSheet1;
Sheet requestValuesSheet1;
Sheet responseSchemaSheet1;
Sheet responseValuesSheet1;

String APIName="";
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//***************************************************
//Variable to store TCID for the Test Case to execute
//***************************************************
String TestCaseID 
//******************************************************
//Array to separate and store cell contents based on '|'
//******************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//***********************************************************
//Counter for looping through number of steps in the scenario
//***********************************************************
int iCounter1;
def holder1;

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
String SetNo = context.expand('${#Project#SetNo}');
String TestScenarioFile=context.expand('${#Project#ScenarioFileLocation}');
String UnitTestingFlag=context.expand('${#Project#UnitTesting}');
String endPoint = context.expand('${#Project#Endpoint}');
String envSet=context.expand('${#Project#Env}');

log.info "===================== Env                                 :  "+envSet;
log.info "===================== ScenarioFileLocation   :  "+TestScenarioFile;
log.info "===================== SetNo                             :  "+SetNo;
log.info "===================== Endpoint                        :  "+endPoint;
log.info "===================== UnitTestingFlag            :  "+UnitTestingFlag;


aSet = testRunner.testCase.testSuite;
aSet.setPropertyValue('ENV',envSet);
log.info ' ';
log.info "===================== Environment SET in TestSuite Properties  : "+aSet.getPropertyValue('ENV');

String MandatoryFieldTestingFlag = "N";


	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	int noOfScenarioSheets = getSenarioSheets.size();
	log.info ' ';
	log.info "    >>>>    No of Sheets in SCENARIO FILE  :  "+noOfScenarioSheets;


int Length =  TestScenarioFile.lastIndexOf('\\');
int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
String excelName = TestScenarioFile.substring(Length+1,Length2);
String ResultFileLocation = TestScenarioFile.substring(0,Length);
log.info "	===	ResultFileLocation : "+ResultFileLocation;
log.info "	===	excelName : "+excelName;
//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "    >>>>    TIME NOW IS : "+currentTime;

//Getting location to create the TestResponseFile
String TestResultFile =  ResultFileLocation + "\\Results\\"+envSet+"-"+excelName+"-RESULT-" +currentTime+".xls";
		
log.info "    >>>>    NOTE: Following Result File is getting created : ------  :  "+TestResultFile;
log.info "============================================================================================================";
log.info " ";

//Creating Response Excel File
workbook = Workbook.createWorkbook(new File(TestResultFile));


		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(int sheetCount=1;sheetCount<noOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();
		log.info " ";	
		log.info "    >>>>    Reading Sheet   : "+sheetName;
		String sheetSetNo=SenarioSheet1.getCell(1,2).getContents();
		log.info '    >>>>    Script Set No     :  '+SetNo;
		log.info '    >>>>    Sheet Set No     :  '+sheetSetNo
		if(!(sheetSetNo==SetNo))
		{
			log.info "    >>>>    NOT SET FOR EXECUTION";
			log.info "=========================================================================";
			continue;
		}
		log.info ' ';
		log.info '    >>>>    ---------------------------------START OF SCENARIO---------------------------------';
		log.info ' ';
		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);
		sheet.setColumnView(0, 14);
		sheet.setColumnView(1, 20);
		sheet.setColumnView(2, 20);
		sheet.setColumnView(3, 40);
		sheet.setColumnView(8, 15);
		sheet.setColumnView(4, 15);
		sheet.setColumnView(5, 18);
		sheet.setColumnView(6, 15);
		sheet.setColumnView(7, 15);

		sheet.mergeCells(1, 0, 8, 0);
		sheet.mergeCells(1, 1, 8, 1);
		sheet.mergeCells(1, 2, 8, 2);
			//****************************************************************
			//Creating Writable font to be used in the response sheet
			//****************************************************************
			//WritableFont normalFontforHEADER1= new WritableFont(WritableFont.CALIBRI, 11);
			WritableFont normalFontforHEADER1 = new WritableFont(WritableFont.createFont("Calibri"), 11);
			WritableFont normalFontforHEADER2= new WritableFont(WritableFont.ARIAL, 11);
			//*******************************************************
			//creating plain format to write data in excel sheet
			//*******************************************************
		     WritableCellFormat normalFormatHEADER1 = new WritableCellFormat(normalFontforHEADER1);
			normalFormatHEADER1.setBackground(jxl.format.Colour.GREY_50_PERCENT);
			normalFormatHEADER1.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.BLACK);  

			//****************************************************************
			//Creating Writable font to be used in the response sheet
			//****************************************************************
			//WritableFont normalFontforHEADER1= new WritableFont(WritableFont.TIMES, 14);
			//*******************************************************
			//creating plain format to write data in excel sheet
			//*******************************************************
		     WritableCellFormat normalFormatHEADER2 = new WritableCellFormat(normalFontforHEADER2);
			normalFormatHEADER2.setBackground(jxl.format.Colour.GREY_25_PERCENT);
			normalFormatHEADER2.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.BLACK);  

			//*******************************************************
			//creating plain format to write data in excel sheet
			//*******************************************************
		     WritableCellFormat normalFormatHEADER3 = new WritableCellFormat(normalFontforHEADER1);
			normalFormatHEADER3.setBackground(jxl.format.Colour.ICE_BLUE);
			normalFormatHEADER3.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.GREY_25_PERCENT);  
			//normalFormatHEADER3.setWrap(true);
		//ICE_BLUE
		//OCEAN_BLUE 
		//PALE_BLUE 
		//PINK 
		//PERIWINKLE 
		//SKY_BLUE 
		//TAN 
		//VERY_LIGHT_YELLOW 
		//LIGHT_BLUE
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents(),normalFormatHEADER2);
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents(),normalFormatHEADER3); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents(),normalFormatHEADER2); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents(),normalFormatHEADER3); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents(),normalFormatHEADER2); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents(),normalFormatHEADER3); 
					sheet.addCell(setNoValue);
					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents(),normalFormatHEADER2); 
					sheet.addCell(stepNoLabel);
					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents(),normalFormatHEADER2); 
					sheet.addCell(descriptionLabel);
					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents(),normalFormatHEADER2); 
					sheet.addCell(expectedLabel);
					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents(),normalFormatHEADER2); 
					sheet.addCell(apiNameLabel);
					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents(),normalFormatHEADER2); 
					sheet.addCell(tcidLabel);
					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents(),normalFormatHEADER2); 
					sheet.addCell(referencesLabel);
					Label curlLabel = new Label(6, 3, "REQUEST",normalFormatHEADER2); 
					sheet.addCell(curlLabel);
					Label responseLabel = new Label(7, 3, "RESPONSE",normalFormatHEADER2); 
					sheet.addCell(responseLabel);
					Label timeTakenLabel = new Label(8, 3, "TIME [ms]",normalFormatHEADER2); 
					sheet.addCell(timeTakenLabel);

		//****************************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();


		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];

			//********************************************************
			//Starting loop for number of steps in the scenario
			//********************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{

		/*************** Clearing TC Properties by running script ***************/
		log.info "    >>>>    Removing Properties at Test Case level";
		testRunner.runTestStepByName("ClearTCProperties");
		/************************************************************************/

				
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatGREEN = new WritableCellFormat(normalFont);
			normalFormatGREEN.setBackground(jxl.format.Colour.BRIGHT_GREEN);
			normalFormatGREEN.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.WHITE);  
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatRED = new WritableCellFormat(normalFont2);
			normalFormatRED.setBackground(jxl.format.Colour.RED);
			normalFormatRED.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.WHITE);  
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont3 = new WritableFont(WritableFont.ARIAL, 12);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatYELLOW = new WritableCellFormat(normalFont3);
			normalFormatYELLOW.setBackground(jxl.format.Colour.YELLOW);
			normalFormatYELLOW.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.GREEN);  
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontOrange = new WritableFont(WritableFont.ARIAL, 14);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatORANGE = new WritableCellFormat(normalFontOrange);
			normalFormatORANGE.setBackground(jxl.format.Colour.LIGHT_ORANGE);
			normalFormatORANGE.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.WHITE);  
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontTurquoise = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatTurquoise = new WritableCellFormat(normalFontTurquoise);
			normalFormatTurquoise.setBackground(jxl.format.Colour.TURQUOISE);

			//****************************************************************
			//Creating Writable font to be used in the response sheet
			//****************************************************************
			WritableFont normalFontforJOBS= new WritableFont(WritableFont.ARIAL);
			//*******************************************************
			//creating plain format to write data in excel sheet
			//*******************************************************
		     WritableCellFormat normalFormatCORAL = new WritableCellFormat(normalFontforJOBS);
			normalFormatCORAL.setBackground(jxl.format.Colour.CORAL);

			//****************************************************************
			//Creating Writable font to be used in the response sheet
			//****************************************************************
			WritableFont normalFontforDESCRIPTIONTEXT= new WritableFont(WritableFont.ARIAL);
			//*******************************************************
			//creating plain format to write data in excel sheet
			//*******************************************************
		     WritableCellFormat normalFormatDESCRIPTION = new WritableCellFormat(normalFontforDESCRIPTIONTEXT);
			normalFormatDESCRIPTION.setBackground(jxl.format.Colour.IVORY);
			normalFormatDESCRIPTION.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.BLACK);  
			//*******************************************************
			//creating plain format to write data in excel sheet
			//*******************************************************
		     WritableCellFormat normalFormatReqResponse = new WritableCellFormat(normalFontforDESCRIPTIONTEXT);
			normalFormatReqResponse.setBackground(jxl.format.Colour.ICE_BLUE);
			normalFormatReqResponse.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN,jxl.format.Colour.BLACK);  
//BLUE_GREY


			iCountFlag=0;
			//log.info "		>>>>		: Reading Row No :"+(iCounter1+1);
			log.info " ";
			log.info "==========================================================================";
			log.info "    >>>>    ************************************************************* Starting Step "+(iCounter1-3)+"  :  [ "+SenarioSheet1.getCell(3,iCounter1).getContents()+" - "+SenarioSheet1.getCell(4,iCounter1).getContents()+" ] ";
			
			//*******************************************************
			//condition to check if the scenario step is empty
			//*******************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}

			//Adding Description and ExpectedResult to result file
			Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents(),normalFormatDESCRIPTION); 
			sheet.addCell(stepNoValue);
			Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents(),normalFormatDESCRIPTION); 
			sheet.addCell(descriptionValue);
			Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents(),normalFormatDESCRIPTION); 
			sheet.addCell(expectedValue);
			Label stepNameValue = new Label(3, iCounter1, SenarioSheet1.getCell(3, iCounter1).getContents(),normalFormatORANGE); 
			sheet.addCell(stepNameValue);
			Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents(),normalFormatDESCRIPTION); 
			sheet.addCell(referencesValue);


			//******************************************
			//Checking if step refers to Run a Job
			//******************************************
			//Checking if the cell where env for runnning job is provided is empty. Script will then take up the job env from TC prop
			//START Condition to check if the step refers to Run a JOB
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('job')))
			{
				log.info " ";
				log.info " ";
			def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			
			 if(SenarioSheet1.getCell(5,iCounter1).getContents().isEmpty())
				{
				jobEnv =  testRunner.testCase.testSuite.getPropertyValue("ENV");
				log.info "    >>>>    ======================JOBS ARE SCHEDULED FOR -"+jobEnv+"- Environment=================";
				}
			
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('outbound')))
			{
			 log.info "		>>>>	 ====	For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running OUTBOUND job";
			 //******************************
			 //Running Four Oaks Outbound job
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-FourOakdOutbound"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			//String jobTimeTaken=tStep.getTimeTaken();
			//String jobTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		FourOaksOutBoundJob Executed";
			Label labeljobOutbound = new Label(3, iCounter1,"job-FourOaksOutBound" ,normalFormatCORAL); 
			sheet.addCell(labeljobOutbound);
			Label labeljobOutboundResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobOutboundResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('draft')))
			{
			 log.info "		>>>>		For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running REALIZE DRAFT job";
			 //******************************
			 //Running Four Oaks Outbound job
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-RealizeDraft"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		RealizeDraft Executed";
			Label labeljobRealizeDraft = new Label(3, iCounter1,"job-RealizeDraft" ,normalFormatCORAL); 
			sheet.addCell(labeljobRealizeDraft);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			 if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('fundsrealization')))
			{
			 log.info "		>>>>		For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running FUNDS REALIZATION  job";
			 //******************************
			 //Running Funds Realization
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-FundsRealization"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Funds Realization Job Executed";
			Label labeljobRealizeDraft = new Label(3, iCounter1,"job-Funds Realization" ,normalFormatCORAL); 
			sheet.addCell(labeljobRealizeDraft);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('push')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running Push Notification job";
			 //************************************
			 //Running Push Notification job
			 //***********************************
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-PushNotification"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		PushNotification Executed";
			Label labeljobPushNoti = new Label(3, iCounter1,"job PushNotification" ,normalFormatCORAL); 
			sheet.addCell(labeljobPushNoti);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('evergreenob')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running  EvergreenOBProcessor job";
			 //****************************************
			 //Running Evergreen OB Processor
			 //****************************************
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-EvergreenOBProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-EvergreenOBProcessor Executed";
			Label labeljobEvergreenOB = new Label(3, iCounter1,"job EvergreenOBProcessor" ,normalFormatCORAL); 
			sheet.addCell(labeljobEvergreenOB);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('evergreenib')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running EvergreenIBProcessor  job";
			 //******************************
			 //Running EvergreenIBProcessor
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-EvergreenIBProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-EvergreenIBProcessor Executed";
			Label labeljobEvergreenIB = new Label(3, iCounter1,"job EvergreenIBProcessor" ,normalFormatCORAL); 
			sheet.addCell(labeljobEvergreenIB);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('wiretrans')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running WireTransProcessor job";
			 //******************************
			 //Running WireTransProcessor
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-WireTransProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-WireTransProcessor Executed";
			Label labeljobWireTrans = new Label(3, iCounter1,"job WireTransProcessor" ,normalFormatCORAL); 
			sheet.addCell(labeljobWireTrans);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('orccoutbound')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running ORCCOutboundProcessor job";
			 //******************************
			 //Running ORCCOutboundProcessor
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-ORCCOutboundProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-ORCCOutboundProcessor Executed";
			Label labeljobOrccOutbound = new Label(3, iCounter1,"job ORCCOutboundProcessor" ,normalFormatCORAL); 
			sheet.addCell(labeljobOrccOutbound);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('rppsoutbound')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running RPPSOutboundProcessor job";
			 //******************************
			 //Running RPPSOutboundProcessor
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-RPPSOutboundProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-RPPSOutboundProcessor Executed";
			Label labeljobRppsOutbound = new Label(3, iCounter1,"job RPPSOutboundProcessor" ,normalFormatCORAL); 
			sheet.addCell(labeljobRppsOutbound);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormatGREEN); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormatYELLOW); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			}
			//******************************************
			//END Checking if step refers to Run a Job
			//******************************************
			


			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;
			//mapName = "map"+mapNo;
			HashMap mapName= [:];
			//log.info "	mapName : "+mapName;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	APIName=RequestName;
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents().toString();
		 	log.info " ";
		 	log.info " ";
		 	log.info "		>>>>		"+RequestName+" | "+TestCaseID;
			


				//Getting the location of TestData file for the API Request
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				//String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				//Test Data files for the API Request must be available in a folder named 'TestDataFiles' in the same location where scenario file is placed.
				String TestDataFile = TestDataFileLocation + "\\TestData\\"+RequestName+".xls";
				log.info " ";
				log.info "		>>>>		Referrring TestDataFile  :"+TestDataFile;



 TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();


def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {


		if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					log.info "------======---- Not set for EXECUTION : "+TestDataValues1.getCell(0,iCountTestCase).getContents();
					continue;
				}

flagCount=9;

List<String> xmlTagToSetBlank = new ArrayList<String>();
xmlTagToSetBlank.clear();

List<String> xmlTagToRemove = new ArrayList<String>();
xmlTagToRemove.clear();

	 //int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 	          if(!(testCaseID==TestCaseID))
				{
					log.info ' ';
					log.info "    >>>>    NOT SET for EXECUTION  :  "+testCaseID;
					continue;
				}

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);
	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
    /*****************************************************************************/

	log.info "    >>>>    SETTING VALUES IN TEST CASE PROPERTIES";
	log.info "    >>>>    ======================================";
	 //testRunner.runTestStepByName(APIName);
		 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();
			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 testRunner.testCase.setPropertyValue(key,value);
		}



/////////////////////////////////////////////////////////-ADDING REFERENCES-//////////////////////////////////////////////////////



//***********************************
				//Start condition for References
				//***********************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				log.info "    >>>>    The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has REFERENCES";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];

				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;

				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;

				//******************************************************
				//get the parameter value to fetch from response
				//******************************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				mapToRefer = Integer.parseInt(stepToRefer);

				if(mapToRefer==null)
				{
					log.info "		>>>>		============ Map for Step No - "+stepToRefer+" cotains "+mapToRefer;
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
			
				if(!((globalMap.get(mapToRefer)).toString().contains(paramValueToFetch)))
				{
					log.info "		>>>>	================= MAP DOES NOT CONTAIN THE PARAM ====================";
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
					break;
				}
			
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch);
				log.info "				*********  ReferringValue = "+ReferringValue

				
				/*****commenting out this section where the referred value is put in the node directly
					putting the same value in test case property from where it will be fetched while running request***************************************/
				/*
				def groovyUtilsForUpdatingReferences = new com.eviware.soapui.support.GroovyUtils( context ) 
				// get XmlHolder for request message def
				
				String req2Name=APIName+"#Request";
				def holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				//holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder(req2Name);
				// change parameter value using XPath
			//	log.info "		++++++  holderForRef  : "+holderForRef;
				log.info "		++++++  holderForRef.getXml() : "+holderForRef.getXml();
				paramNameToSet = "//"+paramName;
				//paramNameToSet = paramName;
				log.info "		>>>> ++ Parameter to set : "+paramNameToSet;
				holderForRef[paramNameToSet] = ReferringValue;
				//holder1[paramNameToSet] = ReferringValue;
				// write updated request back to teststep
				holderForRef.updateProperty();
				//holder1.updateProperty();
				context.requestContent = holderForRef.xml;
				//context.requestContent = holder1.xml;
				log.info "	REQUEST AFTER SETTING REF 1 = :"+context.requestContent;
				requestAfterRef=holderForRef.getXml();
				log.info "	REQUEST AFTER SETTING REF 1 = :"+requestAfterRef;
				
				log.info "		++++++  holderForRef.getXml() 2: "+holderForRef.getXml();
				/*******holder1 removed*******/
				//log.info "		++++++ REQUEST holder1.getXml() 2 9901 : "+holder1.getXml();
				
				
				
				/*
				//def holderForRef2 = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				rawReq=holderForRef.getXml();
				testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq);
				*/
				/*****END - commenting out this section where the referred value is put in the node directly
					putting the same value in test case property from where it will be fetched while running request***************************************/

				//[paramNameToSet] = ReferringValue;
				testRunner.testCase.setPropertyValue(paramName,ReferringValue);
				
				}
				}
				}

			/************END OF REFERENCES SCRIPT********************/
/////////////////////////////////////////////////////////-END ADDING REFERENCES-////////////////////////////////////////////////////


///////////////////////////////////////////////////////-FETCHING TEST CASE PROPERTIES AND POPULATING ARRAY LISTS-//////////////////////////////////////////
/****************************************************** TEST CASE PROPERTIES LOOP **********************************************************/

String[] props = new String[testRunner.testCase.getPropertyCount()];
props = testRunner.testCase.getPropertyNames();
log.info "    >>>>    TEST CASE Properties Size  :  "+props.size();
log.info ' ';

a=testRunner.testCase;

for (int iCountOfTCProp=0;iCountOfTCProp<props.size();iCountOfTCProp++)
{
String propName=props[iCountOfTCProp];
String propValue=a.getPropertyValue(props[iCountOfTCProp]);
log.info '    >>>>    '+propName+' - '+propValue;

 if(propValue.trim()=='BLANK')
 {
 	log.info '    >>>>    THIS IS BLANK PROPERTY';
 	def xmlTagToSetBlank1 = propName.replace(".","/");
	def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
	xmlTagToSetBlank.add(xmlTagToSetBlank2);
	log.info "				>>>>		xmlTagToSetBlank : "+xmlTagToSetBlank2;
 }
  if(propValue.trim()=='')
 {
 	log.info '    >>>>    THIS IS EMPTY PROPERTY';
 	def xmlTagToRemove1 = propName.replace(".","/");
	def xmlTagToRemove2 = "//"+xmlTagToRemove1;
	xmlTagToRemove.add(xmlTagToRemove2);
	log.info "				>>>>		xmlTagToRemove : "+xmlTagToRemove2;
 }
 log.info '==========================================================';
}

/*
//Condition to set xmlPath of node that is BLANK. So that it will be set to blank
				if(value=='BLANK')
				{
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToSetBlank : "+xmlTagToSetBlank2;
				}

				//Condition to set xmlPath of node that is null. So that it will get removed
				if(value=='')
				{
					def xmlTagToRemove1 = key.replace(".","/");
					def xmlTagToRemove2 = "//"+xmlTagToRemove1;
					xmlTagToRemove.add(xmlTagToRemove2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToRemove2;
				}
*/

///////////////////////////////////////////////////////-END FETCHING TEST CASE PROPERTIES AND POPULATING ARRAY LISTS-//////////////////////////////////////////
/****************************************************** END TEST CASE PROPERTIES LOOP **********************************************************/




/******************SETTING TEXT 'BLANK' TO XML NODES THAT SHOULD BE EMPTY BUT PRESENT IN THE REQUEST***********/

int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

def groovyUtilsSetBlankTags = new com.eviware.soapui.support.GroovyUtils(context)
def holderSetBlankTags = groovyUtilsSetBlankTags.getXmlHolder(inputHolder);

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holderSetBlankTags.setNodeValue(element,'BLANK');
	holderSetBlankTags.updateProperty();
	log.info "		>>>>		SET TO BLANK";
}
log.info " ";
//holderRawReq["//method/ach"] = "test" ;
// write updated request back to teststep
holderSetBlankTags.updateProperty()
context.requestContent = holderSetBlankTags.xml;
log.info " ";
log.info "    >>>>    NEW : holderSetBlankTags.getXml()     :     "+holderSetBlankTags.getXml();
testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holderSetBlankTags.getPrettyXml());
context.requestContent = holderSetBlankTags.xml;
log.info '    >>>>    After Setting BLANK  :  '+ holderSetBlankTags.xml;
 /********************************************************************************************************/
 
/*******************************REMOVING EMPTY NODES*************************************/
int sizeOfxmlTagsToRemove=xmlTagToRemove.size();
log.info "		>>>>		sizeOfxmlTagsToRemove : "+sizeOfxmlTagsToRemove;

def groovyUtilsRemoveTags = new com.eviware.soapui.support.GroovyUtils(context)
def holderRemoveTags= groovyUtilsRemoveTags.getXmlHolder( inputHolder );

for(int iCountForRemovingTags=0;iCountForRemovingTags<sizeOfxmlTagsToRemove;iCountForRemovingTags++)
{
	element = xmlTagToRemove.get(iCountForRemovingTags);
	log.info ">>>>		element:"+iCountForRemovingTags+" = "+element;
	holderRemoveTags.remove(element)
	holderRemoveTags.updateProperty();
	log.info "		>>>>		REMOVED";
}
log.info " ";
holderRemoveTags.updateProperty()
context.requestContent = holderRemoveTags.xml;
log.info " ";
log.info "    >>>>    NEW : holderRemoveTags.getXml()     :     "+holderRemoveTags.getXml();
testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holderRemoveTags.getPrettyXml());
context.requestContent = holderRemoveTags.xml;
log.info '    >>>>    After REMOVING empty Nodes :  '+ holderRemoveTags.xml;
log.info '    >>>>    END - Removing empty Nodes';
 /********************************************************************************************************/
///////Making text BLANK to null
def groovyUtilsMakeBlank = new com.eviware.soapui.support.GroovyUtils( context )
def holderMakeBlank = groovyUtilsMakeBlank.getXmlHolder( context.requestContent )
		
for( item in holderMakeBlank.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" )){
	log.info '     >>>>>    GOT  BLANK  here '+item.nodeName;			
	holderMakeBlank.setNodeValue("//"+item.nodeName,"");
	log.info "          >> After setting blank : "+item.nodeName+"   :  "+holderMakeBlank.getNodeValue(item.nodeName);
	holderMakeBlank.updateProperty()
}
// update request and write updated request back to teststep
holderMakeBlank.updateProperty()
context.requestContent = holderMakeBlank.xml

log.info ' ';
log.info '    >>>>    holderMakeBlank.getXml()    :    '+holderMakeBlank.getXml();

testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holderMakeBlank.getPrettyXml());
context.requestContent = holderMakeBlank.xml;
/****************************************************************************************************/

//String reqName = APIName+"#Request";
//Fetching the request
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );



//////////////////////////////////////// - EARLIER REFERECES WERE HERE-//////////////////////////////////////////
			


	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";



def groovyUtilsFinalReqResponse = new com.eviware.soapui.support.GroovyUtils(context);

if(!(groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.responseContent)))
{
	log.info '    >>>>    RESPONSE NOT FETCHED';
	Label labelNoResponse = new Label(7,iCounter1,'RESPONSE COULD NOT BE FETCHED. CHECK YOUR NETWORK',normalFormatRED);
	sheet.addCell(labelNoResponse);
	break stepCountLoop;
}

def requestHolder = groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent );
def responseHolder = groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.responseContent );
def finalRequest = requestHolder.getXml();
def finalResponse = responseHolder.getXml();
log.info ' ';
log.info ' ';
log.info '    >>>>    ==== finalRequest : '+finalRequest;
log.info '    >>>>    ==== finalResponse : '+finalResponse;
log.info ' ';
log.info ' ';



			//Fetch the time taken to run the request
			
			if(!(testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken))
			{
				log.info '    >>>>    COULD NOT FETCH TIME TAKEN';
				Label labelTimeNotFetched = new Label(7,iCounter1,'COULD NOT FETCH TIME TAKEN',normalFormatRED);
				sheet.addCell(labelTimeNotFetched);
				break stepCountLoop;
			}
			

			String requestTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		====TIME TAKEN - "+requestTimeTaken;
			Label timeTakenByReq = new Label(8, iCounter1, requestTimeTaken, normalFormatYELLOW);
			sheet.addCell(timeTakenByReq);


def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);



Label labelFinalRequest = new Label(6,iCounter1,finalRequest,normalFormatReqResponse);
sheet.addCell(labelFinalRequest);
Label labelFinalResponse = new Label(7,iCounter1,finalResponse,normalFormatReqResponse);
sheet.addCell(labelFinalResponse);
	  		



	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

//Clearing ArrayLists
xmlTagToSetBlank.clear();
xmlTagToRemove.clear();

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	/*
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq2);
	  		sheet.addCell(labelRawRequest);
	  		
	 	}
	 	else{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}

*/




	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCounter1,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(7,iCounter1,response,normalFormatReqResponse);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	//Label labelRequest = new Label(6,iCounter1,rawReq);
	//   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(7,iCounter1,response,normalFormatReqResponse);
	   sheet.addCell(label5);
	}

	//end of breaking response 




 
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);




		//condition to put response values in map
		if(!((xpath2=="")&&(ActualResponseValue=="")))
		{
			String responseParam=TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
			String responseValue=ActualResponseValue;
			mapName.put(responseParam,responseValue);
			log.info "		>>>>  +++++++ NOW MAPNAME LOOKS LIKE : "+mapName;
		}
		else{
			log.info "		>>>>	+++++++ NOT PUTTING VALUE FOR " +xpath2+ " INTO MAP BECAUSE VALUE FETCHED IS : "+ActualResponseValue;
		}




		

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCounter1, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCounter1,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }

	    log.info "		>>>>		++++++++++++++ map to put in Global map now looks like : "+mapName;
		
	}
	globalMap.put(mapNo,mapName);
	log.info "		>>>>		+++++++++++++++++++++++++  Global Map looks like this NOW : "+globalMap; 
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(iCounterForResponseValues=1;iCounterForResponseValues<ResponseColCount;iCounterForResponseValues++)
	{

	  if(!(TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounterForResponseValues;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounterForResponseValues).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCounter1, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(9+iDivisionCount))
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			*/
			
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatGREEN); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else if(flagCount<1001)
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			*/
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatRED); //column=0=A,row=0=1
			sheet.addCell(label03);
			if(!(UnitTestingFlag=="Y"))
			{
			break stepCountLoop;
			}
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;


/*************** Clearing TC Properties by running script ***************/
/*
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
*/
/************************************************************************/
break;
//continue;
 	
 }/********END Iterating loop for No of Test Cases in Test Data Sheet *********/
		


			
			}
			//******************************************************
			//END loop for number of steps in the scenario
			//******************************************************
			


			



		
		}//*******************************************************
		//END loop for number of scenarios in the scenario file
		//*******************************************************


workbook.write();
workbook.close();
log.info "	>>>>		------------- WORKBOOK UPDATED AND CLOSED -------------- ";

log.info " ";
log.info " ";
log.info "******************************************************************************************************************";
log.info "***************************END AUTOMATION DRIVER***********************************";
log.info "====================================================================";

]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver-July24-1" id="587e13cd-4935-4e36-8c67-4c11a3f0f2b0" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "****************************************************************************************************************************************";
log.info "***************************STARTING AUTOMATION DRIVER FOR SCENARIO TESTING***********************************";
log.info "=============================================================================================================";
log.info " ";
log.info " ";

//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet requestSchemaSheet1;
Sheet requestValuesSheet1;
Sheet responseSchemaSheet1;
Sheet responseValuesSheet1;

String APIName="";
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//***************************************************
//Variable to store TCID for the Test Case to execute
//***************************************************
String TestCaseID 
//******************************************************
//Array to separate and store cell contents based on '|'
//******************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//***********************************************************
//Counter for looping through number of steps in the scenario
//***********************************************************
int iCounter1;
def holder1;
def rawReq="";


/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String SetNo = context.expand('${#Project#SetNo}');
//def TestDataFile = context.expand( '${#Project#TestDataFile}');
//String APIName = context.expand( '${#Project#APIName}');
String TestScenarioFile=context.expand('${#Project#ScenarioFileLocation}');
String UnitTestingFlag=context.expand('${#Project#UnitTesting}');
String endPoint = context.expand('${#Project#Endpoint}');
String envSet=context.expand('${#Project#Env}');

log.info "===================== ScenarioFileLocation : "+TestScenarioFile;
log.info "===================== UnitTestingFlag : "+UnitTestingFlag;
log.info "===================== SetNo : "+SetNo;
log.info "===================== Env : "+envSet;
log.info "===================== Endpoint : "+endPoint;




aSet = testRunner.testCase.testSuite;
aSet.setPropertyValue('ENV',envSet);
log.info "    >>>>   ====  Environment SET in TestSuite Properties : "+aSet.getPropertyValue('ENV');



/*
def jobsTCase = testRunner.testCase.testSuite.testCases["JobsTest"]
jobsTCase.setPropertyValue('ENV',envSet);
log.info "    >>>>   ====   ENV SET IN JOB TC : "+jobsTCase.getPropertyValue('ENV');
*/

/*
return null;
a = testRunner.testCase.testSuite;
jobEnv = envSet;
a.setPropertyValue('ENV',jobEnv);
log.info "    >>>>   ====  Environment SET in TestSuite Properties : "+a.getPropertyValue('ENV');

//testRunner.cancel( "Its getting Cancelled" );
//testRunner.fail( "It didn't work" );
return null;
*/

//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";


	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	int noOfScenarioSheets = getSenarioSheets.size();
	log.info "		>>>>		Number of Sheets in this Test Scenario File are : "+noOfScenarioSheets;


log.info "		>>>>		==============================="
int Length =  TestScenarioFile.lastIndexOf('\\');
int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
String excelName = TestScenarioFile.substring(Length+1,Length2);
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
//log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResultFileLocation = TestScenarioFile.substring(0,Length);
log.info "	===	ResultFileLocation : "+ResultFileLocation;
log.info "	===	excelName : "+excelName;
//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResultFile =  ResultFileLocation + "\\Results\\"+envSet+"-"+excelName+"-RESULT-" +currentTime+".xls";


		
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResultFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
workbook = Workbook.createWorkbook(new File(TestResultFile));



		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(int sheetCount=1;sheetCount<noOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();
		log.info " ";	
		log.info "		>>>>		Reading Sheet : "+sheetName;

		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info " ";
			log.info "=========================================================================";
			log.info "		>>>>		Scenario in sheet "+sheetName+" NOT set for execution";
			log.info "=========================================================================";
			log.info " ";
			continue;
		}

		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);

		
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "REQUEST"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);

					Label timeTakenLabel = new Label(8, 3, "TimeTaken[ms]"); 
					sheet.addCell(timeTakenLabel);

		//****************************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();


		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];



			//********************************************************
			//Starting loop for number of steps in the scenario
			//********************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{

		/*************** Clearing TC Properties by running script ***************/
		log.info "		>>>>		Removing Properties at Test Case level";
		log.info "		>>>>		======================================";
		testRunner.runTestStepByName("ClearTCProperties");
		/************************************************************************/

				
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.BRIGHT_GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont3 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat3 = new WritableCellFormat(normalFont3);
			normalFormat3.setBackground(jxl.format.Colour.YELLOW);

			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontOrange = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatOrange = new WritableCellFormat(normalFontOrange);
			normalFormatOrange.setBackground(jxl.format.Colour.ORANGE);

			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontTurquoise = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatTurquoise = new WritableCellFormat(normalFontTurquoise);
			normalFormatTurquoise.setBackground(jxl.format.Colour.TURQUOISE);


			iCountFlag=0;
			//log.info "		>>>>		: Reading Row No :"+(iCounter1+1);
			log.info " ";
			log.info "=================================================================================================================================================================================================================";
			log.info "		>>>>		********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents()+"-"+SenarioSheet1.getCell(4,iCounter1).getContents();
			
			//*******************************************************
			//condition to check if the scenario step is empty
			//*******************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}


			//Adding Description and ExpectedResult to result file
			Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
			sheet.addCell(stepNoValue);

			Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
			sheet.addCell(descriptionValue);

			Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
			sheet.addCell(expectedValue);

			Label stepNameValue = new Label(3, iCounter1, SenarioSheet1.getCell(3, iCounter1).getContents(),normalFormatOrange); 
			sheet.addCell(stepNameValue);

			Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
			sheet.addCell(referencesValue);





			
			//******************************************
			//Checking if step refers to Run a Job
			//******************************************
			
			//Checking if the cell where env for runnning job is provided is empty. Script will then take up the job env from TC prop
			//START Condition to check if the step refers to Run a JOB
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('job')))
			{
				log.info " ";
				log.info " ";
			def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			
			 if(SenarioSheet1.getCell(5,iCounter1).getContents().isEmpty())
				{
				jobEnv =  testRunner.testCase.testSuite.getPropertyValue("ENV");
				log.info "    >>>>    ======================JOBS ARE SCHEDULED FOR -"+jobEnv+"- Environment=================";
				}
			
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('outbound')))
			{
			 log.info "		>>>>	 ====	For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running OUTBOUND job";
			 //******************************
			 //Running Four Oaks Outbound job
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-FourOakdOutbound"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			//String jobTimeTaken=tStep.getTimeTaken();
			//String jobTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		FourOaksOutBoundJob Executed";
			Label labeljobOutbound = new Label(3, iCounter1,"job-FourOaksOutBound" ,normalFormatOrange); 
			sheet.addCell(labeljobOutbound);
			Label labeljobOutboundResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobOutboundResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('draft')))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running REALIZE DRAFT job";
			 	//******************************
			 	//Running Four Oaks Outbound job
			 	//****************************** 

			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-RealizeDraft"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		RealizeDraft Executed";
			Label labeljobRealizeDraft = new Label(3, iCounter1,"job-RealizeDraft" ,normalFormatOrange); 
			sheet.addCell(labeljobRealizeDraft);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			 if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('fundsrealization')))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running FUNDS REALIZATION  job";
			 	//******************************
			 	//Running Funds Realization
			 	//****************************** 

			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-FundsRealization"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Funds Realization Job Executed";
			Label labeljobRealizeDraft = new Label(3, iCounter1,"job-Funds Realization" ,normalFormatOrange); 
			sheet.addCell(labeljobRealizeDraft);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('push')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running Push Notification job";
			 //************************************
			 //Running Push Notification job
			 //***********************************
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-PushNotification"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		PushNotification Executed";
			Label labeljobPushNoti = new Label(3, iCounter1,"job PushNotification" ,normalFormatOrange); 
			sheet.addCell(labeljobPushNoti);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('evergreenob')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running  EvergreenOBProcessor job";
			 //****************************************
			 //Running Evergreen OB Processor
			 //****************************************
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-EvergreenOBProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-EvergreenOBProcessor Executed";
			Label labeljobEvergreenOB = new Label(3, iCounter1,"job EvergreenOBProcessor" ,normalFormatOrange); 
			sheet.addCell(labeljobEvergreenOB);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('evergreenib')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running EvergreenIBProcessor  job";
			 //******************************
			 //Running EvergreenIBProcessor
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-EvergreenIBProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-EvergreenIBProcessor Executed";
			Label labeljobEvergreenIB = new Label(3, iCounter1,"job EvergreenIBProcessor" ,normalFormatOrange); 
			sheet.addCell(labeljobEvergreenIB);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('wiretrans')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running WireTransProcessor job";
			 //******************************
			 //Running WireTransProcessor
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-WireTransProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-WireTransProcessor Executed";
			Label labeljobWireTrans = new Label(3, iCounter1,"job WireTransProcessor" ,normalFormatOrange); 
			sheet.addCell(labeljobWireTrans);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
			sheet.addCell(labeljobOutboundTime);

			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('orccoutbound')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running ORCCOutboundProcessor job";
			 //******************************
			 //Running ORCCOutboundProcessor
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-ORCCOutboundProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-ORCCOutboundProcessor Executed";
			Label labeljobOrccOutbound = new Label(3, iCounter1,"job ORCCOutboundProcessor" ,normalFormatOrange); 
			sheet.addCell(labeljobOrccOutbound);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('rppsoutbound')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running RPPSOutboundProcessor job";
			 //******************************
			 //Running RPPSOutboundProcessor
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-RPPSOutboundProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-RPPSOutboundProcessor Executed";
			Label labeljobRppsOutbound = new Label(3, iCounter1,"job RPPSOutboundProcessor" ,normalFormatOrange); 
			sheet.addCell(labeljobRppsOutbound);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
sheet.addCell(labeljobOutboundTime);
			continue;
			}
			
			}









			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;
			//mapName = "map"+mapNo;
			HashMap mapName= [:];
			//log.info "	mapName : "+mapName;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	APIName=RequestName;
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents().toString();
		 	log.info " ";
		 	log.info " ";
		 	log.info "		>>>>		"+RequestName+" | "+TestCaseID;
			


				//Getting the location of TestData file for the API Request
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				//String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				//Test Data files for the API Request must be available in a folder named 'TestDataFiles' in the same location where scenario file is placed.
				String TestDataFile = TestDataFileLocation + "\\TestData\\"+RequestName+".xls";
				log.info " ";
				log.info "		>>>>		Referrring TestDataFile  :"+TestDataFile;



 TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();


	def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {


		if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					log.info "------======---- Not set for EXECUTION : "+TestDataValues1.getCell(0,iCountTestCase).getContents();
					continue;
				}

flagCount=9;

List<String> xmlTagToSetBlank = new ArrayList<String>();

	 //int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+SetNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/
/*
	def groovyUtilsForExtraRun = new com.eviware.soapui.support.GroovyUtils( context ) 
	// get XmlHolder for request message def
	String reqNameforExtraRun=APIName+"#Request";
	holderForExtraRun = groovyUtilsForExtraRun.getXmlHolder(reqNameforExtraRun);
	// change password using XPath
	holderForExtraRun["//subscriberId"] = '1234';
	// write updated request back to teststep
	holderForExtraRun.updateProperty();
	context.requestContent = holderForExtraRun.xml;
*/
	/*
	testRunner.testCase.setPropertyValue('subscriberId','12');
	testRunner.runTestStepByName(APIName);
	testRunner.testCase.setPropertyValue('subscriberId','200300');
	//testRunner.testCase.setPropertyValue('subscriberId','');
	*/
	/*********************************************************************************/


	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

/*
String subcriberIdToSet=testRunner.testCase.getPropertyValue('subscriberId');
if((APIName.toString().contains('createMerchant'))||(APIName.toString().contains('verifyClient')))
	{
		testRunner.testCase.setPropertyValue('subscriberId','200300');
	}
testRunner.runTestStepByName(APIName);
testRunner.testCase.setPropertyValue('subscriberId',subcriberIdToSet);
*/

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 //testRunner.runTestStepByName(APIName);
	 }



//def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);



//Fetching the request
	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

	
	//Run Request again to eliminate null object error
	 //testRunner.runTestStepByName(APIName);
	// def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	
	 /*******holder1 removed*******/
	 //holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);




	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 
	 /*******holder1 removed*******/
	 //req1 = holder1.getXml();
	 
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 /*
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	*/
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	
	 /*******holder1 removed*******/
	 //holder1.updateProperty();
	/*
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }*/

/*
int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	holder1.updateProperty();
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
*/
/*
for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}
*/
/*******holder1 removed*******/
//holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
/*******holder1 removed*******/
//holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;

/*******holder1 removed*******/	 
//rawReq=holder1.getXml();
/*
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 log.info ">>>>    context.requestContent : " +context.requestContent
	  testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/







				//******************************
				//Start condition for References
				//******************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				///////log.info "				>>>> This scenario step has References";
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has References";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];


				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;


				/********************Set the Param name to some invalid value and run request once*************/
				//String subcriberIdToSet=testRunner.testCase.getPropertyValue('subscriberId');
				//if((APIName.toString().contains('createMerchant'))||(APIName.toString().contains('verifyClient')))
				//{
				/*************************88888***********/
				//testRunner.testCase.setPropertyValue(paramName,'abcde1001');
				//}
				//testRunner.runTestStepByName(APIName);
				//testRunner.testCase.setPropertyValue('subscriberId',subcriberIdToSet);
				
				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;

				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				mapToRefer = Integer.parseInt(stepToRefer);

				if(mapToRefer==null)
				{
					log.info "		>>>>		============ Map for Step No - "+stepToRefer+" cotains "+mapToRefer;
					
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
				//ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);

				/*
				String[] getReferenceSplittedByDot = paramValueToFetch.split("\\.");
				int NoOfDotsInReferences = getReferenceSplittedByDot.size();
				//String ReferringValue = "";
				if(NoOfDotsInReferences>2)
				{
				log.info "			>>>>>>>>. came to if block NoOfDotsInReferences>2 ";
				//id.bancBoxId
				String getMapString='';
				for(int iRefCount=0;iRefCount<NoOfDotsInReferences;iRefCount++)
				{
					getMapString=getMapString+'.get('+getReferenceSplittedByDot[iRefCount]+')'
				}
				log.info "    >>>>    ====    getMapString : "+getMapString;
				String getMapContentText='(globalMap.get(mapToRefer))'+getMapString;
				log.info '    >>>>    ====    getMapContentText : "+getMapContentText;
				ReferringValue = getMapContentText;
				//ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);
				}
				*/
				if(!((globalMap.get(mapToRefer)).toString().contains(paramValueToFetch)))
				{
					log.info "		>>>>	================= MAP DOES NOT CONTAIN THE PARAM ====================";
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
					break;
				}
				/*
				if((globalMap.get(mapToRefer)).get(paramValueToFetch)==null)
				{
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				*/
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch);
				log.info "				*********  ReferringValue = "+ReferringValue


				
				//log.info "	REQUEST holder1 9901 : "+holder1;
				/*******holder1 removed*******/
				//log.info "	REQUEST holder1.getXml() 9901 : "+holder1.getXml();


				/*****commenting out this section where the referred value is put in the node directly
					putting the same value in test case property from where it will be fetched while running request***************************************/
				/*
				def groovyUtilsForUpdatingReferences = new com.eviware.soapui.support.GroovyUtils( context ) 
				// get XmlHolder for request message def
				
				String req2Name=APIName+"#Request";
				def holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				//holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder(req2Name);
				// change parameter value using XPath
			//	log.info "		++++++  holderForRef  : "+holderForRef;
				log.info "		++++++  holderForRef.getXml() : "+holderForRef.getXml();
				paramNameToSet = "//"+paramName;
				//paramNameToSet = paramName;
				log.info "		>>>> ++ Parameter to set : "+paramNameToSet;
				holderForRef[paramNameToSet] = ReferringValue;
				//holder1[paramNameToSet] = ReferringValue;
				// write updated request back to teststep
				holderForRef.updateProperty();
				//holder1.updateProperty();
				context.requestContent = holderForRef.xml;
				//context.requestContent = holder1.xml;
				log.info "	REQUEST AFTER SETTING REF 1 = :"+context.requestContent;
				requestAfterRef=holderForRef.getXml();
				log.info "	REQUEST AFTER SETTING REF 1 = :"+requestAfterRef;
				
				log.info "		++++++  holderForRef.getXml() 2: "+holderForRef.getXml();
				/*******holder1 removed*******/
				//log.info "		++++++ REQUEST holder1.getXml() 2 9901 : "+holder1.getXml();
				
				
				
				/*
				//def holderForRef2 = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				rawReq=holderForRef.getXml();
				testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq);
				*/
				/*****END - commenting out this section where the referred value is put in the node directly
					putting the same value in test case property from where it will be fetched while running request***************************************/

				//[paramNameToSet] = ReferringValue;
				testRunner.testCase.setPropertyValue(paramName,ReferringValue);
				
				}
				}
				}





			/************END OF REFERENCES SCRIPT********************/

	if((APIName.toString().contains('createMerchant'))||(APIName.toString().contains('verifyClient')))
	{
	log.info "    >>>>    =====   Setting subcriberId=12 and running req and setting back to 200300";
	testRunner.testCase.setPropertyValue('subscriberId','12');
	//testRunner.runTestStepByName(APIName);
	testRunner.testCase.setPropertyValue('subscriberId','200300');
	}
	else
	{
		log.info "    >>>>    ====  Running request once.";
		//testRunner.runTestStepByName(APIName);
	}
	
	log.info "        >>>>>>>>    Value from TC PRop is subscriberId : "+testRunner.testCase.getPropertyValue('subscriberId');

	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";


			//Fetch the time taken to run the request
			String requestTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		====TIME TAKEN - "+requestTimeTaken;
			
			Label timeTakenByReq = new Label(8, iCounter1, requestTimeTaken, normalFormat3);
			sheet.addCell(timeTakenByReq);


def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();

def groovyUtilsFinalReqResponse = new com.eviware.soapui.support.GroovyUtils(context);
def requestHolder = groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent );
def responseHolder = groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.responseContent );
def finalRequest = requestHolder.getXml();
def finalResponse = responseHolder.getXml();
log.info ' ';
log.info ' ';
log.info '    >>>>    ==== finalRequest : '+finalRequest;
log.info '    >>>>    ==== finalResponse : '+finalResponse;
log.info ' ';
log.info ' ';


Label labelFinalRequest = new Label(6,iCounter1,finalRequest);
sheet.addCell(labelFinalRequest);
Label labelFinalResponse = new Label(7,iCounter1,finalResponse);
sheet.addCell(labelFinalResponse);
	  		



	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	/*
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq2);
	  		sheet.addCell(labelRawRequest);
	  		
	 	}
	 	else{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}

*/




	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCounter1,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(7,iCounter1,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	//Label labelRequest = new Label(6,iCounter1,rawReq);
	//   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(7,iCounter1,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 




 
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);




		//condition to put response values in map
		if(!((xpath2=="")&&(ActualResponseValue=="")))
		{
			String responseParam=TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
			String responseValue=ActualResponseValue;
			mapName.put(responseParam,responseValue);
			log.info "		>>>>  +++++++ NOW MAPNAME LOOKS LIKE : "+mapName;
		}
		else{
			log.info "		>>>>	+++++++ NOT PUTTING VALUE FOR " +xpath2+ " INTO MAP BECAUSE VALUE FETCHED IS : "+ActualResponseValue;
		}




		

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCounter1, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCounter1,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }

	    log.info "		>>>>		++++++++++++++ map to put in Global map now looks like : "+mapName;
		
	}
	globalMap.put(mapNo,mapName);
	log.info "		>>>>		+++++++++++++++++++++++++  Global Map looks like this NOW : "+globalMap; 
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(iCounterForResponseValues=1;iCounterForResponseValues<ResponseColCount;iCounterForResponseValues++)
	{

	  if(!(TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounterForResponseValues;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounterForResponseValues).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCounter1, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(9+iDivisionCount))
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			*/
			
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else if(flagCount<1001)
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			*/
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
			sheet.addCell(label03);
			if(!(UnitTestingFlag=="Y"))
			{
			break stepCountLoop;
			}
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;


/*************** Clearing TC Properties by running script ***************/
/*
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
*/
/************************************************************************/
break;
//continue;
 	
 }/********END Iterating loop for No of Test Cases in Test Data Sheet *********/
		


			
			}
			//******************************************************
			//END loop for number of steps in the scenario
			//******************************************************
			


			



		
		}//*******************************************************
		//END loop for number of scenarios in the scenario file
		//*******************************************************


workbook.write();
workbook.close();
log.info "	>>>>		------------- WORKBOOK UPDATED AND CLOSED -------------- ";




log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver-July23-1" id="c9a22e1b-6bfe-4f52-8499-c74c93a08424" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "****************************************************************************************************************************************";
log.info "***************************STARTING AUTOMATION DRIVER FOR SCENARIO TESTING***********************************";
log.info "=============================================================================================================";
log.info " ";
log.info " ";

//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet requestSchemaSheet1;
Sheet requestValuesSheet1;
Sheet responseSchemaSheet1;
Sheet responseValuesSheet1;

String APIName="";
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//***************************************************
//Variable to store TCID for the Test Case to execute
//***************************************************
String TestCaseID 
//******************************************************
//Array to separate and store cell contents based on '|'
//******************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//***********************************************************
//Counter for looping through number of steps in the scenario
//***********************************************************
int iCounter1;
def holder1;
def rawReq="";


/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String SetNo = context.expand('${#Project#SetNo}');
//def TestDataFile = context.expand( '${#Project#TestDataFile}');
//String APIName = context.expand( '${#Project#APIName}');
String TestScenarioFile=context.expand('${#Project#ScenarioFileLocation}');
String UnitTestingFlag=context.expand('${#Project#UnitTesting}');
String endPoint = context.expand('${#Project#Endpoint}');
String envSet=context.expand('${#Project#Env}');

log.info "===================== ScenarioFileLocation : "+TestScenarioFile;
log.info "===================== UnitTestingFlag : "+UnitTestingFlag;
log.info "===================== SetNo : "+SetNo;
log.info "===================== Env : "+envSet;
log.info "===================== Endpoint : "+endPoint;




aSet = testRunner.testCase.testSuite;
aSet.setPropertyValue('ENV',envSet);
log.info "    >>>>   ====  Environment SET in TestSuite Properties : "+aSet.getPropertyValue('ENV');



/*
def jobsTCase = testRunner.testCase.testSuite.testCases["JobsTest"]
jobsTCase.setPropertyValue('ENV',envSet);
log.info "    >>>>   ====   ENV SET IN JOB TC : "+jobsTCase.getPropertyValue('ENV');
*/

/*
return null;
a = testRunner.testCase.testSuite;
jobEnv = envSet;
a.setPropertyValue('ENV',jobEnv);
log.info "    >>>>   ====  Environment SET in TestSuite Properties : "+a.getPropertyValue('ENV');

//testRunner.cancel( "Its getting Cancelled" );
//testRunner.fail( "It didn't work" );
return null;
*/

//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";


	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	int noOfScenarioSheets = getSenarioSheets.size();
	log.info "		>>>>		Number of Sheets in this Test Scenario File are : "+noOfScenarioSheets;


log.info "		>>>>		==============================="
int Length =  TestScenarioFile.lastIndexOf('\\');
int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
String excelName = TestScenarioFile.substring(Length+1,Length2);
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
//log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResultFileLocation = TestScenarioFile.substring(0,Length);
log.info "	===	ResultFileLocation : "+ResultFileLocation;
log.info "	===	excelName : "+excelName;
//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResultFile =  ResultFileLocation + "\\Results\\"+excelName+"-RESULT-" +currentTime+".xls";
		
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResultFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
workbook = Workbook.createWorkbook(new File(TestResultFile));



		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(int sheetCount=1;sheetCount<noOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();
		log.info " ";	
		log.info "		>>>>		Reading Sheet : "+sheetName;

		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info " ";
			log.info "=========================================================================";
			log.info "		>>>>		Scenario in sheet "+sheetName+" NOT set for execution";
			log.info "=========================================================================";
			log.info " ";
			continue;
		}

		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);

		
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "REQUEST"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);

					Label timeTakenLabel = new Label(8, 3, "TimeTaken[ms]"); 
					sheet.addCell(timeTakenLabel);

		//****************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();


		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];



			//******************************************************
			//Starting loop for number of steps in the scenario
			//******************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{

		/*************** Clearing TC Properties by running script ***************/
		log.info "		>>>>		Removing Properties at Test Case level";
		log.info "		>>>>		======================================";
		testRunner.runTestStepByName("ClearTCProperties");
		/************************************************************************/

				
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.BRIGHT_GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont3 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat3 = new WritableCellFormat(normalFont3);
			normalFormat3.setBackground(jxl.format.Colour.YELLOW);

			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontOrange = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatOrange = new WritableCellFormat(normalFontOrange);
			normalFormatOrange.setBackground(jxl.format.Colour.ORANGE);

			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontTurquoise = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatTurquoise = new WritableCellFormat(normalFontTurquoise);
			normalFormatTurquoise.setBackground(jxl.format.Colour.TURQUOISE);


			iCountFlag=0;
			//log.info "		>>>>		: Reading Row No :"+(iCounter1+1);
			log.info " ";
			log.info "=================================================================================================================================================================================================================";
			log.info "		>>>>		********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents()+"-"+SenarioSheet1.getCell(4,iCounter1).getContents();
			
			//************************************************
			//condition to check if the scenario step is empty
			//************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}


			//Adding Description and ExpectedResult to result file
			Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
			sheet.addCell(stepNoValue);

			Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
			sheet.addCell(descriptionValue);

			Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
			sheet.addCell(expectedValue);

			Label stepNameValue = new Label(3, iCounter1, SenarioSheet1.getCell(3, iCounter1).getContents(),normalFormatOrange); 
			sheet.addCell(stepNameValue);

			Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
			sheet.addCell(referencesValue);





			
			//******************************************
			//Checking if step refers to Run a Job
			//******************************************
			
			//Checking if the cell where env for runnning job is provided is empty. Script will then take up the job env from TC prop
			//START Condition to check if the step refers to Run a JOB
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('job')))
			{
				log.info " ";
				log.info " ";
			def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			
			 if(SenarioSheet1.getCell(5,iCounter1).getContents().isEmpty())
				{
				jobEnv =  testRunner.testCase.testSuite.getPropertyValue("ENV");
				log.info "    >>>>    ======================JOBS ARE SCHEDULED FOR -"+jobEnv+"- Environment=================";
				}
			
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('outbound')))
			{
			 log.info "		>>>>	 ====	For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running OUTBOUND job";
			 //******************************
			 //Running Four Oaks Outbound job
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-FourOakdOutbound"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			//String jobTimeTaken=tStep.getTimeTaken();
			//String jobTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		FourOaksOutBoundJob Executed";
			Label labeljobOutbound = new Label(3, iCounter1,"job-FourOaksOutBound" ,normalFormatOrange); 
			sheet.addCell(labeljobOutbound);
			Label labeljobOutboundResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobOutboundResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('draft')))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running REALIZE DRAFT job";
			 	//******************************
			 	//Running Four Oaks Outbound job
			 	//****************************** 

			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-RealizeDraft"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		RealizeDraft Executed";
			Label labeljobRealizeDraft = new Label(3, iCounter1,"job-RealizeDraft" ,normalFormatOrange); 
			sheet.addCell(labeljobRealizeDraft);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			 
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('push')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running Push Notification job";
			 //******************************
			 //Running Four Oaks Outbound job
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-PushNotification"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		PushNotification Executed";
			Label labeljobPushNoti = new Label(3, iCounter1,"job PushNotification" ,normalFormatOrange); 
			sheet.addCell(labeljobPushNoti);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('evergreenob')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running  EvergreenOBProcessor job";
			 //******************************
			 //Running Four Oaks Outbound job
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-EvergreenOBProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-EvergreenOBProcessor Executed";
			Label labeljobEvergreenOB = new Label(3, iCounter1,"job EvergreenOBProcessor" ,normalFormatOrange); 
			sheet.addCell(labeljobEvergreenOB);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('evergreenib')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running EvergreenIBProcessor  job";
			 //******************************
			 //Running Four Oaks Outbound job
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-EvergreenIBProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-EvergreenIBProcessor Executed";
			Label labeljobEvergreenIB = new Label(3, iCounter1,"job EvergreenIBProcessor" ,normalFormatOrange); 
			sheet.addCell(labeljobEvergreenIB);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('wiretrans')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running Push Notification job";
			 //******************************
			 //Running Four Oaks Outbound job
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-WireTransProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-WireTransProcessor Executed";
			Label labeljobWireTrans = new Label(3, iCounter1,"job WireTransProcessor" ,normalFormatOrange); 
			sheet.addCell(labeljobWireTrans);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
			sheet.addCell(labeljobOutboundTime);

			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('orccoutbound')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running Push Notification job";
			 //******************************
			 //Running Four Oaks Outbound job
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-ORCCOutboundProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-ORCCOutboundProcessor Executed";
			Label labeljobOrccOutbound = new Label(3, iCounter1,"job ORCCOutboundProcessor" ,normalFormatOrange); 
			sheet.addCell(labeljobOrccOutbound);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
			sheet.addCell(labeljobOutboundTime);
			continue;
			}
			if((SenarioSheet1.getCell(3,iCounter1).getContents().toLowerCase().contains('rppsoutbound')))
			{
			 log.info "				>>>> For Scenario "+sheetName+" -STEP NO- " +(iCounter1-3)+" is Running Push Notification job";
			 //******************************
			 //Running Four Oaks Outbound job
			 //****************************** 
			//def tCase = testRunner.testCase.testSuite.testCases["JobsTest"];
			def tStep = tCase.testSteps["RunJob-RPPSOutboundProcessor"];
			job_test_result=tStep.run(testRunner, context);
			String jobTimeTaken=(job_test_result.getTimeTaken());
			log.info "		>>>>		Job-RPPSOutboundProcessor Executed";
			Label labeljobRppsOutbound = new Label(3, iCounter1,"job RPPSOutboundProcessor" ,normalFormatOrange); 
			sheet.addCell(labeljobRppsOutbound);
			Label labeljobResult = new Label(4, iCounter1,"EXECUTED" ,normalFormat); 
			sheet.addCell(labeljobResult);
			Label labeljobOutboundTime = new Label(8, iCounter1,jobTimeTaken ,normalFormat3); 
sheet.addCell(labeljobOutboundTime);
			continue;
			}
			
			}









			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;
			//mapName = "map"+mapNo;
			HashMap mapName= [:];
			//log.info "	mapName : "+mapName;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	APIName=RequestName;
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents().toString();
		 	log.info " ";
		 	log.info " ";
		 	log.info "		>>>>		"+RequestName+" | "+TestCaseID;
			


				//Getting the location of TestData file for the API Request
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				//String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				//Test Data files for the API Request must be available in a folder named 'TestDataFiles' in the same location where scenario file is placed.
				String TestDataFile = TestDataFileLocation + "\\TestData\\"+RequestName+".xls";
				log.info " ";
				log.info "		>>>>		Referrring TestDataFile  :"+TestDataFile;



 TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();


	def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {


		if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					log.info "------======---- Not set for EXECUTION : "+TestDataValues1.getCell(0,iCountTestCase).getContents();
					continue;
				}

flagCount=9;

List<String> xmlTagToSetBlank = new ArrayList<String>();

	 //int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+SetNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/
/*
	def groovyUtilsForExtraRun = new com.eviware.soapui.support.GroovyUtils( context ) 
	// get XmlHolder for request message def
	String reqNameforExtraRun=APIName+"#Request";
	holderForExtraRun = groovyUtilsForExtraRun.getXmlHolder(reqNameforExtraRun);
	// change password using XPath
	holderForExtraRun["//subscriberId"] = '1234';
	// write updated request back to teststep
	holderForExtraRun.updateProperty();
	context.requestContent = holderForExtraRun.xml;
*/
	/*
	testRunner.testCase.setPropertyValue('subscriberId','12');
	testRunner.runTestStepByName(APIName);
	testRunner.testCase.setPropertyValue('subscriberId','200300');
	//testRunner.testCase.setPropertyValue('subscriberId','');
	*/
	/*********************************************************************************/


	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

/*
String subcriberIdToSet=testRunner.testCase.getPropertyValue('subscriberId');
if((APIName.toString().contains('createMerchant'))||(APIName.toString().contains('verifyClient')))
	{
		testRunner.testCase.setPropertyValue('subscriberId','200300');
	}
testRunner.runTestStepByName(APIName);
testRunner.testCase.setPropertyValue('subscriberId',subcriberIdToSet);
*/

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 //testRunner.runTestStepByName(APIName);
	 }



//def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);



//Fetching the request
	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

	
	//Run Request again to eliminate null object error
	 //testRunner.runTestStepByName(APIName);
	// def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	
	 /*******holder1 removed*******/
	 //holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);




	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 
	 /*******holder1 removed*******/
	 //req1 = holder1.getXml();
	 
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 /*
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	*/
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	
	 /*******holder1 removed*******/
	 //holder1.updateProperty();
	/*
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }*/

/*
int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	holder1.updateProperty();
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
*/
/*
for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}
*/
/*******holder1 removed*******/
//holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
/*******holder1 removed*******/
//holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;

/*******holder1 removed*******/	 
//rawReq=holder1.getXml();
/*
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 log.info ">>>>    context.requestContent : " +context.requestContent
	  testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/







				//******************************
				//Start condition for References
				//******************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				///////log.info "				>>>> This scenario step has References";
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has References";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];


				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;


				/********************Set the Param name to some invalid value and run request once*************/
				//String subcriberIdToSet=testRunner.testCase.getPropertyValue('subscriberId');
				//if((APIName.toString().contains('createMerchant'))||(APIName.toString().contains('verifyClient')))
				//{
				/*************************88888***********/
				//testRunner.testCase.setPropertyValue(paramName,'abcde1001');
				//}
				//testRunner.runTestStepByName(APIName);
				//testRunner.testCase.setPropertyValue('subscriberId',subcriberIdToSet);
				
				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;

				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				mapToRefer = Integer.parseInt(stepToRefer);

				if(mapToRefer==null)
				{
					log.info "		>>>>		============ Map for Step No - "+stepToRefer+" cotains "+mapToRefer;
					
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
				//ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);

				/*
				String[] getReferenceSplittedByDot = paramValueToFetch.split("\\.");
				int NoOfDotsInReferences = getReferenceSplittedByDot.size();
				//String ReferringValue = "";
				if(NoOfDotsInReferences>2)
				{
				log.info "			>>>>>>>>. came to if block NoOfDotsInReferences>2 ";
				//id.bancBoxId
				String getMapString='';
				for(int iRefCount=0;iRefCount<NoOfDotsInReferences;iRefCount++)
				{
					getMapString=getMapString+'.get('+getReferenceSplittedByDot[iRefCount]+')'
				}
				log.info "    >>>>    ====    getMapString : "+getMapString;
				String getMapContentText='(globalMap.get(mapToRefer))'+getMapString;
				log.info '    >>>>    ====    getMapContentText : "+getMapContentText;
				ReferringValue = getMapContentText;
				//ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);
				}
				*/
				if(!((globalMap.get(mapToRefer)).toString().contains(paramValueToFetch)))
				{
					log.info "		>>>>	================= MAP DOES NOT CONTAIN THE PARAM ====================";
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
					break;
				}
				/*
				if((globalMap.get(mapToRefer)).get(paramValueToFetch)==null)
				{
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				*/
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch);
				log.info "				*********  ReferringValue = "+ReferringValue


				
				//log.info "	REQUEST holder1 9901 : "+holder1;
				/*******holder1 removed*******/
				//log.info "	REQUEST holder1.getXml() 9901 : "+holder1.getXml();


				/*****commenting out this section where the referred value is put in the node directly
					putting the same value in test case property from where it will be fetched while running request***************************************/
				/*
				def groovyUtilsForUpdatingReferences = new com.eviware.soapui.support.GroovyUtils( context ) 
				// get XmlHolder for request message def
				
				String req2Name=APIName+"#Request";
				def holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				//holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder(req2Name);
				// change parameter value using XPath
			//	log.info "		++++++  holderForRef  : "+holderForRef;
				log.info "		++++++  holderForRef.getXml() : "+holderForRef.getXml();
				paramNameToSet = "//"+paramName;
				//paramNameToSet = paramName;
				log.info "		>>>> ++ Parameter to set : "+paramNameToSet;
				holderForRef[paramNameToSet] = ReferringValue;
				//holder1[paramNameToSet] = ReferringValue;
				// write updated request back to teststep
				holderForRef.updateProperty();
				//holder1.updateProperty();
				context.requestContent = holderForRef.xml;
				//context.requestContent = holder1.xml;
				log.info "	REQUEST AFTER SETTING REF 1 = :"+context.requestContent;
				requestAfterRef=holderForRef.getXml();
				log.info "	REQUEST AFTER SETTING REF 1 = :"+requestAfterRef;
				
				log.info "		++++++  holderForRef.getXml() 2: "+holderForRef.getXml();
				/*******holder1 removed*******/
				//log.info "		++++++ REQUEST holder1.getXml() 2 9901 : "+holder1.getXml();
				
				
				
				/*
				//def holderForRef2 = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				rawReq=holderForRef.getXml();
				testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq);
				*/
				/*****END - commenting out this section where the referred value is put in the node directly
					putting the same value in test case property from where it will be fetched while running request***************************************/

				//[paramNameToSet] = ReferringValue;
				testRunner.testCase.setPropertyValue(paramName,ReferringValue);
				
				}
				}
				}





			/************END OF REFERENCES SCRIPT********************/

	if((APIName.toString().contains('createMerchant'))||(APIName.toString().contains('verifyClient')))
	{
	log.info "    >>>>    =====   Setting subcriberId=12 and running req and setting back to 200300";
	testRunner.testCase.setPropertyValue('subscriberId','12');
	//testRunner.runTestStepByName(APIName);
	testRunner.testCase.setPropertyValue('subscriberId','200300');
	}
	else
	{
		log.info "    >>>>    ====  Running request once.";
		//testRunner.runTestStepByName(APIName);
	}
	
	log.info "        >>>>>>>>    Value from TC PRop is subscriberId : "+testRunner.testCase.getPropertyValue('subscriberId');

	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";


			//Fetch the time taken to run the request
			String requestTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		====TIME TAKEN - "+requestTimeTaken;
			
			Label timeTakenByReq = new Label(8, iCounter1, requestTimeTaken, normalFormat3);
			sheet.addCell(timeTakenByReq);


def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();

def groovyUtilsFinalReqResponse = new com.eviware.soapui.support.GroovyUtils(context);
def requestHolder = groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent );
def responseHolder = groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.responseContent );
def finalRequest = requestHolder.getXml();
def finalResponse = responseHolder.getXml();
log.info ' ';
log.info ' ';
log.info '    >>>>    ==== finalRequest : '+finalRequest;
log.info '    >>>>    ==== finalResponse : '+finalResponse;
log.info ' ';
log.info ' ';


Label labelFinalRequest = new Label(6,iCounter1,finalRequest);
sheet.addCell(labelFinalRequest);
Label labelFinalResponse = new Label(7,iCounter1,finalResponse);
sheet.addCell(labelFinalResponse);
	  		



	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	/*
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq2);
	  		sheet.addCell(labelRawRequest);
	  		
	 	}
	 	else{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}

*/




	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCounter1,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(7,iCounter1,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	//Label labelRequest = new Label(6,iCounter1,rawReq);
	//   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(7,iCounter1,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 




 
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);




		//condition to put response values in map
		if(!((xpath2=="")&&(ActualResponseValue=="")))
		{
			String responseParam=TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
			String responseValue=ActualResponseValue;
			mapName.put(responseParam,responseValue);
			log.info "		>>>>  +++++++ NOW MAPNAME LOOKS LIKE : "+mapName;
		}
		else{
			log.info "		>>>>	+++++++ NOT PUTTING VALUE FOR " +xpath2+ " INTO MAP BECAUSE VALUE FETCHED IS : "+ActualResponseValue;
		}




		

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCounter1, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCounter1,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }

	    log.info "		>>>>		++++++++++++++ map to put in Global map now looks like : "+mapName;
		
	}
	globalMap.put(mapNo,mapName);
	log.info "		>>>>		+++++++++++++++++++++++++  Global Map looks like this NOW : "+globalMap; 
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(iCounterForResponseValues=1;iCounterForResponseValues<ResponseColCount;iCounterForResponseValues++)
	{

	  if(!(TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounterForResponseValues;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounterForResponseValues).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCounter1, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(9+iDivisionCount))
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			*/
			
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else if(flagCount<1001)
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			*/
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
			sheet.addCell(label03);
			if(!(UnitTestingFlag=="Y"))
			{
			break stepCountLoop;
			}
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;


/*************** Clearing TC Properties by running script ***************/
/*
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
*/
/************************************************************************/
break;
//continue;
 	
 }/********END Iterating loop for No of Test Cases in Test Data Sheet *********/
		


			
			}
			//******************************************************
			//END loop for number of steps in the scenario
			//******************************************************
			


			



		
		}//*******************************************************
		//END loop for number of scenarios in the scenario file
		//*******************************************************


workbook.write();
workbook.close();
log.info "	>>>>		------------- WORKBOOK UPDATED AND CLOSED -------------- ";




log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="properties" name="REG_Prop" id="beefb75a-26b8-4f31-9b8d-084f7251ed38"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>global_username</con:name><con:value>AUTOMATION</con:value></con:property><con:property><con:name>global_password</con:name><con:value>abcd1234</con:value></con:property><con:property><con:name>SetNo</con:name><con:value>100100</con:value></con:property><con:property><con:name>Endpoint</con:name><con:value>regression-api.bancbox.com</con:value></con:property><con:property><con:name>ScenarioFileLocation</con:name><con:value>E:\CORE QA\july,23\CORE-ScenarioFile1.xls</con:value></con:property><con:property><con:name>UnitTesting</con:name><con:value>N</con:value></con:property><con:property><con:name>ENV</con:name><con:value>REG</con:value></con:property><con:property><con:name>subscriberId</con:name><con:value>200300</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="BETA_Prop" id="d700254f-760b-48ae-9b5b-c9328cc665d2"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>global_username</con:name><con:value>Mehak1</con:value></con:property><con:property><con:name>global_password</con:name><con:value>abcd1234</con:value></con:property><con:property><con:name>SetNo</con:name><con:value>100100100</con:value></con:property><con:property><con:name>Endpoint</con:name><con:value>beta-api.bancbox.com</con:value></con:property><con:property><con:name>ScenarioFileLocation</con:name><con:value>E:\CORE QA\july,23\CORE-ScenarioFile1.xls</con:value></con:property><con:property><con:name>UnitTesting</con:name><con:value>N</con:value></con:property><con:property><con:name>ENV</con:name><con:value>BETA</con:value></con:property><con:property><con:name>subscriberId</con:name><con:value>200155</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="QA_Prop" id="b94fe2b6-6e18-4cbc-8924-22756e6f7d38"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>global_username</con:name><con:value>Mehak</con:value></con:property><con:property><con:name>global_password</con:name><con:value>abcd1234</con:value></con:property><con:property><con:name>SetNo</con:name><con:value>100100</con:value></con:property><con:property><con:name>Endpoint</con:name><con:value>qa-api.bancbox.com:9090</con:value></con:property><con:property><con:name>ScenarioFileLocation</con:name><con:value>E:\CORE QA\july,23\CORE-ScenarioFile1.xls</con:value></con:property><con:property><con:name>UnitTesting</con:name><con:value>N</con:value></con:property><con:property><con:name>ENV</con:name><con:value>QA</con:value></con:property><con:property><con:name>subscriberId</con:name><con:value>200222</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="SetProjectProp" id="f2201d3a-dca9-46c0-91cd-14d797db705d"><con:settings/><con:config><script>String propStepName='REG_Prop';

//String propStepName='QA_Prop';

//String propStepName='BETA_Prop';

log.info " ========================  STARTING SCRIPT FOR SETTING PROJECT PROPERTIES ==================";


String[] props= new String[testRunner.testCase.getPropertyCount()];
log.info "    ====  props.size() = "+props.size();
a=testRunner.testCase.testSteps[propStepName];
String[] propNames=testRunner.testCase.getTestStepByName(propStepName).getPropertyNames();
int propSize=propNames.size();
log.info " ====  propSize "+propSize;

for(int iCountOfProp=0;iCountOfProp&lt;propSize;iCountOfProp++)
{
log.info "  -- "+a.getPropertyValue(propNames[iCountOfProp]);
testRunner.testCase.testSuite.project.setPropertyValue(propNames[iCountOfProp],a.getPropertyValue(propNames[iCountOfProp]));
}

/*************************END OF SCRIPT************************/
</script></con:config></con:testStep><con:testStep type="groovy" name="LoopTestCaseProp" id="49217f93-abbb-486f-a357-61a3b85d4316"><con:settings/><con:config><script>String[] props = new String[testRunner.testCase.getPropertyCount()];
props = testRunner.testCase.getPropertyNames();
log.info "    >>>>    TEST CASE Properties Size  :  "+props.size();
log.info ' ';

a=testRunner.testCase;

for (int iCountOfTCProp=0;iCountOfTCProp&lt;props.size();iCountOfTCProp++)
{
String propValue=a.getPropertyValue(props[iCountOfTCProp]);
log.info '    >>>>    '+props[iCountOfTCProp]+' - '+propValue;

 if(propValue.trim()=='BLANK')
 {
 	log.info '    >>>>    THIS IS BLANK PROPERTY';
 }
  if(propValue.trim()=='')
 {
 	log.info '    >>>>    THIS IS EMPTY PROPERTY';
 }
 log.info '==========================================================';
 //log.info ">>     "+props[i];
 //testRunner.testCase.setPropertyValue(props[i],"");
//testRunner.testCase.removeProperty(props[i]);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver-July13-4" id="d64d607c-c94e-481a-82b8-cc1642746091" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "****************************************************************************************************************************************";
log.info "***************************STARTING AUTOMATION DRIVER FOR SCENARIO TESTING***********************************";
log.info "=============================================================================================================";
log.info " ";
log.info " ";

//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet requestSchemaSheet1;
Sheet requestValuesSheet1;
Sheet responseSchemaSheet1;
Sheet responseValuesSheet1;

String APIName="";
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//***************************************************
//Variable to store TCID for the Test Case to execute
//***************************************************
String TestCaseID 
//******************************************************
//Array to separate and store cell contents based on '|'
//******************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//***********************************************************
//Counter for looping through number of steps in the scenario
//***********************************************************
int iCounter1;
def holder1;
def rawReq="";


/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String SetNo = context.expand('${#Project#SetNo}');
//def TestDataFile = context.expand( '${#Project#TestDataFile}');
//String APIName = context.expand( '${#Project#APIName}');
String TestScenarioFile=context.expand('${#Project#ScenarioFileLocation}');
String UnitTestingFlag=context.expand('${#Project#UnitTesting}');


log.info "=====================ScenarioFileLocation : "+TestScenarioFile;
log.info "=====================UnitTestingFlag : "+UnitTestingFlag;
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";


	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	int noOfScenarioSheets = getSenarioSheets.size();
	log.info "		>>>>		Number of Sheets in this Test Scenario File are : "+noOfScenarioSheets;


log.info "		>>>>		==============================="
int Length =  TestScenarioFile.lastIndexOf('\\');
int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
String excelName = TestScenarioFile.substring(Length+1,Length2);
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
//log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResultFileLocation = TestScenarioFile.substring(0,Length);
log.info "	===	ResultFileLocation : "+ResultFileLocation;
log.info "	===	excelName : "+excelName;
//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResultFile =  ResultFileLocation + "\\Results\\"+excelName+"-RESULT-" +currentTime+".xls";
		
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResultFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
workbook = Workbook.createWorkbook(new File(TestResultFile));



		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(int sheetCount=1;sheetCount<noOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();
		log.info " ";	
		log.info "		>>>>		Reading Sheet : "+sheetName;

		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info " ";
			log.info "=========================================================================";
			log.info "		>>>>		Scenario in sheet "+sheetName+" NOT set for execution";
			log.info "=========================================================================";
			log.info " ";
			continue;
		}

		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);

		
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "REQUEST"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);

					Label timeTakenLabel = new Label(8, 3, "TimeTaken[ms]"); 
					sheet.addCell(timeTakenLabel);

		//****************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();


		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];



			//******************************************************
			//Starting loop for number of steps in the scenario
			//******************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{

		/*************** Clearing TC Properties by running script ***************/
		log.info "		>>>>		Removing Properties at Test Case level";
		log.info "		>>>>		======================================";
		testRunner.runTestStepByName("ClearTCProperties");
		/************************************************************************/

				
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.BRIGHT_GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont3 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat3 = new WritableCellFormat(normalFont3);
			normalFormat3.setBackground(jxl.format.Colour.YELLOW);

			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontOrange = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatOrange = new WritableCellFormat(normalFontOrange);
			normalFormatOrange.setBackground(jxl.format.Colour.ORANGE);

			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontTurquoise = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatTurquoise = new WritableCellFormat(normalFontTurquoise);
			normalFormatTurquoise.setBackground(jxl.format.Colour.TURQUOISE);


			iCountFlag=0;
			//log.info "		>>>>		: Reading Row No :"+(iCounter1+1);
			log.info " ";
			log.info "=================================================================================================================================================================================================================";
			log.info "		>>>>		********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents()+"-"+SenarioSheet1.getCell(4,iCounter1).getContents();
			
			//************************************************
			//condition to check if the scenario step is empty
			//************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}


			//Adding Description and ExpectedResult to result file
			Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
			sheet.addCell(stepNoValue);

			Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
			sheet.addCell(descriptionValue);

			Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
			sheet.addCell(expectedValue);

			Label stepNameValue = new Label(3, iCounter1, SenarioSheet1.getCell(3, iCounter1).getContents(),normalFormatOrange); 
			sheet.addCell(stepNameValue);

			Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
			sheet.addCell(referencesValue);



			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;
			//mapName = "map"+mapNo;
			HashMap mapName= [:];
			//log.info "	mapName : "+mapName;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	APIName=RequestName;
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents().toString();
		 	log.info " ";
		 	log.info " ";
		 	log.info "		>>>>		"+RequestName+" | "+TestCaseID;
			


				//Getting the location of TestData file for the API Request
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				//String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				//Test Data files for the API Request must be available in a folder named 'TestDataFiles' in the same location where scenario file is placed.
				String TestDataFile = TestDataFileLocation + "\\TestData\\"+RequestName+".xls";
				log.info " ";
				log.info "		>>>>		Referrring TestDataFile  :"+TestDataFile;



 TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();


	def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {


		if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					log.info "------======---- Not set for EXECUTION : "+TestDataValues1.getCell(0,iCountTestCase).getContents();
					continue;
				}

flagCount=9;

List<String> xmlTagToSetBlank = new ArrayList<String>();

	 //int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+SetNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/
/*
	def groovyUtilsForExtraRun = new com.eviware.soapui.support.GroovyUtils( context ) 
	// get XmlHolder for request message def
	String reqNameforExtraRun=APIName+"#Request";
	holderForExtraRun = groovyUtilsForExtraRun.getXmlHolder(reqNameforExtraRun);
	// change password using XPath
	holderForExtraRun["//subscriberId"] = '1234';
	// write updated request back to teststep
	holderForExtraRun.updateProperty();
	context.requestContent = holderForExtraRun.xml;
*/
	/*
	testRunner.testCase.setPropertyValue('subscriberId','12');
	testRunner.runTestStepByName(APIName);
	testRunner.testCase.setPropertyValue('subscriberId','200300');
	//testRunner.testCase.setPropertyValue('subscriberId','');
	*/
	/*********************************************************************************/


	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

/*
String subcriberIdToSet=testRunner.testCase.getPropertyValue('subscriberId');
if((APIName.toString().contains('createMerchant'))||(APIName.toString().contains('verifyClient')))
	{
		testRunner.testCase.setPropertyValue('subscriberId','200300');
	}
testRunner.runTestStepByName(APIName);
testRunner.testCase.setPropertyValue('subscriberId',subcriberIdToSet);
*/

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 //testRunner.runTestStepByName(APIName);
	 }



//def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);



//Fetching the request
	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

	
	//Run Request again to eliminate null object error
	 //testRunner.runTestStepByName(APIName);
	// def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	
	 /*******holder1 removed*******/
	 //holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);




	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 
	 /*******holder1 removed*******/
	 //req1 = holder1.getXml();
	 
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 /*
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	*/
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	
	 /*******holder1 removed*******/
	 //holder1.updateProperty();
	/*
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }*/

/*
int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	holder1.updateProperty();
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
*/
/*
for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}
*/
/*******holder1 removed*******/
//holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
/*******holder1 removed*******/
//holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;

/*******holder1 removed*******/	 
//rawReq=holder1.getXml();
/*
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 log.info ">>>>    context.requestContent : " +context.requestContent
	  testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/







				//******************************
				//Start condition for References
				//******************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				///////log.info "				>>>> This scenario step has References";
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has References";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];


				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;


				/********************Set the Param name to some invalid value and run request once*************/
				//String subcriberIdToSet=testRunner.testCase.getPropertyValue('subscriberId');
				//if((APIName.toString().contains('createMerchant'))||(APIName.toString().contains('verifyClient')))
				//{
				/*************************88888***********/
				//testRunner.testCase.setPropertyValue(paramName,'abcde1001');
				//}
				//testRunner.runTestStepByName(APIName);
				//testRunner.testCase.setPropertyValue('subscriberId',subcriberIdToSet);
				
				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;

				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				mapToRefer = Integer.parseInt(stepToRefer);

				if(mapToRefer==null)
				{
					log.info "		>>>>		============ Map for Step No - "+stepToRefer+" cotains "+mapToRefer;
					
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
				//ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);

				/*
				String[] getReferenceSplittedByDot = paramValueToFetch.split("\\.");
				int NoOfDotsInReferences = getReferenceSplittedByDot.size();
				//String ReferringValue = "";
				if(NoOfDotsInReferences>2)
				{
				log.info "			>>>>>>>>. came to if block NoOfDotsInReferences>2 ";
				//id.bancBoxId
				String getMapString='';
				for(int iRefCount=0;iRefCount<NoOfDotsInReferences;iRefCount++)
				{
					getMapString=getMapString+'.get('+getReferenceSplittedByDot[iRefCount]+')'
				}
				log.info "    >>>>    ====    getMapString : "+getMapString;
				String getMapContentText='(globalMap.get(mapToRefer))'+getMapString;
				log.info '    >>>>    ====    getMapContentText : "+getMapContentText;
				ReferringValue = getMapContentText;
				//ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);
				}
				*/
				if(!((globalMap.get(mapToRefer)).toString().contains(paramValueToFetch)))
				{
					log.info "		>>>>	================= MAP DOES NOT CONTAIN THE PARAM ====================";
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
					break;
				}
				/*
				if((globalMap.get(mapToRefer)).get(paramValueToFetch)==null)
				{
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				*/
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch);
				log.info "				*********  ReferringValue = "+ReferringValue


				
				//log.info "	REQUEST holder1 9901 : "+holder1;
				/*******holder1 removed*******/
				//log.info "	REQUEST holder1.getXml() 9901 : "+holder1.getXml();


				/*****commenting out this section where the referred value is put in the node directly
					putting the same value in test case property from where it will be fetched while running request***************************************/
				/*
				def groovyUtilsForUpdatingReferences = new com.eviware.soapui.support.GroovyUtils( context ) 
				// get XmlHolder for request message def
				
				String req2Name=APIName+"#Request";
				def holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				//holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder(req2Name);
				// change parameter value using XPath
			//	log.info "		++++++  holderForRef  : "+holderForRef;
				log.info "		++++++  holderForRef.getXml() : "+holderForRef.getXml();
				paramNameToSet = "//"+paramName;
				//paramNameToSet = paramName;
				log.info "		>>>> ++ Parameter to set : "+paramNameToSet;
				holderForRef[paramNameToSet] = ReferringValue;
				//holder1[paramNameToSet] = ReferringValue;
				// write updated request back to teststep
				holderForRef.updateProperty();
				//holder1.updateProperty();
				context.requestContent = holderForRef.xml;
				//context.requestContent = holder1.xml;
				log.info "	REQUEST AFTER SETTING REF 1 = :"+context.requestContent;
				requestAfterRef=holderForRef.getXml();
				log.info "	REQUEST AFTER SETTING REF 1 = :"+requestAfterRef;
				
				log.info "		++++++  holderForRef.getXml() 2: "+holderForRef.getXml();
				/*******holder1 removed*******/
				//log.info "		++++++ REQUEST holder1.getXml() 2 9901 : "+holder1.getXml();
				
				
				
				/*
				//def holderForRef2 = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				rawReq=holderForRef.getXml();
				testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq);
				*/
				/*****END - commenting out this section where the referred value is put in the node directly
					putting the same value in test case property from where it will be fetched while running request***************************************/

				//[paramNameToSet] = ReferringValue;
				testRunner.testCase.setPropertyValue(paramName,ReferringValue);
				
				}
				}
				}





			/************END OF REFERENCES SCRIPT********************/

	if((APIName.toString().contains('createMerchant'))||(APIName.toString().contains('verifyClient')))
	{
	log.info "    >>>>    =====   Setting subcriberId=12 and running req and setting back to 200300";
	testRunner.testCase.setPropertyValue('subscriberId','12');
	//testRunner.runTestStepByName(APIName);
	testRunner.testCase.setPropertyValue('subscriberId','200300');
	}
	else
	{
		log.info "    >>>>    ====  Running request once.";
		//testRunner.runTestStepByName(APIName);
	}
	
	log.info "        >>>>>>>>    Value from TC PRop is subscriberId : "+testRunner.testCase.getPropertyValue('subscriberId');

	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";


			//Fetch the time taken to run the request
			String requestTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		====TIME TAKEN - "+requestTimeTaken;
			
			Label timeTakenByReq = new Label(8, iCounter1, requestTimeTaken, normalFormat3);
			sheet.addCell(timeTakenByReq);


def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();

def groovyUtilsFinalReqResponse = new com.eviware.soapui.support.GroovyUtils(context);
def requestHolder = groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent );
def responseHolder = groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.responseContent );
def finalRequest = requestHolder.getXml();
def finalResponse = responseHolder.getXml();
log.info ' ';
log.info ' ';
log.info '    >>>>    ==== finalRequest : '+finalRequest;
log.info '    >>>>    ==== finalResponse : '+finalResponse;
log.info ' ';
log.info ' ';


Label labelFinalRequest = new Label(6,iCounter1,finalRequest);
sheet.addCell(labelFinalRequest);
Label labelFinalResponse = new Label(7,iCounter1,finalResponse);
sheet.addCell(labelFinalResponse);
	  		



	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	/*
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq2);
	  		sheet.addCell(labelRawRequest);
	  		
	 	}
	 	else{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}

*/




	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCounter1,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(7,iCounter1,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	//Label labelRequest = new Label(6,iCounter1,rawReq);
	//   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(7,iCounter1,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 




 
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);




		//condition to put response values in map
		if(!((xpath2=="")&&(ActualResponseValue=="")))
		{
			String responseParam=TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
			String responseValue=ActualResponseValue;
			mapName.put(responseParam,responseValue);
			log.info "		>>>>  +++++++ NOW MAPNAME LOOKS LIKE : "+mapName;
		}
		else{
			log.info "		>>>>	+++++++ NOT PUTTING VALUE FOR " +xpath2+ " INTO MAP BECAUSE VALUE FETCHED IS : "+ActualResponseValue;
		}




		

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCounter1, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCounter1,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }

	    log.info "		>>>>		++++++++++++++ map to put in Global map now looks like : "+mapName;
		
	}
	globalMap.put(mapNo,mapName);
	log.info "		>>>>		+++++++++++++++++++++++++  Global Map looks like this NOW : "+globalMap; 
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(iCounterForResponseValues=1;iCounterForResponseValues<ResponseColCount;iCounterForResponseValues++)
	{

	  if(!(TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounterForResponseValues;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounterForResponseValues).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCounter1, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(9+iDivisionCount))
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			*/
			
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else if(flagCount<1001)
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			*/
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
			sheet.addCell(label03);
			if(!(UnitTestingFlag=="Y"))
			{
			break stepCountLoop;
			}
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;


/*************** Clearing TC Properties by running script ***************/
/*
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
*/
/************************************************************************/

 	
 }/********END Iterating loop for No of Test Cases in Test Data Sheet *********/
		


			
			}
			//******************************************************
			//END loop for number of steps in the scenario
			//******************************************************
			


			



		
		}//*******************************************************
		//END loop for number of scenarios in the scenario file
		//*******************************************************


workbook.write();
workbook.close();
log.info "	>>>>		------------- WORKBOOK UPDATED AND CLOSED -------------- ";




log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="MapReferences" id="08de989f-04e2-45f8-9369-08f306aa2b36" disabled="true"><con:settings/><con:config><script>HashMap globalMap = [:]
HashMap mapName = [:]

globalMap = 
RefText='destinationAccount.account.bancBoxId=4.id.bancBoxId';

				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;


String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
log.info "				>>> stepToRefer="+stepToRefer;

mapToRefer = Integer.parseInt(stepToRefer);
log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
				//ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);

				
				String[] getReferenceSplittedByDot = paramValueToFetch.split("\\.");
				int NoOfDotsInReferences = getReferenceSplittedByDot.size();
				//String ReferringValue = "";
				if(NoOfDotsInReferences>2)
				{
				log.info "			>>>>>>>>. came to if block NoOfDotsInReferences>2 ";
				//id.bancBoxId
				String getMapString='';
				for(int iRefCount=0;iRefCount&lt;NoOfDotsInReferences;iRefCount++)
				{
					getMapString=getMapString+'.get('+getReferenceSplittedByDot[iRefCount]+')'
				}
				log.info "    >>>>    ====    getMapString : "+getMapString;
				String getMapContentText='(globalMap.get(mapToRefer))'+getMapString;
				log.info '    >>>>    ====    getMapContentText : "+getMapContentText;
				ReferringValue = getMapContentText;
				//ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);
				}</script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver-July13-3" id="15ef7933-35c3-416a-8f4c-25b6ee889457" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "****************************************************************************************************************************************";
log.info "***************************STARTING AUTOMATION DRIVER FOR SCENARIO TESTING***********************************";
log.info "=============================================================================================================";
log.info " ";
log.info " ";

//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet requestSchemaSheet1;
Sheet requestValuesSheet1;
Sheet responseSchemaSheet1;
Sheet responseValuesSheet1;

String APIName="";
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//***************************************************
//Variable to store TCID for the Test Case to execute
//***************************************************
String TestCaseID 
//******************************************************
//Array to separate and store cell contents based on '|'
//******************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//***********************************************************
//Counter for looping through number of steps in the scenario
//***********************************************************
int iCounter1;
def holder1;
def rawReq="";


/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String SetNo = context.expand('${#Project#SetNo}');
//def TestDataFile = context.expand( '${#Project#TestDataFile}');
//String APIName = context.expand( '${#Project#APIName}');
String TestScenarioFile=context.expand('${#Project#ScenarioFileLocation}');
String UnitTestingFlag=context.expand('${#Project#UnitTesting}');


log.info "=====================ScenarioFileLocation : "+TestScenarioFile;
log.info "=====================UnitTestingFlag : "+UnitTestingFlag;
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";


	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	int noOfScenarioSheets = getSenarioSheets.size();
	log.info "		>>>>		Number of Sheets in this Test Scenario File are : "+noOfScenarioSheets;


log.info "		>>>>		==============================="
int Length =  TestScenarioFile.lastIndexOf('\\');
int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
String excelName = TestScenarioFile.substring(Length+1,Length2);
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
//log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResultFileLocation = TestScenarioFile.substring(0,Length);
log.info "	===	ResultFileLocation : "+ResultFileLocation;
log.info "	===	excelName : "+excelName;
//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResultFile =  ResultFileLocation + "\\Results\\"+excelName+"-RESULT-" +currentTime+".xls";
		
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResultFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
workbook = Workbook.createWorkbook(new File(TestResultFile));



		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(int sheetCount=1;sheetCount<noOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();
		log.info " ";	
		log.info "		>>>>		Reading Sheet : "+sheetName;

		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info " ";
			log.info "=========================================================================";
			log.info "		>>>>		Scenario in sheet "+sheetName+" NOT set for execution";
			log.info "=========================================================================";
			log.info " ";
			continue;
		}

		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);

		
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "REQUEST"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);

					Label timeTakenLabel = new Label(8, 3, "TimeTaken[ms]"); 
					sheet.addCell(timeTakenLabel);

		//****************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();


		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];



			//******************************************************
			//Starting loop for number of steps in the scenario
			//******************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{

		/*************** Clearing TC Properties by running script ***************/
		log.info "		>>>>		Removing Properties at Test Case level";
		log.info "		>>>>		======================================";
		testRunner.runTestStepByName("ClearTCProperties");
		/************************************************************************/

				
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.BRIGHT_GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont3 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat3 = new WritableCellFormat(normalFont3);
			normalFormat3.setBackground(jxl.format.Colour.YELLOW);

			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontOrange = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatOrange = new WritableCellFormat(normalFontOrange);
			normalFormatOrange.setBackground(jxl.format.Colour.ORANGE);

			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontTurquoise = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatTurquoise = new WritableCellFormat(normalFontTurquoise);
			normalFormatTurquoise.setBackground(jxl.format.Colour.TURQUOISE);


			iCountFlag=0;
			//log.info "		>>>>		: Reading Row No :"+(iCounter1+1);
			log.info " ";
			log.info "=================================================================================================================================================================================================================";
			log.info "		>>>>		********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents()+"-"+SenarioSheet1.getCell(4,iCounter1).getContents();
			
			//************************************************
			//condition to check if the scenario step is empty
			//************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}


			//Adding Description and ExpectedResult to result file
			Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
			sheet.addCell(stepNoValue);

			Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
			sheet.addCell(descriptionValue);

			Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
			sheet.addCell(expectedValue);

			Label stepNameValue = new Label(3, iCounter1, SenarioSheet1.getCell(3, iCounter1).getContents(),normalFormatOrange); 
			sheet.addCell(stepNameValue);

			Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
			sheet.addCell(referencesValue);



			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;
			//mapName = "map"+mapNo;
			HashMap mapName= [:];
			//log.info "	mapName : "+mapName;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	APIName=RequestName;
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents().toString();
		 	log.info " ";
		 	log.info " ";
		 	log.info "		>>>>		"+RequestName+" | "+TestCaseID;
			


				//Getting the location of TestData file for the API Request
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				//String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				//Test Data files for the API Request must be available in a folder named 'TestDataFiles' in the same location where scenario file is placed.
				String TestDataFile = TestDataFileLocation + "\\TestData\\"+RequestName+".xls";
				log.info " ";
				log.info "		>>>>		Referrring TestDataFile  :"+TestDataFile;



 TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();


	def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {


		if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					log.info "------======---- Not set for EXECUTION : "+TestDataValues1.getCell(0,iCountTestCase).getContents();
					continue;
				}

flagCount=9;

List<String> xmlTagToSetBlank = new ArrayList<String>();

	 //int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+SetNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/
/*
	def groovyUtilsForExtraRun = new com.eviware.soapui.support.GroovyUtils( context ) 
	// get XmlHolder for request message def
	String reqNameforExtraRun=APIName+"#Request";
	holderForExtraRun = groovyUtilsForExtraRun.getXmlHolder(reqNameforExtraRun);
	// change password using XPath
	holderForExtraRun["//subscriberId"] = '1234';
	// write updated request back to teststep
	holderForExtraRun.updateProperty();
	context.requestContent = holderForExtraRun.xml;
*/
	/*
	testRunner.testCase.setPropertyValue('subscriberId','12');
	testRunner.runTestStepByName(APIName);
	testRunner.testCase.setPropertyValue('subscriberId','200300');
	//testRunner.testCase.setPropertyValue('subscriberId','');
	*/
	/*********************************************************************************/


	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

/*
String subcriberIdToSet=testRunner.testCase.getPropertyValue('subscriberId');
if((APIName.toString().contains('createMerchant'))||(APIName.toString().contains('verifyClient')))
	{
		testRunner.testCase.setPropertyValue('subscriberId','200300');
	}
testRunner.runTestStepByName(APIName);
testRunner.testCase.setPropertyValue('subscriberId',subcriberIdToSet);
*/

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 //testRunner.runTestStepByName(APIName);
	 }



//def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);



//Fetching the request
	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

	
	//Run Request again to eliminate null object error
	 //testRunner.runTestStepByName(APIName);
	// def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	
	 /*******holder1 removed*******/
	 //holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);




	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 
	 /*******holder1 removed*******/
	 //req1 = holder1.getXml();
	 
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 /*
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	*/
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	
	 /*******holder1 removed*******/
	 //holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }

/*
int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	holder1.updateProperty();
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
*/
/*
for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}
*/
/*******holder1 removed*******/
//holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
/*******holder1 removed*******/
//holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;

/*******holder1 removed*******/	 
//rawReq=holder1.getXml();
/*
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 log.info ">>>>    context.requestContent : " +context.requestContent
	  testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/







				//******************************
				//Start condition for References
				//******************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				///////log.info "				>>>> This scenario step has References";
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has References";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];


				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;


				/********************Set the Param name to some invalid value and run request once*************/
				//String subcriberIdToSet=testRunner.testCase.getPropertyValue('subscriberId');
				//if((APIName.toString().contains('createMerchant'))||(APIName.toString().contains('verifyClient')))
				//{
				/*************************88888***********/
				//testRunner.testCase.setPropertyValue(paramName,'abcde1001');
				//}
				//testRunner.runTestStepByName(APIName);
				//testRunner.testCase.setPropertyValue('subscriberId',subcriberIdToSet);
				
				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;

				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				mapToRefer = Integer.parseInt(stepToRefer);

				if(mapToRefer==null)
				{
					log.info "		>>>>		============ Map for Step No - "+stepToRefer+" cotains "+mapToRefer;
					
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
				//ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);
				
				if(!((globalMap.get(mapToRefer)).toString().contains(paramValueToFetch)))
				{
					log.info "		>>>>	================= MAP DOES NOT CONTAIN THE PARAM ====================";
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
					break;
				}
				/*
				if((globalMap.get(mapToRefer)).get(paramValueToFetch)==null)
				{
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				*/
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch);
				log.info "				*********  ReferringValue = "+ReferringValue


				
				//log.info "	REQUEST holder1 9901 : "+holder1;
				/*******holder1 removed*******/
				//log.info "	REQUEST holder1.getXml() 9901 : "+holder1.getXml();


				/*****commenting out this section where the referred value is put in the node directly
					putting the same value in test case property from where it will be fetched while running request***************************************/
				/*
				def groovyUtilsForUpdatingReferences = new com.eviware.soapui.support.GroovyUtils( context ) 
				// get XmlHolder for request message def
				
				String req2Name=APIName+"#Request";
				def holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				//holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder(req2Name);
				// change parameter value using XPath
			//	log.info "		++++++  holderForRef  : "+holderForRef;
				log.info "		++++++  holderForRef.getXml() : "+holderForRef.getXml();
				paramNameToSet = "//"+paramName;
				//paramNameToSet = paramName;
				log.info "		>>>> ++ Parameter to set : "+paramNameToSet;
				holderForRef[paramNameToSet] = ReferringValue;
				//holder1[paramNameToSet] = ReferringValue;
				// write updated request back to teststep
				holderForRef.updateProperty();
				//holder1.updateProperty();
				context.requestContent = holderForRef.xml;
				//context.requestContent = holder1.xml;
				log.info "	REQUEST AFTER SETTING REF 1 = :"+context.requestContent;
				requestAfterRef=holderForRef.getXml();
				log.info "	REQUEST AFTER SETTING REF 1 = :"+requestAfterRef;
				
				log.info "		++++++  holderForRef.getXml() 2: "+holderForRef.getXml();
				/*******holder1 removed*******/
				//log.info "		++++++ REQUEST holder1.getXml() 2 9901 : "+holder1.getXml();
				
				
				
				/*
				//def holderForRef2 = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				rawReq=holderForRef.getXml();
				testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq);
				*/
				/*****END - commenting out this section where the referred value is put in the node directly
					putting the same value in test case property from where it will be fetched while running request***************************************/

				//[paramNameToSet] = ReferringValue;
				testRunner.testCase.setPropertyValue(paramName,ReferringValue);
				
				}
				}
				}





			/************END OF REFERENCES SCRIPT********************/

	if((APIName.toString().contains('createMerchant'))||(APIName.toString().contains('verifyClient')))
	{
	log.info "    >>>>    =====   Setting subcriberId=12 and running req and setting back to 200300";
	testRunner.testCase.setPropertyValue('subscriberId','12');
	//testRunner.runTestStepByName(APIName);
	testRunner.testCase.setPropertyValue('subscriberId','200300');
	}
	else
	{
		log.info "    >>>>    ====  Running request once.";
		//testRunner.runTestStepByName(APIName);
	}
	
	log.info "        >>>>>>>>    Value from TC PRop is subscriberId : "+testRunner.testCase.getPropertyValue('subscriberId');

	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";


			//Fetch the time taken to run the request
			String requestTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		====TIME TAKEN - "+requestTimeTaken;
			
			Label timeTakenByReq = new Label(8, iCounter1, requestTimeTaken, normalFormat3);
			sheet.addCell(timeTakenByReq);


def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();

def groovyUtilsFinalReqResponse = new com.eviware.soapui.support.GroovyUtils(context);
def requestHolder = groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent );
def responseHolder = groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.responseContent );
def finalRequest = requestHolder.getXml();
def finalResponse = responseHolder.getXml();
log.info ' ';
log.info ' ';
log.info '    >>>>    ==== finalRequest : '+finalRequest;
log.info '    >>>>    ==== finalResponse : '+finalResponse;
log.info ' ';
log.info ' ';

	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq2);
	  		sheet.addCell(labelRawRequest);
	  		
	 	}
	 	else{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}






	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCounter1,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(7,iCounter1,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	//Label labelRequest = new Label(6,iCounter1,rawReq);
	//   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(7,iCounter1,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 




 
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);




		//condition to put response values in map
		if(!((xpath2=="")&&(ActualResponseValue=="")))
		{
			String responseParam=TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
			String responseValue=ActualResponseValue;
			mapName.put(responseParam,responseValue);
			log.info "		>>>>  +++++++ NOW MAPNAME LOOKS LIKE : "+mapName;
		}
		else{
			log.info "		>>>>	+++++++ NOT PUTTING VALUE FOR " +xpath2+ " INTO MAP BECAUSE VALUE FETCHED IS : "+ActualResponseValue;
		}




		

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCounter1, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCounter1,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }

	    log.info "		>>>>		++++++++++++++ map to put in Global map now looks like : "+mapName;
		
	}
	globalMap.put(mapNo,mapName);
	log.info "		>>>>		+++++++++++++++++++++++++  Global Map looks like this NOW : "+globalMap; 
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(iCounterForResponseValues=1;iCounterForResponseValues<ResponseColCount;iCounterForResponseValues++)
	{

	  if(!(TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounterForResponseValues;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounterForResponseValues).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCounter1, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(9+iDivisionCount))
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			*/
			
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else if(flagCount<1001)
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			*/
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
			sheet.addCell(label03);
			if(!(UnitTestingFlag=="Y"))
			{
			break stepCountLoop;
			}
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;


/*************** Clearing TC Properties by running script ***************/
/*
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
*/
/************************************************************************/

 	
 }/********END Iterating loop for No of Test Cases in Test Data Sheet *********/
		


			
			}
			//******************************************************
			//END loop for number of steps in the scenario
			//******************************************************
			


			



		
		}//*******************************************************
		//END loop for number of scenarios in the scenario file
		//*******************************************************


workbook.write();
workbook.close();
log.info "	>>>>		------------- WORKBOOK UPDATED AND CLOSED -------------- ";




log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver-July13-2" id="bf76670e-1506-49eb-911d-5ffc8c480035" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "****************************************************************************************************************************************";
log.info "***************************STARTING AUTOMATION DRIVER FOR SCENARIO TESTING***********************************";
log.info "=============================================================================================================";
log.info " ";
log.info " ";

//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet requestSchemaSheet1;
Sheet requestValuesSheet1;
Sheet responseSchemaSheet1;
Sheet responseValuesSheet1;

String APIName="";
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//***************************************************
//Variable to store TCID for the Test Case to execute
//***************************************************
String TestCaseID 
//******************************************************
//Array to separate and store cell contents based on '|'
//******************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//***********************************************************
//Counter for looping through number of steps in the scenario
//***********************************************************
int iCounter1;
def holder1;
def rawReq="";


/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String SetNo = context.expand('${#Project#SetNo}');
//def TestDataFile = context.expand( '${#Project#TestDataFile}');
//String APIName = context.expand( '${#Project#APIName}');
String TestScenarioFile=context.expand('${#Project#ScenarioFileLocation}');
String UnitTestingFlag=context.expand('${#Project#UnitTesting}');


log.info "=====================ScenarioFileLocation : "+TestScenarioFile;
log.info "=====================UnitTestingFlag : "+UnitTestingFlag;
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";


	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	int noOfScenarioSheets = getSenarioSheets.size();
	log.info "		>>>>		Number of Sheets in this Test Scenario File are : "+noOfScenarioSheets;


log.info "		>>>>		==============================="
int Length =  TestScenarioFile.lastIndexOf('\\');
int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
String excelName = TestScenarioFile.substring(Length+1,Length2);
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
//log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResultFileLocation = TestScenarioFile.substring(0,Length);
log.info "	===	ResultFileLocation : "+ResultFileLocation;
log.info "	===	excelName : "+excelName;
//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResultFile =  ResultFileLocation + "\\Results\\"+excelName+"-RESULT-" +currentTime+".xls";
		
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResultFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
workbook = Workbook.createWorkbook(new File(TestResultFile));



		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(int sheetCount=1;sheetCount<noOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();
		log.info " ";	
		log.info "		>>>>		Reading Sheet : "+sheetName;

		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info " ";
			log.info "=========================================================================";
			log.info "		>>>>		Scenario in sheet "+sheetName+" NOT set for execution";
			log.info "=========================================================================";
			log.info " ";
			continue;
		}

		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);

		
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "REQUEST"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);

					Label timeTakenLabel = new Label(8, 3, "TimeTaken[ms]"); 
					sheet.addCell(timeTakenLabel);

		//****************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();


		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];



			//******************************************************
			//Starting loop for number of steps in the scenario
			//******************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{

		/*************** Clearing TC Properties by running script ***************/
		log.info "		>>>>		Removing Properties at Test Case level";
		log.info "		>>>>		======================================";
		testRunner.runTestStepByName("ClearTCProperties");
		/************************************************************************/

				
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.BRIGHT_GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont3 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat3 = new WritableCellFormat(normalFont3);
			normalFormat3.setBackground(jxl.format.Colour.YELLOW);

			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontOrange = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatOrange = new WritableCellFormat(normalFontOrange);
			normalFormatOrange.setBackground(jxl.format.Colour.ORANGE);

			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontTurquoise = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatTurquoise = new WritableCellFormat(normalFontTurquoise);
			normalFormatTurquoise.setBackground(jxl.format.Colour.TURQUOISE);


			iCountFlag=0;
			//log.info "		>>>>		: Reading Row No :"+(iCounter1+1);
			log.info " ";
			log.info "=================================================================================================================================================================================================================";
			log.info "		>>>>		********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents()+"-"+SenarioSheet1.getCell(4,iCounter1).getContents();
			
			//************************************************
			//condition to check if the scenario step is empty
			//************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}


			//Adding Description and ExpectedResult to result file
			Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
			sheet.addCell(stepNoValue);

			Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
			sheet.addCell(descriptionValue);

			Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
			sheet.addCell(expectedValue);

			Label stepNameValue = new Label(3, iCounter1, SenarioSheet1.getCell(3, iCounter1).getContents(),normalFormatOrange); 
			sheet.addCell(stepNameValue);

			Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
			sheet.addCell(referencesValue);



			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;
			//mapName = "map"+mapNo;
			HashMap mapName= [:];
			//log.info "	mapName : "+mapName;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	APIName=RequestName;
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents().toString();
		 	log.info " ";
		 	log.info " ";
		 	log.info "		>>>>		"+RequestName+" | "+TestCaseID;
			


				//Getting the location of TestData file for the API Request
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				//String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				//Test Data files for the API Request must be available in a folder named 'TestDataFiles' in the same location where scenario file is placed.
				String TestDataFile = TestDataFileLocation + "\\TestData\\"+RequestName+".xls";
				log.info " ";
				log.info "		>>>>		Referrring TestDataFile  :"+TestDataFile;



 TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();


	def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {


		if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					log.info "------======---- Not set for EXECUTION : "+TestDataValues1.getCell(0,iCountTestCase).getContents();
					continue;
				}

flagCount=9;

List<String> xmlTagToSetBlank = new ArrayList<String>();

	 //int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+SetNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/
/*
	def groovyUtilsForExtraRun = new com.eviware.soapui.support.GroovyUtils( context ) 
	// get XmlHolder for request message def
	String reqNameforExtraRun=APIName+"#Request";
	holderForExtraRun = groovyUtilsForExtraRun.getXmlHolder(reqNameforExtraRun);
	// change password using XPath
	holderForExtraRun["//subscriberId"] = '1234';
	// write updated request back to teststep
	holderForExtraRun.updateProperty();
	context.requestContent = holderForExtraRun.xml;
*/
	/*
	testRunner.testCase.setPropertyValue('subscriberId','12');
	testRunner.runTestStepByName(APIName);
	testRunner.testCase.setPropertyValue('subscriberId','200300');
	//testRunner.testCase.setPropertyValue('subscriberId','');
	*/
	/*********************************************************************************/


	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

/*
String subcriberIdToSet=testRunner.testCase.getPropertyValue('subscriberId');
if((APIName.toString().contains('createMerchant'))||(APIName.toString().contains('verifyClient')))
	{
		testRunner.testCase.setPropertyValue('subscriberId','200300');
	}
testRunner.runTestStepByName(APIName);
testRunner.testCase.setPropertyValue('subscriberId',subcriberIdToSet);
*/

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 //testRunner.runTestStepByName(APIName);
	 }



//def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);



//Fetching the request
	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

	
	//Run Request again to eliminate null object error
	 //testRunner.runTestStepByName(APIName);
	// def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	
	 /*******holder1 removed*******/
	 //holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);




	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 
	 /*******holder1 removed*******/
	 //req1 = holder1.getXml();
	 
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 /*
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	*/
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	
	 /*******holder1 removed*******/
	 //holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }

/*
int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	holder1.updateProperty();
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
*/
/*
for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}
*/
/*******holder1 removed*******/
//holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
/*******holder1 removed*******/
//holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;

/*******holder1 removed*******/	 
//rawReq=holder1.getXml();
/*
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 log.info ">>>>    context.requestContent : " +context.requestContent
	  testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/







				//******************************
				//Start condition for References
				//******************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				///////log.info "				>>>> This scenario step has References";
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has References";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];


				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;


				/********************Set the Param name to some invalid value and run request once*************/
				//String subcriberIdToSet=testRunner.testCase.getPropertyValue('subscriberId');
				//if((APIName.toString().contains('createMerchant'))||(APIName.toString().contains('verifyClient')))
				//{
				testRunner.testCase.setPropertyValue(paramName,'abcde1001');
				//}
				testRunner.runTestStepByName(APIName);
				//testRunner.testCase.setPropertyValue('subscriberId',subcriberIdToSet);
				
				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;

				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				mapToRefer = Integer.parseInt(stepToRefer);

				if(mapToRefer==null)
				{
					log.info "		>>>>		============ Map for Step No - "+stepToRefer+" cotains "+mapToRefer;
					
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
				//ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);
				
				if(!((globalMap.get(mapToRefer)).toString().contains(paramValueToFetch)))
				{
					log.info "		>>>>	================= MAP DOES NOT CONTAIN THE PARAM ====================";
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
					break;
				}
				/*
				if((globalMap.get(mapToRefer)).get(paramValueToFetch)==null)
				{
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				*/
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch);
				log.info "				*********  ReferringValue = "+ReferringValue


				
				//log.info "	REQUEST holder1 9901 : "+holder1;
				/*******holder1 removed*******/
				//log.info "	REQUEST holder1.getXml() 9901 : "+holder1.getXml();
				
				def groovyUtilsForUpdatingReferences = new com.eviware.soapui.support.GroovyUtils( context ) 
				// get XmlHolder for request message def
				
				String req2Name=APIName+"#Request";
				def holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				//holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder(req2Name);
				// change parameter value using XPath
			//	log.info "		++++++  holderForRef  : "+holderForRef;
				log.info "		++++++  holderForRef.getXml() : "+holderForRef.getXml();
				paramNameToSet = "//"+paramName;
				//paramNameToSet = paramName;
				log.info "		>>>> ++ Parameter to set : "+paramNameToSet;
				holderForRef[paramNameToSet] = ReferringValue;
				//holder1[paramNameToSet] = ReferringValue;
				// write updated request back to teststep
				holderForRef.updateProperty();
				//holder1.updateProperty();
				context.requestContent = holderForRef.xml;
				//context.requestContent = holder1.xml;
				log.info "	REQUEST AFTER SETTING REF 1 = :"+context.requestContent;
				requestAfterRef=holderForRef.getXml();
				log.info "	REQUEST AFTER SETTING REF 1 = :"+requestAfterRef;
				
				log.info "		++++++  holderForRef.getXml() 2: "+holderForRef.getXml();
				/*******holder1 removed*******/
				//log.info "		++++++ REQUEST holder1.getXml() 2 9901 : "+holder1.getXml();
				
				
				
				
				//def holderForRef2 = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				rawReq=holderForRef.getXml();
				testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq);
	
				}
				}
				}





			/************END OF REFERENCES SCRIPT********************/

	if((APIName.toString().contains('createMerchant'))||(APIName.toString().contains('verifyClient')))
	{
	log.info "    >>>>    =====   Setting subcriberId=12 and running req and setting back to 200300";
	testRunner.testCase.setPropertyValue('subscriberId','12');
	testRunner.runTestStepByName(APIName);
	testRunner.testCase.setPropertyValue('subscriberId','200300');
	}
	else
	{
		log.info "    >>>>    ====  Running request once.";
		testRunner.runTestStepByName(APIName);
	}
	
	log.info "        >>>>>>>>    Value from TC PRop is subscriberId : "+testRunner.testCase.getPropertyValue('subscriberId');

	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";


			//Fetch the time taken to run the request
			String requestTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		====TIME TAKEN - "+requestTimeTaken;
			
			Label timeTakenByReq = new Label(8, iCounter1, requestTimeTaken, normalFormat3);
			sheet.addCell(timeTakenByReq);


def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();

def groovyUtilsFinalReqResponse = new com.eviware.soapui.support.GroovyUtils(context);
def requestHolder = groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent );
def responseHolder = groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.responseContent );
def finalRequest = requestHolder.getXml();
def finalResponse = responseHolder.getXml();
log.info ' ';
log.info ' ';
log.info '    >>>>    ==== finalRequest : '+finalRequest;
log.info '    >>>>    ==== finalResponse : '+finalResponse;
log.info ' ';
log.info ' ';

	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq2);
	  		sheet.addCell(labelRawRequest);
	  		
	 	}
	 	else{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}






	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCounter1,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(7,iCounter1,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	//Label labelRequest = new Label(6,iCounter1,rawReq);
	//   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(7,iCounter1,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 




 
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);




		//condition to put response values in map
		if(!((xpath2=="")&&(ActualResponseValue=="")))
		{
			String responseParam=TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
			String responseValue=ActualResponseValue;
			mapName.put(responseParam,responseValue);
			log.info "		>>>>  +++++++ NOW MAPNAME LOOKS LIKE : "+mapName;
		}
		else{
			log.info "		>>>>	+++++++ NOT PUTTING VALUE FOR " +xpath2+ " INTO MAP BECAUSE VALUE FETCHED IS : "+ActualResponseValue;
		}




		

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCounter1, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCounter1,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }

	    log.info "		>>>>		++++++++++++++ map to put in Global map now looks like : "+mapName;
		
	}
	globalMap.put(mapNo,mapName);
	log.info "		>>>>		+++++++++++++++++++++++++  Global Map looks like this NOW : "+globalMap; 
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(iCounterForResponseValues=1;iCounterForResponseValues<ResponseColCount;iCounterForResponseValues++)
	{

	  if(!(TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounterForResponseValues;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounterForResponseValues).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCounter1, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(9+iDivisionCount))
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			*/
			
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else if(flagCount<1001)
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			*/
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
			sheet.addCell(label03);
			if(!(UnitTestingFlag=="Y"))
			{
			break stepCountLoop;
			}
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;


/*************** Clearing TC Properties by running script ***************/
/*
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
*/
/************************************************************************/

 	
 }/********END Iterating loop for No of Test Cases in Test Data Sheet *********/
		


			
			}
			//******************************************************
			//END loop for number of steps in the scenario
			//******************************************************
			


			



		
		}//*******************************************************
		//END loop for number of scenarios in the scenario file
		//*******************************************************


workbook.write();
workbook.close();
log.info "	>>>>		------------- WORKBOOK UPDATED AND CLOSED -------------- ";




log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver-July13-1" id="b4f353b8-1bc5-4342-a9f6-ee23d46e1e3a" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "****************************************************************************************************************************************";
log.info "***************************STARTING AUTOMATION DRIVER FOR SCENARIO TESTING***********************************";
log.info "=============================================================================================================";
log.info " ";
log.info " ";

//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet requestSchemaSheet1;
Sheet requestValuesSheet1;
Sheet responseSchemaSheet1;
Sheet responseValuesSheet1;

String APIName="";
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//***************************************************
//Variable to store TCID for the Test Case to execute
//***************************************************
String TestCaseID 
//******************************************************
//Array to separate and store cell contents based on '|'
//******************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//***********************************************************
//Counter for looping through number of steps in the scenario
//***********************************************************
int iCounter1;
def holder1;
def rawReq="";


/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String SetNo = context.expand('${#Project#SetNo}');
//def TestDataFile = context.expand( '${#Project#TestDataFile}');
//String APIName = context.expand( '${#Project#APIName}');
String TestScenarioFile=context.expand('${#Project#ScenarioFileLocation}');
String UnitTestingFlag=context.expand('${#Project#UnitTesting}');


log.info "=====================ScenarioFileLocation : "+TestScenarioFile;
log.info "=====================UnitTestingFlag : "+UnitTestingFlag;
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";


	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	int noOfScenarioSheets = getSenarioSheets.size();
	log.info "		>>>>		Number of Sheets in this Test Scenario File are : "+noOfScenarioSheets;


log.info "		>>>>		==============================="
int Length =  TestScenarioFile.lastIndexOf('\\');
int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
String excelName = TestScenarioFile.substring(Length+1,Length2);
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
//log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResultFileLocation = TestScenarioFile.substring(0,Length);
log.info "	===	ResultFileLocation : "+ResultFileLocation;
log.info "	===	excelName : "+excelName;
//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResultFile =  ResultFileLocation + "\\Results\\"+excelName+"-RESULT-" +currentTime+".xls";
		
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResultFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
workbook = Workbook.createWorkbook(new File(TestResultFile));



		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(int sheetCount=1;sheetCount<noOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();
		log.info " ";	
		log.info "		>>>>		Reading Sheet : "+sheetName;

		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info " ";
			log.info "=========================================================================";
			log.info "		>>>>		Scenario in sheet "+sheetName+" NOT set for execution";
			log.info "=========================================================================";
			log.info " ";
			continue;
		}

		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);

		
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "REQUEST"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);

					Label timeTakenLabel = new Label(8, 3, "TimeTaken[ms]"); 
					sheet.addCell(timeTakenLabel);

		//****************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();


		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];



			//******************************************************
			//Starting loop for number of steps in the scenario
			//******************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.BRIGHT_GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont3 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat3 = new WritableCellFormat(normalFont3);
			normalFormat3.setBackground(jxl.format.Colour.YELLOW);

			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontOrange = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatOrange = new WritableCellFormat(normalFontOrange);
			normalFormatOrange.setBackground(jxl.format.Colour.ORANGE);

			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontTurquoise = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatTurquoise = new WritableCellFormat(normalFontTurquoise);
			normalFormatTurquoise.setBackground(jxl.format.Colour.TURQUOISE);


			iCountFlag=0;
			//log.info "		>>>>		: Reading Row No :"+(iCounter1+1);
			log.info " ";
			log.info "=================================================================================================================================================================================================================";
			log.info "		>>>>		********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents()+"-"+SenarioSheet1.getCell(4,iCounter1).getContents();
			
			//************************************************
			//condition to check if the scenario step is empty
			//************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}


			//Adding Description and ExpectedResult to result file
			Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
			sheet.addCell(stepNoValue);

			Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
			sheet.addCell(descriptionValue);

			Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
			sheet.addCell(expectedValue);

			Label stepNameValue = new Label(3, iCounter1, SenarioSheet1.getCell(3, iCounter1).getContents(),normalFormatOrange); 
			sheet.addCell(stepNameValue);

			Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
			sheet.addCell(referencesValue);



			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;
			//mapName = "map"+mapNo;
			HashMap mapName= [:];
			//log.info "	mapName : "+mapName;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	APIName=RequestName;
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents().toString();
		 	log.info " ";
		 	log.info " ";
		 	log.info "		>>>>		"+RequestName+" | "+TestCaseID;
			


				//Getting the location of TestData file for the API Request
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				//String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				//Test Data files for the API Request must be available in a folder named 'TestDataFiles' in the same location where scenario file is placed.
				String TestDataFile = TestDataFileLocation + "\\TestData\\"+RequestName+".xls";
				log.info " ";
				log.info "		>>>>		Referrring TestDataFile  :"+TestDataFile;



 TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();


	def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {


		if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					log.info "------======---- Not set for EXECUTION : "+TestDataValues1.getCell(0,iCountTestCase).getContents();
					continue;
				}

flagCount=9;

List<String> xmlTagToSetBlank = new ArrayList<String>();

	 //int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+SetNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/
/*
	def groovyUtilsForExtraRun = new com.eviware.soapui.support.GroovyUtils( context ) 
	// get XmlHolder for request message def
	String reqNameforExtraRun=APIName+"#Request";
	holderForExtraRun = groovyUtilsForExtraRun.getXmlHolder(reqNameforExtraRun);
	// change password using XPath
	holderForExtraRun["//subscriberId"] = '1234';
	// write updated request back to teststep
	holderForExtraRun.updateProperty();
	context.requestContent = holderForExtraRun.xml;
*/
	/*
	testRunner.testCase.setPropertyValue('subscriberId','12');
	testRunner.runTestStepByName(APIName);
	testRunner.testCase.setPropertyValue('subscriberId','200300');
	//testRunner.testCase.setPropertyValue('subscriberId','');
	*/
	/*********************************************************************************/


	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 //testRunner.runTestStepByName(APIName);
	 }



//def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);



//Fetching the request
	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

	
	//Run Request again to eliminate null object error
	 //testRunner.runTestStepByName(APIName);
	// def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	 holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);




	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 /*
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	*/
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }

/*
int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	holder1.updateProperty();
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
*/
/*
for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}
*/
holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	 
rawReq=holder1.getXml();
/*
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 log.info ">>>>    context.requestContent : " +context.requestContent
	  testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/







				//******************************
				//Start condition for References
				//******************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				///////log.info "				>>>> This scenario step has References";
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has References";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];


				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;

				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;

				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				mapToRefer = Integer.parseInt(stepToRefer);

				if(mapToRefer==null)
				{
					log.info "		>>>>		============ Map for Step No - "+stepToRefer+" cotains "+mapToRefer;
					
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
				//ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);
				
				if(!((globalMap.get(mapToRefer)).toString().contains(paramValueToFetch)))
				{
					log.info "		>>>>	================= MAP DOES NOT CONTAIN THE PARAM ====================";
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
					break;
				}
				/*
				if((globalMap.get(mapToRefer)).get(paramValueToFetch)==null)
				{
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				*/
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch);
				log.info "				*********  ReferringValue = "+ReferringValue


				
				//log.info "	REQUEST holder1 9901 : "+holder1;
				log.info "	REQUEST holder1.getXml() 9901 : "+holder1.getXml();
				
				def groovyUtilsForUpdatingReferences = new com.eviware.soapui.support.GroovyUtils( context ) 
				// get XmlHolder for request message def
				
				String req2Name=APIName+"#Request";
				def holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				//holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder(req2Name);
				// change parameter value using XPath
			//	log.info "		++++++  holderForRef  : "+holderForRef;
				log.info "		++++++  holderForRef.getXml() : "+holderForRef.getXml();
				paramNameToSet = "//"+paramName;
				//paramNameToSet = paramName;
				log.info "		>>>> ++ Parameter to set : "+paramNameToSet;
				holderForRef[paramNameToSet] = ReferringValue;
				//holder1[paramNameToSet] = ReferringValue;
				// write updated request back to teststep
				holderForRef.updateProperty();
				//holder1.updateProperty();
				context.requestContent = holderForRef.xml;
				//context.requestContent = holder1.xml;
				log.info "	REQUEST AFTER SETTING REF 1 = :"+context.requestContent;
				requestAfterRef=holderForRef.getXml();
				log.info "	REQUEST AFTER SETTING REF 1 = :"+requestAfterRef;
				
				log.info "		++++++  holderForRef.getXml() 2: "+holderForRef.getXml();
				log.info "		++++++ REQUEST holder1.getXml() 2 9901 : "+holder1.getXml();
				
				
				
				
				//def holderForRef2 = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				rawReq=holderForRef.getXml();
				testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq);
	
				}
				}
				}





			/************END OF REFERENCES SCRIPT********************/

	if(APIName.toString().contains('createMerchant'))
	{
	log.info "    >>>>    =====   Setting subcriberId=12 and running req and setting back to 200300";
	testRunner.testCase.setPropertyValue('subscriberId','12');
	testRunner.runTestStepByName(APIName);
	testRunner.testCase.setPropertyValue('subscriberId','200300');
	}
	else
	{
		log.info "    >>>>    ====  Running request once.";
		testRunner.runTestStepByName(APIName);
	}
	
	log.info "        >>>>>>>>    Value from TC PRop is subscriberId : "+testRunner.testCase.getPropertyValue('subscriberId');

	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";


			//Fetch the time taken to run the request
			String requestTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		====TIME TAKEN - "+requestTimeTaken;
			
			Label timeTakenByReq = new Label(8, iCounter1, requestTimeTaken, normalFormat3);
			sheet.addCell(timeTakenByReq);


def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();

def groovyUtilsFinalReqResponse = new com.eviware.soapui.support.GroovyUtils(context);
def requestHolder = groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent );
def responseHolder = groovyUtilsFinalReqResponse.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.responseContent );
def finalRequest = requestHolder.getXml();
def finalResponse = responseHolder.getXml();
log.info ' ';
log.info ' ';
log.info '    >>>>    ==== finalRequest : '+finalRequest;
log.info '    >>>>    ==== finalResponse : '+finalResponse;
log.info ' ';
log.info ' ';

	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq2);
	  		sheet.addCell(labelRawRequest);
	  		
	 	}
	 	else{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}






	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCounter1,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(7,iCounter1,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	//Label labelRequest = new Label(6,iCounter1,rawReq);
	//   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(7,iCounter1,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 




 
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);




		//condition to put response values in map
		if(!((xpath2=="")&&(ActualResponseValue=="")))
		{
			String responseParam=TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
			String responseValue=ActualResponseValue;
			mapName.put(responseParam,responseValue);
			log.info "		>>>>  +++++++ NOW MAPNAME LOOKS LIKE : "+mapName;
		}
		else{
			log.info "		>>>>	+++++++ NOT PUTTING VALUE FOR " +xpath2+ " INTO MAP BECAUSE VALUE FETCHED IS : "+ActualResponseValue;
		}




		

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCounter1, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCounter1,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }

	    log.info "		>>>>		++++++++++++++ map to put in Global map now looks like : "+mapName;
		
	}
	globalMap.put(mapNo,mapName);
	log.info "		>>>>		+++++++++++++++++++++++++  Global Map looks like this NOW : "+globalMap; 
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(iCounterForResponseValues=1;iCounterForResponseValues<ResponseColCount;iCounterForResponseValues++)
	{

	  if(!(TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounterForResponseValues;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounterForResponseValues).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCounter1, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(9+iDivisionCount))
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			*/
			
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else if(flagCount<1001)
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			*/
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
			sheet.addCell(label03);
			if(!(UnitTestingFlag=="Y"))
			{
			break stepCountLoop;
			}
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;


/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

 	
 }/********END Iterating loop for No of Test Cases in Test Data Sheet *********/
		


			
			}
			//******************************************************
			//END loop for number of steps in the scenario
			//******************************************************
			


			



		
		}//*******************************************************
		//END loop for number of scenarios in the scenario file
		//*******************************************************


workbook.write();
workbook.close();
log.info "	>>>>		------------- WORKBOOK UPDATED AND CLOSED -------------- ";




log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="createClientTest1" id="9d6f1b21-db27-4672-9bf6-81dbeef55e13" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.*;
import java.util.*;

import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder;

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable;
import java.lang.Error;
import java.lang.Exception;

import java.text.ParseException;

import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;

//importing jars for DB connection
import com.eviware.soapui.support.XmlHolder;
import groovy.sql.Sql;

import com.eviware.soapui.support.types.StringToStringMap 


import com.eviware.soapui.*
import java.util.*
import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  





APIName = 'createClient';
testRunner.testCase.setPropertyValue('subscriberId','12');
testRunner.runTestStepByName(APIName);
testRunner.testCase.setPropertyValue('subscriberId','200300');
testRunner.runTestStepByName(APIName);


def groovyUtilsXXX = new com.eviware.soapui.support.GroovyUtils(context);
def requestHolder = groovyUtilsXXX.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent );
def responseHolder = groovyUtilsXXX.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.responseContent );
log.info requestHolder.getXml();
log.info responseHolder.getXml();
</script></con:config></con:testStep><con:testStep type="groovy" name="testScriptJuly11-1" id="15c93642-19cc-46ee-8f6e-a0abec999007" disabled="true"><con:settings/><con:config><script>import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



APIName='createClient';

reqValue=testRunner.testCase.getTestStepByName(APIName).getProperty("Request").getValue();
log.info "  ----- "+reqValue;

testRunner.runTestStepByName(APIName);

reqValue2=testRunner.testCase.getTestStepByName(APIName).getProperty("Request").getValue();
log.info "  ----- "+reqValue2;

String reqName=APIName+"#Request";

def groovyUtils1 = new com.eviware.soapui.support.GroovyUtils( context );
//holder1 = groovyUtils1.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
holder1 = groovyUtils1.getXmlHolder(reqName);
log.info "---------------------------------------------------------------"
log.info " ";

log.info "	===== holder1 : "+holder1;

req1 = holder1.getXml();
log.info "	===== req1 : "+req1;

testRunner.testCase.setPropertyValue('subscriberId','1100');

def groovyUtils2 = new com.eviware.soapui.support.GroovyUtils( context );
//holder2 = groovyUtils2.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
holder2 = groovyUtils2.getXmlHolder(reqName);
log.info "---------------------------------------------------------------"
log.info " ";

log.info "	===== holder2 : "+holder2;

req2 = holder2.getXml();
log.info "	===== req2 : "+req2;

testRunner.testCase.setPropertyValue('subscriberId','2200');

def groovyUtils3 = new com.eviware.soapui.support.GroovyUtils( context );
//holder3 = groovyUtils3.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
holder3 = groovyUtils3.getXmlHolder(reqName);
log.info "---------------------------------------------------------------"
log.info " ";
log.info "	===== holder3 : "+holder3;

req3 = holder3.getXml();
log.info "	===== req3 : "+req3;




</script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver-July11-2" id="0da2b8f3-6fc3-4d69-98d3-9c65a5af566c" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "****************************************************************************************************************************************";
log.info "***************************STARTING AUTOMATION DRIVER FOR SCENARIO TESTING***********************************";
log.info "=============================================================================================================";
log.info " ";
log.info " ";

//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet requestSchemaSheet1;
Sheet requestValuesSheet1;
Sheet responseSchemaSheet1;
Sheet responseValuesSheet1;

String APIName="";
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//***************************************************
//Variable to store TCID for the Test Case to execute
//***************************************************
String TestCaseID 
//******************************************************
//Array to separate and store cell contents based on '|'
//******************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//***********************************************************
//Counter for looping through number of steps in the scenario
//***********************************************************
int iCounter1;
def holder1;
def rawReq="";


/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String SetNo = context.expand('${#Project#SetNo}');
//def TestDataFile = context.expand( '${#Project#TestDataFile}');
//String APIName = context.expand( '${#Project#APIName}');
String TestScenarioFile=context.expand('${#Project#ScenarioFileLocation}');
String UnitTestingFlag=context.expand('${#Project#UnitTesting}');


log.info "=====================ScenarioFileLocation : "+TestScenarioFile;
log.info "=====================UnitTestingFlag : "+UnitTestingFlag;
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";


	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	int noOfScenarioSheets = getSenarioSheets.size();
	log.info "		>>>>		Number of Sheets in this Test Scenario File are : "+noOfScenarioSheets;


log.info "		>>>>		==============================="
int Length =  TestScenarioFile.lastIndexOf('\\');
int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
String excelName = TestScenarioFile.substring(Length+1,Length2);
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
//log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResultFileLocation = TestScenarioFile.substring(0,Length);
log.info "	===	ResultFileLocation : "+ResultFileLocation;
log.info "	===	excelName : "+excelName;
//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResultFile =  ResultFileLocation + "\\Results\\"+excelName+"-RESULT-" +currentTime+".xls";
		
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResultFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
workbook = Workbook.createWorkbook(new File(TestResultFile));



		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(int sheetCount=1;sheetCount<noOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();
		log.info " ";	
		log.info "		>>>>		Reading Sheet : "+sheetName;

		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info " ";
			log.info "=========================================================================";
			log.info "		>>>>		Scenario in sheet "+sheetName+" NOT set for execution";
			log.info "=========================================================================";
			log.info " ";
			continue;
		}

		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);

		
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "REQUEST"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);

					Label timeTakenLabel = new Label(8, 3, "TimeTaken[ms]"); 
					sheet.addCell(timeTakenLabel);

		//****************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();


		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];



			//******************************************************
			//Starting loop for number of steps in the scenario
			//******************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.BRIGHT_GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont3 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat3 = new WritableCellFormat(normalFont3);
			normalFormat3.setBackground(jxl.format.Colour.YELLOW);

			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontOrange = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatOrange = new WritableCellFormat(normalFontOrange);
			normalFormatOrange.setBackground(jxl.format.Colour.ORANGE);

			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontTurquoise = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatTurquoise = new WritableCellFormat(normalFontTurquoise);
			normalFormatTurquoise.setBackground(jxl.format.Colour.TURQUOISE);


			iCountFlag=0;
			//log.info "		>>>>		: Reading Row No :"+(iCounter1+1);
			log.info " ";
			log.info "=================================================================================================================================================================================================================";
			log.info "		>>>>		********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents()+"-"+SenarioSheet1.getCell(4,iCounter1).getContents();
			
			//************************************************
			//condition to check if the scenario step is empty
			//************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}


			//Adding Description and ExpectedResult to result file
			Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
			sheet.addCell(stepNoValue);

			Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
			sheet.addCell(descriptionValue);

			Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
			sheet.addCell(expectedValue);

			Label stepNameValue = new Label(3, iCounter1, SenarioSheet1.getCell(3, iCounter1).getContents(),normalFormatOrange); 
			sheet.addCell(stepNameValue);

			Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
			sheet.addCell(referencesValue);



			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;
			//mapName = "map"+mapNo;
			HashMap mapName= [:];
			//log.info "	mapName : "+mapName;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	APIName=RequestName;
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents().toString();
		 	log.info " ";
		 	log.info " ";
		 	log.info "		>>>>		"+RequestName+" | "+TestCaseID;
			


				//Getting the location of TestData file for the API Request
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				//String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				//Test Data files for the API Request must be available in a folder named 'TestDataFiles' in the same location where scenario file is placed.
				String TestDataFile = TestDataFileLocation + "\\TestData\\"+RequestName+".xls";
				log.info " ";
				log.info "		>>>>		Referrring TestDataFile  :"+TestDataFile;



 TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();


	def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {


		if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					log.info "------======---- "+TestDataValues1.getCell(0,iCountTestCase).getContents();
					continue;
				}

flagCount=9;

List<String> xmlTagToSetBlank = new ArrayList<String>();

	 //int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+SetNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/
/*
	def groovyUtilsForExtraRun = new com.eviware.soapui.support.GroovyUtils( context ) 
	// get XmlHolder for request message def
	String reqNameforExtraRun=APIName+"#Request";
	holderForExtraRun = groovyUtilsForExtraRun.getXmlHolder(reqNameforExtraRun);
	// change password using XPath
	holderForExtraRun["//subscriberId"] = '1234';
	// write updated request back to teststep
	holderForExtraRun.updateProperty();
	context.requestContent = holderForExtraRun.xml;
*/
	
	testRunner.testCase.setPropertyValue('subscriberId','12');
	testRunner.runTestStepByName(APIName);
	testRunner.testCase.setPropertyValue('subscriberId','');
	/*********************************************************************************/


	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }



//def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);



//Fetching the request
	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

	
	//Run Request again to eliminate null object error
	 //testRunner.runTestStepByName(APIName);
	// def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	 holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);




	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 /*
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	*/
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }

/*
int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	holder1.updateProperty();
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
*/
/*
for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}
*/
holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	 
rawReq=holder1.getXml();

	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/







				//******************************
				//Start condition for References
				//******************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				///////log.info "				>>>> This scenario step has References";
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has References";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];


				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;

				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;

				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				mapToRefer = Integer.parseInt(stepToRefer);

				if(mapToRefer==null)
				{
					log.info "		>>>>		============ Map for Step No - "+stepToRefer+" cotains "+mapToRefer;
					
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
				//ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);
				
				if(!((globalMap.get(mapToRefer)).toString().contains(paramValueToFetch)))
				{
					log.info "		>>>>	================= MAP DOES NOT CONTAIN THE PARAM ====================";
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
					break;
				}
				/*
				if((globalMap.get(mapToRefer)).get(paramValueToFetch)==null)
				{
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				*/
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch);
				log.info "				*********  ReferringValue = "+ReferringValue


				
				//log.info "	REQUEST holder1 9901 : "+holder1;
				log.info "	REQUEST holder1.getXml() 9901 : "+holder1.getXml();
				
				def groovyUtilsForUpdatingReferences = new com.eviware.soapui.support.GroovyUtils( context ) 
				// get XmlHolder for request message def
				
				String req2Name=APIName+"#Request";
				def holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				//holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder(req2Name);
				// change parameter value using XPath
			//	log.info "		++++++  holderForRef  : "+holderForRef;
				log.info "		++++++  holderForRef.getXml() : "+holderForRef.getXml();
				paramNameToSet = "//"+paramName;
				//paramNameToSet = paramName;
				log.info "		>>>> ++ Parameter to set : "+paramNameToSet;
				holderForRef[paramNameToSet] = ReferringValue;
				//holder1[paramNameToSet] = ReferringValue;
				// write updated request back to teststep
				holderForRef.updateProperty();
				//holder1.updateProperty();
				context.requestContent = holderForRef.xml;
				//context.requestContent = holder1.xml;
				log.info "	REQUEST AFTER SETTING REF 1 = :"+context.requestContent;
				requestAfterRef=holderForRef.getXml();
				log.info "	REQUEST AFTER SETTING REF 1 = :"+requestAfterRef;
				
				log.info "		++++++  holderForRef.getXml() 2: "+holderForRef.getXml();
				log.info "		++++++ REQUEST holder1.getXml() 2 9901 : "+holder1.getXml();
				
				
				
				
				//def holderForRef2 = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				rawReq=holderForRef.getXml();
				testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq);
	
				}
				}
				}





			/************END OF REFERENCES SCRIPT********************/



	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";


			//Fetch the time taken to run the request
			String requestTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		====TIME TAKEN - "+requestTimeTaken;
			
			Label timeTakenByReq = new Label(8, iCounter1, requestTimeTaken, normalFormat3);
			sheet.addCell(timeTakenByReq);


def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq2);
	  		sheet.addCell(labelRawRequest);
	  		
	 	}
	 	else{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}






	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCounter1,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(7,iCounter1,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	//Label labelRequest = new Label(6,iCounter1,rawReq);
	//   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(7,iCounter1,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 




 
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);




		//condition to put response values in map
		if(!((xpath2=="")&&(ActualResponseValue=="")))
		{
			String responseParam=TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
			String responseValue=ActualResponseValue;
			mapName.put(responseParam,responseValue);
			log.info "		>>>>  +++++++ NOW MAPNAME LOOKS LIKE : "+mapName;
		}
		else{
			log.info "		>>>>	+++++++ NOT PUTTING VALUE FOR " +xpath2+ " INTO MAP BECAUSE VALUE FETCHED IS : "+ActualResponseValue;
		}




		

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCounter1, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCounter1,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }

	    log.info "		>>>>		++++++++++++++ map to put in Global map now looks like : "+mapName;
		
	}
	globalMap.put(mapNo,mapName);
	log.info "		>>>>		+++++++++++++++++++++++++  Global Map looks like this NOW : "+globalMap; 
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(iCounterForResponseValues=1;iCounterForResponseValues<ResponseColCount;iCounterForResponseValues++)
	{

	  if(!(TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounterForResponseValues;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounterForResponseValues).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCounter1, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(9+iDivisionCount))
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			*/
			
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else if(flagCount<1001)
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			*/
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
			sheet.addCell(label03);
			if(!(UnitTestingFlag=="Y"))
			{
			break stepCountLoop;
			}
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;



 	
 }/********END Iterating loop for No of Test Cases in Test Data Sheet *********/
		


			
			}
			//******************************************************
			//END loop for number of steps in the scenario
			//******************************************************
			


			



		
		}//*******************************************************
		//END loop for number of scenarios in the scenario file
		//*******************************************************


workbook.write();
workbook.close();
log.info "	>>>>		------------- WORKBOOK UPDATED AND CLOSED -------------- ";




log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver-July11-1" id="dc0da0b8-bbb9-4b87-9ac3-425fe4b7d0b2" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "****************************************************************************************************************************************";
log.info "***************************STARTING AUTOMATION DRIVER FOR SCENARIO TESTING***********************************";
log.info "=============================================================================================================";
log.info " ";
log.info " ";

//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet requestSchemaSheet1;
Sheet requestValuesSheet1;
Sheet responseSchemaSheet1;
Sheet responseValuesSheet1;

String APIName="";
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//***************************************************
//Variable to store TCID for the Test Case to execute
//***************************************************
String TestCaseID 
//******************************************************
//Array to separate and store cell contents based on '|'
//******************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//***********************************************************
//Counter for looping through number of steps in the scenario
//***********************************************************
int iCounter1;
def holder1;
def rawReq="";


/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String SetNo = context.expand('${#Project#SetNo}');
//def TestDataFile = context.expand( '${#Project#TestDataFile}');
//String APIName = context.expand( '${#Project#APIName}');
String TestScenarioFile=context.expand('${#Project#ScenarioFileLocation}');
String UnitTestingFlag=context.expand('${#Project#UnitTesting}');


log.info "=====================ScenarioFileLocation : "+TestScenarioFile;
log.info "=====================UnitTestingFlag : "+UnitTestingFlag;
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";


	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	int noOfScenarioSheets = getSenarioSheets.size();
	log.info "		>>>>		Number of Sheets in this Test Scenario File are : "+noOfScenarioSheets;


log.info "		>>>>		==============================="
int Length =  TestScenarioFile.lastIndexOf('\\');
int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
String excelName = TestScenarioFile.substring(Length+1,Length2);
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
//log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResultFileLocation = TestScenarioFile.substring(0,Length);
log.info "	===	ResultFileLocation : "+ResultFileLocation;
log.info "	===	excelName : "+excelName;
//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResultFile =  ResultFileLocation + "\\Results\\"+excelName+"-RESULT-" +currentTime+".xls";
		
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResultFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
workbook = Workbook.createWorkbook(new File(TestResultFile));



		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(int sheetCount=1;sheetCount<noOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();
		log.info " ";	
		log.info "		>>>>		Reading Sheet : "+sheetName;

		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info " ";
			log.info "=========================================================================";
			log.info "		>>>>		Scenario in sheet "+sheetName+" NOT set for execution";
			log.info "=========================================================================";
			log.info " ";
			continue;
		}

		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);

		
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "REQUEST"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);

					Label timeTakenLabel = new Label(8, 3, "TimeTaken[ms]"); 
					sheet.addCell(timeTakenLabel);

		//****************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();


		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];



			//******************************************************
			//Starting loop for number of steps in the scenario
			//******************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.BRIGHT_GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont3 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat3 = new WritableCellFormat(normalFont3);
			normalFormat3.setBackground(jxl.format.Colour.YELLOW);

			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontOrange = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatOrange = new WritableCellFormat(normalFontOrange);
			normalFormatOrange.setBackground(jxl.format.Colour.ORANGE);

			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFontTurquoise = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormatTurquoise = new WritableCellFormat(normalFontTurquoise);
			normalFormatTurquoise.setBackground(jxl.format.Colour.TURQUOISE);


			iCountFlag=0;
			//log.info "		>>>>		: Reading Row No :"+(iCounter1+1);
			log.info " ";
			log.info "=================================================================================================================================================================================================================";
			log.info "		>>>>		********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents()+"-"+SenarioSheet1.getCell(4,iCounter1).getContents();
			
			//************************************************
			//condition to check if the scenario step is empty
			//************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}


			//Adding Description and ExpectedResult to result file
			Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
			sheet.addCell(stepNoValue);

			Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
			sheet.addCell(descriptionValue);

			Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
			sheet.addCell(expectedValue);

			Label stepNameValue = new Label(3, iCounter1, SenarioSheet1.getCell(3, iCounter1).getContents(),normalFormatOrange); 
			sheet.addCell(stepNameValue);

			Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
			sheet.addCell(referencesValue);



			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;
			//mapName = "map"+mapNo;
			HashMap mapName= [:];
			//log.info "	mapName : "+mapName;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	APIName=RequestName;
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents().toString();
		 	log.info " ";
		 	log.info " ";
		 	log.info "		>>>>		"+RequestName+" | "+TestCaseID;
			


				//Getting the location of TestData file for the API Request
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				//String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				//Test Data files for the API Request must be available in a folder named 'TestDataFiles' in the same location where scenario file is placed.
				String TestDataFile = TestDataFileLocation + "\\TestData\\"+RequestName+".xls";
				log.info " ";
				log.info "		>>>>		Referrring TestDataFile  :"+TestDataFile;



 TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();


	def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {


		if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					log.info "------======---- "+TestDataValues1.getCell(0,iCountTestCase).getContents();
					continue;
				}

flagCount=9;

List<String> xmlTagToSetBlank = new ArrayList<String>();

	 //int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+SetNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/





	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }



//def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);



//Fetching the request
	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

	
	//Run Request again to eliminate null object error
	 //testRunner.runTestStepByName(APIName);
	// def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	 holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);




	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }

/*
int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	holder1.updateProperty();
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
*/

for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}

holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	 
rawReq=holder1.getXml();

	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/







				//******************************
				//Start condition for References
				//******************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				///////log.info "				>>>> This scenario step has References";
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has References";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];


				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;

				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;

				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				mapToRefer = Integer.parseInt(stepToRefer);

				if(mapToRefer==null)
				{
					log.info "		>>>>		============ Map for Step No - "+stepToRefer+" cotains "+mapToRefer;
					
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
				//ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);
				
				if(!((globalMap.get(mapToRefer)).toString().contains(paramValueToFetch)))
				{
					log.info "		>>>>	================= MAP DOES NOT CONTAIN THE PARAM ====================";
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
					break;
				}
				/*
				if((globalMap.get(mapToRefer)).get(paramValueToFetch)==null)
				{
					log.info "		>>>>		============ REFERRING VALUE IS NULL : Flow - "+sheetName+" | "+SenarioSheet1.getCell(3, iCounter1).getContents()+" | "+TestCaseID;
					Label labelFailDueToNullRefTCID = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormatTurquoise); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRefTCID);
					flagCount=1001;
					Label labelFailDueToNullRef = new Label(9, iCounter1, "REFERENCES ARE POINTING TO NULL VALUES. CORRECT REFERENCES OR CHECK THE RESPONSE OF THE REFERRED STEP"); //column=0=A,row=0=1
					sheet.addCell(labelFailDueToNullRef);
					if(!(UnitTestingFlag=="Y"))
					{
					break stepCountLoop;
					}
				}
				*/
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch);
				log.info "				*********  ReferringValue = "+ReferringValue


				
				//log.info "	REQUEST holder1 9901 : "+holder1;
				log.info "	REQUEST holder1.getXml() 9901 : "+holder1.getXml();
				
				def groovyUtilsForUpdatingReferences = new com.eviware.soapui.support.GroovyUtils( context ) 
				// get XmlHolder for request message def
				
				String req2Name=APIName+"#Request";
				def holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				//holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder(req2Name);
				// change parameter value using XPath
			//	log.info "		++++++  holderForRef  : "+holderForRef;
				log.info "		++++++  holderForRef.getXml() : "+holderForRef.getXml();
				paramNameToSet = "//"+paramName;
				//paramNameToSet = paramName;
				log.info "		>>>> ++ Parameter to set : "+paramNameToSet;
				holderForRef[paramNameToSet] = ReferringValue;
				//holder1[paramNameToSet] = ReferringValue;
				// write updated request back to teststep
				holderForRef.updateProperty();
				//holder1.updateProperty();
				context.requestContent = holderForRef.xml;
				//context.requestContent = holder1.xml;
				log.info "	REQUEST AFTER SETTING REF 1 = :"+context.requestContent;
				requestAfterRef=holderForRef.getXml();
				log.info "	REQUEST AFTER SETTING REF 1 = :"+requestAfterRef;
				
				log.info "		++++++  holderForRef.getXml() 2: "+holderForRef.getXml();
				log.info "		++++++ REQUEST holder1.getXml() 2 9901 : "+holder1.getXml();
				
				
				
				
				//def holderForRef2 = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				rawReq=holderForRef.getXml();
				testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq);
	
				}
				}
				}





			/************END OF REFERENCES SCRIPT********************/



	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";


			//Fetch the time taken to run the request
			String requestTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		====TIME TAKEN - "+requestTimeTaken;
			
			Label timeTakenByReq = new Label(8, iCounter1, requestTimeTaken, normalFormat3);
			sheet.addCell(timeTakenByReq);


def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq2);
	  		sheet.addCell(labelRawRequest);
	  		
	 	}
	 	else{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}






	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCounter1,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(7,iCounter1,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	//Label labelRequest = new Label(6,iCounter1,rawReq);
	//   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(7,iCounter1,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 




 
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);




		//condition to put response values in map
		if(!((xpath2=="")&&(ActualResponseValue=="")))
		{
			String responseParam=TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
			String responseValue=ActualResponseValue;
			mapName.put(responseParam,responseValue);
			log.info "		>>>>  +++++++ NOW MAPNAME LOOKS LIKE : "+mapName;
		}
		else{
			log.info "		>>>>	+++++++ NOT PUTTING VALUE FOR " +xpath2+ " INTO MAP BECAUSE VALUE FETCHED IS : "+ActualResponseValue;
		}




		

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCounter1, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCounter1,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }

	    log.info "		>>>>		++++++++++++++ map to put in Global map now looks like : "+mapName;
		
	}
	globalMap.put(mapNo,mapName);
	log.info "		>>>>		+++++++++++++++++++++++++  Global Map looks like this NOW : "+globalMap; 
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(iCounterForResponseValues=1;iCounterForResponseValues<ResponseColCount;iCounterForResponseValues++)
	{

	  if(!(TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounterForResponseValues;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounterForResponseValues).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCounter1, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(9+iDivisionCount))
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			*/
			
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else if(flagCount<1001)
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			*/
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
			sheet.addCell(label03);
			if(!(UnitTestingFlag=="Y"))
			{
			break stepCountLoop;
			}
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;



 	
 }/********END Iterating loop for No of Test Cases in Test Data Sheet *********/
		


			
			}
			//******************************************************
			//END loop for number of steps in the scenario
			//******************************************************
			


			



		
		}//*******************************************************
		//END loop for number of scenarios in the scenario file
		//*******************************************************


workbook.write();
workbook.close();
log.info "	>>>>		------------- WORKBOOK UPDATED AND CLOSED -------------- ";




log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver-July10-4" id="1198f965-967e-49d1-8470-a1566605947e" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "****************************************************************************************************************************************";
log.info "***************************STARTING AUTOMATION DRIVER FOR SCENARIO TESTING***********************************";
log.info "=============================================================================================================";
log.info " ";
log.info " ";

//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet requestSchemaSheet1;
Sheet requestValuesSheet1;
Sheet responseSchemaSheet1;
Sheet responseValuesSheet1;

String APIName="";
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//***************************************************
//Variable to store TCID for the Test Case to execute
//***************************************************
String TestCaseID 
//******************************************************
//Array to separate and store cell contents based on '|'
//******************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//***********************************************************
//Counter for looping through number of steps in the scenario
//***********************************************************
int iCounter1;
def holder1;
def rawReq="";


/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String SetNo = context.expand('${#Project#SetNo}');
//def TestDataFile = context.expand( '${#Project#TestDataFile}');
//String APIName = context.expand( '${#Project#APIName}');
String TestScenarioFile=context.expand('${#Project#ScenarioFileLocation}');

log.info "=====================ScenarioFileLocation : "+TestScenarioFile
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";


	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	int noOfScenarioSheets = getSenarioSheets.size();
	log.info "		>>>>		Number of Sheets in this Test Scenario File are : "+noOfScenarioSheets;










log.info "		>>>>		==============================="
int Length =  TestScenarioFile.lastIndexOf('\\');
int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
String excelName = TestScenarioFile.substring(Length+1,Length2);
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
//log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResultFileLocation = TestScenarioFile.substring(0,Length);
log.info "	===	ResultFileLocation : "+ResultFileLocation;
log.info "	===	excelName : "+excelName;
//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResultFile =  ResultFileLocation + "\\Results\\"+excelName+"-RESULT-" +currentTime+".xls";
		
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResultFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
workbook = Workbook.createWorkbook(new File(TestResultFile));







		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(int sheetCount=1;sheetCount<noOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();
		log.info " ";	
		log.info "		>>>>		Reading Sheet : "+sheetName;

		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info " ";
			log.info "=========================================================================";
			log.info "		>>>>		Scenario in sheet "+sheetName+" NOT set for execution";
			log.info "=========================================================================";
			log.info " ";
			continue;
		}

		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);

		
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "REQUEST"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);

					Label timeTakenLabel = new Label(8, 3, "TimeTaken[ms]"); 
					sheet.addCell(timeTakenLabel);

		//****************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();


		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];



			//******************************************************
			//Starting loop for number of steps in the scenario
			//******************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont3 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat3 = new WritableCellFormat(normalFont3);
			normalFormat3.setBackground(jxl.format.Colour.YELLOW);


			iCountFlag=0;
			//log.info "		>>>>		: Reading Row No :"+(iCounter1+1);
			log.info " ";
			log.info "=================================================================================================================================================================================================================";
			log.info "		>>>>		********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents()+"-"+SenarioSheet1.getCell(4,iCounter1).getContents();
			
			//************************************************
			//condition to check if the scenario step is empty
			//************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}


			//Adding Description and ExpectedResult to result file
			Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
			sheet.addCell(stepNoValue);

			Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
			sheet.addCell(descriptionValue);

			Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
			sheet.addCell(expectedValue);

			Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
			sheet.addCell(referencesValue);



			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;
			//mapName = "map"+mapNo;
			HashMap mapName= [:];
			//log.info "	mapName : "+mapName;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	APIName=RequestName;
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents().toString();
		 	log.info " ";
		 	log.info " ";
		 	log.info "		>>>>		"+RequestName+" | "+TestCaseID;
			


				//Getting the location of TestData file for the API Request
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				//String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				//Test Data files for the API Request must be available in a folder named 'TestDataFiles' in the same location where scenario file is placed.
				String TestDataFile = TestDataFileLocation + "\\TestData\\"+RequestName+".xls";
				log.info " ";
				log.info "		>>>>		Referrring TestDataFile  :"+TestDataFile;



 TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();


	def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {


		if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					log.info "------======---- "+TestDataValues1.getCell(0,iCountTestCase).getContents();
					continue;
				}

flagCount=9;

List<String> xmlTagToSetBlank = new ArrayList<String>();

	 //int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+SetNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/





	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }



//def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);



//Fetching the request
	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

	
	//Run Request again to eliminate null object error
	 testRunner.runTestStepByName(APIName);
	// def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	 holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);




	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }

/*
int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	holder1.updateProperty();
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
*/

for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}

holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	 
rawReq=holder1.getXml();

	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/















				//******************************
				//Start condition for References
				//******************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				///////log.info "				>>>> This scenario step has References";
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has References";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];


				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;

				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;

				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				mapToRefer = Integer.parseInt(stepToRefer);
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
				//ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch);
				log.info "				*********  ReferringValue = "+ReferringValue


				
				//log.info "	REQUEST holder1 9901 : "+holder1;
				log.info "	REQUEST holder1.getXml() 9901 : "+holder1.getXml();
				
				def groovyUtilsForUpdatingReferences = new com.eviware.soapui.support.GroovyUtils( context ) 
				// get XmlHolder for request message def
				
				String req2Name=APIName+"#Request";
				def holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				//holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder(req2Name);
				// change parameter value using XPath
			//	log.info "		++++++  holderForRef  : "+holderForRef;
				log.info "		++++++  holderForRef.getXml() : "+holderForRef.getXml();
				paramNameToSet = "//"+paramName;
				//paramNameToSet = paramName;
				log.info "		>>>> ++ Parameter to set : "+paramNameToSet;
				holderForRef[paramNameToSet] = ReferringValue;
				//holder1[paramNameToSet] = ReferringValue;
				// write updated request back to teststep
				holderForRef.updateProperty();
				//holder1.updateProperty();
				context.requestContent = holderForRef.xml;
				//context.requestContent = holder1.xml;
				log.info "	REQUEST AFTER SETTING REF 1 = :"+context.requestContent;
				requestAfterRef=holderForRef.getXml();
				log.info "	REQUEST AFTER SETTING REF 1 = :"+requestAfterRef;
				
				log.info "		++++++  holderForRef.getXml() 2: "+holderForRef.getXml();
				log.info "		++++++ REQUEST holder1.getXml() 2 9901 : "+holder1.getXml();
				
				
				
				
				//def holderForRef2 = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				rawReq=holderForRef.getXml();
				testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq);
	
				}
				}
				}




























	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";


			//Fetch the time taken to run the request
			String requestTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		====TIME TAKEN - "+requestTimeTaken;
			
			Label timeTakenByReq = new Label(8, iCounter1, requestTimeTaken, normalFormat3);
			sheet.addCell(timeTakenByReq);


def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq2);
	  		sheet.addCell(labelRawRequest);
	  		
	 	}
	 	else{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}






	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCounter1,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(7,iCounter1,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	//Label labelRequest = new Label(6,iCounter1,rawReq);
	//   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(7,iCounter1,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 




 
	  
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);




		//condition to put response values in map
		if(!((xpath2=="")&&(ActualResponseValue=="")))
		{
			String responseParam=TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
			String responseValue=ActualResponseValue;
			mapName.put(responseParam,responseValue);
			log.info "		>>>>  +++++++ NOW MAPNAME LOOKS LIKE : "+mapName;
		}
		else{
			log.info "		>>>>	+++++++ NOT PUTTING VALUE FOR " +xpath2+ " INTO MAP BECAUSE VALUE FETCHED IS : "+ActualResponseValue;
		}




		

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCounter1, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCounter1,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }

	    log.info "		>>>>		++++++++++++++ map to put in Global map now looks like : "+mapName;
		
	}
	globalMap.put(mapNo,mapName);
	log.info "		>>>>		+++++++++++++++++++++++++  Global Map looks like this NOW : "+globalMap; 
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(iCounterForResponseValues=1;iCounterForResponseValues<ResponseColCount;iCounterForResponseValues++)
	{

	  if(!(TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounterForResponseValues;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounterForResponseValues).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCounter1, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(9+iDivisionCount))
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			*/
			
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			*/
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;



 	
 }/********END Iterating loop for No of Test Cases in Test Data Sheet *********/
		


			
			}
			//******************************************************
			//END loop for number of steps in the scenario
			//******************************************************
			


			



		
		}//*******************************************************
		//END loop for number of scenarios in the scenario file
		//*******************************************************


workbook.write();
workbook.close();
log.info "	>>>>		------------- WORKBOOK UPDATED AND CLOSED -------------- ";




log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver-July10-3" id="493d1746-dc21-4641-8322-533a0360b1ea" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "****************************************************************************************************************************************";
log.info "***************************STARTING AUTOMATION DRIVER FOR SCENARIO TESTING***********************************";
log.info "=============================================================================================================";
log.info " ";
log.info " ";

//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet requestSchemaSheet1;
Sheet requestValuesSheet1;
Sheet responseSchemaSheet1;
Sheet responseValuesSheet1;

String APIName="";
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//***************************************************
//Variable to store TCID for the Test Case to execute
//***************************************************
String TestCaseID 
//******************************************************
//Array to separate and store cell contents based on '|'
//******************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//***********************************************************
//Counter for looping through number of steps in the scenario
//***********************************************************
int iCounter1;
def holder1;
def rawReq="";


/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String SetNo = context.expand('${#Project#SetNo}');
//def TestDataFile = context.expand( '${#Project#TestDataFile}');
//String APIName = context.expand( '${#Project#APIName}');
String TestScenarioFile=context.expand('${#Project#ScenarioFileLocation}');

log.info "=====================ScenarioFileLocation : "+TestScenarioFile
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";


	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	int noOfScenarioSheets = getSenarioSheets.size();
	log.info "		>>>>		Number of Sheets in this Test Scenario File are : "+noOfScenarioSheets;


log.info "		>>>>		==============================="
int Length =  TestScenarioFile.lastIndexOf('\\');
int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
String excelName = TestScenarioFile.substring(Length+1,Length2);
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
//log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResultFileLocation = TestScenarioFile.substring(0,Length);
log.info "	===	ResultFileLocation : "+ResultFileLocation;
log.info "	===	excelName : "+excelName;
//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResultFile =  ResultFileLocation + "\\Results\\"+excelName+"-RESULT-" +currentTime+".xls";
		
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResultFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
workbook = Workbook.createWorkbook(new File(TestResultFile));



		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(int sheetCount=1;sheetCount<noOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();
		log.info " ";	
		log.info "		>>>>		Reading Sheet : "+sheetName;

		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info " ";
			log.info "=========================================================================";
			log.info "		>>>>		Scenario in sheet "+sheetName+" NOT set for execution";
			log.info "=========================================================================";
			log.info " ";
			continue;
		}

		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);

		
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "REQUEST"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);

					Label timeTakenLabel = new Label(8, 3, "TimeTaken[ms]"); 
					sheet.addCell(timeTakenLabel);

		//****************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();


		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];



			//******************************************************
			//Starting loop for number of steps in the scenario
			//******************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont3 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat3 = new WritableCellFormat(normalFont3);
			normalFormat3.setBackground(jxl.format.Colour.YELLOW);


			iCountFlag=0;
			//log.info "		>>>>		: Reading Row No :"+(iCounter1+1);
			log.info " ";
			log.info "=================================================================================================================================================================================================================";
			log.info "		>>>>		********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents()+"-"+SenarioSheet1.getCell(4,iCounter1).getContents();
			
			//************************************************
			//condition to check if the scenario step is empty
			//************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}


			//Adding Description and ExpectedResult to result file
			Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
			sheet.addCell(stepNoValue);

			Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
			sheet.addCell(descriptionValue);

			Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
			sheet.addCell(expectedValue);

			Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
			sheet.addCell(referencesValue);



			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;
			//mapName = "map"+mapNo;
			HashMap mapName= [:];
			//log.info "	mapName : "+mapName;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	APIName=RequestName;
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents().toString();
		 	log.info " ";
		 	log.info " ";
		 	log.info "		>>>>		"+RequestName+" | "+TestCaseID;
			


				//Getting the location of TestData file for the API Request
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				//String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				//Test Data files for the API Request must be available in a folder named 'TestDataFiles' in the same location where scenario file is placed.
				String TestDataFile = TestDataFileLocation + "\\TestData\\"+RequestName+".xls";
				log.info " ";
				log.info "		>>>>		Referrring TestDataFile  :"+TestDataFile;



 TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();


	def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {


		if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					log.info "------======---- "+TestDataValues1.getCell(0,iCountTestCase).getContents();
					continue;
				}

flagCount=9;

List<String> xmlTagToSetBlank = new ArrayList<String>();

	 //int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+SetNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/





	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }



//def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);



//Fetching the request
	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

	
	//Run Request again to eliminate null object error
	 testRunner.runTestStepByName(APIName);
	// def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	 holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);




	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }

/*
int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	holder1.updateProperty();
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
*/

for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}

holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	 
rawReq=holder1.getXml();

	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/







				//******************************
				//Start condition for References
				//******************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				///////log.info "				>>>> This scenario step has References";
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has References";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];


				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;

				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;

				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				mapToRefer = Integer.parseInt(stepToRefer);
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
				//ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch);
				log.info "				*********  ReferringValue = "+ReferringValue


				
				//log.info "	REQUEST holder1 9901 : "+holder1;
				log.info "	REQUEST holder1.getXml() 9901 : "+holder1.getXml();
				
				def groovyUtilsForUpdatingReferences = new com.eviware.soapui.support.GroovyUtils( context ) 
				// get XmlHolder for request message def
				
				String req2Name=APIName+"#Request";
				def holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				//holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder(req2Name);
				// change parameter value using XPath
			//	log.info "		++++++  holderForRef  : "+holderForRef;
				log.info "		++++++  holderForRef.getXml() : "+holderForRef.getXml();
				paramNameToSet = "//"+paramName;
				//paramNameToSet = paramName;
				log.info "		>>>> ++ Parameter to set : "+paramNameToSet;
				holderForRef[paramNameToSet] = ReferringValue;
				//holder1[paramNameToSet] = ReferringValue;
				// write updated request back to teststep
				holderForRef.updateProperty();
				//holder1.updateProperty();
				context.requestContent = holderForRef.xml;
				//context.requestContent = holder1.xml;
				log.info "	REQUEST AFTER SETTING REF 1 = :"+context.requestContent;
				requestAfterRef=holderForRef.getXml();
				log.info "	REQUEST AFTER SETTING REF 1 = :"+requestAfterRef;
				
				log.info "		++++++  holderForRef.getXml() 2: "+holderForRef.getXml();
				log.info "		++++++ REQUEST holder1.getXml() 2 9901 : "+holder1.getXml();
				
				
				
				
				//def holderForRef2 = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				rawReq=holderForRef.getXml();
				testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq);
	
				}
				}
				}









	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";


			//Fetch the time taken to run the request
			String requestTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		====TIME TAKEN - "+requestTimeTaken;
			
			Label timeTakenByReq = new Label(8, iCounter1, requestTimeTaken, normalFormat3);
			sheet.addCell(timeTakenByReq);


def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq2);
	  		sheet.addCell(labelRawRequest);
	  		
	 	}
	 	else{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}






	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCounter1,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(7,iCounter1,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	//Label labelRequest = new Label(6,iCounter1,rawReq);
	//   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(7,iCounter1,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 




 
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);




		//condition to put response values in map
		if(!((xpath2=="")&&(ActualResponseValue=="")))
		{
			String responseParam=TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
			String responseValue=ActualResponseValue;
			mapName.put(responseParam,responseValue);
			log.info "		>>>>  +++++++ NOW MAPNAME LOOKS LIKE : "+mapName;
		}
		else{
			log.info "		>>>>	+++++++ NOT PUTTING VALUE FOR " +xpath2+ " INTO MAP BECAUSE VALUE FETCHED IS : "+ActualResponseValue;
		}




		

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCounter1, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCounter1,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }

	    log.info "		>>>>		++++++++++++++ map to put in Global map now looks like : "+mapName;
		
	}
	globalMap.put(mapNo,mapName);
	log.info "		>>>>		+++++++++++++++++++++++++  Global Map looks like this NOW : "+globalMap; 
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(iCounterForResponseValues=1;iCounterForResponseValues<ResponseColCount;iCounterForResponseValues++)
	{

	  if(!(TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounterForResponseValues;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounterForResponseValues).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCounter1, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(9+iDivisionCount))
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			*/
			
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			*/
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;



 	
 }/********END Iterating loop for No of Test Cases in Test Data Sheet *********/
		


			
			}
			//******************************************************
			//END loop for number of steps in the scenario
			//******************************************************
			


			



		
		}//*******************************************************
		//END loop for number of scenarios in the scenario file
		//*******************************************************


workbook.write();
workbook.close();
log.info "	>>>>		------------- WORKBOOK UPDATED AND CLOSED -------------- ";




log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver-July10-2" id="5e9e788a-2691-4598-bdac-7b47ff1b1b70" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "****************************************************************************************************************************************";
log.info "***************************STARTING AUTOMATION DRIVER FOR SCENARIO TESTING***********************************";
log.info "=============================================================================================================";
log.info " ";
log.info " ";

//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet requestSchemaSheet1;
Sheet requestValuesSheet1;
Sheet responseSchemaSheet1;
Sheet responseValuesSheet1;

String APIName="";
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//***************************************************
//Variable to store TCID for the Test Case to execute
//***************************************************
String TestCaseID 
//******************************************************
//Array to separate and store cell contents based on '|'
//******************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//***********************************************************
//Counter for looping through number of steps in the scenario
//***********************************************************
int iCounter1;
def holder1;
def rawReq="";


/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String SetNo = context.expand('${#Project#SetNo}');
//def TestDataFile = context.expand( '${#Project#TestDataFile}');
//String APIName = context.expand( '${#Project#APIName}');
String TestScenarioFile=context.expand('${#Project#ScenarioFileLocation}');

log.info "=====================ScenarioFileLocation : "+TestScenarioFile
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";


	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	int noOfScenarioSheets = getSenarioSheets.size();
	log.info "		>>>>		Number of Sheets in this Test Scenario File are : "+noOfScenarioSheets;










log.info "		>>>>		==============================="
int Length =  TestScenarioFile.lastIndexOf('\\');
int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
String excelName = TestScenarioFile.substring(Length+1,Length2);
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
//log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResultFileLocation = TestScenarioFile.substring(0,Length);
log.info "	===	ResultFileLocation : "+ResultFileLocation;
log.info "	===	excelName : "+excelName;
//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResultFile =  ResultFileLocation + "\\Results\\"+excelName+"-RESULT-" +currentTime+".xls";
		
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResultFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
workbook = Workbook.createWorkbook(new File(TestResultFile));







		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(int sheetCount=1;sheetCount<noOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();
		log.info " ";	
		log.info "		>>>>		Reading Sheet : "+sheetName;

		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info " ";
			log.info "=========================================================================";
			log.info "		>>>>		Scenario in sheet "+sheetName+" NOT set for execution";
			log.info "=========================================================================";
			log.info " ";
			continue;
		}

		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);

		
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "REQUEST"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);

					Label timeTakenLabel = new Label(8, 3, "TimeTaken[ms]"); 
					sheet.addCell(timeTakenLabel);

		//****************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();


		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];



			//******************************************************
			//Starting loop for number of steps in the scenario
			//******************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont3 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat3 = new WritableCellFormat(normalFont3);
			normalFormat3.setBackground(jxl.format.Colour.YELLOW);


			iCountFlag=0;
			//log.info "		>>>>		: Reading Row No :"+(iCounter1+1);
			log.info " ";
			log.info "=================================================================================================================================================================================================================";
			log.info "		>>>>		********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents()+"-"+SenarioSheet1.getCell(4,iCounter1).getContents();
			
			//************************************************
			//condition to check if the scenario step is empty
			//************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}


			//Adding Description and ExpectedResult to result file
			Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
			sheet.addCell(stepNoValue);

			Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
			sheet.addCell(descriptionValue);

			Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
			sheet.addCell(expectedValue);

			Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
			sheet.addCell(referencesValue);



			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;
			//mapName = "map"+mapNo;
			HashMap mapName= [:];
			//log.info "	mapName : "+mapName;
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	APIName=RequestName;
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents().toString();
		 	log.info " ";
		 	log.info " ";
		 	log.info "		>>>>		"+RequestName+" | "+TestCaseID;
			


				//Getting the location of TestData file for the API Request
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				//String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				//Test Data files for the API Request must be available in a folder named 'TestDataFiles' in the same location where scenario file is placed.
				String TestDataFile = TestDataFileLocation + "\\TestData\\"+RequestName+".xls";
				log.info " ";
				log.info "		>>>>		Referrring TestDataFile  :"+TestDataFile;



 TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();


	def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {


		if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					log.info "------======---- "+TestDataValues1.getCell(0,iCountTestCase).getContents();
					continue;
				}

flagCount=9;

List<String> xmlTagToSetBlank = new ArrayList<String>();

	 //int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+SetNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/





	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }



//def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);



//Fetching the request
	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

	
	//Run Request again to eliminate null object error
	 testRunner.runTestStepByName(APIName);
	// def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	 holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);




	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }

/*
int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	holder1.updateProperty();
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
*/

for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}

holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	 
rawReq=holder1.getXml();

	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/















				//******************************
				//Start condition for References
				//******************************
				if(!(SenarioSheet1.getCell(5,iCounter1).getContents()==""))
				{
				if(SenarioSheet1.getCell(5,iCounter1).getContents().contains("="))
				{
				///////log.info "				>>>> This scenario step has References";
				log.info "				>>>>: The Scenario in sheet : "+sheetName+" and Step No " +(iCounter1-3)+" has References";
				//**************************************
				//Fetching the Reference text from sheet
				//**************************************
				getReferenceArray = SenarioSheet1.getCell(5,iCounter1).getContents();
				log.info "				>>>> getReferenceArray: "+getReferenceArray;
				String[] getReferenceValues = getReferenceArray.split("\\,");
				int NoOfReferences = getReferenceValues.size();
				//*********************************************************
				//Starting a loop for Setting all References in the Request
				//*********************************************************
				for(iCountRef=0;iCountRef<NoOfReferences;iCountRef++)
				{
				String RefText = getReferenceValues[iCountRef].trim();
				log.info "				>>>> RefText+"+(iCountRef+1)+" = "+getReferenceValues[iCountRef];


				int RefTextSize = RefText.size();
				int RefTextLength1 =  RefText.lastIndexOf('=');
				int RefTextLength3 =  RefText.lastIndexOf('.');
				//**********************
				//get the parameter name
				//********************** 
				paramName = RefText.substring(0,RefTextLength1);
				log.info "				>>> paramName="+paramName;

				//************************
				//get the step no to refer
				//************************
				String stepToRefer =  RefText.substring(RefTextLength1+1,RefTextLength3);
				log.info "				>>> stepToRefer="+stepToRefer;

				//**********************************************
				//get the parameter value to fetch from response
				//**********************************************
				String paramValueToFetch =  RefText.substring(RefTextLength3+1,RefTextSize);
				log.info "				>>> paramValueToFetch="+paramValueToFetch;

				mapToRefer = Integer.parseInt(stepToRefer);
				log.info "				>>>> map "+stepToRefer+" = "+globalMap.get(mapToRefer);
				//ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch1).get(paramValueToFetch2);
				ReferringValue = (globalMap.get(mapToRefer)).get(paramValueToFetch);
				log.info "				*********  ReferringValue = "+ReferringValue


				
				//log.info "	REQUEST holder1 9901 : "+holder1;
				log.info "	REQUEST holder1.getXml() 9901 : "+holder1.getXml();
				
				def groovyUtilsForUpdatingReferences = new com.eviware.soapui.support.GroovyUtils( context ) 
				// get XmlHolder for request message def
				
				//String req2Name=APIName+"#Request";
				def holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
				//holderForRef = groovyUtilsForUpdatingReferences.getXmlHolder(req2Name);
				// change parameter value using XPath
			//	log.info "		++++++  holderForRef  : "+holderForRef;
				log.info "		++++++  holderForRef.getXml() : "+holderForRef.getXml();
				paramNameToSet = "//"+paramName;
				//paramNameToSet = paramName;
				log.info "		>>>> ++ Parameter to set : "+paramNameToSet;
				holderForRef[paramNameToSet] = ReferringValue;
				//holder1[paramNameToSet] = ReferringValue;
				// write updated request back to teststep
				holderForRef.updateProperty();
				//holder1.updateProperty();
				context.requestContent = holderForRef.xml;
				//context.requestContent = holder1.xml;
				log.info "	REQUEST AFTER SETTING REF 1 = :"+context.requestContent;
				requestAfterRef=holderForRef.getXml();
				log.info "	REQUEST AFTER SETTING REF 1 = :"+requestAfterRef;
				
				log.info "		++++++  holderForRef.getXml() 2: "+holderForRef.getXml();
				log.info "		++++++ REQUEST holder1.getXml() 2 9901 : "+holder1.getXml();
				rawReq=holderForRef.getXml();
				
				testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq);
	
				}
				}
				}




























	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";


			//Fetch the time taken to run the request
			String requestTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		====TIME TAKEN - "+requestTimeTaken;
			
			Label timeTakenByReq = new Label(8, iCounter1, requestTimeTaken, normalFormat3);
			sheet.addCell(timeTakenByReq);


def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq2);
	  		sheet.addCell(labelRawRequest);
	  		
	 	}
	 	else{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}






	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCounter1,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(7,iCounter1,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	//Label labelRequest = new Label(6,iCounter1,rawReq);
	//   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(7,iCounter1,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 




 
	  
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);




		//condition to put response values in map
		if(!((xpath2=="")&&(ActualResponseValue=="")))
		{
			String responseParam=TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
			String responseValue=ActualResponseValue;
			mapName.put(responseParam,responseValue);
			log.info "		>>>>  +++++++ NOW MAPNAME LOOKS LIKE : "+mapName;
		}
		else{
			log.info "		>>>>	+++++++ NOT PUTTING VALUE FOR " +xpath2+ " INTO MAP BECAUSE VALUE FETCHED IS : "+ActualResponseValue;
		}




		

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCounter1, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCounter1,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }

	    log.info "		>>>>		++++++++++++++ map to put in Global map now looks like : "+mapName;
		
	}
	globalMap.put(mapNo,mapName);
	log.info "		>>>>		+++++++++++++++++++++++++  Global Map looks like this NOW : "+globalMap; 
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(iCounterForResponseValues=1;iCounterForResponseValues<ResponseColCount;iCounterForResponseValues++)
	{

	  if(!(TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounterForResponseValues;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounterForResponseValues).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCounter1, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(9+iDivisionCount))
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			*/
			
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			*/
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;



 	
 }/********END Iterating loop for No of Test Cases in Test Data Sheet *********/
		


			
			}
			//******************************************************
			//END loop for number of steps in the scenario
			//******************************************************
			


			



		
		}//*******************************************************
		//END loop for number of scenarios in the scenario file
		//*******************************************************


workbook.write();
workbook.close();
log.info "	>>>>		------------- WORKBOOK UPDATED AND CLOSED -------------- ";




log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver-July10" id="00f59fc2-68c9-4118-987e-913e3a363ddf" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "****************************************************************************************************************************************";
log.info "***************************STARTING AUTOMATION DRIVER FOR SCENARIO TESTING***********************************";
log.info "=============================================================================================================";
log.info " ";
log.info " ";

//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet requestSchemaSheet1;
Sheet requestValuesSheet1;
Sheet responseSchemaSheet1;
Sheet responseValuesSheet1;

String APIName="";
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//***************************************************
//Variable to store TCID for the Test Case to execute
//***************************************************
String TestCaseID 
//******************************************************
//Array to separate and store cell contents based on '|'
//******************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//***********************************************************
//Counter for looping through number of steps in the scenario
//***********************************************************
int iCounter1;




/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String SetNo = context.expand('${#Project#SetNo}');
//def TestDataFile = context.expand( '${#Project#TestDataFile}');
//String APIName = context.expand( '${#Project#APIName}');
String TestScenarioFile=context.expand('${#Project#ScenarioFileLocation}');

log.info "=====================ScenarioFileLocation : "+TestScenarioFile
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";


	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	int noOfScenarioSheets = getSenarioSheets.size();
	log.info "		>>>>		Number of Sheets in this Test Scenario File are : "+noOfScenarioSheets;










log.info "		>>>>		==============================="
int Length =  TestScenarioFile.lastIndexOf('\\');
int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
String excelName = TestScenarioFile.substring(Length+1,Length2);
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
//log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResultFileLocation = TestScenarioFile.substring(0,Length);
log.info "	===	ResultFileLocation : "+ResultFileLocation;
log.info "	===	excelName : "+excelName;
//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResultFile =  ResultFileLocation + "\\Results\\"+excelName+"-RESULT-" +currentTime+".xls";
		
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResultFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
workbook = Workbook.createWorkbook(new File(TestResultFile));







		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(int sheetCount=1;sheetCount<noOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();
		log.info " ";	
		log.info "		>>>>		Reading Sheet : "+sheetName;

		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info " ";
			log.info "=========================================================================";
			log.info "		>>>>		Scenario in sheet "+sheetName+" NOT set for execution";
			log.info "=========================================================================";
			log.info " ";
			continue;
		}

		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);

		
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "REQUEST"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);

					Label timeTakenLabel = new Label(8, 3, "TimeTaken[ms]"); 
					sheet.addCell(timeTakenLabel);

		//****************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();


		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];



			//******************************************************
			//Starting loop for number of steps in the scenario
			//******************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont3 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat3 = new WritableCellFormat(normalFont3);
			normalFormat3.setBackground(jxl.format.Colour.YELLOW);


			iCountFlag=0;
			//log.info "		>>>>		: Reading Row No :"+(iCounter1+1);
			log.info " ";
			log.info "=================================================================================================================================================================================================================";
			log.info "		>>>>		********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents()+"-"+SenarioSheet1.getCell(4,iCounter1).getContents();
			
			//************************************************
			//condition to check if the scenario step is empty
			//************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}


			//Adding Description and ExpectedResult to result file
			Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
			sheet.addCell(stepNoValue);

			Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
			sheet.addCell(descriptionValue);

			Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
			sheet.addCell(expectedValue);

			Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
			sheet.addCell(referencesValue);



			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;
			HashMap mapName= [:];
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	APIName=RequestName;
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents().toString();
		 	log.info " ";
		 	log.info " ";
		 	log.info "		>>>>		"+RequestName+" | "+TestCaseID;
			


				//Getting the location of TestData file for the API Request
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				//String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				//Test Data files for the API Request must be available in a folder named 'TestDataFiles' in the same location where scenario file is placed.
				String TestDataFile = TestDataFileLocation + "\\TestData\\"+RequestName+".xls";
				log.info " ";
				log.info "		>>>>		Referrring TestDataFile  :"+TestDataFile;



 TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();


	def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {


		if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					log.info "------======---- "+TestDataValues1.getCell(0,iCountTestCase).getContents();
					continue;
				}

flagCount=9;

List<String> xmlTagToSetBlank = new ArrayList<String>();

	 //int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+SetNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/





	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }



//def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);



//Fetching the request
	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
	// def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 testRunner.runTestStepByName(APIName);
	 //def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);

	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }



for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}

holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	 
rawReq=holder1.getXml();

	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/


	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";


			//Fetch the time taken to run the request
			String requestTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		====TIME TAKEN - "+requestTimeTaken;
			
			Label timeTakenByReq = new Label(8, iCounter1, requestTimeTaken, normalFormat3);
			sheet.addCell(timeTakenByReq);


def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq2);
	  		sheet.addCell(labelRawRequest);
	  		
	 	}
	 	else{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}






	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCounter1,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(7,iCounter1,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	//Label labelRequest = new Label(6,iCounter1,rawReq);
	//   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(7,iCounter1,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 




 
	  
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCounter1, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCounter1,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(iCounterForResponseValues=1;iCounterForResponseValues<ResponseColCount;iCounterForResponseValues++)
	{

	  if(!(TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounterForResponseValues,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounterForResponseValues;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounterForResponseValues).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCounter1, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(9+iDivisionCount))
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			*/
			
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			*/
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;



 	
 }/********END Iterating loop for No of Test Cases in Test Data Sheet *********/
		


			
			}
			//******************************************************
			//END loop for number of steps in the scenario
			//******************************************************
			


			



		
		}//*******************************************************
		//END loop for number of scenarios in the scenario file
		//*******************************************************


workbook.write();
workbook.close();
log.info "	>>>>		------------- WORKBOOK UPDATED AND CLOSED -------------- ";




log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver-July9" id="39dbd4e0-a8d4-407b-bd2f-0fef14879517" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "****************************************************************************************************************************************";
log.info "***************************STARTING AUTOMATION DRIVER FOR SCENARIO TESTING***********************************";
log.info "=============================================================================================================";
log.info " ";
log.info " ";

//*******************
//Declaring Variables
//*******************
int iCountFlag=0;
//***********************************
//Variables for reading scenario file
//***********************************
Workbook TestScenarioWB;
Sheet SenarioSheet1;
//************************************************************
//Variables for reading test data files of individual reqeusts
//************************************************************
Workbook TestDataWB;
Sheet requestSchemaSheet1;
Sheet requestValuesSheet1;
Sheet responseSchemaSheet1;
Sheet responseValuesSheet1;

String APIName="";
//*************************************
//Declaring variable to display message
//*************************************
def alert = com.eviware.soapui.support.UISupport;
//**********************************************************
//Declaring a variable that will keep track of assertions.
//Using this count it can be acertained if assertions failed.
//**********************************************************
int flagCount;
//*********************************************
//Declaring variables for creating result excel
//*********************************************
WritableWorkbook workbook;
WritableSheet sheet;
//*****************************************************
//Variables to count rows and columns in scenario sheet
//*****************************************************
int ScenarioRowCount;
int ScenarioColCount;
//*******************************
//Variable to store cell contents
//*******************************
String cellContents;
//***************************************************
//Variable to store TCID for the Test Case to execute
//***************************************************
String TestCaseID 
//******************************************************
//Array to separate and store cell contents based on '|'
//******************************************************
String[] splitCellContents;
//*************************************************************************************************
//creating a global HashMaps where all maps (having response for individual reqeust) will be stored
//*************************************************************************************************
HashMap globalMap;
//**********************************************
//integer to append mapNo to mapName dynamically
//**********************************************
int mapNo;
//***********************************************************
//Counter for looping through number of steps in the scenario
//***********************************************************
int iCounter1;




/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String SetNo = context.expand('${#Project#SetNo}');
//def TestDataFile = context.expand( '${#Project#TestDataFile}');
//String APIName = context.expand( '${#Project#APIName}');
String TestScenarioFile=context.expand('${#Project#ScenarioFileLocation}');

log.info "=====================ScenarioFileLocation : "+TestScenarioFile
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";


	//********************************
	//Get the Test Scenario Excel File
	//********************************
	TestScenarioWB = Workbook.getWorkbook(new File(TestScenarioFile));
	//*************************************
	//Get No of sheets in the scenario file
	//*************************************
	getSenarioSheets = TestScenarioWB.getSheets();
	int noOfScenarioSheets = getSenarioSheets.size();
	log.info "		>>>>		Number of Sheets in this Test Scenario File are : "+noOfScenarioSheets;










log.info "		>>>>		==============================="
int Length =  TestScenarioFile.lastIndexOf('\\');
int Length2 = TestScenarioFile.lastIndexOf( '.xls' );
String excelName = TestScenarioFile.substring(Length+1,Length2);
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
//log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResultFileLocation = TestScenarioFile.substring(0,Length);
log.info "	===	ResultFileLocation : "+ResultFileLocation;
log.info "	===	excelName : "+excelName;
//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResultFile =  ResultFileLocation + "\\Results\\"+excelName+"-RESULT-" +currentTime+".xls";
		
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResultFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
workbook = Workbook.createWorkbook(new File(TestResultFile));







		//*******************************************************
		//start loop for number of scenarios in the scenario file
		//*******************************************************
		//creating a label for scenario loop
		ScenarioCountLoop:  
		for(int sheetCount=1;sheetCount<noOfScenarioSheets;sheetCount++)
		{
		SenarioSheet1 = TestScenarioWB.getSheet(sheetCount);
		sheetName = TestScenarioWB.getSheet(sheetCount).getName();
		log.info " ";	
		log.info "		>>>>		Reading Sheet : "+sheetName;

		if(!(SenarioSheet1.getCell(1,2).getContents()==SetNo))
		{
			log.info " ";
			log.info "=========================================================================";
			log.info "		>>>>		Scenario in sheet "+sheetName+" NOT set for execution";
			log.info "=========================================================================";
			log.info " ";
			continue;
		}

		//*******************************************************************
		//creating a sheet in the response excel to capture scenario response
		//*******************************************************************
		sheet = workbook.createSheet(sheetName,sheetCount);

		
					//********************************
					//Adding labels in the result file
					//********************************					
					Label scenarioNoText = new Label(0, 0, SenarioSheet1.getCell(0, 0).getContents());
					sheet.addCell(scenarioNoText);
					Label scenarioNoValue = new Label(1, 0, SenarioSheet1.getCell(1, 0).getContents()); 
					sheet.addCell(scenarioNoValue);
					Label scenarioDescriptionText = new Label(0, 1, SenarioSheet1.getCell(0, 1).getContents()); 
					sheet.addCell(scenarioDescriptionText);
					Label scenarioDescriptionValue = new Label(1, 1, SenarioSheet1.getCell(1, 1).getContents()); 
					sheet.addCell(scenarioDescriptionValue);
					Label setNoText = new Label(0, 2, SenarioSheet1.getCell(0, 2).getContents()); 
					sheet.addCell(setNoText);
					Label setNoValue = new Label(1, 2, SenarioSheet1.getCell(1, 2).getContents()); 
					sheet.addCell(setNoValue);

					Label stepNoLabel = new Label(0, 3, SenarioSheet1.getCell(0, 3).getContents()); 
					sheet.addCell(stepNoLabel);

					Label descriptionLabel = new Label(1, 3, SenarioSheet1.getCell(1, 3).getContents()); 
					sheet.addCell(descriptionLabel);

					Label expectedLabel = new Label(2, 3, SenarioSheet1.getCell(2, 3).getContents()); 
					sheet.addCell(expectedLabel);

					Label apiNameLabel = new Label(3, 3, SenarioSheet1.getCell(3, 3).getContents()); 
					sheet.addCell(apiNameLabel);

					Label tcidLabel = new Label(4, 3, SenarioSheet1.getCell(4, 3).getContents()); 
					sheet.addCell(tcidLabel);

					Label referencesLabel = new Label(5, 3, SenarioSheet1.getCell(5, 3).getContents()); 
					sheet.addCell(referencesLabel);

					Label curlLabel = new Label(6, 3, "REQUEST"); 
					sheet.addCell(curlLabel);

					Label responseLabel = new Label(7, 3, "RESPONSE"); 
					sheet.addCell(responseLabel);

					Label timeTakenLabel = new Label(8, 3, "TimeTaken[ms]"); 
					sheet.addCell(timeTakenLabel);

		//****************************************
		//Count Rows and Columns in Scenario sheet
		//****************************************
		ScenarioRowCount = SenarioSheet1.getRows();
		ScenarioColCount = SenarioSheet1.getColumns();


		//***************************
		//Emptying the Global hashmap
		//**************************
		globalMap = [:];



			//******************************************************
			//Starting loop for number of steps in the scenario
			//******************************************************
			//creating a label for this loop
			stepCountLoop:	
			for(iCounter1=4;iCounter1<ScenarioRowCount;iCounter1++)
			{
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
			normalFormat2.setBackground(jxl.format.Colour.RED);
			//*******************************************************
			//Creating Writable font to be used in the response sheet
			//*******************************************************
			WritableFont normalFont3 = new WritableFont(WritableFont.ARIAL);
			//**************************************************
			//creating plain format to write data in excel sheet
			//**************************************************
		     WritableCellFormat normalFormat3 = new WritableCellFormat(normalFont3);
			normalFormat3.setBackground(jxl.format.Colour.YELLOW);


			iCountFlag=0;
			//log.info "		>>>>		: Reading Row No :"+(iCounter1+1);
			log.info " ";
			log.info "=================================================================================================================================================================================================================";
			log.info "		>>>>		********************************************************************************************** Starting Step "+(iCounter1-3)+":"+SenarioSheet1.getCell(3,iCounter1).getContents()+"-"+SenarioSheet1.getCell(4,iCounter1).getContents();
			
			//************************************************
			//condition to check if the scenario step is empty
			//************************************************
			if((SenarioSheet1.getCell(3,iCounter1).getContents()==""))
			{
			 	log.info "		>>>>		For Scenario "+sheetName+" Step No " +(iCounter1-3)+" is EMPTY";
			 	continue;
			}


			//Adding Description and ExpectedResult to result file
			Label stepNoValue = new Label(0, iCounter1, SenarioSheet1.getCell(0, iCounter1).getContents()); 
			sheet.addCell(stepNoValue);

			Label descriptionValue = new Label(1, iCounter1, SenarioSheet1.getCell(1, iCounter1).getContents()); 
			sheet.addCell(descriptionValue);

			Label expectedValue = new Label(2, iCounter1, SenarioSheet1.getCell(2, iCounter1).getContents()); 
			sheet.addCell(expectedValue);

			Label referencesValue = new Label(5, iCounter1, SenarioSheet1.getCell(5, iCounter1).getContents()); 
			sheet.addCell(referencesValue);



			//************************************************
			//creating a map to store the response of the Step
			//************************************************
			iCountFlag = iCounter1-3;
			mapNo = iCountFlag;
			HashMap mapName= [:];
		 	RequestName = SenarioSheet1.getCell(3,iCounter1).getContents();
		 	APIName=RequestName;
		 	TestCaseID = SenarioSheet1.getCell(4,iCounter1).getContents().toString();
		 	log.info " ";
		 	log.info " ";
		 	log.info "		>>>>		"+RequestName+" | "+TestCaseID;
			


				//Getting the location of TestData file for the API Request
				int LengthOfDir =  TestScenarioFile.lastIndexOf( '\\' );
				String TestDataFileLocation = TestScenarioFile.substring(0,LengthOfDir);
				//String TestDataFile = TestDataFileLocation + "\\"+RequestName+".xls";
				//Test Data files for the API Request must be available in a folder named 'TestDataFiles' in the same location where scenario file is placed.
				String TestDataFile = TestDataFileLocation + "\\TestData\\"+RequestName+".xls";
				log.info " ";
				log.info "		>>>>		Referrring TestDataFile  :"+TestDataFile;



 TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();


	def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {


		if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
				{
					log.info "------======---- "+TestDataValues1.getCell(0,iCountTestCase).getContents();
					continue;
				}

flagCount=9;

List<String> xmlTagToSetBlank = new ArrayList<String>();

	 //int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(0,iCountTestCase).getContents()==TestCaseID))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+SetNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/





	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }



//def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);



//Fetching the request
	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
	// def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 //testRunner.runTestStepByName(APIName);
	 //def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);

	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }



for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}

holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	 
rawReq=holder1.getXml();

	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/


	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";


			//Fetch the time taken to run the request
			String requestTimeTaken=testRunner.testCase.testSteps[APIName].testRequest.response.timeTaken;
			log.info "		>>>>		====TIME TAKEN - "+requestTimeTaken;
			
			Label timeTakenByReq = new Label(8, iCounter1, requestTimeTaken, normalFormat3);
			sheet.addCell(timeTakenByReq);


def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq2);
	  		sheet.addCell(labelRawRequest);
	  		
	 	}
	 	else{
	 		Label labelRawRequest = new Label(6,iCounter1,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}






	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCounter1,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(7,iCounter1,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	//Label labelRequest = new Label(6,iCounter1,rawReq);
	//   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(7,iCounter1,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 




 
	  
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCounter1, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCounter1,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounter1;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCounter1, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(9+iDivisionCount))
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			*/
			
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			/*
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			*/
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(4, iCounter1, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;



 	
 }/********END Iterating loop for No of Test Cases in Test Data Sheet *********/
		


			
			}
			//******************************************************
			//END loop for number of steps in the scenario
			//******************************************************
			


			



		
		}//*******************************************************
		//END loop for number of scenarios in the scenario file
		//*******************************************************

workbook.write();
workbook.close();






//////////////////////////////////// .. LATEST ..  /////////////////////////////////////////////



	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";

def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq2);
	  		sheet.addCell(labelRawRequest);
	 	}
	 	else{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}
	
	 // Label lableResponse = new Label(2,iCountTestCase,response);
	 // sheet.addCell(lableResponse);









/////////////////////// ... LATEST ... ///////////////////////////////////




	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCountTestCase,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(2,iCountTestCase,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	Label labelRequest = new Label(1,iCountTestCase,rawReq);
	   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(2,iCountTestCase,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 















///////////////////////////////////.... LATEST ....//////////////////////////////////////////////////////////





	
	  
	  
	  
	  
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounter1;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(3+iDivisionCount))
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;











/////////////////////////////////..... LATEST ..... ////////////////////////////////////////////






//}
//for loop end for test case
workbook.write();
workbook.close();

log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationScript-June16" id="368b3277-4d14-40f3-ba8f-bdd83bfce127" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

log.info "*************************************************  STARTING CORE AUTOMATION DRIVER *************************************************";
/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}');
def TestDataFile = context.expand( '${#Project#TestDataFile}');
String APIName = context.expand( '${#Project#APIName}');
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";
log.info "		>>>>		==============================="
int Length =  TestDataFile.lastIndexOf('\\');
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResposeFileLocation = TestDataFile.substring(0,Length);

//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls";
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResponseFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
WritableSheet sheet = workbook.createSheet("Response",0);

Label label00 = new Label(0, 0, "TCID"); 
sheet.addCell(label00);

Label label01 = new Label(1, 0, "REQUEST"); 
sheet.addCell(label01);
  
Label label02 = new Label(2, 0, "RESPONSE"); 
sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();
 //log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {
//Variable to store the xPath of nodes to set to blank
List<String> xmlTagToSetBlank = new ArrayList<String>();

	 int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+setNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/

	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }



for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}

holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	 
rawReq=holder1.getXml();

	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/


	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";

def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq2);
	  		sheet.addCell(labelRawRequest);
	 	}
	 	else{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}
	
	 // Label lableResponse = new Label(2,iCountTestCase,response);
	 // sheet.addCell(lableResponse);


	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCountTestCase,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(2,iCountTestCase,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	Label labelRequest = new Label(1,iCountTestCase,rawReq);
	   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(2,iCountTestCase,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 
	  
	  
	  
	  
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounter1;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(3+iDivisionCount))
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;
}
//for loop end for test case
workbook.write();
workbook.close();

log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="request" name="createClient" id="fdae6725-792b-4ebe-b87d-6810c7b2deb0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createClient</con:operation><con:request name="createClient" id="0ad8962a-97ec-41cd-9e90-0bdcbbdd189f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createClient>
         <createClientRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <!--Optional:-->
            <referenceId>${#TestCase#referenceId}</referenceId>
            <!--Optional:-->
            <firstName>${#TestCase#firstName}</firstName>
            <!--Optional:-->
            <lastName>${#TestCase#lastName}</lastName>
            <middleInitial>${#TestCase#middleInitial}</middleInitial>
            <!--Optional:-->
            <!--Optional:-->
            <ssn>${#TestCase#ssn}</ssn>
            <!--Optional:-->
            <dob>${#TestCase#dob}</dob>
            <!--Optional:-->
            <address>
               <!--Optional:-->
               <line1>${#TestCase#address.line1}</line1>
               <!--Optional:-->
               <line2>${#TestCase#address.line2}</line2>
               <!--Optional:-->
               <city>${#TestCase#address.city}</city>
               <!--Optional:-->
               <state>${#TestCase#address.state}</state>
               <!--Optional:-->
               <zipcode>${#TestCase#address.zipcode}</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>${#TestCase#homePhone}</homePhone>
            <!--Optional:-->
            <mobilePhone>${#TestCase#mobilePhone}</mobilePhone>
            <!--Optional:-->
            <workPhone>${#TestCase#workPhone}</workPhone>
            <!--Optional:-->
            <email>${#TestCase#email}</email>
            <!--Optional:-->
            <username>${#TestCase#username}</username>
            <!--Optional:-->
            <merchantId>${#TestCase#merchantId}</merchantId>
         </createClientRequest>
      </sch:createClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="schema.bancbox.com/BBX/createClient" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClient" id="55fcc022-ef0d-42f2-b48b-9e6f707cb335"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getClient</con:operation><con:request name="getClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="5bfa4bf3-e1f5-4c00-a8a6-4d59f4a8d215"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getClient>
         <getClientRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
         </getClientRequest>
      </sch:getClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="7b1ae013-5d31-4ac6-b701-8a93091c32e9"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="openAccount" id="c182fd86-7f60-4fb7-b220-d719aa032c2a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>openAccount</con:operation><con:request name="openAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="17e6ab0c-e0ca-496d-941f-cf7a0aa6583a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:openAccount>
         <openAccountRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>${#TestCase#ReferenceId}</referenceId>
            <!--Optional:-->
            <title>${#TestCase#title}</title>
            <!--Optional:-->
            <accountType>${#TestCase#accountType}</accountType>
            <!--Optional:-->
            <routable>
               <!--Optional:-->
               <credits>${#TestCase#routable.credits}</credits>
               <!--Optional:-->
               <debits>${#TestCase#routable.debits}</debits>
            </routable>
            <!--Optional:-->
            <subscriberAccountNumber>${#TestCase#subscriberAccountNumber}</subscriberAccountNumber>
         </openAccountRequest>
      </sch:openAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="56b5adcf-e331-45e1-a07b-3cdac76e1872"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/openAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createMerchant" id="fe99af80-502f-44c1-a450-5352cb8e9318"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createMerchant</con:operation><con:request name="createMerchant" id="2767055d-c45c-4367-91d2-fc92cb02fa33"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <firstName>${#TestCase#firstName}</firstName>
            <lastName>${#TestCase#lastName}</lastName>
            <ssn>${#TestCase#ssn}</ssn>
            <dob>${#TestCase#dob}</dob>
            <!--Optional:-->
            <email>${#TestCase#email}</email>
            <address>
               <address1>${#TestCase#address.address1}</address1>
               <!--Optional:-->
               <city>${#TestCase#address.city}</city>
               <state>${#TestCase#address.state}</state>
               <zipcode>${#TestCase#address.zipcode}</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber>${#TestCase#bankBusinessAccount.routingNumber}</routingNumber>
               <accountNumber>${#TestCase#bankBusinessAccount.accountNumber}</accountNumber>
               <holderName>${#TestCase#bankBusinessAccount.holderName}</holderName>
               <bankAccountType>${#TestCase#bankBusinessAccount.bankAccountType}</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>${#TestCase#merchantDetails.merchantCategoryCode}</merchantCategoryCode>
               <maxTransactionAmount>${#TestCase#merchantDetails.maxTransactionAmount}</maxTransactionAmount>
               <customerServiceNumber>${#TestCase#merchantDetails.customerServiceNumber}</customerServiceNumber>
               <!--Optional:-->
               <!--Optional:-->
               <softDescriptor>${#TestCase#merchantDetails.softDescriptor}</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>${#TestCase#primaryContact.firstName}</firstName>
               <lastName>${#TestCase#primaryContact.lastName}</lastName>
               <phone>${#TestCase#primaryContact.phone}</phone>
               <emailAddress>${#TestCase#primaryContact.emailAddress}</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>${#TestCase#hasAcceptedCreditCards}</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>${#TestCase#visaAnnualSalesVolume}</visaAnnualSalesVolume>
            <organizationType>${#TestCase#organizationType}</organizationType>
            <!--Optional:-->
            <taxId>${#TestCase#taxId}</taxId>
            <!--Optional:-->
         </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="8fb9415a-a72f-4ab1-b97b-d53551038b31"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="verifyClient" id="19e8530f-41ce-43f7-8b79-e0c046b5aec5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>verifyClient</con:operation><con:request name="verifyClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="fc7c9480-6997-41c7-91b3-45c6a5c165c1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:verifyClient>
         <verifyClient>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <!--Optional:-->
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <generateQuestions>${#TestCase#generateQuestions}</generateQuestions>
         </verifyClient>
      </sch:verifyClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="116c881b-2322-4f6a-90b6-4fd0a65b7890"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/verifyClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="collectFunds" id="6f04b781-420d-455b-a039-b23990dce631"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>collectFunds</con:operation><con:request name="collectFunds" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b8319ee8-3ecc-4749-a2e0-cacf5f79be47"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@inline-response-attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <!--Optional:-->
            <!--Optional:-->
            <method>
               <!--You have a CHOICE of the next 3 items at this level-->
               <ach/>
               <book/>
               <creditcard/>
            </method>
            <source>
               <!--You have a CHOICE of the next 3 items at this level-->
               <linkedExternalAccountId>
                  <!--Optional:-->
                  <bancBoxId>${#TestCase#source.linkedExternalAccountId.bancBoxId}</bancBoxId>
                  <!--Optional:-->
               </linkedExternalAccountId>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account>
                  <!--Optional:-->
                  <bancBoxId>${#TestCase#destinationAccount.account.bancBoxId}</bancBoxId>
                  <!--Optional:-->
               </account>
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <amount>${#TestCase#items.amount}</amount>
               <!--Optional:-->
               <memo>${#TestCase#items.memo}</memo>
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="652896c7-f5f2-49ff-91d8-560e39603127"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFunds"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="cancelClient" id="ec0f60a7-f333-4b4d-af92-da0be848b797"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>cancelClient</con:operation><con:request name="cancelClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="465b24ed-ad7d-47a9-9b19-fc6587b0c38d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:cancelClient>
         <cancelClientRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <comment>${#TestCase#comment}</comment>
         </cancelClientRequest>
      </sch:cancelClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="47d150ec-8a84-4aae-b2ba-a1ae719fb183"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/cancelClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="closeAccount" id="42e9027e-1601-4aa5-bdcc-8351c1e62835"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>closeAccount</con:operation><con:request name="closeAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="bb72daa3-eb77-4409-a223-354d6b51c8f1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:closeAccount>
         <closeAccountRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <accountId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#accountId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#accountId.subscriberReferenceId}</subscriberReferenceId>
            </accountId>
            <!--Optional:-->
            <withdrawalMethod>${#TestCase#withdrawalMethod}</withdrawalMethod>
            <!--Optional:-->
            <checkMethodType>${#TestCase#checkMethodType}</checkMethodType>
            <!--Optional:-->
            <withdrawalAccount>
               
               
               <checkAddress>
                  <name>${#TestCase#withdrawalAccount.checkAddress.name}</name>
                  <address>
                     <line1>${#TestCase#withdrawalAccount.checkAddress.address.line1}</line1>
                     <line2>${#TestCase#withdrawalAccount.checkAddress.address.line2}</line2>
                     <city>${#TestCase#withdrawalAccount.checkAddress.address.city}</city>
                     <state>${#TestCase#withdrawalAccount.checkAddress.address.state}</state>
                     <zipcode>${#TestCase#withdrawalAccount.checkAddress.address.zipcode}</zipcode>
                  </address>
               </checkAddress>
            </withdrawalAccount>
         </closeAccountRequest>
      </sch:closeAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="f0a0b40a-cd28-427c-a30e-28dfc69a3fad"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/closeAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="collectFees" id="f936f7c8-312e-45c0-b2e9-df4f791634ca"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>collectFees</con:operation><con:request name="collectFees" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="7e494b50-8d15-4963-8564-42025d317038"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:collectFees>
         <collectFeesRequest>
       <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <account>
               <!--Optional:-->
               <bancBoxId>${#TestCase#bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#subscriberReferenceId}</subscriberReferenceId>
            </account>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <referenceId>${#TestCase#referenceId}</referenceId>
               <amount>${#TestCase#amount}</amount>
               <!--Optional:-->
               <memo>${#TestCase#memo}</memo>
               <!--Optional:-->
               <scheduled>
                  <scheduleDate>${#TestCase#scheduleDate}</scheduleDate>
               </scheduled>
            </items>
         </collectFeesRequest>
      </sch:collectFees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="1ac72929-9f3d-4ba5-937d-2ca91c7fdd32"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFees"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateClient" id="b1c6c390-178f-46b6-ae79-4bc606ae63b7"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateClient</con:operation><con:request name="updateClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b4863f80-6047-453a-8944-5c8d6229a346"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateClient>
         <updateClientRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <merchantId>${#TestCase#merchantId}</merchantId>
            <!--Optional:-->
            <firstName>${#TestCase#firstName}</firstName>
            <!--Optional:-->
            <lastName>${#TestCase#lastName}</lastName>
            <!--Optional:-->
            <middleInitial>${#TestCase#middleInitial}</middleInitial>
            <!--Optional:-->
            <ssn>${#TestCase#ssn}</ssn>
            <!--Optional:-->
            <dob>${#TestCase#dob}</dob>
            <!--Optional:-->
            <address>
               <line1>${#TestCase#address.line1}</line1>
               <!--Optional:-->
               <line2>${#TestCase#address.line2}</line2>
               <city>${#TestCase#address.city}</city>
               <state>${#TestCase#address.state}</state>
               <zipcode>${#TestCase#address.zipcode}</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>${#TestCase#homePhone}</homePhone>
            <!--Optional:-->
            <mobilePhone>${#TestCase#mobilePhone}</mobilePhone>
            <!--Optional:-->
            <workPhone>${#TestCase#workPhone}</workPhone>
            <!--Optional:-->
            <email>${#TestCase#email}</email>
            <!--Optional:-->
            <username>${#TestCase#username}</username>
            <!--Optional:-->
         </updateClientRequest>
      </sch:updateClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="1afa3563-54dd-4fd0-942e-ef3ad71ea4a9"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="cancelSchedules" id="c02030c5-aace-49da-a1f8-b6fc2b3decb5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>cancelSchedules</con:operation><con:request name="cancelSchedules" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="0dc84e86-d9f1-44dd-9dd7-a81364ac556d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:cancelSchedules>
         <cancelSchedulesRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <!--1 or more repetitions:-->
            <scheduleIds>
               <!--Optional:-->
               <bancBoxId>${#TestCase#scheduleIds.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#scheduleIds.subscriberReferenceId}</subscriberReferenceId>
            </scheduleIds>
         </cancelSchedulesRequest>
      </sch:cancelSchedules>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="55ab4395-82e6-4b64-9ac5-894b7608af55"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/cancelSchedules"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="cancelSchedules1" id="5fbed0ab-76f7-4181-8a05-d2bb3513b29c" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>cancelSchedules</con:operation><con:request name="cancelSchedules1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="454e42d4-71d4-4873-944f-aab4560ca214"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:cancelSchedules>
         <cancelSchedulesRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <!--1 or more repetitions:-->
            <scheduleIds>
               <!--Optional:-->
               <bancBoxId>${#TestCase#scheduleIds.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#scheduleIds.subscriberReferenceId}</subscriberReferenceId>
            </scheduleIds>
         </cancelSchedulesRequest>
      </sch:cancelSchedules>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="3b173368-d2d0-45f8-b724-b9ef7caeba83"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/cancelSchedules"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="DataType with Core Automation" disabled="true" id="4f24ec4d-780f-402a-9d0a-b45c947ebeb8"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"
def TestDataFile = context.expand( '${#Project#TestDataFile}' )
String APIName = context.expand( '${#Project#APIName}' )
int Length =  TestDataFile.lastIndexOf( '\\' )
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
 currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
 log.info "   >>>>>>>> : time : "+currentTime
 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label01);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")
Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
  log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesColCount " +ValuesColCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
/*if(PropRowCount!=ValuesColCount)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}
*/


//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 2
 
for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
holder = groovyUtils.getXmlHolder( "${APIName}#Response")
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response;

Label label5 = new Label(1,iCountTestCase,response);
   sheet.addCell(label5);
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
ActualResponseValue=holder.getNodeValue(xpath1);



log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1
//getting xpath

log.info"xpath"+xpath1


//comparing actual response
if(!(ResponseFromTestData.equals(ActualResponseValue)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}  //for outer if

} //for  response columns for loop




for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
ActualResponseValue=holder.getNodeValue(xpath1);
	
	//checking for datatype assertion :


String TYPE= TestDataResponseSchema.getCell(2,iCounter1).getContents()
log.info"type="+ TYPE;

try
{
log.info"TYPE"+TYPE
if(TYPE.equalsIgnoreCase(Integer))
typeError=Integer.valueOf(ActualResponseValue)	
else if(TYPE.equalsIgnoreCase(String))
typeError=String.valueOf(ActualResponseValue)
else if(TYPE.equalsIgnoreCase(Long))
typeError=Long.valueOf(ActualResponseValue)	
else
typeError="Datatype should be either Int,String,Long in Response Schema Excel"
}

catch(all)
{    

	
	typeErrorMsg="Data type mismatch in response"+all;

	Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
   sheet.addCell(label6);
    flagCount = flagCount+1
   
}

//checking DataType done
	
}

}





if(flagCount==2)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}
else
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}

} // end of testcases loop
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()
]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationScript" id="92db91a4-d3d3-4ed9-80d2-44484797c7e9" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

log.info "*************************************************  STARTING CORE AUTOMATION DRIVER *************************************************";
/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/



/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}');
def TestDataFile = context.expand( '${#Project#TestDataFile}');
String APIName = context.expand( '${#Project#APIName}');
String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
log.info "		>>>>		==============================="
int Length =  TestDataFile.lastIndexOf('\\');
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResposeFileLocation = TestDataFile.substring(0,Length);

//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls";
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResponseFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
WritableSheet sheet = workbook.createSheet("Response",0);

Label label00 = new Label(0, 0, "TCID"); 
sheet.addCell(label00);

Label label01 = new Label(1, 0, "REQUEST"); 
sheet.addCell(label01);
  
Label label02 = new Label(2, 0, "RESPONSE"); 
sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();
 //log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {
//Variable to store the xPath of nodes to set to blank
List<String> xmlTagToSetBlank = new ArrayList<String>();

	 int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+setNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/

	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='null')
				{
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
	 for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
		for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
			{
				if(items in holder1.getDomNodes( "//*[normalize-space(.) = 'null'and count(*) = 0]")){

					log.info " Null Node = "+item.nodeName;
				}
				//log.info "  >>  "+holder1.getNodeValues(item.nodeName);
				log.info ">> removing :: "+ item.nodeName;
				log.info ">> removing :: "+ item.removeXobj();
				//holder1.removeDomNodes("//"+item.removeXobj())
				//log.info ">> removing :: "+item.removeXobj();
			}
		}
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }


int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
log.info "		>>>>		ArrayList Cleared";
	 holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	  if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	  //log.info ">>>>    context.requestContent : " +context.requestContent
	 }
	/*****************************************************************************/


	def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);

	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	

	// def inputHolder1 = APIName+"#Request";
	// def groovyUtilOrg1 = new com.eviware.soapui.support.GroovyUtils( context )
	// originalReq1 = groovyUtilOrg1.getXmlHolder(inputHolder1);
	// rawReq = originalReq.getPrettyXml();
	
	def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	rawReq=holder22.getXml();
	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq2);
	  		sheet.addCell(labelRawRequest);
	 	}
	 	else{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}
	
	  Label lableResponse = new Label(2,iCountTestCase,response);
	  sheet.addCell(lableResponse);


     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounter1;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==3)
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	


}

workbook.write();
workbook.close();

log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="RemoveParentNodes" disabled="true" id="89bece24-8bab-4cef-bb94-14f252722069"><con:settings/><con:config><script>log.info" ------Remove empty parent tags";
APIName = "updateMerchant";
def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context )
def holder2 = groovyUtilsx.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent)


for( item in holder2.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
   log.info ">> removing :: "+ item.nodeName; 
 holder2.removeDomNodes("//"+item.nodeName)
}
 log.info" >>>> removed empty parent nodes";
// update request
//holder2.updateProperty()
testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder2.getPrettyXml())
context.requestContent = holder2.xml
 //log.info "    >>>>    stripped request : " +holder2.xml;
rawReq=holder2.xml
 log.info ">>>>    final request : " +rawReq
 log.info ">>>>    context.requestContent : " +context.requestContent
</script></con:config></con:testStep><con:testStep type="groovy" name="RemoveNodes" disabled="true" id="052fbf4a-d99e-4d36-82a5-47fa8e6c0488"><con:settings/><con:config><script>import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils(context);
def holder2 = groovyUtilsx.getXmlHolder( testRunner.testCase.testSteps['updateMerchant'].testRequest.response.requestContent);


//String abc = holder2.toString();
//log.info "    >>>>    holder2 : "+holder2.toString();

// set default value here
def defaultVal = ""
for( item in holder2.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" )){
   log.info "removing :: "+ item.nodeName; 
holder2.removeDomNodes("//"+item.nodeName)
}

log.info" >>>>finished";
// update request
holder2.updateProperty()

context.requestContent = holder2.xml
log.info "    >>>>    stripped request : " +holder2.xml;
rawReq=holder2.xml
log.info ">>>>    final req : " +rawReq
log.info ">>>>    context.requestContent : " +context.requestContent;



log.info"   >>>>>  REQUEST \n"+testRunner.testCase.getTestStepByName("updateMerchant").getProperty("Request").getValue();

def holder2 = groovyUtilsx.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent)
def rawReq = String(testRunner.testCase.testSteps['updateMerchant'].testRequest.response.requestContent</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of DataType without CORE Automation" disabled="true" id="12fa9e56-d2c8-46ce-a60d-01ef7cf9db45"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"
def TestDataFile = context.expand( '${#Project#TestDataFile}' )
String APIName = context.expand( '${#Project#APIName}' )
int Length =  TestDataFile.lastIndexOf( '\\' )
 
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label01);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 2
 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);


	
for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response

Label label5 = new Label(1,iCountTestCase,response);
   sheet.addCell(label5);
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==2)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()
]]></script></con:config></con:testStep><con:testStep type="groovy" name="ClearTCProperties" id="3a672fa1-11f7-4b53-946f-5a6c4f4ca935" disabled="true"><con:settings/><con:config><script>String[] props = new String[testRunner.testCase.getPropertyCount()];
props = testRunner.testCase.getPropertyNames();
log.info ">>     Properties Size : "+props.size();
for (int i=0;i&lt;props.size();i++)
{
 //log.info ">>     "+props[i];
 //testRunner.testCase.setPropertyValue(props[i],"");
testRunner.testCase.removeProperty(props[i]);
}
log.info "	>>>>	 	ALL TC PROPERTIES REMOVED ";	</script></con:config></con:testStep><con:testStep type="groovy" name="InvestAutoDriver" disabled="true" id="82e9db25-aac3-491a-9b07-a1138fdf4671"><con:settings/><con:config><script><![CDATA[import jxl.*
import com.eviware.soapui.*
import java.util.*
//import jxl.write.*
import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import jxl.write.Label;
//import jxl.write.WritableCellFormat;
//import jxl.write.WritableFont;

log.info "				>>>>>>>>>>>>>>>>>> : Starting Test Groovy 1 --"



int flagCount;
int iCountTestCase;
WritableWorkbook workbook;
WritableSheet sheet;
String ResponseParameter;
String ParameterDataType;

Workbook TestDataWB;
Sheet TestDataProp1;
Sheet TestDataValues1;
Sheet TestDataResponseSchema;
Sheet TestDataResponse;

String EnumDataCollection;
String enumType;

	def alert = com.eviware.soapui.support.UISupport;
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);

	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);

int labelCount = 1
	
try{


///log.info ">>>>>>" + testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")


//*************************************************************************//
//Enter Location of Test Data Excel File e.g. E:\\Test Data\\CreateInvestor.xls
//the excel file should be in xls format

//String TestDataFileNames = "C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\openEscrow.xls|C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\getEscrowDetails.xls"
//String TestDataFile = testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")
//String TestDataFile = ${#Project#TestDataFileLocation}
String TestDataFileNames = context.expand('${#Project#TestDataFileLocation}')

//Enter the name of API Request
//The name should be same as the API request name in the project
//String RequestAPINames = "openEscrow|getEscrowDetails"map1:{"request_id":4423542238,"id":626484610108,"bank_name":"Four Oaks Bank & Trust Company","account_number":"540126108022","account_routing_number":"053112505","account_type":"CHECKING","type":"CUSTODIAN"}
//String RequestAPIName = testRunner.testCase.testSuite.project.getPropertyValue("RequestName")
//String RequestAPIName = ${#Project#RequestName}
String RequestAPINames = context.expand('${#Project#RequestName}')

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//


String[] TestDataFileArray = TestDataFileNames.split("\\|");
String[] RequestAPINameArray = RequestAPINames.split("\\|");




//log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFileArray
int sizeOfTestDataFiles = TestDataFileArray.size();
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfTestDataFiles"+sizeOfTestDataFiles

//log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPINameArray
int sizeOfRequestAPI = RequestAPINameArray.size()
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfRequestAPI"+sizeOfRequestAPI


if(sizeOfTestDataFiles!=sizeOfRequestAPI)
{
alert.showInfoMessage("Number of Test Data Files and Request API must be the same","ALERT MESSAGE");
//system.exit();
return;
}

for(iNoOfTestRequests=0;iNoOfTestRequests < sizeOfRequestAPI;iNoOfTestRequests++)
{//************START loop for No of Reqeusts
	

  
String TestDataFile = TestDataFileArray[iNoOfTestRequests]
String RequestAPIName = RequestAPINameArray[iNoOfTestRequests]
log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFile
log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPIName
log.info "				>>>>>>>>>>>>>>>>>> : setNo :"+setNo














 int Length =  TestDataFile.lastIndexOf( '\\' )
 int locationSize = TestDataFile.lastIndexOf( '.xl' );
 String responseFileName = TestDataFile.substring(Length+1,locationSize);
 String ResposeFileLocation = TestDataFile.substring(0,Length)
 	//Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
	 //log.info "				>>>>>>>>>>>>>>>>>> : time :"+currentTime

	//Getting location to create the TestResponseFile
	String TestResponseFile = ResposeFileLocation + "\\"+responseFileName+"-Response-" +currentTime+".xls"
	log.info "				>>>>>>>>>>>>>>>>>> : TestResponseFile :"+TestResponseFile
	//Creating Response Excel File
	workbook = Workbook.createWorkbook(new File(TestResponseFile));
	sheet = workbook.createSheet("Response",0)




	
	//Get the Test Data Excel File
	TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

	//Get the Sheet having Test Data Properties
	TestDataProp1 = TestDataWB.getSheet("Request Schema")

	//Get the Sheet having Test Data Values
	TestDataValues1 = TestDataWB.getSheet("Request Values")


	//Get the Sheet having Test Data Response Properties
	TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
	TestDataResponse = TestDataWB.getSheet("Response Values")




	//Count Rows and Columns in Properties sheet
	PropRowCount = TestDataProp1.getRows()
	PropColCount = TestDataProp1.getColumns()


	//Count Rows and Columns in Response Schema sheet
	ResponseSchemaRowCount = TestDataResponseSchema.getRows()
	ResponseSchemaColCount = TestDataResponseSchema.getColumns()

	//log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
	//log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount

	//Count Rows and Columns in Response sheet
	ResponseRowCount = TestDataResponse.getRows()
	ResponseColCount = TestDataResponse.getColumns()

	//log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
	//log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount









	//Count Rows and Columns in Values sheet
	ValuesRowCount = TestDataValues1.getRows()
	ValuesColCount = TestDataValues1.getColumns()
	//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesRowCount " +ValuesRowCount
	//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesColCount " +ValuesColCount
	//This will display an information message
	//def alert = com.eviware.soapui.support.UISupport;
	//alert.showInfoMessage("Hello World !");
	//alert.showInfoMessage("Hello World !","soapUI Warning !")
	log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
	log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != (ValuesColCount-3))
{
	workbook.write()
	workbook.close()
	
	alert.showInfoMessage("Mismatch in the count of Properties and Values. \n We have introduced a new column Expected Results after Description Column");
	log.info "				>>>>>>>>>>>>>>>>>>>> : Mismatch in the count of Properties and Values \n We have introduced a new column Expected Results after Description Column"
	
	return;
}


//********Iterating loop for No of Test Cases in Test Data Sheet*********//



for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases

//flush();
ResponseParameter = "";
ParameterDataType = "";
EnumDataCollection = "";
enumType="";


	
	if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}
 flagCount = 5;


		Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
		sheet.addCell(label00);

		Label label001 = new Label(1, 0, "Description"); //column=0=A,row=0=1
		sheet.addCell(label001);

		Label label002 = new Label(2, 0, "Expected Result"); //column=0=A,row=0=1
		sheet.addCell(label002);

		Label label003 = new Label(3, 0, "Curl Request"); //column=0=A,row=0=1
		sheet.addCell(label003);
		
		Label label004 = new Label(4, 0, "RESPONSE"); //column=0=A,row=0=1
		sheet.addCell(label004);

		log.info "				>>>>>>>>>>>>>>>>>> : STARTING TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
		//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
		//sheet.addCell(label02);
String key = "";
String value = "";
String requestData = "";
for(iCounter=1;iCounter<(ValuesColCount-3);iCounter++)
{
	//log.info "				>>>>>>>>>>>>>>>>>> : IN FOR LOOP "
	key = TestDataProp1.getCell(0,iCounter).getContents();
	value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents();
	
	//testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
	testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( key, value);

	/**
	if(value.contains(" "))
	{
		value = '"'+value+'"';
	}
	//requestData = requestData+"-d "+TestDataProp1.getCell(0,iCounter).getContents()+"="+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()+" \\\n";
	requestData = requestData+"-d "+key+"="+value+" \\\n";
	**/

	 if(value.contains(" "))
      {
       value = '"'+value+'"';
      }
      //**********************************************
      //Generating the curl request from key and value
      //**********************************************
      if(key=="email")
      {
       requestData = requestData+"--data-urlencode "+key+"="+value+" \\\n";
      }
      else{
      requestData = requestData+"-d "+key+"="+value+" \\\n";
      }
}
log.info "				>>>> requestData = "+requestData;
//Getting Reqeust Curl

def ReqHolder1 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
log.info "				>>>> ReqHolder1 =:"+ReqHolder1


//Running the API Request with the Test Parameters-Values
log.info "				>>> Executing Request ";
testRunner.runTestStepByName(RequestAPIName)

String requestURL = context.httpMethod.getURI();
log.info "				>>>> requestURL : "+requestURL;
requestData = "curl -k -v "+requestURL+" \\\n"+requestData;
//log.info "				>>>> New requestData : "+requestData;
//log.info "				>>>> url : "+context.httpMethod.getURI();
//Getting Reqeust Curl
log.info "ok";


def rawReq = testRunner.testCase.testSteps[RequestAPIName].testRequest.response.requestContent;
//log.info  "				>>>> rawReq =:"+rawReq


def ReqHolder2 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
//log.info "				>>>> ReqHolder2 =:"+ReqHolder2


//*******************************************************************************************//

log.info "				>>>>>>>>>>>>>>>>>> : Starting Validate JSON Response Groovy";


//Getting JSON Response
def holder = testRunner.testCase.getTestStepByName(RequestAPIName).getPropertyValue("response")
log.info "        JSON response holder            "+holder;

//Parsing JSON Response
def slurper = new JsonSlurper()
def ParsedJSONResponse = slurper.parseText(holder)
log.info "        JSON Parsed               "+ParsedJSONResponse

//Stringification of JSON response
String ResponseInString = holder.toString()
log.info "         JSON String                "+ResponseInString
String ParsedJSONResponseInString = ParsedJSONResponse.toString()


log.info "				>>>>>>>>>>>>>>>>>> : Parsed JSON in String :" +ParsedJSONResponseInString
Label label = new Label(4, iCountTestCase, ResponseInString); //column=0=A,row=0=1
		sheet.addCell(label);
//log.info "				>>>>>>>>>>>>>>>>>> : ResponseSchemaRowCount :"+ResponseSchemaRowCount

Label labelCurl = new Label(3, iCountTestCase, requestData); //column=0=A,row=0=1
		sheet.addCell(labelCurl);

for(iCounter=1;iCounter<ResponseSchemaRowCount;iCounter++)
{//******************start loop for Response Schema validation
//flush2
ParameterDataType = "";
	
	if(TestDataResponseSchema.getCell(1,iCounter).getContents() == "Y")
	{
		//log.info "          >>   YES  " +iCounter
		String requiredParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"'
		log.info "				>>>>>>>>>>>>>>>>>> : requiredParameter :"+requiredParameter
		if(!(ParsedJSONResponseInString.contains(requiredParameter)))
		{
			
			log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the mandatory parameter - "+TestDataResponseSchema.getCell(0,iCounter).getContents() 
			String MandatoryParameterMissing = "The response does not contain the mandatory parameter - "+requiredParameter
			Label label2 = new Label(flagCount, iCountTestCase, MandatoryParameterMissing);
			sheet.addCell(label2);
			flagCount = flagCount+1
			//testRunner.fail
		}
	}



//******NOV-8*****FOR TESTING DATATYPE OF VALUES//
if(!(TestDataResponseSchema.getCell(2,iCounter).getContents().isEmpty()))
	{
		ParameterDataType="";
		//String ResponseParameter = TestDataResponseSchema.getCell(0,iCounter).getContents()
		ResponseParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"'
		ParameterDataType = TestDataResponseSchema.getCell(2,iCounter).getContents()
		log.info  "				>>>>>>>>>>>>>>>>>> : ResponseParameter :"+ResponseParameter
		log.info  "				>>>>>>>>>>>>>>>>>> : ParameterDataType :"+ParameterDataType



// int Length =  TestDataFile.lastIndexOf( '\\' )
// String ResposeFileLocation = TestDataFile.substring(0,Length)
ResponseParameter = ResponseParameter+'":';
 int IndexOfParam =  ParsedJSONResponseInString.lastIndexOf(ResponseParameter)
 int LengthOfParam = ResponseParameter.size()
// log.info "     >>>>>>>>>>>>>>>.   IndexOfParam "+IndexOfParam
 //log.info "     >>>>>>>>>>>>>>>.  LengthOfParam "+LengthOfParam

  if(IndexOfParam > -1)
  {
// log.info "       <<>>>>>>>> ParsedJSONResponseInString"+ParsedJSONResponseInString
 //int LastIndexOfValue = ParsedJSONResponseInString.substring(ResponseParameter,indexOf(","))
 //log.info "             >>>>>>>>...   LastIndexOfValue "+LastIndexOfValue

 IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf(",", IndexOfParam)
 //log.info "				>>>> IndexOfSubsequentComma:"+IndexOfSubsequentComma 

		//log.info  "     >>>>>>>>>>>>>>>.   IndexOfSubsequentComma "+IndexOfSubsequentComma
 
if(IndexOfSubsequentComma<1)
{
	IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf("}", IndexOfParam)
	//log.info "				>>>> IndexOfSubsequentComma:"+IndexOfSubsequentComma 

	if(IndexOfSubsequentComma<1)
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Could not find the value for the parameter : "+ResponseParameter
	}
}



if(ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))
 	{
 		EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
		log.info "				>>>> Enum Data Collection :"+EnumDataCollection
 		/*
 		if(EnumDataCollection.matches("[,a-zA-Z]*"))
 		{
 			enumType = "String"
 			log.info "Enum Value is String"
 		}
 		else
 		{
 			enumType = "Number"
 			log.info "Enum Value is NOT String"
 		}
 		*/
 		if(!(EnumDataCollection.matches("[0-9,]*")))
 		{
 			enumType = "String1"
 			log.info "Enum Value is String"
 		}
 		else
 		{
 			enumType = "Number"
 			log.info "Enum Value is NOT String"
 		}
 	}

 //if((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || (ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))) //********** **
 // if(!((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || enumType=="String")) //********** **
 	//if(!((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String"))) //********** **

//Thread.sleep(500) 
if(ParameterDataType.equalsIgnoreCase('Float'))
{
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO float BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	
 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText

 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
else if(((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String1"))) //********** **

 {
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO STRING/DATE/ENUMstring BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	//ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText
 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
 

 
 else
 {
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO NON -- STRING/DATE/ENUMstring BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	
 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText

 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
 //ResposeValueText = ParsedJSONResponseInString.substring(ParsedJSONResponseInString.indexOf(ResponseParameter)+LengthOfParam, (ParsedJSONResponseInString.indexOf(","))+(IndexOfParam));
 //ResposeValueText = ParsedJSONResponseInString.substring((IndexOfParam+LengthOfParam+2),(IndexOfParam+LengthOfParam+2)+(ParsedJSONResponseInString.indexOf(",")))
 //ResposeValueText = ParsedJSONResponseInString.substring((32),ParsedJSONResponseInString.indexOf(","))
 //s.indexOf(")")
 //log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :"+ResposeValueText
// assert ResposeValueText.isNumber()

//try{

log.info "				>>>> The ResponseValueText is :"+ResposeValueText
	
if(ParameterDataType.toString().equalsIgnoreCase("String"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to STRING IF block"
	 String returnDataType = String.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : StringValue :"+returnDataType
}	
if(ParameterDataType.toString().equalsIgnoreCase("Long"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to LONG IF block"
	//log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :" +ResposeValueText
	long returnDataType = Long.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : LongValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Int"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Int IF block"
	 int returnDataType = Integer.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : IntValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Float"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Float IF block"
	//log.info "				>>>>>>>>>>>>>>>>>> : FloatValue text "+ResposeValueText
	 float returnDataType = Float.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : FloatValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Boolean"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Boolean IF block"
	 boolean returnDataType = Boolean.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : BooleanValue :"+returnDataType
	
}
if(ParameterDataType.toString().equalsIgnoreCase("Date"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Date IF block"
	 
	 SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
	 Date date = null;
	  date = format.parse(ResposeValueText);
	 //date returnDataType = date.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : DateValue  :"+date
}
if(ParameterDataType.toString().toLowerCase().contains(("Enum").toLowerCase()))
{

	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
	EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
	log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection

	if(!(EnumDataCollection.toString().toLowerCase().contains((ResposeValueText).toLowerCase())))
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText"
	String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection
	Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label4);
	flagCount = flagCount+1
	}
	/*
	String[] EnumData = EnumDataCollection.split(",")
	int sizeOfEnumData = EnumData.size()
	log.info "			>>>>>>>>>>>>>> sizeOfEnumData :"+sizeOfEnumData
	
	
	for(iCountOfEnumData=0;iCountOfEnumData<sizeOfEnumData;iCountOfEnumData++)
	{
	log.info "			>>>>>>> EnumData :"+EnumData[iCountOfEnumData]
	
	}
	 //date returnDataType = date.valueOf(ResposeValueText)
	 //log.info "        >>>>>>>>>.     EnumValue  "+returnDataType
	*/
}




/*
}
  catch(all)
{
	log.info "             >>>>>>>>>> Some Exception Occured"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	
//workbook.write()
//workbook.close()

}
*/
 //long.info "  >>>>>>>>>>>>>>>   "+bool
 //ValueDataType = ResposeValueText.getClass()
 //log.info " >>>>>>>>>>>> ValueDataType ="+ValueDataType

  }

	}
//******NOV-8*****// 

//*****************************************************************8888888
//*****************************************************************8888888
//openEscrowopenEscrowParameterDataType = "";
}//******************END loop for Response Schema validation





for(iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{
	//if(IsEmpty(TestDataResponse.getCell(iCounter,1).getContents()))


	if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
	{
		//log.info " >>>>>>>>>>>>   not NULL"
		String ParamValueField = '"'+TestDataResponse.getCell(iCounter1,0).getContents()+'":"'+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()+'"'
		String ParamValueFieldForIntType = '"'+TestDataResponse.getCell(iCounter1,0).getContents()+'":'+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()
		log.info " >>>>>>>>>>>  ParamValueField is : "+ParamValueField 
//1
		
		if(!(ParsedJSONResponseInString.contains(ParamValueField))  && !(ParsedJSONResponseInString.contains(ParamValueFieldForIntType)) )
		{
			log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the value - "+ParamValueField
			
			
			//log.info "           >>>>>>>> flag Count  "+flagCount
			//label1 = "label"+flagCount
			//Label label1 = new Label(0, 1, "TC_001"); //column=0=A,row=0=1
			//sheet.addCell(label1);
			
			//Label label+""+flagCount = new Label
			Label label3 = new Label(flagCount, iCountTestCase, "The response does not contain the value - "+ParamValueField+"");
			sheet.addCell(label3);
			flagCount = flagCount+1
		}
	}
}

if(flagCount==5)
{
	/*
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);
	*/
	//log.info  "				>>>>>>>>>>>>>>>>>> : if loop - flagCount "+flagCount
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label02);

	Label label0003 = new Label(1, iCountTestCase, TestDataValues1.getCell(1,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label0003);

	Label label0004 = new Label(2, iCountTestCase, TestDataValues1.getCell(2,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label0004);

	
	// sheet.addCell(new jxl.write.Label(0,0,"User Name",normalFormat));
}
else{
	/*
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);
	*/
	//log.info  "				>>>>>>>>>>>>>>>>>> : else loop - flagCount "+flagCount
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);

	Label label0003 = new Label(1, iCountTestCase, TestDataValues1.getCell(1,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label0003);

	Label label0004 = new Label(2, iCountTestCase, TestDataValues1.getCell(2,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label0004);
}	
log.info "				>>>>>>>>>>>>>>>>>> : END TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
}//************END loop for No of Test Cases

workbook.write()
workbook.close()
}//************END loop for No of Reqeusts


}
catch (NumberFormatException e)
{
	log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : NumberFormatException"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	workbook.write()
	workbook.close()
}

catch(ParseException parseEx)
{
	log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : ParseException"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	workbook.write()
	workbook.close()
}
catch(FileNotFoundException f) 
{
   workbook.write()
   workbook.close()
   f.printStackTrace();
   log.info "				>>>>>>>>>>>>>>>>>> : FILE NOT FOUND"
   //alert.showInfoMessage("Hello World !","soapUI Warning !")
   alert.showInfoMessage("Please Check the File Name and Location is Correct","FILE NOT FOUND");
  
}
catch(all)
{
	
	//String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	String Exception1 = "An Exception Occurred : "+all+""
	log.info "				>>>>>>>>>>>>>>>>>> : Exception1 : "+Exception1
	Label label5 = new Label(flagCount, iCountTestCase, Exception1);
	sheet.addCell(label5);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	
	workbook.write()
	workbook.close()

}

log.info "				>>>>>>>>>>>>>>>>>> : End of Validate JSON Response Groovy"
log.info "				>>>>>>>>>>>>>>>>>> : End of AutomationDriver script"
]]></script></con:config></con:testStep><con:testStep type="groovy" name="DataTypeValidations" disabled="true" id="c54b5f08-0c1b-449b-b6ed-2ab3a21f64b4"><con:settings/><con:config><script>String TYPE = "Integer";
ActualResponseValue = 123;

if(TYPE.equalsIgnoreCase("Integer"))
//typeError=Integer.valueOf(ActualResponseValue)
int returnType=Integer.valueOf(ActualResponseValue)	
else if(TYPE.equalsIgnoreCase(String))
typeError=String.valueOf(ActualResponseValue)
else if(TYPE.equalsIgnoreCase(Long))
typeError=Long.valueOf(ActualResponseValue)</script></con:config></con:testStep><con:testStep type="request" name="updateClientStatus" id="cd6fe866-e9e1-4b62-9852-33bc696fa574"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateClientStatus</con:operation><con:request name="updateClientStatus" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b30c3b55-8ea5-4713-a559-54d27a89cbd3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateClientStatus>
         <updateClientStatusRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <clientStatus>${#TestCase#clientStatus}</clientStatus>
         </updateClientStatusRequest>
      </sch:updateClientStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="83f7bac6-1b6f-4515-a22c-fcc737bb9a39"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateClientStatus"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="searchClients" id="48ed90dc-549c-4a82-8817-18c843771d43"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>searchClients</con:operation><con:request name="searchClients" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="c487d82b-6fdc-4b3e-b48d-8f0a18af547d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:searchClients>
         <searchClientRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <!--Optional:-->
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <createdOnFromDate>${#TestCase#createdOnFromDate}</createdOnFromDate>
            <!--Optional:-->
            <createdOnToDate>${#TestCase#createdOnToDate}</createdOnToDate>
            <!--Optional:-->
            <modifiedOnFromDate>${#TestCase#modifiedOnFromDate}</modifiedOnFromDate>
            <!--Optional:-->
            <modifiedOnToDate>${#TestCase#modifiedOnToDate}</modifiedOnToDate>
            <!--Optional:-->
            <clientStatus>${#TestCase#clientStatus}</clientStatus>
            <!--Optional:-->
            <cipStatus>${#TestCase#cipStatus}</cipStatus>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </searchClientRequest>
      </sch:searchClients>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="44c5506d-e20d-4447-834b-fdc5c4d7c4ef"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/searchClients"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateAccount" id="fcd2b062-72d6-4948-8e6f-6b17d165a2ba"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateAccount</con:operation><con:request name="updateAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="563b4500-51bd-4833-a5e7-9c2959cddfc3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateAccount>
         <updateAccountRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <accountId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#accountId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#accountId.subscriberReferenceId}</subscriberReferenceId>
            </accountId>
            <!--Optional:-->
            <title>${#TestCase#title}</title>
         </updateAccountRequest>
      </sch:updateAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="e4589422-d061-4c79-ba00-50ffd39721af"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getSubscriberAccounts" id="6c5ff406-25ce-4015-9f3c-cca9531886ea"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getSubscriberAccounts</con:operation><con:request name="getSubscriberAccounts" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="311314b8-7794-47b8-9d10-a84754b4eb85"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getSubscriberAccounts>
         <getSubscriberAccountsRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
         </getSubscriberAccountsRequest>
      </sch:getSubscriberAccounts>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="b1393f28-b132-4d94-8eba-10fe86f902e5"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getSubscriberAccountsRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientAccounts" id="4f89c3ce-d1c7-4e5a-a08a-e20b39cb13b2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getClientAccounts</con:operation><con:request name="getClientAccounts" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="4470a396-f81d-4787-af09-60aefb5f3177"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getClientAccounts>
         <getClientAccountsRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </getClientAccountsRequest>
      </sch:getClientAccounts>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="524b2ac6-ac2b-4da6-a657-d1e23401037b"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClientAccounts"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="transferFunds" id="88c6d9d2-545a-47ed-87b1-71fe43479ed9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>transferFunds</con:operation><con:request name="transferFunds" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="140dcc1f-1106-4680-b092-91bb6365153a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:transferFunds>
         <transferFundsRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <sourceAccount>
               <!--Optional:-->
               <bancBoxId>${#TestCase#sourceAccount.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#sourceAccount.subscriberReferenceId}</subscriberReferenceId>
            </sourceAccount>
            <destinationAccount>
               <!--Optional:-->
               <bancBoxId>${#TestCase#destinationAccount.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#destinationAccount.subscriberReferenceId}</subscriberReferenceId>
            </destinationAccount>
            <!--Optional:-->
            <memo>${#TestCase#memo}</memo>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <referenceId>${#TestCase#items.referenceId}</referenceId>
               <!--Optional:-->
               <memo>${#TestCase#items.memo}</memo>
               <amount>${#TestCase#items.amount}</amount>
               <!--Optional:-->
            </items>
         </transferFundsRequest>
      </sch:transferFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="fae649ba-2549-4d99-821d-2fdfa8756361"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/transferFunds"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getMerchant" id="777c1330-89e8-4bf5-922c-92e275956266"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getMerchant</con:operation><con:request name="getMerchant" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="75ac1368-c8f7-4215-8c5a-d7118285ee72"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getMerchant>
         <getMerchantRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <merchantId>${#TestCase#merchantId}</merchantId>
         </getMerchantRequest>
      </sch:getMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="501f9899-d4eb-47e8-917b-23056c7c4b37"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getMerchantRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GettingFreshRequest" disabled="true" id="b8cbd820-2b32-42d7-a5a6-87bbf6dc35ac"><con:settings/><con:config><script>String APIName = "updateMerchant-COPY";
String APINames = "updateMerchant";

String orgReq = APIName+"#Request";


def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
req = groovyUtils.getXmlHolder(orgReq);

freshRequest = req.getPrettyXml();
log.info "    >>>>>>.   "+req.getPrettyXml();

testRunner.getTestCase().getTestStepByName(APINames).getProperty('Request').setValue(freshRequest);
log.info "     >>>>>>>>  Request Re-fresh completed ";

/*
//testRunner.getTestCase().getTestStepByName(requestName).getProperty('Request').getPrettyXml();

log.info" ------Remove empty parent tags";

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
req = groovyUtils.getXmlHolder(APIName'#Request');

freshRequest = req.getPrettyXml();
*/</script></con:config></con:testStep><con:testStep type="groovy" name="GetFreshReq" disabled="true" id="194eb46f-e596-4d4b-bc3d-2df3912f224e"><con:settings/><con:config><script>log.info" ------Remove empty parent tags";

APIName = 'updateMerchant';
/*
def inputHolder = APIName+"#Request";

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
req = groovyUtils.getXmlHolder(inputHolder);

freshRequest = req.getPrettyXml();
log.info "      "+freshRequest;
*/
def groovyUtils2 = new com.eviware.soapui.support.GroovyUtils( context )
def holder2 = groovyUtils2.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent)

testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder2.getPrettyXml())
context.requestContent = holder2.xml
 </script></con:config></con:testStep><con:testStep type="request" name="searchMerchants" id="5e3d922f-4d01-4fbd-9c6a-9d20cb7e1372"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>searchMerchants</con:operation><con:request name="searchMerchants" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b18b0435-ca2b-4186-bab8-25a75f952ec5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:searchMerchants>
         <searchMerchantsRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <!--Optional:-->
            <linkedClientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#linkedClientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#linkedClientId.subscriberReferenceId}</subscriberReferenceId>
            </linkedClientId>
            <!--Optional:-->
            <merchantFirstName>${#TestCase#merchantFirstName}</merchantFirstName>
            <!--Optional:-->
            <merchantLastName>${#TestCase#merchantLastName}</merchantLastName>
            <!--Optional:-->
            <merchantTaxId>${#TestCase#merchantTaxId}</merchantTaxId>
            <!--Optional:-->
            <createdOnFromDate>${#TestCase#createdOnFromDate}</createdOnFromDate>
            <!--Optional:-->
            <createdOnToDate>${#TestCase#createdOnToDate}</createdOnToDate>
            <!--Optional:-->
            <modifiedOnFromDate>${#TestCase#modifiedOnFromDate}</modifiedOnFromDate>
            <!--Optional:-->
            <modifiedOnToDate>${#TestCase#modifiedOnToDate}</modifiedOnToDate>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </searchMerchantsRequest>
      </sch:searchMerchants>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="fdb71970-43bb-49b8-9c3a-a4b23e102c39"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/searchMerchantsRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="linkPayee" id="959d886c-1cd4-4cbf-8371-ac5e1d10378c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>linkPayee</con:operation><con:request name="linkPayee" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="0e847fdd-c69e-4740-af54-e82ba2704e0a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:linkPayee>
         <linkPayeeRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>${#TestCase#referenceId}</referenceId>
            <payee>
               <payeeAccountNumber>${#TestCase#payee.payeeAccountNumber}</payeeAccountNumber>
               <!--Optional:-->
               <memo>${#TestCase#payee.memo}</memo>
               <payee>
                  <!--You have a CHOICE of the next 5 items at this level-->
                  <ach>
                     <routingNumber>${#TestCase#payee.payee.ach.routingNumber}</routingNumber>
                     <accountNumber>${#TestCase#payee.payee.ach.accountNumber}</accountNumber>
                     <holderName>${#TestCase#payee.payee.ach.holderName}</holderName>
                     <bankAccountType>${#TestCase#payee.payee.ach.bankAccountType}</bankAccountType>
                  </ach>
               </payee>
            </payee>
         </linkPayeeRequest>
      </sch:linkPayee>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="8c781b2a-b3db-49d2-a5e4-b6cd11e6adc1"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/linkPayee"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="AutomationScript-May12" id="04ec8bbf-33b1-493c-9c59-1ef0ae1887fd" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

 log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"
/*************** Clearing TC Properties by running script ***************/
 testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/


/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
 String setNo = context.expand('${#Project#SetNo}')
 def TestDataFile = context.expand( '${#Project#TestDataFile}' )
 String APIName = context.expand( '${#Project#APIName}' )
 int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
 String ResposeFileLocation = TestDataFile.substring(0,Length)

  //Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime
  
//Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 
//Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "REQUEST"); //column=0=A,row=0=1
  sheet.addCell(label01);
  
  Label label02 = new Label(2, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
  log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
  log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
  log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
  log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
  log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
  log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return
	}
/*************************************************************************/


/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {

	//Creating fresh request
	  //log.info "          >>>>>>>>>>>  ---Creating fresh request";
	 //testRunner.runTestStepByName("GettingFreshRequest");
		
	 int flagCount = 3
		
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	/**********************Saving original Request******************************/
	
	  log.info "         >>>>>>>>>>  Saving ORIGINAL Request";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils( context )
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	  log.info "      ORIGINAL REQUEST BEFORE REMOVING NODES : "+originalReq2;
	  
    /*****************************************************************************/

	log.info "      >>>>>>>      PropRowCount = "+PropRowCount;

	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			  log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info " >>>>>>>>>>>>>>>>>   key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);
			 log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}
	 //testRunner.runTestStepByName(APIName);
	  log.info "  >>>>>>>.       after loop - 1";

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";

	 testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);

	 req1 = holder1.getPrettyXml();
	  log.info "    >>>>>>>   REQUEST AFTER SETTING VALUES : "+req1;


	/************************ Remove empty parent tags **************************/

	 log.info" ----------Remove empty parent tags";

	//REMOVING NODES
	  //log.info "    >>    >> holder1 :"+holder1.getPrettyXml();

	 countOfOuterFor=0;

	 //NodeList nList = holder1.getElementsByTagName("*");
	 //log.info "      >>>>..  "+nList;
	 for(items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
	 {
	 	log.info "   >>>>>   OUTER FOR LOOP "+(countOfOuterFor+1);
	 for(item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
			log.info ">> removing :: "+ item.nodeName; 
			holder1.removeDomNodes("//"+item.nodeName)
			//holder1.removeDomNodes("//"+item.getDocumentElement().getNodeName())
		}
	 }
	 log.info" >> removed empty parent nodes------- 1 ";
/*

	for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
			log.info ">> removing :: "+ item.nodeName; 
			holder1.removeDomNodes("//"+item.nodeName)
		}
	log.info" >> removed empty parent nodes------- 2 ";

		for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
			log.info ">> removing :: "+ item.nodeName; 
			holder1.removeDomNodes("//"+item.nodeName)
		}
	log.info" >> removed empty parent nodes------- 3 ";
 
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
			log.info ">> removing :: "+ item.nodeName; 
			holder1.removeDomNodes("//"+item.nodeName)
		}
	log.info" >> removed empty parent nodes------- 4 ";
 
 */

	 holder1.updateProperty();
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml())
	 context.requestContent = holder1.xml
	 
	 rawReq=holder1.xml
	  log.info ">>>>    final request : " +rawReq
	  //log.info ">>>>    context.requestContent : " +context.requestContent

	/*****************************************************************************/


	def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils( context )
	//---------Running the API Request
	 testRunner.runTestStepByName(APIName);

	/**************************Restore the original request***********************/
	 
	  log.info "       >>>>>>-------   Setting back to original Request  : "
	  log.info " "+originalReq2;
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	  log.info "       >>>>>>   Original Request restored -----------------";
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder( "${APIName}#Response" )
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
	  log.info ">>>>>>>>>>>response before parse>"+response
    
	//Writing Request and Response on Excell sheet
	  Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	   sheet.addCell(labelRawRequest);
	   
	  Label lableResponse = new Label(2,iCountTestCase,response);
	   sheet.addCell(lableResponse);


     log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		 log.info"  xpath : "+xpath2
		ActualResponseValue=holder.getNodeValue(xpath2);
		 log.info("  Value for "+xpath2+" is : "+ActualResponseValue);

		 log.info "    >>>>    Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "    >>>>   Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
							
				log.info"TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue
					continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents()
		 log.info" type = "+ TYPE;

			try
			{
				log.info " ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "    >>>>   DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				 log.info" TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			    sheet.addCell(label6);
				flagCount = flagCount+1
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "param not null is >>"+ResponseFromTestData
			 log.info"counter1"+iCounter1

			String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
			 log.info"xpath : "+xpath1
			ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("AcualResponse datatype"+ActualResponseValue.getClass())
			 log.info("ExcelResponse datatype"+ResponseFromTestData.getClass())


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1
				log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
			  }

		}
	}

	if(flagCount==3)
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			 log.info  "          >>>>>else loop - flagCount "+flagCount
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "          >>>>>else loop - flagCount "+flagCount
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	 log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 log.info "          >>>>>>>>>>>  //Creating fresh request";
	testRunner.runTestStepByName("GettingFreshRequest");
		

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()]]></script></con:config></con:testStep><con:testStep type="groovy" name="removeEmptyNodes" id="8d11b337-46a0-49e8-af8f-0f452d4f3868" disabled="true"><con:settings/><con:config><script>	 APIName = 'linkExternalAccount';
	 
	 
	 testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);

	 req1 = holder1.getPrettyXml();
	  log.info "    >>>>>>>   REQUEST AFTER SETTING VALUES : "+req1;


	/************************ Remove empty parent tags **************************/

	 log.info" ----------Remove empty parent tags";
	 

	//REMOVING NODES
	  //log.info "    >>    >> holder1 :"+holder1.getPrettyXml();

	 countOfOuterFor=0;

	 //NodeList nList = holder1.getElementsByTagName("*");
	 //log.info "      >>>>..  "+nList;
	 for(items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
	 {
	 	log.info "   >>>>>   OUTER FOR LOOP "+(countOfOuterFor+1);
	 for(item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
			//log.info ">> removing :: "+ item.nodeName; 
			log.info ">> removing :: "+item.removeXobj();
			//log.info ">> removing :: "+ item.Node;
			//holder1.removeDomNodes("//"+item.nodeName);
			//holder1.removeDomNodes("//"+item);
			//holder1.removeDomNodes("//"+item.getDocumentElement().getNodeName())
		}
	 }
	 log.info" >> removed empty parent nodes------- 1 ";


//-----------------------------------------------------------//

 	 holder1.updateProperty();
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml())
	 context.requestContent = holder1.xml
	 
	 rawReq=holder1.xml
	  log.info ">>>>    final request : " +rawReq</script></con:config></con:testStep><con:testStep type="request" name="Copy of linkExternalAccount" id="20d92440-0975-46b7-b91c-fa9924f093e4" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>linkExternalAccount</con:operation><con:request name="Copy of linkExternalAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="74665910-bc93-4148-992b-874d0ea970fa"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:linkExternalAccount>
         <linkExternalAccountRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>${#TestCase#referenceId}</referenceId>
            <account>
               <!--You have a CHOICE of the next 3 items at this level-->
               <bankAccount>
                  <routingNumber>${#TestCase#account.bankAccount.routingNumber}</routingNumber>
                  <accountNumber>${#TestCase#account.bankAccount.accountNumber}</accountNumber>
                  <holderName>${#TestCase#account.bankAccount.holderName}</holderName>
                  <bankAccountType>${#TestCase#account.bankAccount.bankAccountType}</bankAccountType>
               </bankAccount>
               <cardAccount>
                  <!--You have a CHOICE of the next 3 items at this level-->
                  <creditCardAccount>
                     <!--You have a CHOICE of the next 2 items at this level-->
                     <tokenizedId>${#TestCase#account.cardAccount.creditCardAccount.tokenizedId}</tokenizedId>
                     <creditCardDetails>
                        <number>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.number}</number>
                        <expiryDate>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.expiryDate}</expiryDate>
                        <type>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.type}</type>
                        <name>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.name}</name>
                        <cvv>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.cvv}</cvv>
                        <address>
                           <line1>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.line1}</line1>
                           <!--Optional:-->
                           <line2>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.line2}</line2>
                           <city>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.city}</city>
                           <state>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.state}</state>
                           <zipcode>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.zipcode}</zipcode>
                           <!--Optional:-->
                           <country>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.country}</country>
                        </address>
                        <!--Optional:-->
                        <orderSource>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.orderSource}</orderSource>
                     </creditCardDetails>
                  </creditCardAccount>
                  <debitCardAccount>
                     <number>${#TestCase#account.cardAccount.debitCardAccount.number}</number>
                     <type>${#TestCase#account.cardAccount.debitCardAccount.type}</type>
                     <pin>${#TestCase#account.cardAccount.debitCardAccount.pin}</pin>
                  </debitCardAccount>
                  <giftCardAccount>
                     <number>${#TestCase#account.cardAccount.giftCardAccount.number}</number>
                     <pin>${#TestCase#account.cardAccount.giftCardAccount.pin}</pin>
                  </giftCardAccount>
               </cardAccount>
               <paypalAccount>
                  <id>${#TestCase#account.paypalAccount.id}</id>
               </paypalAccount>
            </account>
         </linkExternalAccountRequest>
      </sch:linkExternalAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="89176e42-c285-4698-85fd-6f16c50a783c"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/linkExternalAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="linkExternalAccount-COPY" id="3ceb1cac-1bf0-445f-9ac2-06470dcf7c5b" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>linkExternalAccount</con:operation><con:request name="linkExternalAccount-COPY" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="778bba08-a394-441e-9a63-2bc5a3b19abb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:linkExternalAccount>
         <linkExternalAccountRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>${#TestCase#referenceId}</referenceId>
            <account>
               <!--You have a CHOICE of the next 3 items at this level-->
               <bankAccount>
                  <routingNumber>${#TestCase#account.bankAccount.routingNumber}</routingNumber>
                  <accountNumber>${#TestCase#account.bankAccount.accountNumber}</accountNumber>
                  <holderName>${#TestCase#account.bankAccount.holderName}</holderName>
                  <bankAccountType>${#TestCase#account.bankAccount.bankAccountType}</bankAccountType>
               </bankAccount>
               <cardAccount>
                  <!--You have a CHOICE of the next 3 items at this level-->
                  <creditCardAccount>
                     <!--Optional:-->
                     <tokenizedId>${#TestCase#account.cardAccount.creditCardAccount.tokenizedId}</tokenizedId>
                     <creditCardDetails>
                        <number>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.number}</number>
                        <expiryDate>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.expiryDate}</expiryDate>
                        <type>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.type}</type>
                        <name>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.name}</name>
                        <cvv>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.cvv}</cvv>
                        <address>
                           <line1>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.line1}</line1>
                           <!--Optional:-->
                           <line2>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.line2}</line2>
                           <city>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.city}</city>
                           <state>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.state}</state>
                           <zipcode>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.zipcode}</zipcode>
                           <!--Optional:-->
                           <country>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.address.country}</country>
                        </address>
                        <!--Optional:-->
                        <orderSource>${#TestCase#account.cardAccount.creditCardAccount.creditCardDetails.orderSource}</orderSource>
                     </creditCardDetails>
                  </creditCardAccount>
                  <debitCardAccount>
                     <number>${#TestCase#account.cardAccount.debitCardAccount.number}</number>
                     <type>${#TestCase#account.cardAccount.debitCardAccount.type}</type>
                     <pin>${#TestCase#account.cardAccount.debitCardAccount.pin}</pin>
                  </debitCardAccount>
                  <giftCardAccount>
                     <number>${#TestCase#account.cardAccount.giftCardAccount.number}</number>
                     <pin>${#TestCase#account.cardAccount.giftCardAccount.pin}</pin>
                  </giftCardAccount>
               </cardAccount>
               <paypalAccount>
                  <id>${#TestCase#account.paypalAccount.id}</id>
               </paypalAccount>
            </account>
         </linkExternalAccountRequest>
      </sch:linkExternalAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="44c848f7-622f-4756-bbbe-cc9f42d42163"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/linkExternalAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="linkFile" id="b73a5cd2-fdcb-49f6-9942-0d1c5f299f3b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>linkFile</con:operation><con:request name="linkFile" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="1ce138be-2480-4b05-bd0d-20ecd2890905"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@disable-multipart-attachments">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:linkFile>
         <linkFileRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>${#TestCase#referenceId}</referenceId>
            <file>
               <name>${#TestCase#file.name}</name>
               <fileClass>${#TestCase#file.fileClass}</fileClass>
               <!--Optional:-->
               <url>${#TestCase#file.url}</url>
               <content>${#TestCase#file.content}</content>
               <!--Optional:-->
               <comment>${#TestCase#file.comment}</comment>
            </file>
         </linkFileRequest>
      </sch:linkFile>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="fb51042d-ea50-4acf-accc-d90d18dfcdcf"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/linkFile"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateLinkedExternalAccount" id="ba6d2714-ce73-4c62-95c2-1ad9cb3d1b25"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateLinkedExternalAccount</con:operation><con:request name="updateLinkedExternalAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="4797d640-402a-4d3b-bc62-de39ee242785"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateLinkedExternalAccount>
         <updateLinkedExternalAccountRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <!--Optional:-->
            <linkedExternalAccountId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#linkedExternalAccountId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#linkedExternalAccountId.subscriberReferenceId}</subscriberReferenceId>
            </linkedExternalAccountId>
            <account>
               <!--You have a CHOICE of the next 4 items at this level-->
               
               
               
               <wireAccount>
                  <bankAccountDetails>
                     <routingNumber>${#TestCase#account.wireAccount.bankAccountDetails.routingNumber}</routingNumber>
                     <accountNumber>${#TestCase#account.wireAccount.bankAccountDetails.accountNumber}</accountNumber>
                     <holderName>${#TestCase#account.wireAccount.bankAccountDetails.holderName}</holderName>
                     <bankAccountType>${#TestCase#account.wireAccount.bankAccountDetails.bankAccountType}</bankAccountType>
                  </bankAccountDetails>
                  <address>
                     <line1>${#TestCase#account.wireAccount.address.line1}</line1>
                     <!--Optional:-->
                     <line2>${#TestCase#account.wireAccount.address.line2}</line2>
                     <city>${#TestCase#account.wireAccount.address.city}</city>
                     <state>${#TestCase#account.wireAccount.address.state}</state>
                     <zipcode>${#TestCase#account.wireAccount.address.zipcode}</zipcode>
                  </address>
               </wireAccount>
            </account>
         </updateLinkedExternalAccountRequest>
      </sch:updateLinkedExternalAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="aafe3135-2506-42a7-bf5e-946827cd11fe"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateLinkedExternalAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientLinkedExternalAccounts" id="f8ac504d-aaaf-4ce1-a053-6000ec6e03c5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getClientLinkedExternalAccounts</con:operation><con:request name="getClientLinkedExternalAccounts" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="02a8220d-24dd-403e-85e6-f4906817d5f6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getClientLinkedExternalAccounts>
         <getClientLinkedExternalAccountsRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </getClientLinkedExternalAccountsRequest>
      </sch:getClientLinkedExternalAccounts>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="f694b574-dea4-4570-929b-a140785a3603"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClientLinkedExternalAccounts"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="AutomationScript-May14" id="816a671f-ff6a-46bc-8163-8cd03b00032b" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

 log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"
/*************** Clearing TC Properties by running script ***************/
 testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/


/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
 String setNo = context.expand('${#Project#SetNo}')
 def TestDataFile = context.expand( '${#Project#TestDataFile}' )
 String APIName = context.expand( '${#Project#APIName}' )
 int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
 String ResposeFileLocation = TestDataFile.substring(0,Length)

  //Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime
  
//Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 
//Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "REQUEST"); //column=0=A,row=0=1
  sheet.addCell(label01);
  
  Label label02 = new Label(2, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
  log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
  log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
  log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
  log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
  log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
  log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return
	}
/*************************************************************************/


/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {

	//Creating fresh request
	  //log.info "          >>>>>>>>>>>  ---Creating fresh request";
	 //testRunner.runTestStepByName("GettingFreshRequest");
		
	 int flagCount = 3
		
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	/**********************Saving original Request******************************/
	
	  log.info "         >>>>>>>>>>  Saving ORIGINAL Request";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils( context )
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	  log.info "      ORIGINAL REQUEST BEFORE REMOVING NODES : "+originalReq2;
	  
    /*****************************************************************************/

	log.info "      >>>>>>>      PropRowCount = "+PropRowCount;

	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			  log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info " >>>>>>>>>>>>>>>>>   key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

			
			 
			 log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}
	 //testRunner.runTestStepByName(APIName);
	  log.info "  >>>>>>>.       after loop - 1";

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";

	 testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);

	 req1 = holder1.getPrettyXml();
	  log.info "    >>>>>>>   REQUEST AFTER SETTING VALUES : "+req1;


	/************************ Remove empty parent tags **************************/

	 log.info" ----------Remove empty parent tags";

	//REMOVING NODES
	  //log.info "    >>    >> holder1 :"+holder1.getPrettyXml();
	 /*
	 for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'null' and count(*) = 0]" ))
	{
				log.info " Null Node = "+item.nodeName;
				//if(items in holder1.getDomNodes( "//*[normalize-space(.) = 'null' and count(*) = 0]")){
					log.info " Null Node = "+item.nodeName;
				//}
				String nodeName = "//"+item.nodeName
				holder1.setNodeValue(nodeName,'');
	}
	*/	
	 /*
 	for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = 'null' and count(*) = 0]" ))
	{
				
			log.info " >>>>>>    Null Node = "+item1.nodeName;
			log.info " >>>>>>    SETTING BLANK VALUE";
			String nodeName = "//"+item1.nodeName;
			holder1.setNodeValue(nodeName,'');

			continue;
		*/	
	 for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
		for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
			{
				if(items in holder1.getDomNodes( "//*[normalize-space(.) = 'null'and count(*) = 0]")){

					log.info " Null Node = "+item.nodeName;
				}
				//log.info "  >>  "+holder1.getNodeValues(item.nodeName);
				log.info ">> removing :: "+ item.nodeName;
				log.info ">> removing :: "+ item.removeXobj();
				//holder1.removeDomNodes("//"+item.nodeName)
				//log.info ">> removing :: "+item.removeXobj();
			}
		}
	//}
	 log.info" >> removed empty parent nodes-------";

 for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'null' and count(*) = 0]" ))
	{
				log.info " Null Node = "+item.nodeName;
				//if(items in holder1.getDomNodes( "//*[normalize-space(.) = 'null' and count(*) = 0]")){
					log.info " Null Node = "+item.nodeName;
				//}
				String nodeName = "//"+item.nodeName;
				log.info " >>>>>. nodeName = "+nodeName;
				holder1.setNodeValue(nodeName,"");
	}
	 log.info" >> setting done for null nodes to blank-------";

	 holder1.updateProperty();
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml())
	 context.requestContent = holder1.xml
	 
	 rawReq=holder1.xml
	  log.info ">>>>    final request : " +rawReq
	  //log.info ">>>>    context.requestContent : " +context.requestContent

	/*****************************************************************************/


	def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils( context )
	//---------Running the API Request
	 testRunner.runTestStepByName(APIName);

	/**************************Restore the original request***********************/
	 
	  log.info "       >>>>>>-------   Setting back to original Request  : "
	  log.info " "+originalReq2;
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	  log.info "       >>>>>>   Original Request restored -----------------";
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder( "${APIName}#Response" )
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
	  log.info ">>>>>>>>>>>response before parse>"+response
    
	//Writing Request and Response on Excell sheet
	  Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	   sheet.addCell(labelRawRequest);
	   
	  Label lableResponse = new Label(2,iCountTestCase,response);
	   sheet.addCell(lableResponse);


     log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info"  xpath : "+xpath2
		ActualResponseValue=holder.getNodeValue(xpath2);
		 log.info("  Value for "+xpath2+" is : "+ActualResponseValue);

		 log.info "    >>>>    Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "    >>>>   Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
							
				log.info"TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue
					continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents()
		 log.info" type = "+ TYPE;

			try
			{
				log.info " ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "    >>>>   DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				 log.info" TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			    sheet.addCell(label6);
				flagCount = flagCount+1
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "param not null is >>"+ResponseFromTestData
			 log.info"counter1"+iCounter1

			String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
			 log.info"xpath : "+xpath1
			ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("AcualResponse datatype"+ActualResponseValue.getClass())
			 log.info("ExcelResponse datatype"+ResponseFromTestData.getClass())


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1
				log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
			  }

		}
	}

	if(flagCount==3)
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			 log.info  "          >>>>>else loop - flagCount "+flagCount
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "          >>>>>else loop - flagCount "+flagCount
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	 log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 log.info "          >>>>>>>>>>>  //Creating fresh request";
	testRunner.runTestStepByName("GettingFreshRequest");
		

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()]]></script></con:config></con:testStep><con:testStep type="request" name="sendFunds" id="9f585f69-02fb-467f-b88e-daa8360eb234"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>sendFunds</con:operation><con:request name="sendFunds" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="205183c1-9596-40d8-a715-09cd5c9f0089"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:sendFunds>
         <sendFundsRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <method>
               <!--You have a CHOICE of the next 7 items at this level-->
               <ach/>
            </method>
            <sourceAccount>
               <!--Optional:-->
               <bancBoxId>${#TestCase#sourceAccount.bancBoxId}</bancBoxId>
               <!--Optional:-->
            </sourceAccount>
            <destination>
               <!--You have a CHOICE of the next 6 items at this level-->
               <linkedPayeeId>
                  <!--Optional:-->
                  <bancBoxId>${#TestCase#destination.linkedPayeeId.bancBoxId}</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>${#TestCase#destination.linkedPayeeId.subscriberReferenceId}</subscriberReferenceId>
               </linkedPayeeId>
            </destination>
            <!--Optional:-->
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <!--Optional:-->
               <memo>${#TestCase#items.memo}</memo>
               <amount>${#TestCase#items.amount}</amount>
               <!--Optional:-->
            </items>
         </sendFundsRequest>
      </sch:sendFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="0ee984c2-b652-4ba1-b87d-1d0488fb5843"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/sendFunds"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createMerchant-COPY" id="c81c875e-ed81-4646-a0f9-c1a045291c29" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createMerchant</con:operation><con:request name="createMerchant-COPY" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="0074e199-dc9c-494d-9252-b32c3351b725"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <firstName>${#TestCase#firstName}</firstName>
            <lastName>${#TestCase#lastName}</lastName>
            <ssn>${#TestCase#ssn}</ssn>
            <dob>${#TestCase#dob}</dob>
            <!--Optional:-->
            <email>${#TestCase#email}</email>
            <address>
               <address1>${#TestCase#address.address1}</address1>
               <!--Optional:-->
               <address2>${#TestCase#address.address2}</address2>
               <city>${#TestCase#address.city}</city>
               <state>${#TestCase#address.state}</state>
               <zipcode>${#TestCase#address.zipcode}</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber>${#TestCase#bankBusinessAccount.routingNumber}</routingNumber>
               <accountNumber>${#TestCase#bankBusinessAccount.accountNumber}</accountNumber>
               <holderName>${#TestCase#bankBusinessAccount.holderName}</holderName>
               <bankAccountType>${#TestCase#bankBusinessAccount.bankAccountType}</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>${#TestCase#merchantDetails.merchantCategoryCode}</merchantCategoryCode>
               <maxTransactionAmount>${#TestCase#merchantDetails.maxTransactionAmount}</maxTransactionAmount>
               <customerServiceNumber>${#TestCase#merchantDetails.customerServiceNumber}</customerServiceNumber>
               <!--Optional:-->
               <amexId>${#TestCase#merchantDetails.amexId}</amexId>
               <!--Optional:-->
               <discoverId>${#TestCase#merchantDetails.discoverId}</discoverId>
               <softDescriptor>${#TestCase#merchantDetails.softDescriptor}</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>${#TestCase#primaryContact.firstName}</firstName>
               <lastName>${#TestCase#primaryContact.lastName}</lastName>
               <phone>${#TestCase#primaryContact.phone}</phone>
               <emailAddress>${#TestCase#primaryContact.emailAddress}</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>${#TestCase#hasAcceptedCreditCards}</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>${#TestCase#visaAnnualSalesVolume}</visaAnnualSalesVolume>
            <organizationType>${#TestCase#organizationType}</organizationType>
            <!--Optional:-->
            <taxId>${#TestCase#taxId}</taxId>
            <!--Optional:-->
            <setAsDefaultMerchantId>${#TestCase#setAsDefaultMerchantId}</setAsDefaultMerchantId>
         </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="5f3d352e-47fc-4af8-a34b-943f70bbf572"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createMerchantRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="sendFunds-COPY" id="40f83403-f9c0-4c8a-8c3f-9d0c8a76e6e6" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>sendFunds</con:operation><con:request name="sendFunds-COPY" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="fd989887-decc-42ff-bbb3-c49bb86e7a4f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:sendFunds>
         <sendFundsRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <method>
               <!--You have a CHOICE of the next 7 items at this level-->
               
               
               <check>
                  <type>${#TestCase#method.check.type}</type>
               </check>
               
               
               
               
            </method>
            <sourceAccount>
               <!--Optional:-->
               <bancBoxId>${#TestCase#sourceAccount.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#sourceAccount.subscriberReferenceId}</subscriberReferenceId>
            </sourceAccount>
            <destination>
               <!--You have a CHOICE of the next 6 items at this level-->
               
               
               
               
               <newPayee>
                  <payeeAccountNumber>${#TestCase#destination.newPayee.payeeAccountNumber}</payeeAccountNumber>
                  <!--Optional:-->
                  <memo>${#TestCase#destination.newPayee.memo}</memo>
                  <payee>
                     <!--You have a CHOICE of the next 4 items at this level-->
                     
                     
                     <check>
                        <name>${#TestCase#destination.newPayee.payee.check.name}</name>
                        <address>
                           <line1>${#TestCase#destination.newPayee.payee.check.address.line1}</line1>
                           <!--Optional:-->
                           <line2>${#TestCase#destination.newPayee.payee.check.address.line2}</line2>
                           <city>${#TestCase#destination.newPayee.payee.check.address.city}</city>
                           <state>${#TestCase#destination.newPayee.payee.check.address.state}</state>
                           <zipcode>${#TestCase#destination.newPayee.payee.check.address.zipcode}</zipcode>
                        </address>
                     </check>
                     
                  </payee>
               </newPayee>
               
            </destination>
            <!--Optional:-->
            <payeeAccountNumber>${#TestCase#payeeAccountNumber}</payeeAccountNumber>
            <!--Optional:-->
            <memo>${#TestCase#memo}</memo>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <referenceId>${#TestCase#items.referenceId}</referenceId>
               <!--Optional:-->
               <memo>${#TestCase#items.memo}</memo>
               <amount>${#TestCase#items.amount}</amount>
               <!--Optional:-->
               <scheduled>
                  <scheduleDate>${#TestCase#items.scheduled.scheduleDate}</scheduleDate>
               </scheduled>
            </items>
         </sendFundsRequest>
      </sch:sendFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="7ef52e54-3634-45c5-aa95-f24ad0e7c10c"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/sendFunds"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientLinkedPayees" id="c804820e-d19c-410c-a7e6-121396cb4b3b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getClientLinkedPayees</con:operation><con:request name="getClientLinkedPayees" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="6d785118-67d1-4601-9605-7027081e6943"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getClientLinkedPayees>
         <getClientLinkedPayeesRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </getClientLinkedPayeesRequest>
      </sch:getClientLinkedPayees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="d9b2a419-e5c2-477f-a497-80d1841092e7"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClientLinkedPayees"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="deleteLinkedPayee" id="e3c49cd7-180c-4a29-bf61-cffcce24fc8c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>deleteLinkedPayee</con:operation><con:request name="deleteLinkedPayee" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="e996cf37-fb8f-43e4-8278-aaf36ead0a56"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:deleteLinkedPayee>
         <deleteLinkedPayeeRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <linkedPayeeId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#linkedPayeeId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#linkedPayeeId.subscriberReferenceId}</subscriberReferenceId>
            </linkedPayeeId>
         </deleteLinkedPayeeRequest>
      </sch:deleteLinkedPayee>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="93655171-f466-4b6e-b16d-2c3cd57d7c39"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/deleteLinkedPayee"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="deleteLinkedExternalAccount" id="2cd7cee8-d088-493d-8391-8cc5da947772"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>deleteLinkedExternalAccount</con:operation><con:request name="deleteLinkedExternalAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="f3d8a125-9af2-4129-b091-fa4861684729"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:deleteLinkedExternalAccount>
         <deleteLinkedExternalAccountRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <linkedExternalAccountId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#linkedExternalAccountId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#linkedExternalAccountId.subscriberReferenceId}</subscriberReferenceId>
            </linkedExternalAccountId>
         </deleteLinkedExternalAccountRequest>
      </sch:deleteLinkedExternalAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="853fcd03-9b09-4ab6-9416-96463b8f3d61"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/deleteLinkedExternalAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="returnFund" id="cd9d2b7a-fc7e-4857-8bd1-6bdcb8d13090"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>returnFund</con:operation><con:request name="returnFund" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="c40d5825-d71d-4e07-9581-2576baa3a60b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:returnFund>
         <returnFund>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <scheduleId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#scheduleId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#scheduleId.subscriberReferenceId}</subscriberReferenceId>
            </scheduleId>
            <!--Optional:-->
            <reasonForRefund>${#TestCase#reasonForRefund}</reasonForRefund>
         </returnFund>
      </sch:returnFund>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="fbde664e-2697-4736-9834-c766d5c5796f"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/returnFund"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateSchedule" id="a6b5b1c0-b6c9-472b-adee-fc15e117e50f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateSchedule</con:operation><con:request name="updateSchedule" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="868c6d85-8239-48a2-a2d7-8546790d4e07"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateSchedule>
         <updateScheduleRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <activity>
               <!--Optional:-->
               <bancBoxId>${#TestCase#activity.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#activity.subscriberReferenceId}</subscriberReferenceId>
            </activity>
            <rescheduleDate>${#TestCase#rescheduleDate}</rescheduleDate>
         </updateScheduleRequest>
      </sch:updateSchedule>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="69e9a47b-d417-42dc-b685-e7444abdb97f"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateScheduleRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getSchedules" id="baacf950-b97f-4673-9714-395b4edaa66f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getSchedules</con:operation><con:request name="getSchedules" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="f25de0d1-75bf-4fef-8fd0-e873d84cded2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getSchedules>
         <getSchedulesRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <!--Optional:-->
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <accountId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#accountId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#accountId.subscriberReferenceId}</subscriberReferenceId>
            </accountId>
            <!--Optional:-->
            <type>${#TestCase#type}</type>
            <!--Optional:-->
            <scheduleId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#scheduleId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#scheduleId.subscriberReferenceId}</subscriberReferenceId>
            </scheduleId>
            <!--Optional:-->
            <scheduleStartDate>${#TestCase#scheduleStartDate}</scheduleStartDate>
            <!--Optional:-->
            <scheduleEndDate>${#TestCase#scheduleEndDate}</scheduleEndDate>
            <!--Optional:-->
            <modifiedOnStartDate>${#TestCase#modifiedOnStartDate}</modifiedOnStartDate>
            <!--Optional:-->
            <modifiedOnEndDate>${#TestCase#modifiedOnEndDate}</modifiedOnEndDate>
            <!--Optional:-->
            <fromAmount>${#TestCase#fromAmount}</fromAmount>
            <!--Optional:-->
            <toAmount>${#TestCase#toAmount}</toAmount>
            <!--Optional:-->
            <method>${#TestCase#method}</method>
            <!--Optional:-->
            <status>${#TestCase#status}</status>
            <!--Optional:-->
            <order>${#TestCase#order}</order>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </getSchedulesRequest>
      </sch:getSchedules>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="57617207-9eb0-4e80-872f-5cf5a0301e0a"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getSchedules"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="cancelSchedules-COPY" id="f1601873-aa69-4a42-897e-d11fa605b1f1" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>cancelSchedules</con:operation><con:request name="cancelSchedules-COPY" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="180af800-43cf-487a-9e4a-8eb178afe6ff"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://qa-api.bancbox.com:9090/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:cancelSchedules>
         <cancelSchedulesRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <!--1 or more repetitions:-->
            <scheduleIds>
               <!--Optional:-->
               <bancBoxId>${#TestCase#scheduleIds.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#scheduleIds.subscriberReferenceId}</subscriberReferenceId>
            </scheduleIds>
         </cancelSchedulesRequest>
      </sch:cancelSchedules>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="6e8feb65-61f5-40c2-89ce-dad868058b4f"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/cancelSchedules"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="searchBancBoxPayees-OLD" id="76d10605-8fda-4e39-8157-f83388dde7f1" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>searchBancBoxPayees</con:operation><con:request name="searchBancBoxPayees-OLD" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="eed5b23d-2745-4e5b-9b1c-e4e43b9384c7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:searchBancBoxPayees>
         <searchBancBoxPayeesRequest>
            <!--Optional:-->
            <payeeName>${#TestCase#payeeName}</payeeName>
            <!--Optional:-->
            <accountNumber>${#TestCase#accountNumber}</accountNumber>
            <!--Optional:-->
            <billerClass>${#TestCase#billerClass}</billerClass>
            <!--Optional:-->
            <billerType>${#TestCase#billerType}</billerType>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </searchBancBoxPayeesRequest>
      </sch:searchBancBoxPayees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="3852c828-35f3-463a-b469-7ddb7abb983c"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/searchBancBoxPayees"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="verifyClientManually" id="e83cf1ee-de71-4486-b4c8-1b3a4a8a19c7"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>verifyClientManually</con:operation><con:request name="verifyClientManually" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="9db73e4d-40d2-4fe5-b558-eceb88acdf8f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:verifyClientManually>
         <verifyClientManually>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <status>
               <!--Optional:-->
               <newCipStatus>${#TestCase#status.newCipStatus}</newCipStatus>
               <!--Optional:-->
               <newOfacStatus>${#TestCase#status.newOfacStatus}</newOfacStatus>
            </status>
         </verifyClientManually>
      </sch:verifyClientManually>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="a4238d70-dfbe-48bb-bc31-5345084e98b7"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/verifyClientManually"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateMerchantStatus" id="ba3cc021-ebed-4e5c-9fdb-c6a6d72916b5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateMerchantStatus</con:operation><con:request name="updateMerchantStatus" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="be2d3107-287a-41d6-82bc-384bb6706751"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateMerchantStatus>
         <updateMerchantStatusRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <merchantId>${#TestCase#merchantId}</merchantId>
            <merchantStatus>${#TestCase#merchantStatus}</merchantStatus>
         </updateMerchantStatusRequest>
      </sch:updateMerchantStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="7d9baad0-244e-4528-ad8e-ee4f8e29b9b2"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateMerchantStatusRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getAccountActivity" id="a27aefa8-1e77-49a8-80e4-6c97c69c034f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getAccountActivity</con:operation><con:request name="getAccountActivity" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d5c36417-e037-4856-b6cc-601496512e48"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getAccountActivity>
         <getAccountActivityRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <accountId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#accountId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#accountId.subscriberReferenceId}</subscriberReferenceId>
            </accountId>
            <!--Optional:-->
            <fromDate>${#TestCase#fromDate}</fromDate>
            <!--Optional:-->
            <toDate>${#TestCase#toDate}</toDate>
            <!--Optional:-->
            <type>${#TestCase#type}</type>
            <!--Optional:-->
            <method>${#TestCase#method}</method>
            <!--Optional:-->
            <fromAmount>${#TestCase#fromAmount}</fromAmount>
            <!--Optional:-->
            <toAmount>${#TestCase#toAmount}</toAmount>
            <!--Optional:-->
            <status>${#TestCase#status}</status>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </getAccountActivityRequest>
      </sch:getAccountActivity>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="c510bf93-604b-43f8-bfc8-74377fc6bb56"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getAccountActivity"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="submitVerificationAnswers" id="d7dc25f2-ec01-4a9c-bfd7-971411026ca9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>submitVerificationAnswers</con:operation><con:request name="submitVerificationAnswers" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="e8b5cdf8-6eea-4e15-b638-9ec0be5a9201"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:submitVerificationAnswers>
         <submitVerificationAnswers>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <idNumber>${#TestCase#idNumber}</idNumber>
            <!--Zero or more repetitions:-->
            <answers>
               <type>${#TestCase#answers.type}</type>
               <answer>${#TestCase#answers.answer}</answer>
            </answers>
         </submitVerificationAnswers>
      </sch:submitVerificationAnswers>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="574f9df3-411f-4ffc-b290-13a8f338af22"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/submitVerificationAnswers"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateLinkedPayee" id="da5f3374-490d-4c4f-9c8a-5dff51c215c9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateLinkedPayee</con:operation><con:request name="updateLinkedPayee" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b5d0e8f4-4023-4b5c-b758-08329a0c537e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateLinkedPayee>
         <updateLinkedPayeeRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <linkedPayeeId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#linkedPayeeId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#linkedPayeeId.subscriberReferenceId}</subscriberReferenceId>
            </linkedPayeeId>
            <!--Optional:-->
            <payeeAccountNumber>${#TestCase#payeeAccountNumber}</payeeAccountNumber>
            <!--Optional:-->
            <memo>${#TestCase#memo}</memo>
            <payee>
               <!--You have a CHOICE of the next 5 items at this level-->
               
               
               
               <bancbox>
                  <bancboxPayeeId>${#TestCase#payee.bancbox.bancboxPayeeId}</bancboxPayeeId>
               </bancbox>
               
            </payee>
         </updateLinkedPayeeRequest>
      </sch:updateLinkedPayee>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="e9e5e54d-1e5c-4c89-88d7-1e52f503fd5e"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateLinkedPayee"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="AutomationScript-May26" id="61a64190-232e-41bf-87af-45ed3a12862d" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

log.info "*************************************************  STARTING CORE AUTOMATION DRIVER *************************************************";
/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/



/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}');
def TestDataFile = context.expand( '${#Project#TestDataFile}');
String APIName = context.expand( '${#Project#APIName}');
String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
log.info "		>>>>		==============================="
int Length =  TestDataFile.lastIndexOf('\\');
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResposeFileLocation = TestDataFile.substring(0,Length);

//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls";
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResponseFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
WritableSheet sheet = workbook.createSheet("Response",0);

Label label00 = new Label(0, 0, "TCID"); 
sheet.addCell(label00);

Label label01 = new Label(1, 0, "REQUEST"); 
sheet.addCell(label01);
  
Label label02 = new Label(2, 0, "RESPONSE"); 
sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();
 //log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {
//Variable to store the xPath of nodes to set to blank
List<String> xmlTagToSetBlank = new ArrayList<String>();

	 int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+setNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/

	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='null')
				{
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
	 for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
		for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
			{
				if(items in holder1.getDomNodes( "//*[normalize-space(.) = 'null'and count(*) = 0]")){

					log.info " Null Node = "+item.nodeName;
				}
				//log.info "  >>  "+holder1.getNodeValues(item.nodeName);
				log.info ">> removing :: "+ item.nodeName;
				log.info ">> removing :: "+ item.removeXobj();
				//holder1.removeDomNodes("//"+item.removeXobj())
				//log.info ">> removing :: "+item.removeXobj();
			}
		}
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }


int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
log.info "		>>>>		ArrayList Cleared";
	 holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	  if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 //holder1.updateProperty();
	 log.info "		>>>>		Final Request : " +rawReq2;
	  //log.info ">>>>    context.requestContent : " +context.requestContent
	 }
	/*****************************************************************************/


	def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);

	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	

	// def inputHolder1 = APIName+"#Request";
	// def groovyUtilOrg1 = new com.eviware.soapui.support.GroovyUtils( context )
	// originalReq1 = groovyUtilOrg1.getXmlHolder(inputHolder1);
	// rawReq = originalReq.getPrettyXml();
	
	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info " ";
	//log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq2);
	  		sheet.addCell(labelRawRequest);
	 	}
	 	else{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}
	
	  Label lableResponse = new Label(2,iCountTestCase,response);
	  sheet.addCell(lableResponse);


     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounter1;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==3)
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	


}

workbook.write();
workbook.close();

log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationScript-May27" id="cb25ccbe-2fed-46ba-a199-40f78cb0e808" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

log.info "*************************************************  STARTING CORE AUTOMATION DRIVER *************************************************";
/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/



/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}');
def TestDataFile = context.expand( '${#Project#TestDataFile}');
String APIName = context.expand( '${#Project#APIName}');
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";
log.info "		>>>>		==============================="
int Length =  TestDataFile.lastIndexOf('\\');
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResposeFileLocation = TestDataFile.substring(0,Length);

//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls";
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResponseFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
WritableSheet sheet = workbook.createSheet("Response",0);

Label label00 = new Label(0, 0, "TCID"); 
sheet.addCell(label00);

Label label01 = new Label(1, 0, "REQUEST"); 
sheet.addCell(label01);
  
Label label02 = new Label(2, 0, "RESPONSE"); 
sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();
 //log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {
//Variable to store the xPath of nodes to set to blank
List<String> xmlTagToSetBlank = new ArrayList<String>();

	 int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+setNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/

	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='null')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
	 for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
		for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
			{
				if(items in holder1.getDomNodes( "//*[normalize-space(.) = 'null'and count(*) = 0]")){

					log.info " Null Node = "+item.nodeName;
				}
				//log.info "  >>  "+holder1.getNodeValues(item.nodeName);
				log.info ">> removing :: "+ item.nodeName;
				log.info ">> removing :: "+ item.removeXobj();
				//holder1.removeDomNodes("//"+item.removeXobj());
				//holder1.removeDomNodes("//"+item.nodeName);
				//holder1.item.removeXobj();
				//holder1.removeDomNodes("//"+item.nodeName);
				
				//log.info ">> removing :: "+item.removeXobj();
			}
		}
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }


int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
log.info "		>>>>		ArrayList Cleared";
	 holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	  if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);

	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	  
	 }
	/*****************************************************************************/


	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";

def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);

	// def inputHolder1 = APIName+"#Request";
	// def groovyUtilOrg1 = new com.eviware.soapui.support.GroovyUtils( context )
	// originalReq1 = groovyUtilOrg1.getXmlHolder(inputHolder1);
	// rawReq = originalReq.getPrettyXml();
	
	def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	rawReq=holder22.getXml();
	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq2);
	  		sheet.addCell(labelRawRequest);
	 	}
	 	else{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}
	
	  Label lableResponse = new Label(2,iCountTestCase,response);
	  sheet.addCell(lableResponse);


     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounter1;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==3)
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	


}

workbook.write();
workbook.close();

log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationScript-May27-2" id="e0c1697c-f602-4c7c-bb72-10131711ecd1" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

log.info "*************************************************  STARTING CORE AUTOMATION DRIVER *************************************************";
/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/



/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}');
def TestDataFile = context.expand( '${#Project#TestDataFile}');
String APIName = context.expand( '${#Project#APIName}');
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";
log.info "		>>>>		==============================="
int Length =  TestDataFile.lastIndexOf('\\');
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResposeFileLocation = TestDataFile.substring(0,Length);

//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls";
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResponseFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
WritableSheet sheet = workbook.createSheet("Response",0);

Label label00 = new Label(0, 0, "TCID"); 
sheet.addCell(label00);

Label label01 = new Label(1, 0, "REQUEST"); 
sheet.addCell(label01);
  
Label label02 = new Label(2, 0, "RESPONSE"); 
sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();
 //log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {
//Variable to store the xPath of nodes to set to blank
List<String> xmlTagToSetBlank = new ArrayList<String>();

	 int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+setNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/

	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='null')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
	
	 for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" )){
   item.removeXobj();
   
}
	 
	 /*
	 for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
		for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
			{
				if(items in holder1.getDomNodes( "//*[normalize-space(.) = 'null'and count(*) = 0]")){

					log.info " Null Node = "+item.nodeName;
				}
				//log.info "  >>  "+holder1.getNodeValues(item.nodeName);
				log.info ">> removing :: "+ item.nodeName;
				log.info ">> removing :: "+ item.removeXobj();
				//holder1.removeDomNodes("//"+item.removeXobj())
				//log.info ">> removing :: "+item.removeXobj();
			}
		}
		*/
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }


int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
log.info "		>>>>		ArrayList Cleared";
	 holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	  if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	  
	 }
	/*****************************************************************************/


	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";

def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);

	// def inputHolder1 = APIName+"#Request";
	// def groovyUtilOrg1 = new com.eviware.soapui.support.GroovyUtils( context )
	// originalReq1 = groovyUtilOrg1.getXmlHolder(inputHolder1);
	// rawReq = originalReq.getPrettyXml();
	
	def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	rawReq=holder22.getXml();
	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq2);
	  		sheet.addCell(labelRawRequest);
	 	}
	 	else{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}
	
	  Label lableResponse = new Label(2,iCountTestCase,response);
	  sheet.addCell(lableResponse);


     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounter1;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==3)
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	


}

workbook.write();
workbook.close();

log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationScript-May28" id="c8378d82-d7ac-4c75-979b-336b3d8b2d32" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

log.info "*************************************************  STARTING CORE AUTOMATION DRIVER *************************************************";
/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/



/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}');
def TestDataFile = context.expand( '${#Project#TestDataFile}');
String APIName = context.expand( '${#Project#APIName}');
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";
log.info "		>>>>		==============================="
int Length =  TestDataFile.lastIndexOf('\\');
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResposeFileLocation = TestDataFile.substring(0,Length);

//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls";
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResponseFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
WritableSheet sheet = workbook.createSheet("Response",0);

Label label00 = new Label(0, 0, "TCID"); 
sheet.addCell(label00);

Label label01 = new Label(1, 0, "REQUEST"); 
sheet.addCell(label01);
  
Label label02 = new Label(2, 0, "RESPONSE"); 
sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();
 //log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {
//Variable to store the xPath of nodes to set to blank
List<String> xmlTagToSetBlank = new ArrayList<String>();

	 int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+setNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/

	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	/*
	 for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" )){
   item.removeXobj()
   
    for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" )){
    items.removeXobj();
    }
}*/
	 
	 /*
	 for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
		{
		for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
			{
				if(items in holder1.getDomNodes( "//*[normalize-space(.) = 'null'and count(*) = 0]")){

					log.info " Null Node = "+item.nodeName;
				}
				//log.info "  >>  "+holder1.getNodeValues(item.nodeName);
				log.info ">> removing :: "+ item.nodeName;
				log.info ">> removing :: "+ item.removeXobj();
				//holder1.removeDomNodes("//"+item.removeXobj())
				//log.info ">> removing :: "+item.removeXobj();
			}
		}
		*/
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }

/*
int sizeOfxmlTagToSetBlank=xmlTagToSetBlank.size();
log.info "		>>>>		sizeOfxmlTagToSetBlank : "+sizeOfxmlTagToSetBlank;

for(int iCountForSettingBlank=0;iCountForSettingBlank<sizeOfxmlTagToSetBlank;iCountForSettingBlank++)
{
	element = xmlTagToSetBlank.get(iCountForSettingBlank);
	log.info ">>>>		element:"+iCountForSettingBlank+" = "+element;
	holder1.setNodeValue(element,"");
	log.info "		>>>>		SET TO BLANK";
}

//clearing arrayList
xmlTagToSetBlank.clear();
*/

for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
}

holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	 
rawReq=holder1.getXml();

	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/


	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";

def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);

	// def inputHolder1 = APIName+"#Request";
	// def groovyUtilOrg1 = new com.eviware.soapui.support.GroovyUtils( context )
	// originalReq1 = groovyUtilOrg1.getXmlHolder(inputHolder1);
	// rawReq = originalReq.getPrettyXml();
	
	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//rawReq=holder1.getXml();
	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq2);
	  		sheet.addCell(labelRawRequest);
	 	}
	 	else{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}
	
	  Label lableResponse = new Label(2,iCountTestCase,response);
	  sheet.addCell(lableResponse);


     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounter1;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==3)
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	


}

workbook.write();
workbook.close();

log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="SetReqProp" id="48c62007-aaa5-43d9-88ce-0ac89d298a96" disabled="true"><con:settings/><con:config><script>String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
log.info "  >> propValue >> "+subscriberIdValue;
testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);
 //testRunner.testCase.setPropertyValue(key,value);

/*
String APIName = "updateLinkedExternalAccount";

testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200301');
testRunner.runTestStepByName(APIName);
*/</script></con:config></con:testStep><con:testStep type="request" name="Copy of createMerchant" id="351754bb-d231-4602-a144-1128cd7f8a6b" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createMerchant</con:operation><con:request name="Copy of createMerchant" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="8db41bc1-8a2d-46ba-ac11-fd87661f57a8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>AUTOMATION</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
          <createMerchantRequest> 
            <subscriberId>200300</subscriberId> 
            <firstName>Abhim</firstName> 
            <lastName>Bhati</lastName> 
            
            <!--Optional:--> 
            <email>Abhimanyu.1test@bancbox.com</email> 
            <address> 
               <address1>31 Main St.</address1> 
               <!--Optional:--> 
               <address2>451</address2> 
               <city>kol</city> 
               <state>NY</state> 
               <zipcode>11111</zipcode> 
            </address> 
            <bankBusinessAccount> 
               <routingNumber>051000017</routingNumber> 
               <accountNumber>8878787879891111</accountNumber> 
               <holderName>ABHIMANYU</holderName> 
               <bankAccountType>SAVING</bankAccountType> 
            </bankBusinessAccount> 
            <merchantDetails> 
               <merchantCategoryCode>7399</merchantCategoryCode> 
               <maxTransactionAmount>9</maxTransactionAmount> 
               <customerServiceNumber>6787678911</customerServiceNumber> 
               <!--Optional:--> 
               <amexId>2042730143</amexId> 
               
               <softDescriptor>BBXTEST</softDescriptor> 
            </merchantDetails> 
            <primaryContact> 
               <firstName>ii</firstName> 
               <lastName>yy</lastName> 
               <phone>6789879878</phone> 
               <emailAddress>Abhimanyu.1test@bancbox.com</emailAddress> 
            </primaryContact> 
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards> 
            <visaAnnualSalesVolume>500</visaAnnualSalesVolume> 
            <organizationType>CORPORATION</organizationType> 
            <!--Optional:--> 
            <taxId>wsuu33w</taxId> 
            <!--Optional:--> 
            <setAsDefaultMerchantId>true</setAsDefaultMerchantId> 
         </createMerchantRequest> 
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="341cc3ae-199c-4248-970d-ea9e149cae18"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/createMerchantRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateMerchant" id="bcd02772-e550-41ea-b08b-3880ff02b433"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateMerchant</con:operation><con:request name="updateMerchant" id="31aad6e9-1f4e-49ca-9541-f0b04a07c201"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:updateMerchant>
         <updateMerchantRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <merchantId>${#TestCase#merchantId}</merchantId>
            <!--Optional:-->
            <address>
               <address1>${#TestCase#address.address1}</address1>
               <!--Optional:-->
               <address2>${#TestCase#address.address2}</address2>
               <city>${#TestCase#address.city}</city>
               <state>${#TestCase#address.state}</state>
               <zipcode>${#TestCase#address.zipcode}</zipcode>
            </address>
            <!--Optional:-->
            <primaryContact>
               <firstName>${#TestCase#primaryContact.firstName}</firstName>
               <lastName>${#TestCase#primaryContact.lastName}</lastName>
               <phone>${#TestCase#primaryContact.phone}</phone>
               <emailAddress>${#TestCase#primaryContact.emailAddress}</emailAddress>
            </primaryContact>
            <!--Optional:-->
            <bankBusinessAccount>
               <routingNumber>${#TestCase#bankBusinessAccount.routingNumber}</routingNumber>
               <accountNumber>${#TestCase#bankBusinessAccount.accountNumber}</accountNumber>
            </bankBusinessAccount>
            <!--Optional:-->
            <merchantDetails>
               <!--Optional:-->
               <maxTransactionAmount>${#TestCase#merchantDetails.maxTransactionAmount}</maxTransactionAmount>
               <!--Optional:-->
               <customerServiceNumber>${#TestCase#merchantDetails.customerServiceNumber}</customerServiceNumber>
               <!--Optional:-->
               <amexId>${#TestCase#merchantDetails.amexId}</amexId>
               <!--Optional:-->
               <discoverId>${#TestCase#merchantDetails.discoverId}</discoverId>
               <!--Optional:-->
               <softDescriptor>${#TestCase#merchantDetails.softDescriptor}</softDescriptor>
            </merchantDetails>
            <!--Optional:-->
            <setAsDefaultMerchantId>${#TestCase#setAsDefaultMerchantId}</setAsDefaultMerchantId>
         </updateMerchantRequest>
      </sch:updateMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="c98570d5-e5d6-4d9a-ba4d-1c86ec8d18e9"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="linkExternalAccount" id="2f1ba02d-9d74-46a1-84a6-fbc299d29fdf"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>linkExternalAccount</con:operation><con:request name="linkExternalAccount" id="673f0974-fb7d-4e73-a3cc-f350f30800f9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:linkExternalAccount>
         <linkExternalAccountRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <referenceId>${#TestCase#referenceId}</referenceId>
            <account>
               <!--You have a CHOICE of the next 4 items at this level-->
               <bankAccount>
                  <routingNumber>${#TestCase#account.bankAccount.routingNumber}</routingNumber>
                  <accountNumber>${#TestCase#account.bankAccount.accountNumber}</accountNumber>
                  <holderName>${#TestCase#account.bankAccount.holderName}</holderName>
                  <bankAccountType>${#TestCase#account.bankAccount.bankAccountType}</bankAccountType>
               </bankAccount>
               <!--You have a CHOICE of the next 3 items at this level-->
            </account>
         </linkExternalAccountRequest>
      </sch:linkExternalAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="c829d561-ea63-44a9-85c8-38ae776e2454"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="searchBancboxPayees" id="e25987e4-64af-4672-bff3-210a153bf97f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>searchBancBoxPayees</con:operation><con:request name="searchBancboxPayees" id="5acf1a92-24a4-4c9b-910f-4718502edb37"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:searchBancBoxPayees>
         <searchBancBoxPayeesRequest>
            <!--Optional:-->
            
            <!--Optional:-->
            <payeeName>${#Project#subscriberId}</payeeName><accountNumber>${#TestCase#accountNumber}</accountNumber>
            <!--Optional:-->
            <billerClass>${#TestCase#billerClass}</billerClass>
            <!--Optional:-->
            <billerType>${#TestCase#billerType}</billerType>
            <!--Optional:-->
            <ascending>${#TestCase#ascending}</ascending>
            <!--Optional:-->
            <pageNo>${#TestCase#pageNo}</pageNo>
            <!--Optional:-->
            <resultsPerPage>${#TestCase#resultsPerPage}</resultsPerPage>
         </searchBancBoxPayeesRequest>
      </sch:searchBancBoxPayees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="66440c13-fd83-4a93-a366-857a25ddfe29"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createClientCOPY" id="d7e1effa-457b-4095-bf77-f2665fc59312" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createClient</con:operation><con:request name="createClientCOPY" id="0ad8962a-97ec-41cd-9e90-0bdcbbdd189f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createClient>
         <createClientRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <!--Optional:-->
            <referenceId>${#TestCase#referenceId}</referenceId>
            <!--Optional:-->
            <firstName>${#TestCase#firstName}</firstName>
            <!--Optional:-->
            <lastName>${#TestCase#lastName}</lastName>
            <middleInitial>${#TestCase#middleInitial}</middleInitial>
            <!--Optional:-->
            <!--Optional:-->
            <ssn>${#TestCase#ssn}</ssn>
            <!--Optional:-->
            <dob>${#TestCase#dob}</dob>
            <!--Optional:-->
            <address>
               <!--Optional:-->
               <line1>${#TestCase#address.line1}</line1>
               <!--Optional:-->
               <line2>${#TestCase#address.line2}</line2>
               <!--Optional:-->
               <city>${#TestCase#address.city}</city>
               <!--Optional:-->
               <state>${#TestCase#address.state}</state>
               <!--Optional:-->
               <zipcode>${#TestCase#address.zipcode}</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>${#TestCase#homePhone}</homePhone>
            <!--Optional:-->
            <mobilePhone>${#TestCase#mobilePhone}</mobilePhone>
            <!--Optional:-->
            <workPhone>${#TestCase#workPhone}</workPhone>
            <!--Optional:-->
            <email>${#TestCase#email}</email>
            <!--Optional:-->
            <username>${#TestCase#username}</username>
            <!--Optional:-->
            <merchantId>${#TestCase#merchantId}</merchantId>
         </createClientRequest>
      </sch:createClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="schema.bancbox.com/BBX/createClient" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="collectFunds-BACKUP" id="e8baf261-dfc6-4916-91e1-59c98ab1f8f4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>collectFunds</con:operation><con:request name="collectFunds-BACKUP" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b8319ee8-3ecc-4749-a2e0-cacf5f79be47"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@expand-mtom-attachments">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@inline-response-attachments">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>${#Project#subscriberId}</subscriberId>
            <!--Optional:-->
            <!--Optional:-->
            <method>
               <!--You have a CHOICE of the next 3 items at this level-->
               <ach/>
               <book/>
               <creditcard/>
            </method>
            <source>
               <!--You have a CHOICE of the next 3 items at this level-->
               <linkedExternalAccountId>
                  <!--Optional:-->
                  <bancBoxId>${#TestCase#source.linkedExternalAccountId.bancBoxId}</bancBoxId>
                  <!--Optional:-->
               </linkedExternalAccountId>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account>
                  <!--Optional:-->
                  <bancBoxId>${#TestCase#destinationAccount.account.bancBoxId}</bancBoxId>
                  <!--Optional:-->
               </account>
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               <amount>${#TestCase#items.amount}</amount>
               <!--Optional:-->
               <memo>${#TestCase#items.memo}</memo>
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="652896c7-f5f2-49ff-91d8-560e39603127"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/collectFunds"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientLinkedPayeesCOPY" id="c171445c-2158-4850-b49b-a48626f3e113"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getClientLinkedPayees</con:operation><con:request name="getClientLinkedPayeesCOPY" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="6d785118-67d1-4601-9605-7027081e6943"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:sch="schema.bancbox.com">
    <soapenv:Header>
       <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
    </soapenv:Header>
   <soapenv:Body>
      <sch:getClientLinkedPayees>
         <getClientLinkedPayeesRequest>
            <subscriberId>200070</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>158991</bancBoxId>
            </clientId>
            <!--Optional:-->
            <ascending>false</ascending>
            <!--Optional:-->
            <pageNo>1</pageNo>
            <!--Optional:-->
            <resultsPerPage>100</resultsPerPage>
         </getClientLinkedPayeesRequest>
      </sch:getClientLinkedPayees>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="d9b2a419-e5c2-477f-a497-80d1841092e7"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClientLinkedPayees"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>subscriberId</con:name><con:value>200300</con:value></con:property><con:property><con:name>firstName</con:name><con:value>Testingabcd</con:value></con:property><con:property><con:name>lastName</con:name><con:value>ab</con:value></con:property><con:property><con:name>ssn</con:name><con:value>121-22-8173</con:value></con:property><con:property><con:name>dob</con:name><con:value>1978-10-19</con:value></con:property><con:property><con:name>email</con:name><con:value>mehak+003@bancbox.com</con:value></con:property><con:property><con:name>address.address1</con:name><con:value>add 222334</con:value></con:property><con:property><con:name>address.address2</con:name><con:value/></con:property><con:property><con:name>address.city</con:name><con:value>Atlanta</con:value></con:property><con:property><con:name>address.state</con:name><con:value>GA</con:value></con:property><con:property><con:name>address.zipcode</con:name><con:value>30318</con:value></con:property><con:property><con:name>bankBusinessAccount.routingNumber</con:name><con:value>051000017</con:value></con:property><con:property><con:name>bankBusinessAccount.accountNumber</con:name><con:value>5302551000011110</con:value></con:property><con:property><con:name>bankBusinessAccount.holderName</con:name><con:value>MEHAK</con:value></con:property><con:property><con:name>bankBusinessAccount.bankAccountType</con:name><con:value>SAVING</con:value></con:property><con:property><con:name>merchantDetails.merchantCategoryCode</con:name><con:value>7399</con:value></con:property><con:property><con:name>merchantDetails.maxTransactionAmount</con:name><con:value>100000</con:value></con:property><con:property><con:name>merchantDetails.customerServiceNumber</con:name><con:value>6787678911</con:value></con:property><con:property><con:name>merchantDetails.amexId</con:name><con:value/></con:property><con:property><con:name>merchantDetails.discoverId</con:name><con:value/></con:property><con:property><con:name>merchantDetails.softDescriptor</con:name><con:value>create</con:value></con:property><con:property><con:name>primaryContact.firstName</con:name><con:value>mhk</con:value></con:property><con:property><con:name>primaryContact.lastName</con:name><con:value>verma</con:value></con:property><con:property><con:name>primaryContact.phone</con:name><con:value>9987654390</con:value></con:property><con:property><con:name>primaryContact.emailAddress</con:name><con:value>mehak@bancbox.com</con:value></con:property><con:property><con:name>hasAcceptedCreditCards</con:name><con:value>false</con:value></con:property><con:property><con:name>visaAnnualSalesVolume</con:name><con:value>400</con:value></con:property><con:property><con:name>organizationType</con:name><con:value>INDIVIDUAL_SOLE_PROPRIETORSHIP</con:value></con:property><con:property><con:name>taxId</con:name><con:value>taxId7951</con:value></con:property><con:property><con:name>setAsDefaultMerchantId</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>39dbd4e0-a8d4-407b-bd2f-0fef14879517</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>368b3277-4d14-40f3-ba8f-bdd83bfce127</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55fcc022-ef0d-42f2-b48b-9e6f707cb335</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>00f59fc2-68c9-4118-987e-913e3a363ddf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e9e788a-2691-4598-bdac-7b47ff1b1b70</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>493d1746-dc21-4641-8322-533a0360b1ea</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1198f965-967e-49d1-8470-a1566605947e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dc0da0b8-bbb9-4b87-9ac3-425fe4b7d0b2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fe99af80-502f-44c1-a450-5352cb8e9318</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>19e8530f-41ce-43f7-8b79-e0c046b5aec5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0da2b8f3-6fc3-4d69-98d3-9c65a5af566c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c93642-19cc-46ee-8f6e-a0abec999007</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b4f353b8-1bc5-4342-a9f6-ee23d46e1e3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf76670e-1506-49eb-911d-5ffc8c480035</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15ef7933-35c3-416a-8f4c-25b6ee889457</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d64d607c-c94e-481a-82b8-cc1642746091</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f04b781-420d-455b-a039-b23990dce631</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c9a22e1b-6bfe-4f52-8499-c74c93a08424</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f2201d3a-dca9-46c0-91cd-14d797db705d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>beefb75a-26b8-4f31-9b8d-084f7251ed38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cd6fe866-e9e1-4b62-9852-33bc696fa574</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b94fe2b6-6e18-4cbc-8924-22756e6f7d38</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d700254f-760b-48ae-9b5b-c9328cc665d2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>587e13cd-4935-4e36-8c67-4c11a3f0f2b0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>48ec0714-4465-4c8c-b65f-373db05081ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d4f70509-40b6-4bfc-bb3f-76ddae4c9f37</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9946f9a7-7646-43a3-901b-972a0778ff86</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="BVT_CC" searchProperties="true" id="dce1c7a2-2a3d-49b4-900b-a3eb78cd0567"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="datasource" name="DataSource1" id="71b3f5ad-90d8-4b31-b692-a4ed362fed00"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file/><worksheet>Sheet1</worksheet><cell>A2</cell><ignoreEmpty>false</ignoreEmpty></con:configuration></con:dataSource><con:property>subscriberId</con:property><con:property>createMerchant.ssn</con:property><con:property>createMechant.dob</con:property><con:property>createMerchant.taxId</con:property><con:property>createClient.referenceId</con:property><con:property>createClient.username</con:property><con:property>openAccount.referenceId</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="request" name="createMerchant" id="ce0adc2d-0b41-4fa7-b214-575b1f9d3451"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createMerchant</con:operation><con:request name="createMerchant" id="2aeabaaa-3449-4df1-8ac6-671193af64a9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>${DataSource1#subscriberId}</subscriberId>
            <firstName>Testingabcd</firstName>
            <lastName>ab</lastName>
            <!--Optional:-->
            <ssn>${DataSource1#createMerchant.ssn}</ssn>
            <!--Optional:-->
            <dob>${DataSource1#createMechant.dob}</dob>
            <!--Optional:-->
            <email>mehak+003@bancbox.com</email>
            <address>
               <address1>add 222334</address1>
               <!--Optional:-->
               <address2>Peach Tree</address2>
               <city>Atlanta</city>
               <state>GA</state>
               <zipcode>30318</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber>051000017</routingNumber>
               <accountNumber>5302551000011110</accountNumber>
               <holderName>MEHAK</holderName>
               <bankAccountType>SAVING</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>7399</merchantCategoryCode>
               <maxTransactionAmount>100000</maxTransactionAmount>
               <customerServiceNumber>6787678911</customerServiceNumber>
               <!--Optional:-->
               <amexId></amexId>
               <!--Optional:-->
               <discoverId></discoverId>
               <softDescriptor>create</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>mhk</firstName>
               <lastName>verma</lastName>
               <phone>9987654390</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>400</visaAnnualSalesVolume>
            <organizationType>INDIVIDUAL_SOLE_PROPRIETORSHIP</organizationType>
            <!--Optional:-->
            <taxId>${DataSource1#createMerchant.taxId}</taxId>
            <!--Optional:-->
            <setAsDefaultMerchantId>false</setAsDefaultMerchantId>
         </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e303aa3d-20a2-4144-bddd-70c22dba4f0c"/><con:assertion type="XPath Match" name="Match content of [status]" id="8e449905-eca4-4063-9609-b87cd032c7c9"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:createMerchantResponse[1]/createMerchantResponse[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateMerchant" id="2da35adb-a37d-466e-8c9f-3579e9641302"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateMerchant</con:operation><con:request name="updateMerchant" id="b6cc5f8c-6510-499f-b740-d2efc3a8102e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:updateMerchant>
         <updateMerchantRequest>
            <subscriberId>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/subscriberId[1]}</subscriberId>
            <merchantId>${createMerchant#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createMerchantResponse[1]/createMerchantResponse[1]/merchantId[1]}</merchantId>
            <!--Optional:-->
            <address>
               <address1>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/address1[1]}</address1>
               <!--Optional:-->
               <address2>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/address2[1]}</address2>
               <city>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/city[1]}</city>
               <state>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/state[1]}</state>
               <zipcode>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/zipcode[1]}</zipcode>
            </address>
            <!--Optional:-->
            <primaryContact>
               <firstName>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/firstName[1]}</firstName>
               <lastName>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/lastName[1]}</lastName>
               <phone>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/primaryContact[1]/phone[1]}</phone>
               <emailAddress>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/primaryContact[1]/emailAddress[1]}</emailAddress>
            </primaryContact>
            <!--Optional:-->
            <bankBusinessAccount>
               <routingNumber>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/bankBusinessAccount[1]/routingNumber[1]}</routingNumber>
               <accountNumber>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/bankBusinessAccount[1]/accountNumber[1]}</accountNumber>
            </bankBusinessAccount>
            <!--Optional:-->
            <merchantDetails>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               <softDescriptor>updated</softDescriptor>
            </merchantDetails>
            <!--Optional:-->
            <setAsDefaultMerchantId>false</setAsDefaultMerchantId>
         </updateMerchantRequest>
      </sch:updateMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="89081bba-5bfa-4c14-b748-166d37ce8ca1"/><con:assertion type="XPath Match" name="Match content of [status]" id="8bae3319-776f-4d6b-a814-c4bbd861565f"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:updateMerchantResponse[1]/updateMerchantResponse[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createClient" id="5026afa5-a4f0-49f6-ba00-32ae93037fa1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createClient</con:operation><con:request name="createClient" id="8ceb1fe7-7c99-4afb-8cfc-7ce3ce3505d9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:createClient>
         <createClientRequest>
            <subscriberId>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <referenceId>${DataSource1#createClient.referenceId}</referenceId><firstName>JOHN</firstName>
            <!--Optional:-->
            <lastName>SMITH</lastName>
            <!--Optional:-->
            <middleInitial>M</middleInitial>
            <!--Optional:-->
            <ssn>112-22-3333</ssn>
            <!--Optional:-->
            <dob>1975-02-28</dob>
            <!--Optional:-->
            <address>
               <!--Optional:-->
               <line1>222333</line1>
               <!--Optional:-->
               <line2>Peach Place Tree</line2>
               <!--Optional:-->
               <city>Atlanta</city>
               <!--Optional:-->
               <state>GA</state>
               <!--Optional:-->
               <zipcode>30318</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>1234567890</homePhone>
            <!--Optional:-->
            <mobilePhone>1234567890</mobilePhone>
            <!--Optional:-->
            <workPhone>3606997616</workPhone>
            <!--Optional:-->
            <email>mehak+8899@bancbox.com</email>
            <!--Optional:-->
            
            <!--Optional:-->
            <username>${DataSource1#createClient.username}</username><merchantId>${createMerchant#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createMerchantResponse[1]/createMerchantResponse[1]/merchantId[1]}</merchantId>
         </createClientRequest>
      </sch:createClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="Simple Contains" name="Contains" id="e72a9ea8-87d1-438e-bfec-d08617f2bd77"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]" id="9e85a42f-c615-41a6-97ea-6217e93e148b"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:createClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]" id="1a19b05e-3c4b-4055-99b7-36a79d3775b7"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:createClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="schema.bancbox.com/BBX/createClient" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateClient" id="d7e55cb0-e952-41a8-b87e-bde1e8d506f3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateClient</con:operation><con:request name="updateClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="a7254f92-45b3-45f0-bd06-072adaeab703"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:updateClient>
         <updateClientRequest>
            <subscriberId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/subscriberId[1]}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/bancBoxId[1]}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/subscriberReferenceId[1]}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <merchantId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/merchantId[1]}</merchantId>
            <!--Optional:-->
            <firstName>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/firstName[1]}</firstName>
            <!--Optional:-->
            <lastName>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/lastName[1]}</lastName>
            <!--Optional:-->
            <middleInitial>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/middleInitial[1]}</middleInitial>
            <!--Optional:-->
            <ssn>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/ssn[1]}</ssn>
            <!--Optional:-->
            <dob>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/dob[1]}</dob>
            <!--Optional:-->
            <address>
               <line1>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/line1[1]}</line1>
               <!--Optional:-->
               <line2>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/line2[1]}</line2>
               <city>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/city[1]}</city>
               <state>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/state[1]}</state>
               <zipcode>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/zipcode[1]}</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/homePhone[1]}</homePhone>
            <!--Optional:-->
            <mobilePhone>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/mobilePhone[1]}</mobilePhone>
            <!--Optional:-->
            <workPhone>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/workPhone[1]}</workPhone>
            <!--Optional:-->
            <email>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/email[1]}</email>
            <!--Optional:-->
            <username></username>
         </updateClientRequest>
      </sch:updateClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="3d936949-aa2b-442a-a41d-1c541be4d210"/><con:assertion type="XPath Match" name="Match content of [status]" id="c94c785b-558c-4c46-8fcd-4d3bc23c7d7f"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:updateClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="verifyClient" id="afa46a0f-dceb-47f0-8d42-76a4026e43d0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>verifyClient</con:operation><con:request name="verifyClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="633bd265-444d-4c55-b487-9ca7bafb1e0b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:verifyClient>
         <verifyClient>
            <subscriberId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            <clientId>
               <!--Optional:-->
               <bancBoxId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/bancBoxId[1]}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/subscriberReferenceId[1]}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <generateQuestions>false</generateQuestions>
         </verifyClient>
      </sch:verifyClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="99dce28e-dbc1-404c-87b9-301c25cecb86"/><con:assertion type="XPath Match" name="Match content of [status]" id="1a24d497-1ea0-44dc-ae9d-e9536e186cca"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:verifyClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]" id="3f9c1c66-580d-4c35-a547-1ed25fc70e13"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:verifyClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/verifyClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="openAccount" id="a828a5ba-ab00-4086-8b37-e4adf8f65d0a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>openAccount</con:operation><con:request name="openAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="5cb919fe-5100-41a9-9a25-2da701fb14ed"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:openAccount>
         <openAccountRequest>
            <subscriberId>${verifyClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:verifyClient[1]/verifyClient[1]/subscriberId[1]}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${verifyClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:verifyClient[1]/verifyClient[1]/clientId[1]/bancBoxId[1]}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${verifyClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:verifyClient[1]/verifyClient[1]/clientId[1]/subscriberReferenceId[1]}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            
            <!--Optional:-->
            
            <!--Optional:-->
            <referenceId>${DataSource1#openAccount.referenceId}</referenceId><accountType>GENERAL</accountType>
            <!--Optional:-->
            <routable>
               <!--Optional:-->
               <credits>YES</credits>
               <!--Optional:-->
               <debits>YES</debits>
            </routable>
            <!--Optional:-->
            
         </openAccountRequest>
      </sch:openAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="be670eb5-9ca4-45fa-a41d-a50546e50cf4"/><con:assertion type="XPath Match" name="Match content of [status]" id="c6611729-e2c9-4710-9cdd-9afebef044e6"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:openAccountResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/openAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="collectFunds1" id="d88d13e7-673b-44a9-bab1-84c4de61aa47"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>collectFunds</con:operation><con:request name="collectFunds1" id="4ad88e24-a223-4ad1-a2bf-8df0e3a0bdb3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>${openAccount#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:openAccount[1]/openAccountRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <merchantId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/merchantId[1]}</merchantId>
               <method>
               <creditcard/>
               <!--You have a CHOICE of the next 3 items at this level-->
              
            </method>
            
               <source>
               <newExternalAccount><account><!--You have a CHOICE of the next 2 items at this level-->
                    
                     <creditCardAccount><!--You have a CHOICE of the next 2 items at this level-->
                        
                        <cardNotPresent><!--You have a CHOICE of the next 2 items at this level-->
                           
                           <creditCardDetails>
                              <number>5205277388152676</number>
                              <expiryDate>01/19</expiryDate>
                              <type>MASTERCARD</type>
                              <name>John Smith</name>
                              <cvv>349</cvv>
                              <address>
                                 <line1>2234</line1>
                                 <!--Optional:-->
                                 <line2>Peach Tree</line2>
                                 <city>ATLANTA</city>
                                 <state>GA</state>
                                 <zipcode>54321</zipcode>
                                 <!--Optional:-->
                                 
                              </address>
                              <!--Optional:-->
                            
                           </creditCardDetails>
                        </cardNotPresent>
                     </creditCardAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account><!--Optional:-->
                  <bancBoxId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/bancBoxId[1]}</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/subscriberReferenceId[1]}</subscriberReferenceId>
               </account>
              
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               
               <amount>1</amount>
               <!--Optional:-->
               
               <!--Optional:-->
              
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="26a869e8-676f-4cde-9881-3f4cffc5cb69"/><con:assertion type="XPath Match" name="Match content of [status]" id="5e4f445a-d501-47d7-be4a-0c03bb2047b9"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:collectFundsResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert node [itemStatus]" id="7341b937-cd3b-4347-84c3-1eea1a588e6a"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns1"] = "schema.bancbox.com"
def node = holder.getDomNode( "//ns1:collectFundsResponse[1]/return[1]/itemStatuses[1]/itemStatus[1]" )

assert node != null
</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [itemStatus]" id="5e1f60fd-2d00-42b2-a631-6619719fa28c"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:collectFundsResponse[1]/return[1]/itemStatuses[1]/itemStatus[1]/text()</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="collectFunds2" id="089c55f5-4aa6-4dd6-add7-5ed6ad7147ad"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>collectFunds</con:operation><con:request name="collectFunds2" id="17bc5907-0720-4598-bf72-6e4fd3b97552"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>${openAccount#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:openAccount[1]/openAccountRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <merchantId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/merchantId[1]}</merchantId>
               <method>
               <creditcard/>
               <!--You have a CHOICE of the next 3 items at this level-->
              
            </method>
            
               <source>
               <newExternalAccount><account><!--You have a CHOICE of the next 2 items at this level-->
                    
                     <creditCardAccount><!--You have a CHOICE of the next 2 items at this level-->
                        
                        <cardNotPresent><!--You have a CHOICE of the next 2 items at this level-->
                           
                           <creditCardDetails>
                              <number>5205277388152676</number>
                              <expiryDate>01/19</expiryDate>
                              <type>MASTERCARD</type>
                              <name>John Smith</name>
                              <cvv>349</cvv>
                              <address>
                                 <line1>2234</line1>
                                 <!--Optional:-->
                                 <line2>Peach Tree</line2>
                                 <city>ATLANTA</city>
                                 <state>GA</state>
                                 <zipcode>54321</zipcode>
                                 <!--Optional:-->
                                 
                              </address>
                              <!--Optional:-->
                            
                           </creditCardDetails>
                        </cardNotPresent>
                     </creditCardAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account><!--Optional:-->
                  <bancBoxId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/bancBoxId[1]}</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/subscriberReferenceId[1]}</subscriberReferenceId>
               </account>
              
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               
               <amount>1</amount>
               <!--Optional:-->
               
               <!--Optional:-->
              
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a8a6f593-d54b-4a51-8d49-8f3bbd2f59e4"/><con:assertion type="XPath Match" name="Match content of [itemStatus]" id="91f04727-01c1-49b1-9b70-56dc33ed5231"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:collectFundsResponse[1]/return[1]/itemStatuses[1]/itemStatus[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]" id="4b8f4844-19ff-47d6-9656-4a6947a91227"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:collectFundsResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="changeParams" id="117c9dd3-c317-4d89-aab7-bb315590898c"><con:settings/><con:config><script>import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

TestDataFile="C:\\Users\\mehak90\\Desktop\\BVT\\BVT_CC.xls";
Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));


TestDataWB.close();</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>ce0adc2d-0b41-4fa7-b214-575b1f9d3451</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2da35adb-a37d-466e-8c9f-3579e9641302</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d7e55cb0-e952-41a8-b87e-bde1e8d506f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71b3f5ad-90d8-4b31-b692-a4ed362fed00</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="BVT_token" searchProperties="true" id="9c3a31f1-d219-4550-b21a-568e74fe28c2"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="datasource" name="DataSource1" id="fefaeaa8-87c2-4d37-8a5c-d417d159a767"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file/><worksheet>Sheet1</worksheet><cell>A2</cell><ignoreEmpty>false</ignoreEmpty></con:configuration></con:dataSource><con:property>subscriberId</con:property><con:property>createMerchant.ssn</con:property><con:property>createMechant.dob</con:property><con:property>createMerchant.taxId</con:property><con:property>createClient.referenceId</con:property><con:property>createClient.username</con:property><con:property>openAccount.referenceId</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop1" disabled="true" id="f3b80493-31c4-4341-9255-d9b2103d57b4"><con:settings/><con:config><dataSourceStep>DataSource1</dataSourceStep><targetStep>createMerchant</targetStep></con:config></con:testStep><con:testStep type="request" name="createMerchant" id="6b7f0a53-a712-457b-9a31-7b221eab3668"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createMerchant</con:operation><con:request name="createMerchant" id="82e095df-5077-4fa3-9e86-c7130d6bd670"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>${DataSource1#subscriberId}</subscriberId>
            <firstName>Testingabcd</firstName>
            <lastName>ab</lastName>
            <!--Optional:-->
            <ssn>${DataSource1#createMerchant.ssn}</ssn>
            <!--Optional:-->
            <dob>${DataSource1#createMechant.dob}</dob>
            <!--Optional:-->
            <email>mehak+003@bancbox.com</email>
            <address>
               <address1>add 222334</address1>
               <!--Optional:-->
               <address2>Peach Tree</address2>
               <city>Atlanta</city>
               <state>GA</state>
               <zipcode>30318</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber>051000017</routingNumber>
               <accountNumber>5302551000011110</accountNumber>
               <holderName>MEHAK</holderName>
               <bankAccountType>SAVING</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>7399</merchantCategoryCode>
               <maxTransactionAmount>100000</maxTransactionAmount>
               <customerServiceNumber>6787678911</customerServiceNumber>
               <!--Optional:-->
               <amexId></amexId>
               <!--Optional:-->
               <discoverId></discoverId>
               <softDescriptor>create</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>mhk</firstName>
               <lastName>verma</lastName>
               <phone>9987654390</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>400</visaAnnualSalesVolume>
            <organizationType>INDIVIDUAL_SOLE_PROPRIETORSHIP</organizationType>
            <!--Optional:-->
            <taxId>${DataSource1#createMerchant.taxId}</taxId>
            <!--Optional:-->
            <setAsDefaultMerchantId>false</setAsDefaultMerchantId>
         </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a235bb1c-a08e-4954-a97d-9b39e22f2ea8"/><con:assertion type="XPath Match" name="Match content of [status]" id="7de6220e-ec53-4dc6-b59f-b92c57a2e47f"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:createMerchantResponse[1]/createMerchantResponse[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateMerchant" id="5bb13ff4-fb12-47db-9424-d5fd6f0ef22e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateMerchant</con:operation><con:request name="updateMerchant" id="cbc7594a-16e7-4733-9159-860c704e6ff3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:updateMerchant>
         <updateMerchantRequest>
            <subscriberId>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/subscriberId[1]}</subscriberId>
            <merchantId>${createMerchant#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createMerchantResponse[1]/createMerchantResponse[1]/merchantId[1]}</merchantId>
            <!--Optional:-->
            <address>
               <address1>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/address1[1]}</address1>
               <!--Optional:-->
               <address2>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/address2[1]}</address2>
               <city>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/city[1]}</city>
               <state>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/state[1]}</state>
               <zipcode>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/address[1]/zipcode[1]}</zipcode>
            </address>
            <!--Optional:-->
            <primaryContact>
               <firstName>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/firstName[1]}</firstName>
               <lastName>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/lastName[1]}</lastName>
               <phone>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/primaryContact[1]/phone[1]}</phone>
               <emailAddress>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/primaryContact[1]/emailAddress[1]}</emailAddress>
            </primaryContact>
            <!--Optional:-->
            <bankBusinessAccount>
               <routingNumber>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/bankBusinessAccount[1]/routingNumber[1]}</routingNumber>
               <accountNumber>${createMerchant#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createMerchant[1]/createMerchantRequest[1]/bankBusinessAccount[1]/accountNumber[1]}</accountNumber>
            </bankBusinessAccount>
            <!--Optional:-->
            <merchantDetails>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               <softDescriptor>updated</softDescriptor>
            </merchantDetails>
            <!--Optional:-->
            <setAsDefaultMerchantId>false</setAsDefaultMerchantId>
         </updateMerchantRequest>
      </sch:updateMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="6d412eb4-6d1b-49b7-8cfe-1c130979192b"/><con:assertion type="XPath Match" name="Match content of [status]" id="51f1448e-cccb-400a-8112-a0a60da4f2de"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:updateMerchantResponse[1]/updateMerchantResponse[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createClient" id="34d50f3c-7ee0-4ada-a40d-8367051b9de1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createClient</con:operation><con:request name="createClient" id="5420837e-bbe4-4d57-8971-d5b407c0c85a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:createClient>
         <createClientRequest>
            <subscriberId>200300</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <referenceId>${DataSource1#createClient.referenceId}</referenceId><firstName>JOHN</firstName>
            <!--Optional:-->
            <lastName>SMITH</lastName>
            <!--Optional:-->
            <middleInitial>M</middleInitial>
            <!--Optional:-->
            <ssn>112-22-3333</ssn>
            <!--Optional:-->
            <dob>1975-02-28</dob>
            <!--Optional:-->
            <address>
               <!--Optional:-->
               <line1>222333</line1>
               <!--Optional:-->
               <line2>Peach Place Tree</line2>
               <!--Optional:-->
               <city>Atlanta</city>
               <!--Optional:-->
               <state>GA</state>
               <!--Optional:-->
               <zipcode>30318</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>1234567890</homePhone>
            <!--Optional:-->
            <mobilePhone>1234567890</mobilePhone>
            <!--Optional:-->
            <workPhone>3606997616</workPhone>
            <!--Optional:-->
            <email>mehak+8899@bancbox.com</email>
            <!--Optional:-->
            
            <!--Optional:-->
            <username>${DataSource1#createClient.username}</username><merchantId>${createMerchant#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createMerchantResponse[1]/createMerchantResponse[1]/merchantId[1]}</merchantId>
         </createClientRequest>
      </sch:createClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="Simple Contains" name="Contains" id="24adb18d-c6f5-4bd3-aef9-1cb664972dcf"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]" id="c6ebf146-c2cc-4e01-ad74-1166b7f9b1be"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:createClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]" id="0a40bfa7-7958-4cb8-91b4-3347ef2b0663"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:createClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="schema.bancbox.com/BBX/createClient" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateClient" id="d2026856-789e-4b12-9e08-f9870db857f0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>updateClient</con:operation><con:request name="updateClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="0a922684-8817-47e3-8b27-476dbaba942f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:updateClient>
         <updateClientRequest>
            <subscriberId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/subscriberId[1]}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/bancBoxId[1]}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/subscriberReferenceId[1]}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <merchantId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/merchantId[1]}</merchantId>
            <!--Optional:-->
            <firstName>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/firstName[1]}</firstName>
            <!--Optional:-->
            <lastName>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/lastName[1]}</lastName>
            <!--Optional:-->
            <middleInitial>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/middleInitial[1]}</middleInitial>
            <!--Optional:-->
            <ssn>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/ssn[1]}</ssn>
            <!--Optional:-->
            <dob>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/dob[1]}</dob>
            <!--Optional:-->
            <address>
               <line1>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/line1[1]}</line1>
               <!--Optional:-->
               <line2>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/line2[1]}</line2>
               <city>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/city[1]}</city>
               <state>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/state[1]}</state>
               <zipcode>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/address[1]/zipcode[1]}</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/homePhone[1]}</homePhone>
            <!--Optional:-->
            <mobilePhone>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/mobilePhone[1]}</mobilePhone>
            <!--Optional:-->
            <workPhone>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/workPhone[1]}</workPhone>
            <!--Optional:-->
            <email>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/email[1]}</email>
            <!--Optional:-->
            <username></username>
         </updateClientRequest>
      </sch:updateClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="f119e020-9245-45d5-bb2e-c1ec8883bdcf"/><con:assertion type="XPath Match" name="Match content of [status]" id="0f9982e1-4765-445d-812c-2d12ad744d93"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:updateClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/updateClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="verifyClient" id="497d8fb6-0b68-4e49-b695-723020417fc5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>verifyClient</con:operation><con:request name="verifyClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="1a3c5077-a36c-47cc-b0cd-55c7fb412eca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:verifyClient>
         <verifyClient>
            <subscriberId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            <clientId>
               <!--Optional:-->
               <bancBoxId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/bancBoxId[1]}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/subscriberReferenceId[1]}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <generateQuestions>false</generateQuestions>
         </verifyClient>
      </sch:verifyClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="27dbc0a0-bf51-4757-9b14-e4dfeedc6d15"/><con:assertion type="XPath Match" name="Match content of [status]" id="1066fa86-c3d4-45ca-8cb7-10a12c4c8d4d"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:verifyClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]" id="819c92f6-390b-483f-8b7c-c6515e6301cb"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:verifyClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/verifyClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="openAccount" id="e3e90dcb-a0b8-4aa8-8ee1-a2c3519def98"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>openAccount</con:operation><con:request name="openAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b6d00803-ff62-4141-ba71-5aa4fabb63a6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:openAccount>
         <openAccountRequest>
            <subscriberId>${verifyClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:verifyClient[1]/verifyClient[1]/subscriberId[1]}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${verifyClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:verifyClient[1]/verifyClient[1]/clientId[1]/bancBoxId[1]}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${verifyClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:verifyClient[1]/verifyClient[1]/clientId[1]/subscriberReferenceId[1]}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            
            <!--Optional:-->
            
            <!--Optional:-->
            <referenceId>${DataSource1#openAccount.referenceId}</referenceId><accountType>GENERAL</accountType>
            <!--Optional:-->
            <routable>
               <!--Optional:-->
               <credits>YES</credits>
               <!--Optional:-->
               <debits>YES</debits>
            </routable>
            <!--Optional:-->
            
         </openAccountRequest>
      </sch:openAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="8629b5fc-b938-40b8-8ec9-4838bb2c7e98"/><con:assertion type="XPath Match" name="Match content of [status]" id="c2a6e56f-f3c2-491f-ae39-e34659cfb779"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:openAccountResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/openAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="collectFunds1" id="44324af9-fd34-4d69-a70d-5c7c475495c1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>collectFunds</con:operation><con:request name="collectFunds1" id="71ba847f-4f1f-42fb-85c8-45d7afd7d4a2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:collectFunds>
         <collectFundsRequest>
            <subscriberId>${openAccount#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:openAccount[1]/openAccountRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <merchantId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/merchantId[1]}</merchantId>
               <method>
               <creditcard/>
               <!--You have a CHOICE of the next 3 items at this level-->
              
            </method>
            
               <source>
               <newExternalAccount><account><!--You have a CHOICE of the next 2 items at this level-->
                    
                     <creditCardAccount><!--You have a CHOICE of the next 2 items at this level-->
                        
                        <cardNotPresent><!--You have a CHOICE of the next 2 items at this level-->
                           
                           <creditCardDetails>
                              <number>5205277388152676</number>
                              <expiryDate>01/19</expiryDate>
                              <type>MASTERCARD</type>
                              <name>John Smith</name>
                              <cvv>349</cvv>
                              <address>
                                 <line1>2234</line1>
                                 <!--Optional:-->
                                 <line2>Peach Tree</line2>
                                 <city>ATLANTA</city>
                                 <state>GA</state>
                                 <zipcode>54321</zipcode>
                                 <!--Optional:-->
                                 
                              </address>
                              <!--Optional:-->
                            
                           </creditCardDetails>
                        </cardNotPresent>
                     </creditCardAccount>
                  </account>
               </newExternalAccount>
            </source>
            <destinationAccount>
               <!--You have a CHOICE of the next 2 items at this level-->
               <account><!--Optional:-->
                  <bancBoxId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/bancBoxId[1]}</bancBoxId>
                  <!--Optional:-->
                  <subscriberReferenceId>${openAccount#Response#declare namespace ns1='schema.bancbox.com'; //ns1:openAccountResponse[1]/return[1]/account[1]/id[1]/subscriberReferenceId[1]}</subscriberReferenceId>
               </account>
              
            </destinationAccount>
            <!--1 or more repetitions:-->
            <items>
               <!--Optional:-->
               
               <amount>1</amount>
               <!--Optional:-->
               
               <!--Optional:-->
              
            </items>
         </collectFundsRequest>
      </sch:collectFunds>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="63b87951-3ada-4422-8e1a-8cdb677dd605"/><con:assertion type="XPath Match" name="Match content of [itemStatus]" id="06d2bd4d-f47c-4cf9-9e8a-48eb21f9dcf0"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:collectFundsResponse[1]/return[1]/itemStatuses[1]/itemStatus[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]" id="c9d4237c-6666-4244-a23a-891ab13a3a63"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:collectFundsResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>ce0adc2d-0b41-4fa7-b214-575b1f9d3451</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2da35adb-a37d-466e-8c9f-3579e9641302</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d7e55cb0-e952-41a8-b87e-bde1e8d506f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71b3f5ad-90d8-4b31-b692-a4ed362fed00</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ScenarioTest" searchProperties="true" id="e2cfe9e9-64bc-45e2-91a0-a82cd74bda4f"><con:settings/><con:testStep type="groovy" name="AutomationDriver-July9" id="5d1a9cda-bbd6-4385-9412-14ec179cc795" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

log.info "*************************************************  STARTING CORE AUTOMATION DRIVER *************************************************";
/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}');
def TestDataFile = context.expand( '${#Project#TestDataFile}');
String APIName = context.expand( '${#Project#APIName}');
String ScenarioFileLocation=('${#Project#ScenarioFileLocation}');

log.info "=====================ScenarioFileLocation : "+ScenarioFileLocation
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";
log.info "		>>>>		==============================="
int Length =  TestDataFile.lastIndexOf('\\');
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResposeFileLocation = TestDataFile.substring(0,Length);

//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls";
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResponseFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
WritableSheet sheet = workbook.createSheet("Response",0);

Label label00 = new Label(0, 0, "TCID"); 
sheet.addCell(label00);

Label label01 = new Label(1, 0, "REQUEST"); 
sheet.addCell(label01);
  
Label label02 = new Label(2, 0, "RESPONSE"); 
sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();
 //log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {
//Variable to store the xPath of nodes to set to blank
List<String> xmlTagToSetBlank = new ArrayList<String>();

	 int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+setNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/

	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }



for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}

holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	 
rawReq=holder1.getXml();

	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/


	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";

def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq2);
	  		sheet.addCell(labelRawRequest);
	 	}
	 	else{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}
	
	 // Label lableResponse = new Label(2,iCountTestCase,response);
	 // sheet.addCell(lableResponse);


	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCountTestCase,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(2,iCountTestCase,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	Label labelRequest = new Label(1,iCountTestCase,rawReq);
	   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(2,iCountTestCase,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 
	  
	  
	  
	  
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounter1;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(3+iDivisionCount))
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;
}
//for loop end for test case
workbook.write();
workbook.close();

log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="Copy of AutomationScript-June16" id="6b84fad8-79b9-477e-9af4-27df546e0731" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

log.info "*************************************************  STARTING CORE AUTOMATION DRIVER *************************************************";
/*************** Clearing TC Properties by running script ***************/
log.info "		>>>>		Removing Properties at Test Case level";
log.info "		>>>>		======================================";
testRunner.runTestStepByName("ClearTCProperties");
/************************************************************************/

int flagForExtraLargeResponse=0;

/******************* Reading and writing excel file *********************/
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}');
def TestDataFile = context.expand( '${#Project#TestDataFile}');
String APIName = context.expand( '${#Project#APIName}');
//String MandatoryFieldTestingFlag=context.expand('${#Project#MandatoryParamTesting}');
//log.info "		>>>>		MandatoryFieldTestingFlag = "+MandatoryFieldTestingFlag;
String MandatoryFieldTestingFlag = "N";
log.info "		>>>>		==============================="
int Length =  TestDataFile.lastIndexOf('\\');
//log.info "    >>>>>>>>>>>>>>>>> length : "+Length;
log.info "		>>>>		TestDataFile : "+TestDataFile;
String ResposeFileLocation = TestDataFile.substring(0,Length);

//Getting Current Time
currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss");
log.info "		>>>>		TIME NOW IS : "+currentTime;
log.info "		>>>>		================================";

//Getting location to create the TestResponseFile
String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls";
log.info "		>>>>		NOTE: Following Result File is getting created : ------ : "+TestResponseFile;
log.info "		>>>>		============================================================================================================";
log.info "		>>>>		============================================================================================================";
log.info "\n";

//Creating Response Excel File
WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
WritableSheet sheet = workbook.createSheet("Response",0);

Label label00 = new Label(0, 0, "TCID"); 
sheet.addCell(label00);

Label label01 = new Label(1, 0, "REQUEST"); 
sheet.addCell(label01);
  
Label label02 = new Label(2, 0, "RESPONSE"); 
sheet.addCell(label02);
  
//Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows();
 PropColCount = TestDataProp1.getColumns();
 ResponseSchemaRowCount = TestDataResponseSchema.getRows();
 ResponseSchemaColCount = TestDataResponseSchema.getColumns();
 //log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
 //log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
 //Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows();
 ResponseColCount = TestDataResponse.getColumns();
 //log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 //log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows();
 ValuesColCount = TestDataValues1.getColumns();
 //log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
//This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 
 def ActualResponseValue;
 
  log.info "		>>>>		No of Parameters in RequestSchema Sheet = "+PropRowCount;
  log.info "		>>>>		No of Parameters in RequestValues Sheet = "+(ValuesColCount-3);
  log.info "******************************************************************************";
  log.info " ";
 if(PropRowCount != ValuesColCount-3)
	{
		alert.showInfoMessage("Mismatch in the count of Properties and Values");
		return;
	}
/*************************************************************************/




/******** Iterating loop for No of Test Cases in Test Data Sheet *********/
 for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
 {
//Variable to store the xPath of nodes to set to blank
List<String> xmlTagToSetBlank = new ArrayList<String>();

	 int flagCount = 3;
	 String testCaseID=TestDataValues1.getCell(0,iCountTestCase).getContents().toString().trim();
	 if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
		{
			//log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
			log.info"		>>>>		TestCase No. : "+testCaseID+" does NOT belong to Setno :"+setNo;
			//iCountTestCase = iCountTestCase-1
			continue;
		}


	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		STARTING TEST CASE : "+testCaseID;
	log.info " ";
	
	/**********************Saving original Request******************************/
	
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  
    /*****************************************************************************/

	//log.info "      >>>>>>>      PropRowCount = "+PropRowCount;
	 log.info " ";
	 log.info "		>>>>		SETTING VALUES IN TEST CASE PROPERTIES";
	 log.info "		>>>>		======================================";
	 //testRunner.runTestStepByName(APIName);
	 for(int iCounter=1;iCounter < PropRowCount;iCounter++)
		{
			
			 //log.info "     >>>>>>>  iCounter = "+iCounter+" | iCountTestCase = "+iCountTestCase;
			 
			 key = TestDataProp1.getCell(0,iCounter).getContents().toString().trim();
			 value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents().toString().trim();

			 log.info "		>>>>		key | value  =  "+key+" | "+value;
			 //log.info"<<<<<<< Property : "+	       TestDataProp1.getCell(0,iCounter).getContents()+" | Value : "+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
			 //testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
			 testRunner.testCase.setPropertyValue(key,value);

				
				//Condition to set xmlPath of node that is null. So that it will be set to blank
				if(value=='BLANK')
				{
					MandatoryFieldTestingFlag="Y";
					def xmlTagToSetBlank1 = key.replace(".","/");
					def xmlTagToSetBlank2 = "//"+xmlTagToSetBlank1;
					xmlTagToSetBlank.add(xmlTagToSetBlank2);
					log.info "				>>>>		xmlTagToRemove : "+xmlTagToSetBlank2;
				}
			
			 
			// log.info "        >>>>>>>>    Value from TC PRop is : "+testRunner.testCase.getPropertyValue(key);

		}

//String subscriberIdValue = testRunner.testCase.testSuite.getPropertyValue('subscriberId');
//log.info "  >> subscriberId prop Value >> "+subscriberIdValue;
//testRunner.testCase.setPropertyValue('subscriberId',subscriberIdValue);

// testRunner.testCase.getTestStepByName(APIName).setPropertyValue('subscriberId', '200300');
		
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 log.info "		>>>>		RUNNING REQ AGAIN BECAUSE MANDATORY FIELD TESTING FLAG IS ON";
	 testRunner.runTestStepByName(APIName);
	 }

	 //def groovyUtilsx = new com.eviware.soapui.support.GroovyUtils( context );
	 String reqName = APIName+"#Request";
	 //testRunner.runTestStepByName(APIName);

	 def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
	 def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.requestContent);
	 //req1 = holder1.getPrettyXml();
	 req1 = holder1.getXml();
	 //log.info "		>>>>		Request after SETTING values is :\\n"+req1;

	//def groovyUtilsG = new com.eviware.soapui.support.GroovyUtils(context);
	//def holder22 = groovyUtilsG.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
	//rawReq=holder22.getXml();
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();


	/************************ Remove empty parent tags **************************/
	 log.info " ";
	 log.info " ";
	 log.info"		>>>>		---------------REMOVING EMPTY NODES--------------------";
for( item2 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item1 in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
for( item in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			//log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+item.nodeName;
			//item.removeXobj();
			for( items in holder1.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>	REMOVING - "+items.nodeName;
			items.removeXobj();
}
}
}
}

	
	 
	
	 log.info"		>>>>		---------------REMOVED EMPTY NODES--------------------";
	 log.info " ";
	 log.info " ";
	 holder1.updateProperty();
	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 context.requestContent = holder1.xml;
	 }



for( item in holder1.getDomNodes( "//*[normalize-space(.) = 'BLANK' and count(*) = 0]" ))
{
			log.info "		>>>>	OUTER-LOOP	>>>>>>>>>>>>	MAKING BLANK - "+item.nodeName;
			holder1.setNodeValue("//"+item.nodeName,"");
			log.info "          >> After setting blank : "+item.nodeName+"   :  "+holder1.getNodeValue(item.nodeName);
}

holder1.updateProperty();

log.info"		>>>>		-------------Null Nodes SET to Blank------------------";
//log.info "		>>>>		ArrayList Cleared";
holder1.updateProperty();
	 //testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(holder1.getPrettyXml());
	 //context.requestContent = holder1.xml;
	 
rawReq=holder1.getXml();

	 if(MandatoryFieldTestingFlag=="Y")
	 {
	 rawReq2=holder1.xml;
	 log.info "		>>>>		Final Request : " +rawReq2;
	 //log.info ">>>>    context.requestContent : " +context.requestContent
	  //testRunner.runTestStepByName(APIName);
	log.info "		>>>>		---------------REPLACING XML REQUEST---------------------";
	testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(rawReq2);
	 }
	/*****************************************************************************/


	
	
	//---------Running the API Request
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";
	log.info "		>>>>		===============RUNNING TEST REQUEST==============";
	testRunner.runTestStepByName(APIName);
	log.info " ";
	log.info " ";
	log.info "***************************************************************************************************************";

def groovyUtilsy = new com.eviware.soapui.support.GroovyUtils(context);


	log.info " ";
	log.info "		>>>>		Final Request :\n"+rawReq;
	log.info " ";
	//log.info "		>>>>		Request After Setting Values :\n"+holder1.getPrettyXml();




	/**************************Restore the original request***********************/
	  log.info " ";
	  log.info "		>>>>		RESTORING ORIGINAL REQUEST";
	  log.info " "+originalReq2;
	  testRunner.getTestCase().getTestStepByName(APIName).getProperty('Request').setValue(originalReq2);
	/****************************************************************************/

	//Getting the Response
	 holder = groovyUtilsy.getXmlHolder("${APIName}#Response");
	 def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
	 log.info " ";
	 log.info "***********************************************************************************************"
	 log.info " ";
	 log.info " ";
	 log.info "----------------------------THIS PART WILL DEAL WITH THE RESPONSE------------------------------";
	 log.info " ";
	 log.info "		>>>>		Response Fetched :\n"+response;
    
	//Writing Request and Response on Excell sheet
	   if(MandatoryFieldTestingFlag=="Y")
	 	{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq2);
	  		sheet.addCell(labelRawRequest);
	 	}
	 	else{
	 		Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
	  		sheet.addCell(labelRawRequest);
	 	}
	
	 // Label lableResponse = new Label(2,iCountTestCase,response);
	 // sheet.addCell(lableResponse);


	//for breaking the response to write in response sheet
	int responseSize = response.length();
	log.info "    >>>>    responseSize : "+responseSize;

	int iDivisionCount;
	if(responseSize>10000)
	{
	flagForExtraLargeResponse = 1;

	double divisionCount = responseSize/10000;
	int divisionOfResponseCount =  Math.round(divisionCount);

	log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


	for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
	{
		log.info "    >>>>    Division loop count : "+iDivisionCount;
		String responseName = "response"+iDivisionCount;
		int iStartLength = 0;
		int iEndLength = 10000*iDivisionCount;
		if(iDivisionCount>1)
		{
			log.info "   >>>>> into iDivisionCount>1 loop ";
			log.info "    >>>> iDivisionCount : "+iDivisionCount;
			iStartLength = (iDivisionCount-1)*10000;
			
		}
		//responseName = response.substring(iStartLength,32767*iDivisionCount);

		
		log.info "    >>>>>    iStartLength : "+iStartLength;
		log.info "    >>>>>    iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
		if(!(iEndLength>=responseSize))
		{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>   IF BLOCK ";
		responseName = response.substring(iStartLength,iEndLength);
		}
		else{
			log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
			log.info "    >>>>>    responseSize : "+responseSize;
		log.info "    >>>>   ELSE BLOCK ";
		responseName = response.substring(iStartLength,responseSize);	
		}
		log.info "   >>>>   responseName : "+responseName;
		log.info "	>>>>		iDivisionCount : "+iDivisionCount;
		log.info "	>>>>		iCountTestCase : "+iCountTestCase;
		Label labelResponse = new Label((iDivisionCount+1),iCountTestCase,responseName);
		sheet.addCell(labelResponse);
	}

	//response = response.substring(0,32768);
	}
else{
	Label lableResponse = new Label(2,iCountTestCase,response);
	sheet.addCell(lableResponse);
}

	if(flagForExtraLargeResponse>0)
	{
		flagCount = flagCount+iDivisionCount;
	}

	Label labelRequest = new Label(1,iCountTestCase,rawReq);
	   sheet.addCell(labelRequest);
	if(flagForExtraLargeResponse==0)
	{
	Label label5 = new Label(2,iCountTestCase,response);
	   sheet.addCell(label5);
	}

	//end of breaking response 
	  
	  
	  
	  
	  
     //log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
	 log.info " ";
	 log.info "		>>>>		-------------------START VALIDATION OF XML RESPONSE--------------------";
	//**************** Assertion for Response Schema & Values ************************//

	//--------Assertion for Response Schema
	//START loop for no of rows in response schema
	//log.info "        >>>>>.   ... ResponseSchemaRowCount : "+ResponseSchemaRowCount;

	if (response.contains("soap:Fault"))
	{
	log.info "unmarshilling ";
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String parameterName =  TestDataResponseSchema.getCell(0,iCounterForResponseSchema).getContents();
		
		if((parameterName.contains('faultcode')) || (parameterName.contains('faultstring')))
		{
		
			String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
			log.info " ";
			log.info " ";
			log.info "-------------------------------------------------------------------------";
			log.info"		  >>>>		xpath : "+xpath2;
			ActualResponseValue=holder.getNodeValue(xpath2);
			log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);
		}
	}
	}
	else
	{
	for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
	{
		String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
		log.info " ";
		log.info " ";
		log.info "-------------------------------------------------------------------------";
		log.info"		  >>>>		xpath : "+xpath2;
		ActualResponseValue=holder.getNodeValue(xpath2);
		log.info("		>>>>		Value for "+xpath2+" is : "+ActualResponseValue);

		log.info "		>>>>		Into Loop for Mandatory param check "+iCounterForResponseSchema; 
		 
		//-------Condition to check mandatory parameters in response
		if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
			{
				log.info "		>>>>		Mandatory Param check condition";
				
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
				Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
				sheet.addCell(labelMandatoryParamMissing);
				flagCount = flagCount+1
				log.info"		>>>>		TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue;
				continue;
				}
			}

		//------Condition to check DataTypes
		if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
		{
		String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
		log.info"		>>>>		DataType = "+ TYPE;

			try
			{
				log.info "		>>>>		ActualResponseValue = "+ActualResponseValue;
				//if(ActualResponseValue.toString().contains(""))
				if(ActualResponseValue.toString().equalsIgnoreCase(""))
				{
					log.info "		>>>>		DataType Validation - No value found for : "+xpath2;
					//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
					//sheet.addCell(labelDataTypeValueMissing);
					//flagCount = flagCount+1;
					continue;
				}
				//log.info"		>>>>		TYPE  : "+TYPE
				if(TYPE.equalsIgnoreCase("Integer"))
				typeError=Integer.valueOf(ActualResponseValue)	
				else if(TYPE.equalsIgnoreCase("String"))
				typeError=String.valueOf(ActualResponseValue)
				else if(TYPE.equalsIgnoreCase("Long"))
				typeError=Long.valueOf(ActualResponseValue)	
				else
				typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
			}

			catch(all)
			{    
				typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

				Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
			     sheet.addCell(label6);
				flagCount = flagCount+1;
			   
			}
			//checking DataType done-------------//
				
	    }
	}
	}
	//END loop for no of rows in response schema------//
	//End Assertion for Response Schema---------------//





	//--------Assertion for Response Values   
	for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
	{

	  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
		{
			String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
			 log.info "		>>>>		param not null is >>"+ResponseFromTestData;
			 log.info "		>>>>		counter1"+iCounter1;

			 String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents();
			 log.info"		>>>>		xpath : "+xpath1;
			 ActualResponseValue=holder.getNodeValue(xpath1);
			 log.info("		>>>>		Value for "+xpath1+" is : "+ActualResponseValue);
			 log.info("		>>>>		AcualResponse datatype"+ActualResponseValue.getClass());
			 log.info("		>>>>		ExcelResponse datatype"+ResponseFromTestData.getClass());


			if(!(ResponseFromTestData.equals(ActualResponseValue)))
			//if(!(ActualResponseValue.contains(ResponseFromTestData)))
			  {
				Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
				sheet.addCell(label2);
				flagCount = flagCount+1;
				log.info"		>>>>		TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue;
			  }
		}
	}

	if(flagCount==(3+iDivisionCount))
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
			 
			normalFormat.setBackground(jxl.format.Colour.GREEN);
			log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}
	else
		{
			//Creating Writable font to be used in the response sheet
			WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
			//creating plain format to write data in excel sheet
			WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
		 
			normalFormat.setBackground(jxl.format.Colour.RED);
			 log.info  "		>>>>		else loop - flagCount "+flagCount;
			Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
			sheet.addCell(label03);
		}



	//Clear TC prop
	// log.info "        >>>>>>>>>>>>.   //Clear TC prop          ";
	//testRunner.runTestStepByName("ClearTCProperties");

	//Creating fresh request
	 //log.info "          >>>>>>>>>>>  //Creating fresh request";
	//testRunner.runTestStepByName("GettingFreshRequest");
		

	log.info " ";
	log.info "**********************************************************************************";
	log.info "**********************************************************************************";
	log.info "		>>>>		END OF TEST CASE : "+testCaseID;
	log.info " ";
	
flagCount=0;
iDivisionCount=0;
}
//for loop end for test case
workbook.write();
workbook.close();

log.info "*************************************************  END OF CORE AUTOMATION DRIVER *************************************************";]]></script></con:config></con:testStep><con:testStep type="groovy" name="DriverJuly9-2" id="d6a73356-8f46-433b-b379-53a78e0eb0cd" disabled="true"><con:settings/><con:config><script>import jxl.*;
import com.eviware.soapui.*;
import java.util.*;

import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder;

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable;
import java.lang.Error;
import java.lang.Exception;

import java.text.ParseException;

import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;

//importing jars for DB connection
import com.eviware.soapui.support.XmlHolder;
import groovy.sql.Sql;

import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.*
import java.util.*
import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

//Set the request name
APIName='createClient';
APIName2='openAccount';

//Run the request
testRunner.runTestStepByName(APIName);

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
//Fetching the request
def holderReq1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
//log.info "		>>>>		holder1 : "+holder1;

req1 = holderReq1.getXml();
log.info "		>>>>		request : \n"+req1;

//Getting the Response
//holderResponse1 = groovyUtils.getXmlHolder("${APIName}#Response");
//log.info "		>>>>		holderResponse1 : "+holderResponse1;
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
log.info "		>>>>		response : \n"+response;

def responseHolder = groovyUtils.getXmlHolder(response);
String bancBoxId = responseHolder["//bancBoxId"];
String clientStatus = responseHolder["//clientStatus"];
String cipStatus = responseHolder["//cipStatus"];

if(!(cipStatus.contains('java')))
{
	log.info "		>>>>		cipStatus = : "+cipStatus;
}

//testing hashmaps

HashMap globalMap;
globalMap = [:];

HashMap map1= [:];
mapNo=1
map1.put('bancBoxId',bancBoxId);
map1.put('clientStatus',clientStatus);
map1.put('cipStatus',cipStatus);
log.info "	mapName :"+map1;
log.info "		map.get : "+map1.get('name');
globalMap.put(mapNo,map1);

ReferringValue = (globalMap.get(mapNo)).get('bancBoxId');

log.info "	Referring Value : "+ReferringValue;
				

//Emptying all Global hashmap
globalMap = [:];


Thread.sleep(6000);

def groovyUtils2 = new com.eviware.soapui.support.GroovyUtils( context ) 
// get XmlHolder for request message def
String req2Name=APIName2+"#Request";
holder2 = groovyUtils2.getXmlHolder(req2Name);
// change password using XPath
holder2["//bancBoxId"] = bancBoxId;
// write updated request back to teststep
holder2.updateProperty()
context.requestContent = holder2.xml


testRunner.runTestStepByName(APIName2);</script></con:config></con:testStep><con:testStep type="groovy" name="GetMessageExchanges" id="c3ab93bf-1587-4d80-8e80-a8e4caf1154e"><con:settings/><con:config><script>import jxl.*;
import com.eviware.soapui.*;
import java.util.*;

import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder;

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable;
import java.lang.Error;
import java.lang.Exception;

import java.text.ParseException;

import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;

//importing jars for DB connection
import com.eviware.soapui.support.XmlHolder;
import groovy.sql.Sql;

import com.eviware.soapui.support.types.StringToStringMap 


import com.eviware.soapui.*
import java.util.*
import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


APIName = 'verifyClient';
testRunner.testCase.setPropertyValue('subscriberId','1001');


def groovyUtils2 = new com.eviware.soapui.support.GroovyUtils( context ) 
// get XmlHolder for request message def
String req2Name=APIName+"#Request";
holder2 = groovyUtils2.getXmlHolder(req2Name);
log.info " "+holder2.getXml();
log.info "    ====    holder2 : "+holder2;


def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
def requestHolder = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent );
def responseHolder = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.responseContent );
log.info requestHolder.getXml();
log.info responseHolder.getXml();

testRunner.runTestStepByName(APIName);
testRunner.testCase.setPropertyValue('subscriberId','200300');
testRunner.runTestStepByName(APIName);




//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context);
//def responseHolder = groovyUtils.getXmlHolder(messageExchange.responseContent);

//messageExchange.getRequestContent().toString();

//def holder = newXmlHoder(messageExchange.responseContentAsXml);

</script></con:config></con:testStep><con:testStep type="request" name="createClient" id="f8100042-6d4e-4e5f-bfee-71f6f5abae2f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createClient</con:operation><con:request name="createClient" id="6107a474-76f6-4db4-8cb0-244bb76e2ccb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:createClient>
         <createClientRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <!--Optional:-->
            
            <!--Optional:-->
            <firstName>JOHN</firstName>
            <!--Optional:-->
            <lastName>SMITH</lastName>
            <!--Optional:-->
            <middleInitial>M</middleInitial>
            <!--Optional:-->
            <ssn>112-22-3333</ssn>
            <!--Optional:-->
            <dob>1975-02-28</dob>
            <!--Optional:-->
            <address>
               <!--Optional:-->
               <line1>222333</line1>
               <!--Optional:-->
               <line2>Peach Place Tree</line2>
               <!--Optional:-->
               <city>Atlanta</city>
               <!--Optional:-->
               <state>GA</state>
               <!--Optional:-->
               <zipcode>30318</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>1234567890</homePhone>
            <!--Optional:-->
            <mobilePhone>1234567890</mobilePhone>
            <!--Optional:-->
            <workPhone>3606997616</workPhone>
            <!--Optional:-->
            
            <!--Optional:-->
            
            <!--Optional:-->
            <email>raghav@bancbox.com</email>
         </createClientRequest>
      </sch:createClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="Simple Contains" name="Contains" id="c29eb79d-9559-4d55-b13c-8ba6d46ee0de"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]" id="a890e39d-011d-43a0-854c-ecab18f57ca1"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:createClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]" id="4871107e-0441-4ce5-af2e-93e178774dc9"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:createClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="schema.bancbox.com/BBX/createClient" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="delay" name="Delay" disabled="true" id="6ca85e0e-01de-4cac-bd9e-e42d2e9a904a"><con:settings/><con:config><delay>5000</delay></con:config></con:testStep><con:testStep type="request" name="getClient" id="fa4efdb0-12bb-486f-9590-85efb1f0f9f1" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getClient</con:operation><con:request name="getClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="93b694de-21b4-4090-844b-a6eef039979c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getClient>
         <getClientRequest>
            <subscriberId>200300</subscriberId>
            <clientId>
               <!--Optional:-->
               
               <!--Optional:-->
               
            <bancBoxId>167357</bancBoxId></clientId>
         </getClientRequest>
      </sch:getClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="8acdf29b-89ea-45bc-8239-ae97cf1c0d13"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createMerchant" id="49e067e6-0aa4-438e-b794-a6181d9b2454" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createMerchant</con:operation><con:request name="createMerchant" id="5cd02fb8-6572-46c8-bb5f-32cb0c1cf402"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createMerchant>
         <createMerchantRequest>
            <subscriberId>200300</subscriberId>
            <firstName>Testingabcd</firstName>
            <lastName>ab</lastName>
            
            <ssn>112-22-1168</ssn>
            <!--Optional:-->
            <dob>1979-04-25</dob>
            <email>raghav@bancbox.com</email><address>
               <address1>add 222334</address1>
               <!--Optional:-->
               
               <city>Atlanta</city>
               <state>GA</state>
               <zipcode>30318</zipcode>
            </address>
            <bankBusinessAccount>
               <routingNumber>051000017</routingNumber>
               <accountNumber>5302551000011110</accountNumber>
               <holderName>MEHAK</holderName>
               <bankAccountType>SAVING</bankAccountType>
            </bankBusinessAccount>
            <merchantDetails>
               <merchantCategoryCode>7399</merchantCategoryCode>
               <maxTransactionAmount>100000</maxTransactionAmount>
               <customerServiceNumber>6787678911</customerServiceNumber>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <softDescriptor>create</softDescriptor>
            </merchantDetails>
            <primaryContact>
               <firstName>mhk</firstName>
               <lastName>verma</lastName>
               <phone>9987654390</phone>
               <emailAddress>mehak@bancbox.com</emailAddress>
            </primaryContact>
            <hasAcceptedCreditCards>false</hasAcceptedCreditCards>
            <visaAnnualSalesVolume>400</visaAnnualSalesVolume>
            <organizationType>INDIVIDUAL_SOLE_PROPRIETORSHIP</organizationType>
            <!--Optional:-->
            
            <!--Optional:-->
            <taxId>123abc4</taxId>
         </createMerchantRequest>
      </sch:createMerchant>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d335a0ea-70bc-4c16-9907-060a20c05f4d"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="verifyClient" id="55579bd3-9488-4503-8ea8-c72c8f092aa5" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>verifyClient</con:operation><con:request name="verifyClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ee1e9a55-3264-48eb-ab35-6486276a345d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://${#Project#Endpoint}/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <sch:verifyClient>
         <verifyClient>
            <subscriberId>${createClient#RawRequest#declare namespace sch='schema.bancbox.com'; //sch:createClient[1]/createClientRequest[1]/subscriberId[1]}</subscriberId>
            <!--Optional:-->
            <clientId>
               <!--Optional:-->
               <bancBoxId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/bancBoxId[1]}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${createClient#Response#declare namespace ns1='schema.bancbox.com'; //ns1:createClientResponse[1]/return[1]/clientId[1]/subscriberReferenceId[1]}</subscriberReferenceId>
            </clientId>
            <!--Optional:-->
            <generateQuestions>false</generateQuestions>
         </verifyClient>
      </sch:verifyClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="5241dffe-27ee-4d71-8a72-b06337c22b90"/><con:assertion type="XPath Match" name="Match content of [status]" id="3cb71df8-655f-4b1e-9d79-5292a0e52b9d"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:verifyClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [status]" id="e1cccb8b-d920-467a-9237-d9106661f71b"><con:configuration><path>declare namespace ns1='schema.bancbox.com';
//ns1:verifyClientResponse[1]/return[1]/status[1]/text()</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/verifyClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="openAccount" id="77eaa50a-4f6f-41bd-a2e6-7811b2530db1" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>openAccount</con:operation><con:request name="openAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="6b17ede3-f065-448e-a8c0-1953d720d702"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:openAccount>
         <openAccountRequest>
            <subscriberId>200300</subscriberId>
            <clientId>
               <!--Optional:-->
               
               <!--Optional:-->
               
            <bancBoxId>167427</bancBoxId></clientId>
            <!--Optional:-->
            
            <!--Optional:-->
            
            <!--Optional:-->
            <title>My Budget</title><accountType>GENERAL</accountType>
            <!--Optional:-->
            <routable>
               <!--Optional:-->
               <credits>YES</credits>
               <!--Optional:-->
               <debits>YES</debits>
            </routable>
            <!--Optional:-->
            
         </openAccountRequest>
      </sch:openAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="396db67c-35f2-470e-a70d-df25624c47b5"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/openAccount"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="properties" name="Properties 1" disabled="true" id="f854884a-45d2-4667-82c6-389ea4d1bb50"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>status</con:name></con:property><con:property><con:name>requestId</con:name></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Driver" id="b9645304-285b-42f3-b6d2-6ae8432def77" disabled="true"><con:settings/><con:config><script>import jxl.*;
import com.eviware.soapui.*;
import java.util.*;

import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder;

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable;
import java.lang.Error;
import java.lang.Exception;

import java.text.ParseException;

import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;

//importing jars for DB connection
import com.eviware.soapui.support.XmlHolder;
import groovy.sql.Sql;

import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.*
import java.util.*
import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

//Set the request name
APIName='getClient';

//Run the request
testRunner.runTestStepByName(APIName);

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
//Fetching the request
def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
//log.info "		>>>>		holder1 : "+holder1;

req1 = holder1.getXml();
log.info "		>>>>		request : \n"+req1;

//Getting the Response
holder = groovyUtils.getXmlHolder("${APIName}#Response");
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
//log.info "		>>>>		response : \n"+response;

def responseHolder = groovyUtils.getXmlHolder(response);
String requestId = responseHolder["//bancBoxId"];
String clientStatus = responseHolder["//clientStatus"];
String cipStatus = responseHolder["//requestId"];

if(!(cipStatus.contains('java')))
{
	log.info "		>>>>		cipStatus = : "+cipStatus;
}


</script></con:config></con:testStep><con:testStep type="groovy" name="DriverJuly9" id="e3074b05-7bf6-429d-bac6-f067d7846dac" disabled="true"><con:settings/><con:config><script>import jxl.*;
import com.eviware.soapui.*;
import java.util.*;

import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder;

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable;
import java.lang.Error;
import java.lang.Exception;

import java.text.ParseException;

import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;

//importing jars for DB connection
import com.eviware.soapui.support.XmlHolder;
import groovy.sql.Sql;

import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.*
import java.util.*
import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

//Set the request name
APIName='createClient';

//Run the request
testRunner.runTestStepByName(APIName);

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
//Fetching the request
def holder1 = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[APIName].testRequest.response.requestContent);
//log.info "		>>>>		holder1 : "+holder1;

req1 = holder1.getXml();
log.info "		>>>>		request : \n"+req1;

//Getting the Response
holder = groovyUtils.getXmlHolder("${APIName}#Response");
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response");
//log.info "		>>>>		response : \n"+response;

def responseHolder = groovyUtils.getXmlHolder(response);
String requestId = responseHolder["//bancBoxId"];
String clientStatus = responseHolder["//clientStatus"];
String cipStatus = responseHolder["//requestId"];

if(!(cipStatus.contains('java')))
{
	log.info "		>>>>		cipStatus = : "+cipStatus;
}

//testing hashmaps

HashMap globalMap;
globalMap = [:];

HashMap map1= [:];
mapNo=1
map1.put('name','Raghav');
map1.put('address','CDG');

log.info "	mapName :"+map1;
//mapName = "['name':'Raghav';'place':'cdg']";
log.info "		map.get : "+map1.get('name');
globalMap.put(mapNo,map1);

ReferringValue = (globalMap.get(1)).get('name');

log.info "	Referring Value : "+ReferringValue;
				

//Emptying all Global hashmap
globalMap = [:];

reqParam1=testRunner.testCase.getTestStepByName('getClient').getProperty('bancBoxId');
log.info "	reqParam1	: "+reqParam1;
testRunner.testCase.getTestStepByName('getClient').setPropertyValue('bancBoxId', '1234');
//testRunner.runTestStepByName('getClient');


def groovyUtils2 = new com.eviware.soapui.support.GroovyUtils( context ) 
// get XmlHolder for request message def
holder2 = groovyUtils2.getXmlHolder( "getClient#Request" )
// change password using XPath
holder2["//bancBoxId"] = requestId;
// write updated request back to teststep
holder2.updateProperty()
context.requestContent = holder2.xml
testRunner.runTestStepByName('getClient');</script></con:config></con:testStep><con:properties><con:property><con:name>subscriberId</con:name><con:value>1001</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f8100042-6d4e-4e5f-bfee-71f6f5abae2f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6b84fad8-79b9-477e-9af4-27df546e0731</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fa4efdb0-12bb-486f-9590-85efb1f0f9f1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>49e067e6-0aa4-438e-b794-a6181d9b2454</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e3074b05-7bf6-429d-bac6-f067d7846dac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b9645304-285b-42f3-b6d2-6ae8432def77</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d6a73356-8f46-433b-b379-53a78e0eb0cd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5d1a9cda-bbd6-4385-9412-14ec179cc795</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55579bd3-9488-4503-8ea8-c72c8f092aa5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>77eaa50a-4f6f-41bd-a2e6-7811b2530db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3ab93bf-1587-4d80-8e80-a8e4caf1154e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ModularScriptTest1" searchProperties="true" id="42903ab7-c2db-462a-81e2-b33689e3eadb"><con:settings/><con:testStep type="groovy" name="TestScript1" id="7cd0dc56-b88b-4925-9e02-64168e13be58"><con:settings/><con:config><script>log.info "    ====    Starting test script to check Modularity. ";

class Planet{
// variables and functions

def static log;

def name;  		//non-static variable
def static shape;	//static variable

public void printName(){		//non-static function

	log.info "   ====  "+name;
}

public static void revolve(){	//static funtion

	log.info "  ====  Planet Revolving";
}

}


//creating objects of the class
Planet.log = log;
Planet p1 = new Planet();
Planet p2 = new Planet();
Planet p3 = new Planet();
p1.name="Earth";
p2.name="Jupiter";
p3.name="Saturn";

//p1.shape=p2.shape=p3.shape="shpere";
Planet.shape="Circle";
log.info "  ====  "+p1.name+"  :  "+p1.shape;
log.info "  ====  "+p2.name+"  :  "+p2.shape;
log.info "  ====  "+p3.name+"  :  "+p3.shape;

p1=p2;
log.info "*************************************************";

log.info "  ====  "+p1.name+"  :  "+p1.shape;
log.info "  ====  "+p2.name+"  :  "+p2.shape;
log.info "  ====  "+p3.name+"  :  "+p3.shape;

p1.printName();  //non-static has to be called with class reference
p1.revolve();</script></con:config></con:testStep><con:testStep type="groovy" name="Phone" id="4d196b74-6dff-4250-8636-a004edfbcc88"><con:settings/><con:config><script>Phone.log=log;

class Phone{

	def static log;
	def callerNo;
	def recNo;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ReferOtherTC" id="a070de0d-e477-4e2f-be06-0d0e3ac611f4"><con:settings/><con:config><script>String APIName="createClientCOPY";

def tCase = testRunner.testCase.testSuite.testCases["COREAPITestCase"]
def tStep = tCase.testSteps[APIName];
tStep.run(testRunner, context);
def request = tStep.getPropertyValue("request");
log.info "    ======= request : "+request;
def holder = tStep.getPropertyValue("response");
log.info "    ======= holder : "+holder;

/*
def project = testRunner.testCase.testSuite.project ;
def tcase = project.testSuites["createClientAPITestSuite"].testCases["COREAPITestCase"] ; 
def tstep = tcase.getTestStepByName("APIName");

//def response_test_suite_1 = tstep.getProperty("response");
def response_holder = tstep.getPropertyValue("response");

// You can also access individual nodes now from the response you imported like below:

def gutils = new com.eviware.soapui.support.GroovyUtils( context );
def holder = gutils.getXmlHolder("$response_test_suite_1");

def a = holder.getNodeValue("your_xml_xpath_here");



/*
def tCase = testRunner.testCase.testSuite.testCases["COREAPITestCase"]
def tStep = tCase.testSteps[APIName];
tStep.run(testRunner, context);


 def inputHolder = APIName+"#Request";
 originalReq = tStep.getXmlHolder(inputHolder, context);

 
def testStep = testRunner.testCase.testSuite.getTestCaseByName("COREAPITestCase").getTestStepByName("createClientCOPY")
def responseXml = new XmlSlurper().parseText(testStep.properties['response'].value)
log.info "    >>>>    ====    responseXml : "+responseXml;



	/**********************Saving original Request******************************/
	/*
	 log.info "		>>>>		THE ORIGINAL REQUEST IS GETTING SAVED NOW";
	//def inputHolder = tStep+"#Request";
	 def inputHolder = APIName+"#Request";
	 def groovyUtilOrg = new com.eviware.soapui.support.GroovyUtils(context);
	 originalReq = groovyUtilOrg.getXmlHolder(inputHolder);

	 originalReq2 = originalReq.getPrettyXml();
	 log.info "		>>>>		ORIGINAL REQUEST: \n"+originalReq2;
	  */
    /*****************************************************************************/</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="JobsTest_1.0" searchProperties="true" id="42d83756-0a20-478b-8a77-3a3809bbc77d"><con:settings/><con:testStep type="properties" name="JobsBaseUrl" id="bbc05d7a-0ff0-40ef-be62-7c2d181881e1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>QA</con:name><con:value>http://cftadmin:CFTis%231@qajs.bancbox.com:8081/</con:value></con:property><con:property><con:name>BETA</con:name><con:value>http://cftadmin:CFTis%231@betajs.cftpay.com:8080/</con:value></con:property><con:property><con:name>REG</con:name><con:value>http://cftadmin:CFTis%231@regressionjs.cftpay.com:8080/</con:value></con:property><con:property><con:name>PERF</con:name><con:value>http://cftadmin:CFTis%231@perfjs.cftpay.com:8080/</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="RunJob-FourOakdOutbound" id="49fd5e80-d254-4a51-a1cc-8c2e81c195a2"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP OUTBOUND JOB. DO NOT INTERRUPT";
String jobEnv=context.expand('${#Project#ENV}');
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
String baseUrl='';
a = testRunner.testCase.getTestStepByName("JobsBaseUrl");

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}

log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobOutbound(baseUrl);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-RealizeDraft" id="9cb27b34-6727-40fd-83df-ab853156dbf0"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP DRAFT REALIZATION JOB. DO NOT INTERRUPT";
String jobEnv=context.expand('${#Project#ENV}');
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
String baseUrl='';
a = testRunner.testCase.getTestStepByName("JobsBaseUrl");

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}

log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobRealizeDraft(baseUrl);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-PushNotification" id="3b46a389-4ad3-48c4-8ca4-4cbb19259437"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP PUSH NOTIFICATION JOB. DO NOT INTERRUPT";
String jobEnv=context.expand('${#Project#ENV}');
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
String baseUrl='';
a = testRunner.testCase.getTestStepByName("JobsBaseUrl");

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}

log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobPushNotification(baseUrl);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-InvestFundOnAvilabilityProcessor" id="1cf6400b-60e3-45b1-becf-839efdc61fba"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP InvestFundOnAvilabilityProcessor JOB. DO NOT INTERRUPT";
String jobEnv=context.expand('${#Project#ENV}');
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
String baseUrl='';
a = testRunner.testCase.getTestStepByName("JobsBaseUrl");

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}

log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobInvestFundOnAvilabilityProcessor(baseUrl);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-InvestJobEmailProcessor" id="70861c29-7171-4063-a3e1-2c763d256b60"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP InvestJobEmailProcessor JOB. DO NOT INTERRUPT";
String jobEnv=context.expand('${#Project#ENV}');
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
String baseUrl='';
a = testRunner.testCase.getTestStepByName("JobsBaseUrl");

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}

log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobInvestJobEmailProcessor(baseUrl);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-InvestJobPushNotificationActivityProcessor" id="5bcdd45a-bbaf-4cf2-924b-8c69b65a2a84"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP InvestJobPushNotificationActivityProcessor JOB. DO NOT INTERRUPT";
String jobEnv=context.expand('${#Project#ENV}');
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
String baseUrl='';
a = testRunner.testCase.getTestStepByName("JobsBaseUrl");

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}

log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobInvestJobPushNotificationActivityProcessor(baseUrl);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-InvestJobWebHookProcessor" id="ec975a14-0e33-42d6-a205-eea6170f4b7d"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP InvestJobWebHookProcessor JOB. DO NOT INTERRUPT";
String jobEnv=context.expand('${#Project#ENV}');
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
String baseUrl='';
a = testRunner.testCase.getTestStepByName("JobsBaseUrl");

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}

log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobInvestJobWebHookProcessor(baseUrl);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-EvergreenOBProcessor" id="a4197dd6-aad1-4b0e-9713-d5cb2026127a"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP EvergreenOBProcessor JOB. DO NOT INTERRUPT";
String jobEnv=context.expand('${#Project#ENV}');
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
String baseUrl='';
a = testRunner.testCase.getTestStepByName("JobsBaseUrl");

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}

log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobEvergreenOBProcessor(baseUrl);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-EvergreenIBProcessor" id="3a5e662a-932a-4155-b992-3ec76b6b9045"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP EvergreenIBProcessor JOB. DO NOT INTERRUPT";
String jobEnv=context.expand('${#Project#ENV}');
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
String baseUrl='';
a = testRunner.testCase.getTestStepByName("JobsBaseUrl");

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}

log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobevergreenIBProcessor(baseUrl);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-WireTransProcessor" id="d034a055-0257-4fe7-936d-8a725ecb30de"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP WireTransProcessor JOB. DO NOT INTERRUPT";
String jobEnv=context.expand('${#Project#ENV}');
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
String baseUrl='';
a = testRunner.testCase.getTestStepByName("JobsBaseUrl");

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}

log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobwireTransProcessor(baseUrl);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-ORCCOutboundProcessor" id="32c24dfd-3083-4b52-9b5f-00a7d2615d20"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP ORCCOutboundProcessor JOB. DO NOT INTERRUPT";
String jobEnv=context.expand('${#Project#ENV}');
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
String baseUrl='';
a = testRunner.testCase.getTestStepByName("JobsBaseUrl");

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}

log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobORCCOutboundProcessor(baseUrl);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-RPPSOutboundProcessor" id="71dc722f-f4b4-41c0-8b8d-78d21b473de1"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP RPPSOutboundProcessor JOB. DO NOT INTERRUPT";
String jobEnv=context.expand('${#Project#ENV}');
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
String baseUrl='';
a = testRunner.testCase.getTestStepByName("JobsBaseUrl");

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}

log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobrppsOutboundProcessor(baseUrl);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>9cb27b34-6727-40fd-83df-ab853156dbf0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b46a389-4ad3-48c4-8ca4-4cbb19259437</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bbc05d7a-0ff0-40ef-be62-7c2d181881e1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FetchTestCase" searchProperties="true" id="13316f32-6312-4761-8fc2-33d7d2300046"><con:settings/><con:testStep type="groovy" name="GetTestCase" id="17f6f5c1-5092-4eeb-8fa4-30ee193ca057"><con:settings/><con:config><script>import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

/*
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def testStep = testRunner.testCase.testSuite.getTestCaseByName("JobsTest").getTestStepByName("RunJob-FourOakdOutbound");
//testRunner.runTestStepByName(testStep);
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepAt(0);

testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep);
testStep.run(testRunner, testStepContext);

*/
/*

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
/*
def testCase = testRunner.testCase;
def testStep = testCase.getTestStepAt(0);
//def testStep = testCase.getTestStepByName("Delay");
//def testStep = testCase.testSteps["Delay"];
testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null);
testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep);
testStep.run(testRunner, testStepContext);

*/




def tCase = testRunner.testCase.testSuite.testCases["JobsTest"]

def tStep = tCase.testSteps["RunJob-FourOakdOutbound"]
def tStep2 = tCase.testSteps["JobsBaseUrl"]
log.info "        ============          "+tStep;
log.info "        ============          "+tStep.toString();

//testRunner.runTestStepByName(tStep);
//tStep.run(testRunner);
tStep.run(testRunner, context);








/*
testProject = SoapUI.getWorkspace().getProjectByName('Core_ScenarioTestProj1');
tSuite = testProject.getTestSuiteByName('createClientAPITestSuite');
log.info "    ====    "+tSuite.toString();
tCase = tSuite.getTestCaseByName('JobsTest');
log.info "    ====    "+tCase.toString();
tStep = tCase.getTestStepByName('RunJob-FourOakdOutbound');
log.info "    ====    "+tStep.toString();
testRunner.runTestStepByName('RunJob-FourOakdOutbound');
//testRunner.runTestStepByName("ClearTCProperties");
*/</script></con:config></con:testStep><con:testStep type="groovy" name="CallTestStepOfOtherTestCase" id="e2b417ab-508a-47c0-8d7a-4df2b99931d5"><con:settings/><con:config><script>import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


def project = testRunner.testCase.testSuite.project

def runner = project.testSuites['createClientAPITestSuite'].testCases['TestCase1'].run( null, true )
runner.waitUntilFinished()
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase1" searchProperties="true" id="3fa6e717-4caa-4a0a-b631-2665f79ead32"><con:settings/><con:testStep type="groovy" name="Script1" id="5afab68e-9524-4e7a-a9fe-9bcd333f33e5"><con:settings/><con:config><script>log.info "Raghav";
log.info "Bancbox";</script></con:config></con:testStep><con:testStep type="request" name="createClient" id="f16f2f12-9534-4840-8d9e-349518f5c3ab"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>createClient</con:operation><con:request name="createClient" id="f3472c48-0fb0-4e9a-98cc-479423d620e7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:createClient>
         <createClientRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <!--Optional:-->
            <referenceId>${#TestCase#referenceId}</referenceId>
            <!--Optional:-->
            <firstName>${#TestCase#firstName}</firstName>
            <!--Optional:-->
            <lastName>${#TestCase#lastName}</lastName>
            <middleInitial>${#TestCase#middleInitial}</middleInitial>
            <!--Optional:-->
            <!--Optional:-->
            <ssn>${#TestCase#ssn}</ssn>
            <!--Optional:-->
            <dob>${#TestCase#dob}</dob>
            <!--Optional:-->
            <address>
               <!--Optional:-->
               <line1>${#TestCase#address.line1}</line1>
               <!--Optional:-->
               <line2>${#TestCase#address.line2}</line2>
               <!--Optional:-->
               <city>${#TestCase#address.city}</city>
               <!--Optional:-->
               <state>${#TestCase#address.state}</state>
               <!--Optional:-->
               <zipcode>${#TestCase#address.zipcode}</zipcode>
            </address>
            <!--Optional:-->
            <homePhone>${#TestCase#homePhone}</homePhone>
            <!--Optional:-->
            <mobilePhone>${#TestCase#mobilePhone}</mobilePhone>
            <!--Optional:-->
            <workPhone>${#TestCase#workPhone}</workPhone>
            <!--Optional:-->
            <email>${#TestCase#email}</email>
            <!--Optional:-->
            <username>${#TestCase#username}</username>
            <!--Optional:-->
            <merchantId>${#TestCase#merchantId}</merchantId>
         </createClientRequest>
      </sch:createClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="schema.bancbox.com/BBX/createClient" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClient" id="70665a11-8074-44fe-b0e2-6f154258ffac"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BBXServiceSoapBinding</con:interface><con:operation>getClient</con:operation><con:request name="getClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="f72066d6-ab5d-46a8-a190-4da21497d1a3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://regression-api.bancbox.com/v3/BBXPort</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="schema.bancbox.com">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>${#Project#global_username}</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">${#Project#global_password}</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body>
      <sch:getClient>
         <getClientRequest>
            <subscriberId>${#TestCase#subscriberId}</subscriberId>
            <clientId>
               <!--Optional:-->
               <bancBoxId>${#TestCase#clientId.bancBoxId}</bancBoxId>
               <!--Optional:-->
               <subscriberReferenceId>${#TestCase#clientId.subscriberReferenceId}</subscriberReferenceId>
            </clientId>
         </getClientRequest>
      </sch:getClient>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="5a3a7095-ae0a-416f-a4a0-b6dff9fb02b9"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="schema.bancbox.com/BBX/getClient"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="JobsTest" searchProperties="true" id="831c3828-3ace-4258-ba91-75d3dba9df82"><con:settings/><con:testStep type="properties" name="JobsBaseUrl" id="99497de5-02a5-4ec1-92ea-2bcf3f446e08"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>QA</con:name><con:value>http://cftadmin:CFTis%231@qajs.bancbox.com:8081/</con:value></con:property><con:property><con:name>BETA</con:name><con:value>http://cftadmin:CFTis%231@betajs.cftpay.com:8080/</con:value></con:property><con:property><con:name>REG</con:name><con:value>http://cftadmin:CFTis%231@regressionjs.cftpay.com:8080/</con:value></con:property><con:property><con:name>PERF</con:name><con:value>http://cftadmin:CFTis%231@perfjs.cftpay.com:8080/</con:value></con:property><con:property><con:name>QA-INVEST</con:name><con:value>http://cftadmin:CFTis%231@qajs.bancboxcrowd.com:8081/</con:value></con:property><con:property><con:name>BETA-INVEST</con:name><con:value>http://cftadmin:CFTis%231@betajs.bancboxcrowd.com:8080/</con:value></con:property><con:property><con:name>REG-INVEST</con:name><con:value>http://cftadmin:CFTis%231@regjs.bancboxcrowd.com:8080/</con:value></con:property><con:property><con:name>PERF-INVEST</con:name><con:value>http://cftadmin:CFTis%231@perfjs.bancboxcrowd.com:8080/</con:value></con:property><con:property><con:name>STG-INVEST</con:name><con:value/></con:property><con:property><con:name>STG</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="RunJob-FourOakdOutbound" id="24a07658-3a16-4016-955e-459c5098259c"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP OUTBOUND JOB. &lt; DO NOT INTERRUPT >";
/*
//String jobEnv=testRunner.testCase.getPropertyValue("ENV");
//String jobEnv = context.expand('${#Project#ENV}');
String baseUrl='';
//a = testRunner.testCase.getTestStepByName("JobsBaseUrl");
a = testRunner.testCase.testSuite;
String jobEnv = a.getPropertyValue('ENV');
*/
a = testRunner.testCase.testSuite;
//a = testRunner.testCase;
String baseUrl='';
String jobEnv=a.getPropertyValue("ENV");

def minTimeOut=a.getPropertyValue('minTimeOut') as int;
def maxTimeOut=a.getPropertyValue('maxTimeOut') as int;
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
log.info '    >>>>    ==== ====  minTimeOut  :  '+minTimeOut+' ms';
log.info '    >>>>    ==== ====  maxTimeOut  :  [ '+maxTimeOut+' x 3 ] sec';

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
else if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
else if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
else if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}
else if(jobEnv.trim()=='STG')
{
	baseUrl = a.getPropertyValue('STG');
}
else{
	log.info "    >>>>    =====   NO VALID JOB ENVIRONMENT FOUND ";
	a.setPropertyValue('Status','FAIL');
}

log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobOutbound(baseUrl,minTimeOut,maxTimeOut);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
a.setPropertyValue('Status','PASS');
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-RealizeDraft" id="1dab9f78-d2c2-4dd3-ac56-071fff4ab02b"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP DRAFT REALIZATION JOB. DO NOT INTERRUPT";
/*
//String jobEnv=testRunner.testCase.getPropertyValue("ENV");
//String jobEnv = context.expand('${#Project#ENV}');
String baseUrl='';
//a = testRunner.testCase.getTestStepByName("JobsBaseUrl");
a = testRunner.testCase.testSuite;
String jobEnv = a.getPropertyValue('ENV');
*/
a = testRunner.testCase.testSuite;
//a = testRunner.testCase;
String baseUrl='';
String jobEnv=a.getPropertyValue("ENV");

def minTimeOut=a.getPropertyValue('minTimeOut') as int;
def maxTimeOut=a.getPropertyValue('maxTimeOut') as int;
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
log.info '    >>>>    ==== ====  minTimeOut  :  '+minTimeOut+' ms';
log.info '    >>>>    ==== ====  maxTimeOut  :  [ '+maxTimeOut+' x 3 ] sec';

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
else if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
else if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
else if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}
else if(jobEnv.trim()=='STG')
{
	baseUrl = a.getPropertyValue('STG');
}
else{
	log.info "    >>>>    =====   NO VALID JOB ENVIRONMENT FOUND ";
	a.setPropertyValue('Status','FAIL');
	
}
a.setPropertyValue('Status','PASS');
log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobRealizeDraft(baseUrl,minTimeOut,maxTimeOut);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-PushNotification" id="f68fc038-c8bb-4a93-bcbd-145703b41e11"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP PUSH NOTIFICATION JOB. DO NOT INTERRUPT";
/*
//String jobEnv=testRunner.testCase.getPropertyValue("ENV");
//String jobEnv = context.expand('${#Project#ENV}');
String baseUrl='';
//a = testRunner.testCase.getTestStepByName("JobsBaseUrl");
a = testRunner.testCase.testSuite;
String jobEnv = a.getPropertyValue('ENV');
*/
a = testRunner.testCase.testSuite;
//a = testRunner.testCase;
String baseUrl='';
String jobEnv=a.getPropertyValue("ENV");

def minTimeOut=a.getPropertyValue('minTimeOut') as int;
def maxTimeOut=a.getPropertyValue('maxTimeOut') as int;
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
log.info '    >>>>    ==== ====  minTimeOut  :  '+minTimeOut+' ms';
log.info '    >>>>    ==== ====  maxTimeOut  :  [ '+maxTimeOut+' x 3 ] sec';

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
else if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
else if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
else if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}
else if(jobEnv.trim()=='STG')
{
	baseUrl = a.getPropertyValue('STG');
}
else{
	log.info "    >>>>    =====   NO VALID JOB ENVIRONMENT FOUND ";
	a.setPropertyValue('Status','FAIL');
}
a.setPropertyValue('Status','PASS');
log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobPushNotification(baseUrl,minTimeOut,maxTimeOut);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-EvergreenOBProcessor" id="75e04c51-91ee-4acf-89fd-b482f99f9148"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP EvergreenOBProcessor JOB. DO NOT INTERRUPT";
/*
//String jobEnv=testRunner.testCase.getPropertyValue("ENV");
//String jobEnv = context.expand('${#Project#ENV}');
String baseUrl='';
//a = testRunner.testCase.getTestStepByName("JobsBaseUrl");
a = testRunner.testCase.testSuite;
String jobEnv = a.getPropertyValue('ENV');
*/
a = testRunner.testCase.testSuite;
//a = testRunner.testCase;
String baseUrl='';
String jobEnv=a.getPropertyValue("ENV");

def minTimeOut=a.getPropertyValue('minTimeOut') as int;
def maxTimeOut=a.getPropertyValue('maxTimeOut') as int;
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
log.info '    >>>>    ==== ====  minTimeOut  :  '+minTimeOut+' ms';
log.info '    >>>>    ==== ====  maxTimeOut  :  [ '+maxTimeOut+' x 3 ] sec';

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
else if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
else if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
else if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}
else if(jobEnv.trim()=='STG')
{
	baseUrl = a.getPropertyValue('STG');
}
else{
	log.info "    >>>>    =====   NO VALID JOB ENVIRONMENT FOUND ";
	a.setPropertyValue('Status','FAIL');
}
a.setPropertyValue('Status','PASS');
log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobEvergreenOBProcessor(baseUrl,minTimeOut,maxTimeOut);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-EvergreenIBProcessor" id="f46818b2-2645-4f73-849d-f89a089f5f08"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP EvergreenIBProcessor JOB. DO NOT INTERRUPT";
/*
//String jobEnv=testRunner.testCase.getPropertyValue("ENV");
//String jobEnv = context.expand('${#Project#ENV}');
String baseUrl='';
//a = testRunner.testCase.getTestStepByName("JobsBaseUrl");
a = testRunner.testCase.testSuite;
String jobEnv = a.getPropertyValue('ENV');
*/
a = testRunner.testCase.testSuite;
//a = testRunner.testCase;
String baseUrl='';
String jobEnv=a.getPropertyValue("ENV");

def minTimeOut=a.getPropertyValue('minTimeOut') as int;
def maxTimeOut=a.getPropertyValue('maxTimeOut') as int;
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
log.info '    >>>>    ==== ====  minTimeOut  :  '+minTimeOut+' ms';
log.info '    >>>>    ==== ====  maxTimeOut  :  [ '+maxTimeOut+' x 3 ] sec';

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
else if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
else if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
else if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}
else if(jobEnv.trim()=='STG')
{
	baseUrl = a.getPropertyValue('STG');
}
else{
	log.info "    >>>>    =====   NO VALID JOB ENVIRONMENT FOUND ";
	a.setPropertyValue('Status','FAIL');
}
a.setPropertyValue('Status','PASS');
log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobevergreenIBProcessor(baseUrl,minTimeOut,maxTimeOut);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-WireTransProcessor" id="35456513-1b25-47fb-a544-19bdb072d3bd"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP WireTransProcessor JOB. DO NOT INTERRUPT";
/*
//String jobEnv=testRunner.testCase.getPropertyValue("ENV");
//String jobEnv = context.expand('${#Project#ENV}');
String baseUrl='';
//a = testRunner.testCase.getTestStepByName("JobsBaseUrl");
a = testRunner.testCase.testSuite;
String jobEnv = a.getPropertyValue('ENV');
*/
a = testRunner.testCase.testSuite;
//a = testRunner.testCase;
String baseUrl='';
String jobEnv=a.getPropertyValue("ENV");

def minTimeOut=a.getPropertyValue('minTimeOut') as int;
def maxTimeOut=a.getPropertyValue('maxTimeOut') as int;
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
log.info '    >>>>    ==== ====  minTimeOut  :  '+minTimeOut+' ms';
log.info '    >>>>    ==== ====  maxTimeOut  :  [ '+maxTimeOut+' x 3 ] sec';

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
else if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
else if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
else if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}
else if(jobEnv.trim()=='STG')
{
	baseUrl = a.getPropertyValue('STG');
}
else{
	log.info "    >>>>    =====   NO VALID JOB ENVIRONMENT FOUND ";
	a.setPropertyValue('Status','FAIL');
}
a.setPropertyValue('Status','PASS');
log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobwireTransProcessor(baseUrl,minTimeOut,maxTimeOut);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-ORCCOutboundProcessor" id="9aa66c3f-0695-47b2-b821-9e5ef8b24f69"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP ORCCOutboundProcessor JOB. DO NOT INTERRUPT";
/*
//String jobEnv=testRunner.testCase.getPropertyValue("ENV");
//String jobEnv = context.expand('${#Project#ENV}');
String baseUrl='';
//a = testRunner.testCase.getTestStepByName("JobsBaseUrl");
a = testRunner.testCase.testSuite;
String jobEnv = a.getPropertyValue('ENV');
*/
a = testRunner.testCase.testSuite;
//a = testRunner.testCase;
String baseUrl='';
String jobEnv=a.getPropertyValue("ENV");

def minTimeOut=a.getPropertyValue('minTimeOut') as int;
def maxTimeOut=a.getPropertyValue('maxTimeOut') as int;
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
log.info '    >>>>    ==== ====  minTimeOut  :  '+minTimeOut+' ms';
log.info '    >>>>    ==== ====  maxTimeOut  :  [ '+maxTimeOut+' x 3 ] sec';

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
else if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
else if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
else if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}
else if(jobEnv.trim()=='STG')
{
	baseUrl = a.getPropertyValue('STG');
}
else{
	log.info "    >>>>    =====   NO VALID JOB ENVIRONMENT FOUND ";
	a.setPropertyValue('Status','FAIL');
}
a.setPropertyValue('Status','PASS');
log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobORCCOutboundProcessor(baseUrl,minTimeOut,maxTimeOut);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-RPPSOutboundProcessor" id="b8b0ea0d-f39c-453e-a729-5574f5cc1a4f"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL
//import rightSignWithSelenium.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP RPPSOutboundProcessor JOB. DO NOT INTERRUPT";
/*
//String jobEnv=testRunner.testCase.getPropertyValue("ENV");
//String jobEnv = context.expand('${#Project#ENV}');
String baseUrl='';
//a = testRunner.testCase.getTestStepByName("JobsBaseUrl");
a = testRunner.testCase.testSuite;
String jobEnv = a.getPropertyValue('ENV');
*/
a = testRunner.testCase.testSuite;
//a = testRunner.testCase;
String baseUrl='';
String jobEnv=a.getPropertyValue("ENV");

def minTimeOut=a.getPropertyValue('minTimeOut') as int;
def maxTimeOut=a.getPropertyValue('maxTimeOut') as int;
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
log.info '    >>>>    ==== ====  minTimeOut  :  '+minTimeOut+' ms';
log.info '    >>>>    ==== ====  maxTimeOut  :  [ '+maxTimeOut+' x 3 ] sec';

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
else if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
else if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
else if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}
else if(jobEnv.trim()=='STG')
{
	baseUrl = a.getPropertyValue('STG');
}
else{
	log.info "    >>>>    =====   NO VALID JOB ENVIRONMENT FOUND ";
	a.setPropertyValue('Status','FAIL');
}
a.setPropertyValue('Status','PASS');
log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobrppsOutboundProcessor(baseUrl,minTimeOut,maxTimeOut);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="RunJob-FundsRealization" id="ee45a9d2-c573-4e0f-b73b-edcf2b939e79"><con:settings/><con:config><script>import jobsTestAutomationFW.RunJobsURL

try{
log.info "    >>>>    ==== ==== RUNNING STEP FUNDS REALIZATION JOB. DO NOT INTERRUPT";
/*
//String jobEnv=testRunner.testCase.getPropertyValue("ENV");
//String jobEnv = context.expand('${#Project#ENV}');
String baseUrl='';
//a = testRunner.testCase.getTestStepByName("JobsBaseUrl");
a = testRunner.testCase.testSuite;
String jobEnv = a.getPropertyValue('ENV');
*/
a = testRunner.testCase.testSuite;
//a = testRunner.testCase;
String baseUrl='';
String jobEnv=a.getPropertyValue("ENV");

def minTimeOut=a.getPropertyValue('minTimeOut') as int;
def maxTimeOut=a.getPropertyValue('maxTimeOut') as int;
log.info '    >>>>    ==== ==== JOB ENV SET IS : '+jobEnv
log.info '    >>>>    ==== ====  minTimeOut  :  '+minTimeOut+' ms';
log.info '    >>>>    ==== ====  maxTimeOut  :  [ '+maxTimeOut+' x 3 ] sec';

if(jobEnv.trim()=='QA')
{
	baseUrl = a.getPropertyValue('QA');
}
else if(jobEnv.trim()=='BETA')
{
	baseUrl = a.getPropertyValue('BETA');
}
else if(jobEnv.trim()=='REG')
{
	baseUrl = a.getPropertyValue('REG');
}
else if(jobEnv.trim()=='PERF')
{
	baseUrl = a.getPropertyValue('PERF');
}
else if(jobEnv.trim()=='STG')
{
	baseUrl = a.getPropertyValue('STG');
}
else{
	log.info "    >>>>    =====   NO VALID JOB ENVIRONMENT FOUND ";
	a.setPropertyValue('Status','FAIL');
	
}
a.setPropertyValue('Status','PASS');
log.info "    >>>>    ==== ==== BaseUrl for JOB is : "+baseUrl;
RunJobsURL.JobfundsRealization(baseUrl,minTimeOut,maxTimeOut);
log.info "    >>>>    ==== ==== Job Completed in ENV:"+jobEnv;
}
catch(all)
{
	log.info (all);
}
</script></con:config></con:testStep><con:setupScript>
</con:setupScript><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>9cb27b34-6727-40fd-83df-ab853156dbf0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3b46a389-4ad3-48c4-8ca4-4cbb19259437</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bbc05d7a-0ff0-40ef-be62-7c2d181881e1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e5783d1-7437-49fb-8a01-298800f78772</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f340a21-158b-49bf-b067-d53b2a4e6b75</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3083f896-5812-45d3-b81b-4564432a7684</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1f2a0873-5595-45a3-9bb1-699a707b961b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>ENV</con:name><con:value>REG</con:value></con:property><con:property><con:name>Status</con:name><con:value>PASS</con:value></con:property><con:property><con:name>QA</con:name><con:value>http://cftadmin:CFTis%231@qajs.bancbox.com:8081/</con:value></con:property><con:property><con:name>BETA</con:name><con:value>http://cftadmin:CFTis%231@betajs.cftpay.com:8080/</con:value></con:property><con:property><con:name>REG</con:name><con:value>http://cftadmin:CFTis%231@regressionjs.cftpay.com:8080/</con:value></con:property><con:property><con:name>PERF</con:name><con:value>http://cftadmin:CFTis%231@perfjs.cftpay.com:8080/</con:value></con:property><con:property><con:name>STG</con:name><con:value/></con:property><con:property><con:name>minTimeOut</con:name><con:value>10000</con:value></con:property><con:property><con:name>maxTimeOut</con:name><con:value>20</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>global_username</con:name><con:value>AUTOMATION</con:value></con:property><con:property><con:name>global_password</con:name><con:value>abcd1234</con:value></con:property><con:property><con:name>SetNo</con:name><con:value>1100</con:value></con:property><con:property><con:name>Endpoint</con:name><con:value>regression-api.bancbox.com</con:value></con:property><con:property><con:name>ScenarioFileLocation</con:name><con:value>C:\Users\Raghav\Documents\SoapUIProjects\COREAutomation\ScenarioTestData\CORE-ScenarioFile1.xls</con:value></con:property><con:property><con:name>UnitTesting</con:name><con:value>N</con:value></con:property><con:property><con:name>ENV</con:name><con:value>REG</con:value></con:property><con:property><con:name>subscriberId</con:name><con:value>200300</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="RequestFilter.afterRequest" name="RequestFilter.afterRequest"><con:script disabled="true">
def content = context.httpResponse.responseContent
content = content.replaceAll( "&lt;!\\[CDATA\\[", "" )
content = content.replaceAll( "]]&gt;", "" )
//log.info( content )
context.httpResponse.responseContent = content</con:script></con:eventHandlers><con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest"><con:script disabled="true">def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( context.requestContent )

// find end nodes that also only consist of whitespace
for( item in holder.getDomNodes( "//*[normalize-space(.) = '' and count(*) = 0]" )){
    item.removeXobj()
}
// update request and write updated request back to teststep
holder.updateProperty()
context.requestContent = holder.xml</con:script></con:eventHandlers><con:sensitiveInformation/></con:soapui-project>